class jump_in
!!!1161520.cpp!!!	generate(in particles : particle_manager, in regions : geometry_manager, inout rgnr : random_distribution) : change_set
std::unique_ptr< particle::change_set > resultset( new particle::change_set( this->key() ) );
auto const& ens = particles.get_ensemble();
particle::change_atom atom;
atom.key = this->key().key();
const std::size_t spc_count( ens.specie_count( atom.key ) );
// Select a particle at random: We can do this because we are selecting from
// anywhere.
switch( spc_count )
{
case 0:
{
  resultset->set_fail(); // No particles of this specie
  return resultset;
}
break;
case 1:
{
  atom.index = ens.nth_specie_index( atom.key, 0 );
}
break;
default:
{
  atom.index = ens.nth_specie_index( atom.key, rgnr.randint( 0, spc_count - 1 ) );
}
break;
}
// Get old position
atom.old_position = ens.position( atom.index );
// New random position within specific region
atom.new_position = regions.get_region( this->region_index_ ).new_position( rgnr, particles.get_specie( atom.key ).radius() );
// No need to check for valid position because new
// position should always give a valid position.
resultset->add_atom( atom );
return resultset;

!!!1161520.python!!!	generate(in particles : particle_manager, in regions : geometry_manager, inout rgnr : random_distribution) : change_set
self.begin_trial()
ens = sys.get_ensemble()
genr = sys.get_random()
import change_set
resultset = change_set.change_set( self )
result = change_set.change_atom()
resultset.add_atom( result )
result.key = self.specie_key()
if sys.get_specie( result.key ).count() == 0:
  resultset.fail = True # No particles of this specie
  return resultset
elif sys.get_specie( result.key ).count() == 1:
  result.index = ens.nth_specie_index( result.key, 0 )
else:
  result.index = ens.nth_specie_index( result.key, genr.randint( 0, sys.get_specie( result.key ).count() - 1) )
result.old_position = ens.position ( result.index )
sys.get_cell_region().new_position( result.new_position, result.key, genr )
if not sys.get_cell_region().is_valid_position( result.new_position, result.key ):
  resultset.fail = True # not a valid position
return resultset

!!!1208112.cpp!!!	add_definition(inout meta : choice_meta) : void
std::unique_ptr< trial::choice_definition > defn( new trial::choice_definition( "jump-in", &trial::chooser< jump_in >::make_chooser ) );

{
  std::string help = "[name, required] The name of one of the sub-regions defined in the simulation as target of move. It is an error to use the name of the whole simulation region.";
  defn->add_definition( core::strngs::fsregn(), help );
}
UTILITY_CHECK( not meta.has_trial_type( defn->label() ), "This type has already been added to this meta object." );
meta.add_trial_type( defn );
!!!1207984.cpp!!!	make_choice(in ispec : size_t, in gman : geometry_manager, in params : string) : jump_in
// needed information
// ispec : from ispec arg
// region_name : from param arg
std::string region_name {};
const std::string region_name_label { core::strngs::fsregn() }; 

// --------------------
// region label (required)
// check for required parameters.
UTILITY_INPUT( params.count( region_name_label ) == 1, "Jump-in trial requires \"" + region_name_label + "\" parameter.", core::strngs::fstry() );
UTILITY_INPUT( not params.at( region_name_label ).empty(), "Jump-in trial \"" + region_name_label + "\" parameter requires a value.", core::strngs::fstry() );
region_name = core::input_base_reader::dequote( params.at( region_name_label ) );
boost::algorithm::trim( region_name );
const std::size_t region_index = gman.region_key( region_name );
UTILITY_INPUT( region_index != gman.region_count(), "Jump-in trial \"" + region_name_label + "\" parameter value (" + region_name + ") is not a known region label.", core::strngs::fstry() );
UTILITY_INPUT( region_index != 0, "Jump-in trial \"" + region_name_label + "\" parameter value (" + region_name + ") should not be the entire system region.", core::strngs::fstry() );

// build choice object.
std::unique_ptr< jump_in > current( new jump_in( ispec, region_index ) );
return current;




