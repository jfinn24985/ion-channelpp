class channel_system
!!!516529.cpp!!!	channel_system()
: simulator()
, region_names_{ "ZLIM", "FILT", "CHAN", "BULK" }
, volumes_()
, cell_hlength_()
, cell_radius_()
, membrane_arc_radius_()
, pore_hlength_()
, pore_radius_()
, protein_radius_()
, structural_hlength_()
, vestibule_arc_radius_()
, epsw_( 80.0 )
, epspr_( 10.0 )
, use_boda_bounds_( false )
{}
!!!243120.cpp!!!	build_reader(inout decoder : input_delegater) : void
{
   // Add input decoder class to handle the base application options
   boost::shared_ptr< core::input_base_meta > delegate( new ion_channel::cell_simulator_meta( *this ) );
   decoder.add_input_delegate( delegate );
}
{
   // Add input decoder class to handle the specie definition options
   boost::shared_ptr< core::input_base_meta > delegate( new particle::specie_meta());
   decoder.add_input_delegate( delegate );
}
{
   // Add input decoder class to handle the energy evaluator options.  This
   // handles instantiation of the requested evaluator.
   std::unique_ptr< evaluator::evaluator_meta > tmp_( new evaluator::evaluator_meta );
   // Add the evaluator types that we want this application to handle
   tmp_->type_to_object_[ evaluator::localizer::type_label_() ] = &evaluator::localizer::make_evaluator;
   tmp_->type_to_object_[ evaluator::coulomb::type_label_() ] = &evaluator::coulomb::make_evaluator;
   tmp_->type_to_object_[ evaluator::induced_charge::type_label_() ] = &evaluator::induced_charge::make_evaluator;
   boost::shared_ptr< core::input_base_meta > delegate( tmp_.release() );
   decoder.add_input_delegate( delegate );
}
{
   // Add input decoder class for the generic observer types. This handles the
   // instantiation of the requested observers
   std::unique_ptr< observer::sampler_meta > tmp_( new observer::sampler_meta );
   tmp_->type_to_object_[ observer::density_zaxis::type_label_() ]= &observer::density_zaxis::make_sampler;
   tmp_->type_to_object_[ observer::metropolis_sampler::type_label_() ]= &observer::metropolis_sampler::make_sampler;
   tmp_->type_to_object_[ observer::rdf_sampler::type_label_() ]= &observer::rdf_sampler::make_sampler;
   tmp_->type_to_object_[ observer::specie_count::type_label_() ]= &observer::specie_count::make_sampler;
   // PBC specific samplers
   //tmp_->type_to_object_[ ion_channel::widom::type_label_() ]= &ion_channel::widom::make_sampler;

   boost::shared_ptr< core::input_base_meta > delegate( tmp_.release() );
   decoder.add_input_delegate( delegate );
}
// Choices
{
   std::unique_ptr< trial::choice_meta > tmp_( new trial::choice_meta );
   tmp_->type_to_object_[ "move" ]= &trial::chooser< trial::move_choice >::make_chooser;
   tmp_->type_to_object_[ "gc" ]= &trial::chooser_by_simulator< ion_channel::gc_choice_cell, ion_channel::channel_system >::make_chooser;
   tmp_->type_to_object_[ "jump" ]= &trial::chooser_by_simulator< ion_channel::jump_choice_cell, ion_channel::channel_system >::make_chooser;
   boost::shared_ptr< core::input_base_meta > delegate( tmp_.release() );
   decoder.add_input_delegate( delegate );

}
!!!242736.cpp!!!	do_generate_simulation(inout os : ostream) : grid_generator
const double sumconc = this->ionic_strength();

// Calculate average solute specie raduis
//
// NOTE: if there are no solute species then ri.mean() will be well-defined and
// have value 0.0
utility::estimater ri;
for (auto const& spc : this->get_species() )
{
   if ( spc.is_solute() )
   {
      ri.append( spc.radius () );
   }
}
// Compute simulation geometry parameters or the target number of particles.
if ( this->target_count() != 0 )
{
   // Non-zero particle number means calculate the volume based on this number
   // and the target ionic strength.
   //
   // Total volume
   const double volume = this->target_count() * core::constants::to_SI() / sumconc;
   // subtract inner cylinder and vestibules
   double bulk_volume = volume - (2.0 * core::constants::pi()
                                  * std::pow( this->pore_radius() - ri.mean(), 2 )
                                  * this->pore_hlength())
                        // pore volume
                        - volume_of_rotation( this->pore_radius()
                              + this->vestibule_arc_radius()
                              , this->vestibule_arc_radius() + ri.mean() )
                        ; // vestibule volume
   UTILITY_INPUT(bulk_volume > 0, "Target particle number too small for the given pore dimensions and salt concentrations.", core::strngs::simulator_label() );

   // For simulation with a channel we want sim box to be as long as diameter
   // (ie. zl4 - zl2 = rl5).  We subtract the channel volume when calculating
   // cell radius and length from the total volume.  We increase the radius and
   // length by the average solute specie radius because we substract the
   // specie radius when calculating the volume for each specie
   double cell_radius = std::cbrt( bulk_volume / (core::constants::pi() * 2.0) );

   this->set_cell_radius( cell_radius + ri.mean() );
   this->set_cell_hlength( this->pore_hlength() + this->vestibule_arc_radius()
                           + cell_radius + (2 * ri.mean()) );
   UTILITY_INPUT( (this->cell_radius() > this->protein_radius()) and (this->cell_hlength() > this->pore_hlength() + this->vestibule_arc_radius())
             , "Target particle number too small for the given protein dimensions and salt concentrations."
             , core::strngs::simulator_label() );

}
else
{
   // Calculate the number of particles from the volume components : pore
   // volume, vestibule volume and bulk volume
   double volume = (2.0 * core::constants::pi()
                    * std::pow( this->pore_radius() - ri.mean(), 2 )
                    * this->pore_hlength())
                   // pore volume
                   + volume_of_rotation( this->pore_radius()
                                         + this->vestibule_arc_radius()
                                         , this->vestibule_arc_radius() + ri.mean() )
                   // vestibule volume
                   + (2.0 * core::constants::pi()
                      * std::pow( this->cell_radius() - ri.mean(), 2 )
                      * (this->cell_hlength()
                         - (this->pore_hlength() + this->vestibule_arc_radius()
                            + (2 * ri.mean()))))
                   ; // bulk volume


   this->set_target_count( volume * sumconc / core::constants::to_SI() );

}

this->volumes_.resize( this->specie_count() );
// Definition of accessible volume for each specie 
for (size_t ispec = 0; ispec != this->specie_count(); ++ispec)
{
   particle::specie const& spec( this->get_specie( ispec ) );
   const double sphere_radius( spec.radius() );
   // Total accessible volume of a specie. Three parts in the following sum are:
   //   1. Volume within cell but outside membrane.
   //   2. Volume in cylindrical part of pore.
   //   3. Volume in vestibule of pore.
   this->volumes_[ispec] = std::pow( this->cell_radius() - sphere_radius , 2 ) * core::constants::pi()
                     * (2 * (this->cell_hlength() - (2 * sphere_radius) - (this->pore_hlength() + this->vestibule_arc_radius())))
                     // bulk volume
                     + std::pow( this->pore_radius() - sphere_radius, 2 ) * core::constants::pi() * (2*this->pore_hlength())
                     // pore volume
                     + volume_of_rotation(this->pore_radius() + this->vestibule_arc_radius(), this->vestibule_arc_radius() + sphere_radius)
                     ; // vestibule volume
}

// Generate initial ensemble on a grid
return std::unique_ptr< trial::grid_generator >{ new ion_channel::cell_grid( this->pore_hlength()  + this->vestibule_arc_radius()
         , this->cell_hlength() - (this->pore_hlength()  + this->vestibule_arc_radius())
         , this->cell_radius(), this->target_count(), this->get_random() ) };
!!!242736.python!!!	do_generate_simulation(inout os : ostream) : grid_generator
from constants import constants
## Generate a list of trial types
self.update_choices()
sumconc = self.ionic_strength()
# Use a PBC system.
from periodic_system import periodic_system
self.cell_region_ = periodic_system(self.target_particles_ * constants.to_SI() / sumconc)
# Generate initial ensemble on a grid
gridder = self.cell_region_.make_grid_generator( self.target_particles_, self.get_random() ) 
self.ensemble_.generate_ensemble( gridder, self.target_particles_, self.get_random() )
pass
!!!134704.cpp!!!	do_description(inout os : ostream) : void
this->simulator::do_description( os );
os << "[simulator] cylindrical cell with membrane\n";
const double allvolume{ 2 * this->cell_hlength_ * core::constants::pi() * std::pow( this->cell_radius_, 2 ) };
os << "          volume : " << allvolume << "\n";
os << "     half length : " << this->cell_hlength_ << "\n";
os << "     cell radius : " << this->cell_radius_ << "\n";
os << "  membrane width : " << (2*(this->pore_hlength_ + this->vestibule_arc_radius_)) << "\n";
os << "  pore cyl. len. : " << (2*this->pore_hlength_) << "\n";
os << "     pore radius : " << this->pore_radius_ << "\n";
os << "  pore entry arc : " << this->vestibule_arc_radius_ << "\n";
os << "    permittivity : " << this->permittivity() << "\n";
!!!134704.python!!!	do_description(inout os : ostream) : void
from constants import constants
constants.description( os )
print >>os, "[simulation]"
print >>os, "        volume :", self.cell_region_.volume(-1), "Anstrom{3}"
print >>os, "  permittivity :", self.cell_region_.permittivity()
print >>os, " beta (1/k_BT) :", (1.0/(constants.boltzmann_constant()*self.temperature_kelvin_)), " J{-1}"
print >>os, "  temperature :", self.temperature_kelvin_, " K"
print >>os, " specie count :", self.specie_count()
print >>os, " - loop sizes"
print >>os, "       thermal :", self.equilibration_interval_
print >>os, "    production :", self.production_interval_
print >>os, "         inner :", self.inner_loop_size_
print >>os, " current index :", self.outer_loop_index_
print >>os, " - other parameters"
print >>os, " starting particle count :", self.target_number_of_particles()
print >>os, "          ionic strength :", self.ionic_strength()
print >>os, "             trial rates :", self.rates_
print >>os, "              move delta :", self.delta
for spc in self.species_:
  spc.description( os )
print >>os, "[choices] trial types and rates"
print >>os, " %6s %4s %7s" % ( "type", "spc.", "rate(%)" )
for choice in self.choices_:
  print >>os, " %6s %4s %7.2f" % ( choice.label(), self.species_[choice.specie_key()].label(), choice.probability()*100.0 )
for observer in self.observers_:
  observer.description( os )
for potl in self.evaluators_:
  potl.description( os )
self.ensemble_.description( os )

!!!577584.cpp!!!	do_license(inout os : ostream) : void
os << core::strngs::horizontal_bar () << "\n";
os << "  Charge-Space Competition Monte Carlo Simulator\n\n";
os << "  Simulation program for computing properties of\n";
os << "  ions in model ion channel\n";
!!!519857.cpp!!!	do_write_document(inout wr : input_document, in ix : size_t) : void
wr[ix].add_entry( core::strngs::fsgzl1(), this->pore_hlength() );
wr[ix].add_entry( core::strngs::fsgzl4(), this->cell_hlength() );
wr[ix].add_entry( core::strngs::fsgrl1(), this->pore_radius() );
wr[ix].add_entry( core::strngs::fsgrl4(), this->protein_radius() );
wr[ix].add_entry( core::strngs::fsgrl5(), this->cell_radius() );
wr[ix].add_entry( core::strngs::fsgrlv(), this->vestibule_arc_radius() );
wr[ix].add_entry( core::strngs::fsgrlc(), this->membrane_arc_radius() );
wr[ix].add_entry( core::strngs::fsgzlm(), this->structural_hlength() );
wr[ix].add_entry( core::strngs::fsepsw(), this->permittivity() );
wr[ix].add_entry( core::strngs::fsepsp(), this->protein_permittivity() );
wr[ix].add_entry( core::strngs::fsnsrt(), this->use_boda_bounds() );
std::string names;
for (auto s : this->region_names_)
{
   names += s + " ";
}
names.pop_back();
wr[ix].add_entry( core::strngs::fsregn(), names);

!!!255536.cpp!!!	volume_of_rotation(in axial_disp : double, in radial_disp : double, in arc_radius : double, in z_0 : double, in z_1 : double) : double
UTILITY_REQUIRE(arc_radius < radial_disp, "The arc radius must be smaller than the radial offset.");
UTILITY_REQUIRE(not utility::feq(z_0,z_1), "Z0 can not equal Z1.");
UTILITY_REQUIRE(z_0 < z_1, "Z0 must be less than Z1.");
const double z1bar_ (z_1 - axial_disp);
const double z0bar_ (z_0 - axial_disp);
UTILITY_REQUIRE(z0bar_ >= axial_disp - arc_radius, "Z0 must be within one arc_radius of axial_disp.");
UTILITY_REQUIRE(z1bar_ <= axial_disp + arc_radius, "Z0 must be within one arc_radius of axial_disp.");

const double arc_r2 (std::pow(arc_radius,2));
if (utility::feq(z0bar_, 0.0))
{
   // Handle case where x0 = xc --> z0bar_ = 0
   return core::constants::pi()
          * (
             (std::pow(radial_disp,2) + arc_r2) * (z_1 - z_0)
             - std::pow(z1bar_,3)/3.0
             - radial_disp * (z1bar_ * std::sqrt(arc_r2 - std::pow(z1bar_,2))
                              + arc_r2 * asin(z1bar_/arc_radius))
          );
}
else if (utility::feq(z1bar_, arc_radius))
{
   // handle case where x1 = xc + r --> z1bar_ = r)
   return core::constants::pi()
          * (
             (std::pow(radial_disp,2) + arc_r2) * (z_1 - z_0)
             + (std::pow(z0bar_,3) - std::pow(z1bar_,3))/3.0
             - radial_disp * (arc_r2 * core::constants::pi() / 4.0)
             + radial_disp * (z0bar_ * std::sqrt(arc_r2 - std::pow(z0bar_,2))
                              + arc_r2 * std::asin(z0bar_/arc_radius))
          );
}
else
{
   return core::constants::pi()
          * (
             (std::pow(radial_disp,2) + arc_r2) * (z_1 - z_0)
             + (std::pow(z0bar_,3) - std::pow(z1bar_,3))/3.0
             - radial_disp * (z1bar_ * std::sqrt(arc_r2 - std::pow(z1bar_,2))
                              + arc_r2 * std::asin(z1bar_/arc_radius))
             + radial_disp * (z0bar_ * sqrt(arc_r2 - std::pow(z0bar_,2))
                              + arc_r2 * std::asin(z0bar_/arc_radius))
          );
}

!!!517425.cpp!!!	do_compute_distances(in position : coordinate, in coords : coordinate_set, inout rij : simulator::array_type, in endindex : size_t, in startindex : size_t) : void
const particle::coordinate newpos(position);
for (std::size_t j = startindex; j != endindex; ++j)
{
   // --------------
   // Calculate r_ij
   const double dx = newpos.x - coords.x( j );
   const double dy = newpos.y - coords.y( j );
   const double dz = newpos.z - coords.z( j );
   rij[j] = std::sqrt(dx*dx + dy*dy + dz*dz);
}
!!!517169.cpp!!!	is_valid_position(inout coord : coordinate, in ispec : size_t) : bool
// get sphere radius
const double radius{ this->get_specie( ispec ).radius() };
// Absolute Z position
const double drznew{ std::abs(coord.z) };
// Radial position
const double r2inew{ std::sqrt(coord.x * coord.x + coord.y * coord.y) };
// pore extreme in radial direction
const double rl2{ this->pore_radius_ + this->vestibule_arc_radius_ };

// Outside of membrane, check if outside extreme of bulk in r and z?
if (drznew >= (this->pore_hlength_ + this->vestibule_arc_radius_ + radius))
{
  return not (r2inew > (this->cell_radius_  - radius)
         or drznew > (this->cell_hlength_ - radius));
}

// (else inside membrane and) Within channel cylinder inner-radius?
if (r2inew <= (this->pore_radius_ - radius))
{
  return true;
}

// Inside channel (and outside inner cylinder radius) OR Outside maximum
// vestibule radius means overlap
if (drznew < this->pore_hlength_ or r2inew > rl2)
{
  return false;
}

// Check (sqr) distance from vestibule arc centerpoint.
const double r2minimum{ std::pow( this->vestibule_arc_radius_ + radius, 2 ) };
const double r2actual{ std::pow( rl2 - r2inew, 2 )
                 + std::pow( drznew - this->pore_hlength_, 2 ) };
return (r2actual >= r2minimum);
!!!255152.cpp!!!	region_geometry(in subregion : size_t, in ispec : size_t) : cylinder
auto const& spec = this->get_specie( ispec );
const double sphere_radius{ spec.radius() };

double hlength{};
double radius{};

switch( subregion )
{
case IBULK: // all of sim
{
   radius = this->cell_radius_ - sphere_radius;
   hlength = this->cell_hlength_ - sphere_radius;
}
break;

case ICHAN:
{
   if (this->use_boda_bounds_)
   {
      // Total channel insertion
      hlength = this->pore_hlength_ + this->vestibule_arc_radius_;
   }
   else
   {
      // Total channel insertion region (any part of particle in channel)
      hlength = this->pore_hlength_ + this->vestibule_arc_radius_ + sphere_radius;
   }
   radius = this->pore_radius_ + this->vestibule_arc_radius_;

}
break;

case IFILT:
{
   if ( this->use_boda_bounds_ )
   {
      // Centre of particle in filter
      hlength = this->pore_hlength_;
   }
   else
   {
      // Any of particle in filter
      hlength = this->pore_hlength_ + sphere_radius;
   }
   radius = this->pore_radius_ - sphere_radius;
}
break;

case IZLIM:
{
   if ( this->use_boda_bounds_ and not ( spec.is_mobile() or spec.is_channel_only() ) )
   {
      // Centre of particle in zlimit
      hlength = this->structural_hlength_;
   }
   else
   {
      // All of particle inside zlimit
      hlength = this->structural_hlength_ - sphere_radius;
   }
   radius = this->pore_radius_ - sphere_radius;
}
break;

default:
{
   const bool invalid_region_index{ false };
   UTILITY_REQUIRE( invalid_region_index, "Region index out of range." );
}
break;
}

return cylinder( radius, hlength );

