format 75
"environment" // geometry::environment
  revision 18
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  stereotype "module"
  classview 355247 "particles classes"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 288431 // python modules
    classdiagram 431919 "Regions"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 705327 "CubeRegion"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " A description of the basic simulation cell."
      classrelation 872623 // <generalisation>
	relation 843439 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 872623 // <generalisation>
	  b parent class_ref 526511 // Region
      end

      attribute 871983 "dimensions"
	private explicit_type "double"
	multiplicity "4"
	init_value "numpy.zeros( (4,), dtype=numpy.float64 )"
	stereotype "array"
	cpp_decl ""
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The xyz(r) cell dimensions"
      end

      attribute 872111 "periodic"
	private explicit_type "bool"
	multiplicity "4"
	init_value "numpy.empty( 4, dtype=numpy.bool )"
	stereotype "array"
	cpp_decl ""
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Periodicity in xyz(r)"
      end

      operation 1308335 "generate_position"
	const public explicit_return_type ""
	nparams 2
	  param in name "self" explicit_type ""
	  param inout name "a_gen" explicit_type "mersenne_twister_19937"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment "  Generate a new position anywhere in the region.  Then return either
  the new point if it is in a valid position with respect to the region or None.
  The returned particle will only have the x,y,z,r coordinates set.
"
      end

      operation 1234991 "hypot_sq"
	public explicit_return_type "double"
	nparams 3
	  param in name "self" explicit_type ""
	  param in name "p0" explicit_type "double"
	  param in name "p1" explicit_type "double"
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}:
${docstring}${body}
"
	
	comment " Returns the square of the distance between p0 and p1 the accounts
 for the system's periodicity."
      end

      operation 1308463 "in_region"
	const cpp_virtual public explicit_return_type "bool"
	nparams 2
	  param in name "self" explicit_type ""
	  param in name "apt" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment " Test if the particle is in this region.  In this type of region a
 particle that is in the region is also in a valid position.
"
      end

      operation 1235503 "__init__"
	public explicit_return_type ""
	nparams 4
	  param inout name "self" explicit_type ""
	  param in name "xdim" explicit_type ""
	  param in name "ydim" explicit_type ""
	  param in name "zdim" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}${)}:
${docstring}Region.__init__(${p0}, ${p1}*${p2}*${p3})
${body}
"
	
      end

      operation 1235119 "valid"
	public explicit_return_type "double"
	nparams 2
	  param in name "self" explicit_type ""
	  param in name "p0" explicit_type "double"
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment " Check p0 is in the cell adjusting if necessary. Return p0 or None"
      end
    end

    class 690991 "CylinderRegion"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 794671 // <generalisation>
	relation 779439 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 794671 // <generalisation>
	  b parent class_ref 526511 // Region
      end

      attribute 675503 "radius"
	private explicit_type "double"
	init_value "a_radius"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Maximum radius for cylindrical regions."
      end

      attribute 675375 "half_length"
	private explicit_type "double"
	init_value "a_high"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Most positive z coordinate for cylinders centred at zero"
      end

      operation 1274415 "hypot_sq"
	public explicit_return_type "double"
	nparams 3
	  param in name "self" explicit_type ""
	  param in name "p0" explicit_type "double"
	  param in name "p1" explicit_type "double"
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}:
${docstring}${body}
"
	
	comment " Returns the square of the distance between p0 and p1 the accounts
 for the system's periodicity."
      end

      operation 987055 "generate_position"
	const public explicit_return_type ""
	nparams 1
	  param inout name "a_gen" explicit_type "mersenne_twister_19937"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  Generate a new position anywhere in the region.  Then return either
  the new point if it is in a valid position with respect to the region or None.
  The returned particle will only have the x,y,z,r coordinates set.
"
      end

      operation 722095 "in_region"
	const cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "apt" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}return ${p0}.r <= self.radius and abs (${p0}.z) <= self.half_length

"
	
	comment " Test if the particle is in this region.  In this type of region a
 particle that is in the region is also in a valid position.
"
      end

      operation 1203247 "__init__"
	public explicit_return_type ""
	nparams 3
	  param in name "a_idx" explicit_type "size_t"
	  param in name "a_radius" explicit_type "double"
	  param in name "a_high" explicit_type "double"
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}:
${docstring}Region.__init__(self, ${p0})
${body}
"
	
      end
    end

    class 526511 "Region"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " A region defines a sub-section of the simulation cell.  It is
 associated with sets of particles (View objects). Region objects
 are specie specific with dimensions adjusted
 as necessary for their particular specie.

 The relationship between in_region and valid_position is:

 * valid checks if the particle is within the solvent phase
 within the bounding volume of the region.

 * in_region checks if the particle is within the bounding volume
 of the region.

 This implies the following logic

 * A particle in a self.valid_position is also self.in_region.

 * A particle not self.in_region is also not in a self.valid_position.  

 * A particle in a other.valid_position and self.in_region 
 is also in a self.valid_position.

 As the valid_position check may be significantly more costly than
 in_region the third condition can save computation if you know the 
 particle is in a valid_position in one region then you need only use in_region
 for overlapping regions.
"
      attribute 954799 "category"
	private explicit_type "int"
	init_value "0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "An value used to identify geometries to the same spaces"
      end

      attribute 675631 "volume"
	private explicit_type "double"
	init_value "avolume"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The volume described by the parameters used in new_position.
 This denotes the total volume of trial ion positions and not the
 volume of valid positions.  It is what should be used in the
 pre-exponential component of the Metropolis factor when
 new_position is used."
      end

      operation 888879 "__init__"
	public explicit_return_type ""
	nparams 2
	  param in name "self" explicit_type ""
	  param in name "avolume" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
      end

      operation 1274287 "in_region"
	public explicit_return_type "bool"
	nparams 2
	  param in name "self" explicit_type ""
	  param in name "apos" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment " Check if the position is within the boundaries of the region. This is
 not necessarily a 'valid' position but whether the particle is in the 
 space that also defines the region's volume"
      end

      operation 1274159 "generate_position"
	public explicit_return_type ""
	nparams 2
	  param in name "self" explicit_type ""
	  param in name "rgen" explicit_type ""
	
	
	
	
	
	comment " Generate a new position within the region's boundaries"
      end

      operation 985519 "valid"
	const cpp_virtual public explicit_return_type "bool"
	nparams 2
	  param in name "self" explicit_type ""
	  param in name "npos" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}return ${p0}.in_region (${p1})
"
	
	comment " Test if the particle is in a valid position.  The default test is a
 particle that is in the region is also in a valid position.
"
      end
    end

    class 649007 "SplitRegion"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "  Region containing two disjoint cylindrical regions symmetrically
  situated either side of the centre-point.  half_gap > 0 and
  half_gap < half_length
"
      classrelation 794799 // <generalisation>
	relation 779567 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 794799 // <generalisation>
	  b parent class_ref 690991 // CylinderRegion
      end

      attribute 675247 "half_gap"
	private explicit_type "double"
	init_value "a_low"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Inner boundary for paired cylindrical volumes"
      end

      operation 1203375 "generate_position"
	const public explicit_return_type ""
	nparams 1
	  param inout name "a_gen" explicit_type "mersenne_twister_19937"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  Generate a new position anywhere in the region.  Then return either
  the new point if it is in a valid position with respect to the region or None.
  The returned particle will only have the x,y,z,r coordinates set.
"
      end

      operation 1131439 "in_region"
	const cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "a_pt" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Test if the particle is in this region.  In this type of region a 
 particle that is in the region is also in a valid position."
      end

      operation 1138479 "__init__"
	public explicit_return_type ""
	nparams 4
	  param in name "a_idx" explicit_type "size_t"
	  param in name "a_radius" explicit_type "double"
	  param in name "a_high" explicit_type "double"
	  param in name "a_low" explicit_type "double"
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}${)}:
${docstring}CylinderRegion.__init__(self, ${p0}, ${p1}, ${p2})
self.volume *= (self.half_length - self.half_gap)/self.half_length
"
	
      end
    end

    class 648879 "ValidatorRegion"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " A region defines a sub-section of the simulation cell.  It is
 associated with sets of particles (View objects).
 This subtype uses a validator function object to check if a particle is
 included within this geometric region of the particle set and does
 not overlap or be on the wrong side of any of the simulations
 boundary surfaces.  The contructor parameters a_radius and
 a_high define the bounding cylinder of the region.
"
      classrelation 794927 // <generalisation>
	relation 779695 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 794927 // <generalisation>
	  b parent class_ref 690991 // CylinderRegion
      end

      attribute 805551 "sphere_radius"
	private explicit_type "double"
	init_value "a_sphere_radius"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  Radius of spheres to be tested by this region"
      end

      operation 1138223 "__init__"
	public explicit_return_type ""
	nparams 5
	  param in name "a_idx" explicit_type "size_t"
	  param in name "a_radius" explicit_type "double"
	  param in name "a_sphere_radius" explicit_type "double"
	  param in name "a_high" explicit_type "double"
	  param in name "a_geom" explicit_type "GeometryValidator"
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}, ${p4}${v4}${)}:
${docstring}CylinderRegion.__init__(self, ${p0}, ${p1}, ${p3})
${body}
"
	
	comment "  The contructor parameters a_radius and
  a_high define the bounding cylinder of the region.

 \\param a_idx: Region ID for this object.  Region objects are specie specific, this ID
  can be used to find matching regions in other species"
      end

      operation 1131567 "valid_position"
	const cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "a_pt" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Test if the particle is in a valid position.  In this type of
 region a particle that is within the bounding cylinder of the
 region may not be in a valid position.  In these cases we use the
 services of a geometry_validator to check whether a sphere with
 the size of our sphere radius attribute does not overlap with any
 of the boundary surfaces.

"
      end
    end

    class 470447 "View"
      visibility package stereotype "view"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " A particle set represent a view into the particle ensemble.

"
      attribute 709807 "indices"
	private explicit_type "size_t"
	multiplicity "*"
	stereotype "list"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Sorted list of particles indices in an associated region.

 List is maintained in sorted order at all times (using bisect.insort_left())"
      end

      attribute 892719 "particle_set"
	private explicit_type ""
	multiplicity "1"
	init_value "pset"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Parent particle set for this view"
      end

      attribute 857135 "region"
	private explicit_type ""
	init_value "geom"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The 3D space that contains the particles in this view.
"
      end

      attribute 899247 "specie_index"
	private explicit_type "int8_t"
	init_value "aspec"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The specie this view is for"
      end

      operation 1160879 "clear"
	public explicit_return_type "void"
	nparams 1
	  param in name "self" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  this->indices_.clear ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}del self.indices[:]
"
	
	comment "Reset the index list to be empty."
      end

      operation 1321519 "__del__"
	public explicit_return_type ""
	nparams 1
	  param in name "self" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Remove link to particle set"
      end

      operation 827439 "__getitem__"
	const public explicit_return_type "Particle"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  return ${type} (*conf_, indices_[${p0}]);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}return self.indices.${name}(idx)
"
	
	comment "Get the global index of the idxth particle in the view

\\pre idx < size"
      end

      operation 958255 "__init__"
	public explicit_return_type ""
	nparams 4
	  param in name "self" explicit_type ""
	  param in name "aspec" explicit_type ""
	  param inout name "pset" explicit_type ""
	  param inout name "geom" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}${)}:
${docstring}${body}
"
	
	comment " Construct a view into pset that encompasses geom sub-region. 

@param aspec: specie index
@param pset: particle set
@param geom: geometry object for view"
      end

      operation 918447 "__len__"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return indices_.${name} ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.indices.${name}()
"
	
	comment " Get the number of particles in the view

 \\inv empty <--> size == 0"
      end

      operation 1321647 "on_update"
	public explicit_return_type ""
	nparams 2
	  param in name "self" explicit_type ""
	  param in name "achangeatom" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment " Manage change"
      end

      operation 1267119 "specie"
	public explicit_return_type ""
	nparams 1
	  param in name "self" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}return self.particle_set.specie_set [self.specie_index]
"
	
	comment " Get the specie object"
      end
    end
  end
end
