class input_base_reader
!!!554928.cpp!!!	trimmed_line() : string
std::string line = decomment(this->line_, '#');
boost::algorithm::trim( line );
return line;
!!!553392.python!!!	next() : bool
if len(self.file_stack_) == 0:
  return False
# Keep going until we get a result or reach the end of all files.
while True:
  # Get the top most stream
  node = self.file_stack_[-1]
  self.name_ = None
  self.line_ = None
  self.value_ = None
  self.line_ = node.stream_.readline()
  if self.line_ == "":
    self.file_stack_.pop()
    if len(self.file_stack_) == 0:
      self.line_ = None
      return False
    continue
  # Keep track of the current line number.
  node.line_no_ += 1
  if self.line_ == "\n":
    continue
  self.line_ = input_reader.decomment(self.line_, '#')
  if self.line_ == "\n":
    continue
  self.line_ = self.line_.strip()
  if self.line_ == "":
    continue
  # Split line
  # have name/value ?? (look for ' ' or '=')
  if self.line_.find("=") >= 0:
    arr = self.line_.split("=",1)
    self.name_ = arr[0]
    if len(arr) > 1:
      self.value_ = arr[1]
  else:
    arr = self.line_.split(None,1)
    self.name_ = arr[0]
    if len(arr) > 1:
      self.value_ = arr[1]
  self.name_ = self.name_.strip()
  self.value_ = None if self.value_ == None else self.value_.strip()
  # Check for include.
  if self.name_ == "include":
    newnode = location_node()
    newnode.open(self.value_)
    self.file_stack_.append(newnode)
    continue
  break
return True
!!!555184.python!!!	do_next() : bool
if len(self.file_stack_) == 0:
  return False
# Keep going until we get a result or reach the end of all files.
while True:
  # Get the top most stream
  node = self.file_stack_[-1]
  self.name_ = None
  self.line_ = None
  self.value_ = None
  self.line_ = node.stream_.readline()
  if self.line_ == "":
    self.file_stack_.pop()
    if len(self.file_stack_) == 0:
      self.line_ = None
      return False
    continue
  # Keep track of the current line number.
  node.line_no_ += 1
  if self.line_ == "\n":
    continue
  self.line_ = input_reader.decomment(self.line_, '#')
  if self.line_ == "\n":
    continue
  self.line_ = self.line_.strip()
  if self.line_ == "":
    continue
  # Split line
  # have name/value ?? (look for ' ' or '=')
  if self.line_.find("=") >= 0:
    arr = self.line_.split("=",1)
    self.name_ = arr[0]
    if len(arr) > 1:
      self.value_ = arr[1]
  else:
    arr = self.line_.split(None,1)
    self.name_ = arr[0]
    if len(arr) > 1:
      self.value_ = arr[1]
  self.name_ = self.name_.strip()
  self.value_ = None if self.value_ == None else self.value_.strip()
  # Check for include.
  if self.name_ == "include":
    newnode = location_node()
    newnode.open(self.value_)
    self.file_stack_.append(newnode)
    continue
  break
return True
!!!554544.cpp!!!	set_line(in line : string) : bool
// Split line
this->name_.clear();
this->value_.clear();
this->line_ = line;

// Preprocess the line
if ( line.empty () ) return false;
line = decomment(line, '#');
if ( line.empty () ) return false;
boost::algorithm::trim( line );
if ( line.empty () ) return false;
  
// (know that first character is non-whitespace)

// have name/value ?? (look for ' ' or '=')
std::string::size_type ipos = line.find('=');
if ( ipos == std::string::npos )
{
   // No '=', try split on a space
   for ( ipos = 0; ipos != line.size(); ++ipos )
   {
      if ( std::isspace( line[ipos] ) ) break;
   }
   if ( ipos == line.size() )
   {
      //     have only name
      this->name_ = line;
   }
   else
   {
      //     name and value
      this->name_ = line.substr( 0, ipos );
      this->value_ = line.substr( ipos + 1 );
   } // if
}
else
{
   //     name and value
   this->name_ = line.substr( 0, ipos );
   this->value_ = line.substr( ipos + 1 );
}
if ( not this->name_.empty() ) boost::algorithm::trim( this->name_ );
if ( not this->value_.empty() ) boost::algorithm::trim( this->value_ );
return true;
!!!553008.cpp!!!	decomment(in a_val : string, in comment_start : char) : string
enum State
{
  START
  , SINGLE
  , DOUBLE
};
State state = START;

for (std::size_t pos = 0; pos < a_val.size(); ++pos)
{
  std::size_t esc = 0;
  while (pos != a_val.size() and a_val[pos] == '\\')
  {
    ++pos;
    ++esc;
  };
  if (pos == a_val.size())
  {
    return a_val;
  }
  if ((esc & 1) == 1) // Pointing to character after an odd escape
  {
    ++pos;
    continue;
  }

  switch (state)
  {
  case SINGLE:
    if (a_val[pos] == '\'') state = START;
    break;

  case DOUBLE:
    if (a_val[pos] == '\"') state = START;
    break;

  default:
    switch (a_val[pos])
    {
    case '\'':
      state = SINGLE;
      break;
    case '\"':
      state = DOUBLE;
      break;
    default:
      if (a_val[pos] != comment_start) break;
      return a_val.substr(0, pos);
    }
  }
}
return a_val;
!!!553008.python!!!	decomment(in a_val : string, in comment_start : char) : string
START=0
SINGLE=1
DOUBLE=2

state = START
pos = -1
while pos < len(a_val):
  pos += 1
  esc = 0
  while pos < len(a_val) and a_val[pos] == '\\':
    pos += 1
    esc += 1
  if pos == len(a_val):
    return a_val
  if 1 == (esc & 1): # Pointing to character after an odd escape
    pos += 1
    continue
  if state == SINGLE:
    if a_val[pos] == '\'':
      state = START
  elif state == DOUBLE:
    if a_val[pos] == '\"':
      state = START
  else:
    if a_val[pos] == '\'':
      state = SINGLE
    elif a_val[pos] == '\"':
      state = DOUBLE
    else:
      if a_val[pos] == comment_start:
        a_val = a_val[:pos]
        return a_val
return a_val

!!!552752.cpp!!!	dequote(in a_val : string) : string
std::string result(a_val);
boost::algorithm::trim(result);
const size_t length(result.size());
if ((length > 1) and (result[0] == result[length - 1]) and (result[0] == '\'' or result[0] == '"'))
{
  size_t esc = 0; // check for odd number of escapes
  while (result[length - (2 + esc)] == '\\') ++esc;
  if ((esc & 1) == 0) // even so last quote not escaped
  {
    return result.substr(1, length - 2);
  }
}
return a_val;
!!!552752.python!!!	dequote(in a_val : string) : string
iline = line.strip()
if (len(iline) > 1) and (iline[0] == iline[-1]) and (iline[-1] == r"'" or iline[-1] == r'"'):
  esc = 0 # check for odd number of escapes
  while iline[-(2 + esc)] == "\\":
    esc += 1
  if (esc & 1) == 0: # even so last quote not escaped
    return iline[1:-1]
return line

!!!552624.cpp!!!	read_as_floats(in input_buffer : string, inout a_arry : std::vector< double >) : bool
// Convert any 'd's to 'e's
std::replace(input_buffer.begin(), input_buffer.end(), 'D', 'E');
std::replace(input_buffer.begin(), input_buffer.end(), 'd', 'E');
a_arry.clear();
{
   std::stringstream is(input_buffer);
   while( not is.eof() )
   {
      double val;
      is >> val;
      // Conversion failed so no more numbers for conversion ?
      if (not is) break;
      a_arry.push_back(val);
   }
   return is.eof();
}
!!!552624.python!!!	read_as_floats(in input_buffer : string, inout a_arry : std::vector< double >) : bool
result = []
try:
  for x in input_buffer.split(None,a_max_size):
    v = float(x)
    result.append(v)
except ValueError, err:
  # ignore ValueError, just return what we have so far
  pass
return result
!!!552496.cpp!!!	read_as_bool(in astr : string, inout target : bool) : bool
astr = dequote( astr );
boost::trim( astr );
boost::to_upper( astr );
switch (astr.size())
{
case 1:
  if (astr == "1")
  {
    target = true;
    return true;
  }
  else if (astr == "0")
  {
    target = false;
    return true;
  }
  break;
case 4:
  if (astr == "TRUE")
  {
    target = true;
    return true;
  }
  break;
case 5:
  if (astr == "FALSE")
  {
    target = false;
    return true;
  }
  break;
case 6:
  if (astr == ".TRUE.")
  {
    target = true;
    return true;
  }
  break;
case 7:
  if (astr == ".FALSE.")
  {
    target = false;
    return true;
  }
  break;
default:
  break;
}
return false;
!!!552496.python!!!	read_as_bool(in astr : string, inout target : bool) : bool
astr = line.upper()
astr = input_reader.dequote (astr)
astr = astr.strip()
alen = len(astr)
if alen == 4:
  if astr == "TRUE":
    return True
elif alen == 5:
  if astr == "FALSE":
    return False
elif alen == 6:
  if astr == ".TRUE.":
    return True
elif alen == 7:
  if astr == ".FALSE.":
    return False
else:
  # Finally check if astr is 0 or 1
  val = int(astr)
  if val == 0:
    return False
  elif val == 1:
    return True
  else:
    raise ValueError, "invalid literal for conversion to boolean: '"+astr+"'"


!!!1097264.cpp!!!	bool_input(in name : string, in value : string, in title : string, in section_name : string, inout target : bool, in has_default : bool, in default_value : bool, in reader : input_base_reader) : void
if( value.empty() )
{
  if( has_default )
  {
    target = default_value;
    return;
  }
  else
  {
    UTILITY_INPUT( not value.empty(), title + " \"" + name + "\" parameter requires a value.", section_name, reader );
  }
}
else
{
  std::string astr{ dequote( value ) };
  boost::trim( astr );
  boost::to_upper( astr );
  if( astr.empty() )
  {
    if( has_default )
    {
      target = default_value;
      return;
    }
    else
    {
      UTILITY_INPUT( not astr.empty(), title + " \"" + name + "\" parameter requires a non-empty value.", section_name, reader );
    }
  }
  switch (astr.size())
  {
  case 1:
    if (astr == "1")
    {
      target = true;
      return;
    }
    else if (astr == "0")
    {
      target = false;
      return;
    }
    else if (astr == "F")
    {
      target = false;
      return;
    }
    else if (astr == "T")
    {
      target = true;
      return;
    }
    break;
  case 3:
    if (astr == ".F.")
    {
      target = false;
      return;
    }
    else if (astr == ".T.")
    {
      target = true;
      return;
    }
    break;
  case 4:
    if (astr == "TRUE")
    {
      target = true;
      return;
    }
    break;
  case 5:
    if (astr == "FALSE")
    {
      target = false;
      return;
    }
    break;
  case 6:
    if (astr == ".TRUE.")
    {
      target = true;
      return;
    }
    break;
  case 7:
    if (astr == ".FALSE.")
    {
      target = false;
      return;
    }
    break;
  default:
    break;
  }
  const bool value_is_boolean{ false };
  UTILITY_INPUT( value_is_boolean, title + " \"" + name + "\" parameter value (" + value + ") is not a boolean", section_name, reader );
}
!!!1097008.cpp!!!	float_input(in name : string, in value : string, in title : string, in section_name : string, inout target : double, in above_zero : bool, in equal_zero : bool, inout reader : input_base_reader) : void
std::replace(value.begin(), value.end(), 'D', 'E');
std::replace(value.begin(), value.end(), 'd', 'E');
const char *start = value.c_str();
// Move past any whitespace
while( not *start == '\0' and std::isspace( *start ) ) ++start;
UTILITY_INPUT( *start != '\0', title + " \"" + name + "\" parameter requires a value.", section_name, reader );
char *end;
double result;
errno = 0;
result = std::strtod(start, &end);
UTILITY_INPUT( errno != ERANGE, title + " \"" + name + "\" parameter value ("+value+") outside numeric range.", section_name, reader );
UTILITY_INPUT( not std::isnan( result ), title + " \"" + name + "\" parameter value ("+value+") can not be not-a-number (NAN).", section_name, reader );
UTILITY_INPUT( not std::isinf( result ), title + " \"" + name + "\" parameter value ("+value+") can not be an infinity.", section_name, reader );
UTILITY_INPUT( *end == '\0' or std::isspace( *end ), title + " \"" + name + "\" parameter value ("+value+") is not a number.", section_name, reader );
if( above_zero )
{
  if( equal_zero )
  {
    UTILITY_INPUT( result >= 0.0, title + " \"" + name + "\" parameter value (" + value + ") must be greater than or equal to zero.", section_name, reader );
  }
  else
  {
    UTILITY_INPUT( result > 0.0, title + " \"" + name + "\" parameter value (" + value + ") must be greater than zero.", section_name, reader );
  }
}
target = result;
!!!2298928.cpp!!!	floats_input(in name : string, in value : string, in title : string, in section_name : string, inout target : double, inout reader : input_base_reader) : void
std::replace(value.begin(), value.end(), 'D', 'E');
std::replace(value.begin(), value.end(), 'd', 'E');
const char *start = value.c_str();
std::vector< double > rlist;
// Move past any whitespace
while( not *start == '\0' and std::isspace( *start ) ) ++start;
UTILITY_INPUT( *start != '\0', title + " \"" + name + "\" parameter requires a value.", section_name, reader );
char *end;
errno = 0;
for (double result = std::strtod(start, &end); start != end; result = std::strtod(start, &end))
{
  start = end;
  UTILITY_INPUT( errno != ERANGE, title + " \"" + name + "\" parameter value ("+value+") outside numeric range.", section_name, reader );
  UTILITY_INPUT( not std::isnan( result ), title + " \"" + name + "\" parameter value ("+value+") can not be not-a-number (NAN).", section_name, reader );
  UTILITY_INPUT( not std::isinf( result ), title + " \"" + name + "\" parameter value ("+value+") can not be an infinity.", section_name, reader );
  UTILITY_INPUT( *end == '\0' or std::isspace( *end ), title + " \"" + name + "\" parameter value ("+value+") is not a number.", section_name, reader );
  rlist.push_back( result );
}
UTILITY_INPUT( *end == '\0' or std::isspace( *end ), title + " \"" + name + "\" parameter value ("+value+") is not a number.", section_name, reader );
std::swap( rlist, target );
!!!2290864.cpp!!!	key_input(in name : string, in value : string, in title : string, in section_name : string, inout target : size_t, in keylist : string, in reader : input_base_reader) : void
UTILITY_INPUT( not value.empty(), title + " \"" + name + "\" parameter requires a value.", section_name, reader );
std::stringstream os;
os << "(";
// Remove quotes and outer whitespace.
value = input_base_reader::dequote( value );
boost::algorithm::trim( value );
UTILITY_INPUT( not value.empty(), title + " \"" + name + "\" parameter requires a non-empty value.", section_name, reader );
for( std::size_t idx = 0; idx != keylist.size(); ++idx)
{
  os << keylist[ idx ] << ",";
  if( keylist[ idx ].find( value ) == 0 )
  {
    target = idx;
    return;
  }
}
std::string list{ os.str() };
list.back() = ')';
UTILITY_INPUT( false, title + " \"" + name + "\" parameter value ("+value+") is not in list " + list + ".", section_name, reader );
!!!1628848.cpp!!!	ordinal_input(in name : string, in value : string, in title : string, in section_name : string, inout target : size_t, in reader : input_base_reader) : void
const char *start = value.c_str();
// Move past any whitespace
while( not *start == '\0' and std::isspace( *start ) ) ++start;
UTILITY_INPUT( *start != '\0', title + " \"" + name + "\" parameter requires a value.", section_name, reader );
// Check for negative sign
UTILITY_INPUT( *start != '-', title + " \"" + name + "\" parameter value ("+value+") cannot be negative.", section_name, reader );
char *end;
std::size_t result;
errno = 0;
// Expect base ten.
result = std::strtoul(start, &end, 0);
UTILITY_INPUT( errno != ERANGE, title + " \"" + name + "\" parameter value ("+value+") outside numeric range.", section_name, reader );
UTILITY_INPUT( *end == '\0' or std::isspace( *end ), title + " \"" + name + "\" parameter value ("+value+") is not a number.", section_name, reader );
target = result;
!!!2290736.cpp!!!	text_input(in name : string, in value : string, in title : string, in section_name : string, inout target : string, in reader : input_base_reader) : void
UTILITY_INPUT( not value.empty(), title + " \"" + name + "\" parameter requires a value.", section_name, reader );
std::string result = input_base_reader::dequote( value );
UTILITY_INPUT( not result.empty(), title + " \"" + name + "\" parameter requires a non-empty value.", section_name, reader );
target = result;
!!!1938736.cpp!!!	get_ordinal(in title : string, in section_name : string) : size_t
std::size_t result{ 0 };
ordinal_input( this->name(), this->value(), title, section_name, result, this );
return result;
!!!1938864.cpp!!!	get_bool(in name : string, in title : string, in section_name : string, in has_default : bool, in default_value : bool) : bool
bool result { false };
bool_input( this->name(), this->value(), title, section_name, result, has_default, default_value, this );
return result;
!!!1938992.cpp!!!	get_float(in title : string, in section_name : string, in above_zero : bool, in equal_zero : bool) : double
double result{ 0 };
float_input( this->name(), this->value(), title, section_name, result, above_zero, equal_zero, this );
return result;
!!!2290992.cpp!!!	get_text(in title : string, in section_name : string) : string
std::string result;
text_input( this->name(), this->value(), title, section_name, result, this );
return result;
!!!2291120.cpp!!!	get_key(in title : string, in section_name : string, in keylist : string) : size_t
std::size_t result{0};
key_input( this->name(), this->value(), title, section_name, result, keylist, this );
return result;
!!!2299184.cpp!!!	get_floats(in title : string, in section_name : string, inout target : double) : void
floats_input( this->name(), this->value(), title, section_name, target, this );
