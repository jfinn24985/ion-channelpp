class trial_fixture
!!!441648.cpp!!!	test_base_choice(in params : string) : void
const std::size_t ispec { 1 };
const double prob { 0.2 };
std::stringstream store;
{
   // Single argument constructor
   boost::shared_ptr< T > chc( new T( ispec, params ) );
   BOOST_CHECK_EQUAL( chc->key().key, ispec );
   BOOST_CHECK_EQUAL( chc->probability(), 0.0 );
   // set_probability()
   BOOST_CHECK_NO_THROW( chc->set_probability( prob ) );
   BOOST_CHECK_EQUAL( chc->probability(), prob );

   // dummy simulator
   platform::simulator_fixture simfix;
   simfix.add_solute_species();
   std::stringstream dummy_log;
   simfix.sim->generate_simulation( dummy_log );

   // generate()
   // end_trial()/begin_trial() : via generate()
   for( std::size_t ii = 0; ii != 10; ++ii)
   {
      bool try_failed { false };
      BOOST_REQUIRE_NE( simfix.sim->get_ensemble().size(), 0ul );
      {
         std::unique_ptr< trial::change_set > tryout = chc->generate( *simfix.sim );
         BOOST_CHECK_GE( tryout->size(), 1ul );

         try_failed = tryout->fail();
         if ( not try_failed )
         {
            tryout->set_accept( true );
         }
      }
   }

   // serialize()
   boost::archive::text_oarchive oa( store );
   oa << chc;
}
{
   boost::shared_ptr< T > chc2;

   // serialize()
   boost::archive::text_iarchive ia( store );
   ia >> chc2;

   BOOST_CHECK_EQUAL( chc2->key().key, ispec );
   BOOST_CHECK_EQUAL( chc2->probability(), prob );
}
