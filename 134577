format 75
"Template Stats Tests" // utility::utility test suite::Template Stats Tests
  revision 5
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "utility/util_test"
  cpp_src_dir "utility/util_test"
  cpp_namespace "utility::test"
  classview 160689 "tmpl stats tests"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    classdiagram 167729 "Utility test coverage"
      draw_all_relations no hide_attributes yes hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language c++ show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      comment "Post overview of utility class coverage (unchecked)"
      size A4
    end

    class 870575 "histogram_test_suite"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 1092143 "var"
	private explicit_type "double"
	multiplicity "[32]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1092271 "indexes"
	private explicit_type "size_t"
	multiplicity "[32]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1092399 "counts"
	private explicit_type "size_t"
	multiplicity "[32]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1092527 "mean"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1092655 "variance"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 1539119 "histogram_test_suite"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : var()
      , indexes()
      , counts()
      , mean()
      , variance()
  {
    var[ 0] =      5.5516621838;
    var[ 1] =      0.2100560162;
    var[ 2] =      0.592851646;
    var[ 3] =      0.7387133442;
    var[ 4] =      0;
    var[ 5] =      0.0603448137;
    var[ 6] =      0.0399201735;
    var[ 7] =      8.3830492441;
    var[ 8] =     10.6720101019;
    var[ 9] =      8.5243113113;
    var[10] =      0.8336070837;
    var[11] =      0.7854093157;
    var[12] =      0.4436615558;
    var[13] =     14.1975433413;
    var[14] =     25.657982967;
    var[15] =      6.8852868479;
    var[16] =      0.3215328372;
    var[17] =      4.4619749979;
    var[18] =      0.017607702;
    var[19] =     21.0264223786;
    var[20] =     19.0367584515;
    var[21] =      6.7498704974;
    var[22] =      0.5602527081;
    var[23] =     13.1845872369;
    var[24] =      0.4063910795;
    var[25] =      0.3934774747;
    var[26] =      1.0065240381;
    var[27] =      0.0302535373;
    var[28] =      0.0973062654;
    var[29] =      8.2189127477;
    var[30] =      4.8215371193;
    //!
    mean    =      5.2874135167;
    //! VAR  48.9042830931 /
    // BIASED VARIANCE
    variance =     47.32672557400666;
    //! STDEV 6.993159736
    for (int i_ = 0; i_ != 31; ++i_)
    {
      indexes[i_] = std::size_t(std::floor(var[i_] * 2));
      ++counts[std::size_t(std::floor(var[i_]))];
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1539247 "test_axis_ctor1"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    utility::histogram_axis< double > var1 (0.0, 29.9, 0.5);

    TS_ASSERT_EQUALS(var1.bin_width(), 0.5);
    TS_ASSERT_EQUALS(var1.minimum(), 0.0);
    TS_ASSERT_EQUALS(var1.maximum(), 30.0);
    TS_ASSERT_EQUALS(var1.size(), 60);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1539375 "test_axis_ctor2"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    utility::histogram_axis< double > var1 (0.0, 30.0, 60ul);

    TS_ASSERT_EQUALS(var1.bin_width(), 0.5);
    TS_ASSERT_EQUALS(var1.minimum(), 0.0);
    TS_ASSERT_EQUALS(var1.maximum(), 30.0);
    TS_ASSERT_EQUALS(var1.size(), 60);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1539503 "test_axis_serialize"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    utility::histogram_axis< double > var1 (0.0, 30.0, 60ul);
    TS_ASSERT_EQUALS(var1.bin_width(), 0.5);
    TS_ASSERT_EQUALS(var1.minimum(), 0.0);
    TS_ASSERT_EQUALS(var1.maximum(), 30.0);
    TS_ASSERT_EQUALS(var1.size(), 60);

    std::stringstream store;
    {
      boost::archive::text_oarchive oa(store);
      // write class instance to archive
      oa << var1;
      // archive and stream closed when destructors are called
    }
    utility::histogram_axis< double > var2;
    TS_ASSERT_EQUALS(var2.bin_width(), 0.0);
    TS_ASSERT_EQUALS(var2.minimum(), 0.0);
    TS_ASSERT_EQUALS(var2.maximum(), 0.0);
    TS_ASSERT_EQUALS(var2.size(), 0);
    {
      boost::archive::text_iarchive ia(store);
      // write class instance to archive
      ia >> var2;
      // archive and stream closed when destructors are called
    }
    TS_ASSERT_EQUALS(var2.bin_width(), 0.5);
    TS_ASSERT_EQUALS(var2.minimum(), 0.0);
    TS_ASSERT_EQUALS(var2.maximum(), 30.0);
    TS_ASSERT_EQUALS(var2.size(), 60);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1539631 "test_axis_inrange"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    utility::histogram_axis< double > var1 (5.0, 20.0, 30ul);
    for (int i = 0; i != 31; ++i)
    {
      if (not var1.in_range (var[i]))
      {
        if (var[i] < 10)
        {
          TS_ASSERT_LESS_THAN(var[i], 5.0);
        }
        else
        {
          TS_ASSERT_LESS_THAN_EQUALS (20.0, var[i]);
        }
      }
      else
      {
        TS_ASSERT_LESS_THAN(var[i], 20.0);
        TS_ASSERT_LESS_THAN_EQUALS (5.0, var[i]);
      }
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Test data in_range result"
      end

      operation 1539759 "test_axis_binrange"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    utility::histogram_axis< double > var1 (5.0, 20.0, 30ul);
    for (int i = 0; i != 31; ++i)
    {
      if (var1.in_range (var[i]))
      {
        std::size_t binnum (var1.bin_number(var[i]));
        TS_ASSERT_LESS_THAN(var[i], var1.bin_maximum (binnum));
        TS_ASSERT_LESS_THAN_EQUALS (var1.bin_minimum (binnum), var[i]);
        TS_ASSERT_LESS_THAN_EQUALS (std::abs(var[i] - var1.bin_midpoint(binnum)), var1.bin_width()/2);
      }
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Test bin end-point result"
      end

      operation 1539887 "test_histogram1_init"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    boost::shared_ptr< utility::histogram_axis< double > > axis(new utility::histogram_axis< double >(0.0, 30.0, 0.5));
    utility::histogram< double, 1ul > var1(axis);

    TS_ASSERT_EQUALS(var1.size(), 60);

    var1.insert_by_value (&this->var[0], &this->var[31]);

    TS_ASSERT_EQUALS(var1.count(), 1);

    var1.reset();

    TS_ASSERT_EQUALS(var1.count(), 0);

    for (std::size_t i_ = 0; i_ != axis->size(); ++i_)
    {
      TS_ASSERT_EQUALS(var1.bin_count(i_), 0);
      TS_ASSERT_EQUALS(var1.mean(i_), 0.0);
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1540015 "test_histogram1_insert_by_value"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    boost::shared_ptr< utility::histogram_axis< double > > axis(new utility::histogram_axis< double >(0.0, 30.0, 1.0));
    utility::histogram< double, 1ul > var1(axis);

    TS_ASSERT_EQUALS(var1.size(), 30);

    var1.insert_by_value (&this->var[0], &this->var[31]);

    TS_ASSERT_EQUALS(var1.count(), 1);

    for (std::size_t i_ = 0; i_ != axis->size(); ++i_)
    {
      TS_ASSERT_EQUALS(var1.bin_count(i_), counts[i_]);
      TS_ASSERT_EQUALS(var1.mean(i_), counts[i_]);
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1540143 "test_histogram1_insert_by_index"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    boost::shared_ptr< utility::histogram_axis< double > > axis(new utility::histogram_axis< double >(0.0, 30.0, 0.5));
    utility::histogram< double, 1ul > var1(axis);
    utility::histogram< double, 1ul > var2(axis);

    TS_ASSERT_EQUALS(var1.size(), 60);

    var1.insert_by_value (&this->var[0], &this->var[31]);
    var2.insert_by_index (&this->indexes[0], &this->indexes[31]);

    TS_ASSERT_EQUALS(var1.count(), 1);
    TS_ASSERT_EQUALS(var2.count(), 1);

    for (std::size_t i_ = 0; i_ != axis->size(); ++i_)
    {
      TS_ASSERT_EQUALS(var1.bin_count(i_), var2.bin_count(i_));
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1540271 "test_histogram1_sample"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    boost::shared_ptr< utility::histogram_axis< double > > axis(new utility::histogram_axis< double >(0.0, 30.0, 0.5));
    utility::histogram< double, 1ul > var1(axis);
    utility::histogram< double, 1ul > var2(axis);

    TS_ASSERT_EQUALS(var1.size(), 60);

    var1.insert_by_value (&this->var[0], &this->var[31]);
    var1.insert_by_value (&this->var[0], &this->var[31]);
    {
      utility::histogram< double, 1ul >::session ses (var2.start_sampling());
      for (int i_ = 0; i_ != 31; ++i_)
      {
        var2.sample (this->indexes[i_], 2);
      }
    }

    TS_ASSERT_EQUALS(var1.count(), 2);
    TS_ASSERT_EQUALS(var2.count(), 1);

    for (std::size_t i_ = 0; i_ != axis->size(); ++i_)
    {
      TS_ASSERT_EQUALS(var1.bin_count(i_), var2.bin_count(i_));
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1540399 "test_histogram1_serialize"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    boost::shared_ptr< utility::histogram_axis< double > > axis(new utility::histogram_axis< double >(0.0, 30.0, 0.5));
    utility::histogram< double, 1ul > var1(axis);
    utility::histogram< double, 1ul > var2;

    TS_ASSERT_EQUALS(var1.size(), 60);

    var1.insert_by_value (&this->var[0], &this->var[31]);
    var1.insert_by_value (&this->var[0], &this->var[31]);

    std::stringstream store;
    {
      boost::archive::text_oarchive oa(store);
      // write class instance to archive
      oa << var1;
    }
    {
      boost::archive::text_iarchive ia(store);
      // write class instance to archive
      ia >> var2;
    }

    TS_ASSERT_EQUALS(var2.count(), 2);

    for (std::size_t i_ = 0; i_ != axis->size(); ++i_)
    {
      TS_ASSERT_EQUALS(var1.bin_count(i_), var2.bin_count(i_));
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 868271 "estimate_test_suite"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unit tests for the statistics related classes in 'estiamte.hpp'

Classes:
  - base_mean
  - base_mean_range
  - estimate
  - estimate_array"
      classrelation 964015 // <dependency>
	relation 934703 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 964015 // <dependency>
	  b parent class_ref 449327 // ftoi
      end

      attribute 1089071 "var"
	private explicit_type "double"
	multiplicity "[32]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1089199 "mean"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1089327 "variance"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 1527215 "estimate_test_suite"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : var()
  {
  var[ 0] =      5.5516621838;
  var[ 1] =      0.2100560162;
  var[ 2] =      0.592851646;
  var[ 3] =      0.7387133442;
  var[ 4] =      0;
  var[ 5] =      0.0603448137;
  var[ 6] =      0.0399201735;
  var[ 7] =      8.3830492441;
  var[ 8] =     10.6720101019;
  var[ 9] =      8.5243113113;
  var[10] =      0.8336070837;
  var[11] =      0.7854093157;
  var[12] =      0.4436615558;
  var[13] =     14.1975433413;
  var[14] =      25.657982967;
  var[15] =      6.8852868479;
  var[16] =      0.3215328372;
  var[17] =      4.4619749979;
  var[18] =      0.017607702;
  var[19] =     21.0264223786;
  var[20] =     19.0367584515;
  var[21] =      6.7498704974;
  var[22] =      0.5602527081;
  var[23] =     13.1845872369;
  var[24] =      0.4063910795;
  var[25] =      0.3934774747;
  var[26] =      1.0065240381;
  var[27] =      0.0302535373;
  var[28] =      0.0973062654;
  var[29] =      8.2189127477;
  var[30] =      4.8215371193;
  //!     
  mean    =      5.2874135167;
  //! VAR  48.9042830931 /
  // BIASED VARIANCE
  variance =     47.32672557400666;
  //! STDEV 6.993159736
};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1527343 "test_estimate_append"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    utility::estimate< utility::base_mean< double > > var1;
    for (std::size_t ix = 0; ix != 31; ++ix)
      {
	var1.append(this->var[ix]);
      }
    TS_ASSERT_EQUALS(var1.count(), 31);
    TS_ASSERT(utility::feq(var1.mean(), this->mean));
    TS_ASSERT(utility::feq(var1.variance(), this->variance));
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1527471 "test_estimate_insert"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    utility::estimate< utility::base_mean< double > > var1;
    var1.insert(&this->var[0], &this->var[31]);

    TS_ASSERT_EQUALS(var1.count(), 31);
    TS_ASSERT(utility::feq(var1.mean(), this->mean));
    TS_ASSERT(utility::feq(var1.variance(), this->variance, 1<<9));
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1527599 "test_estimate_reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    utility::estimate< utility::base_mean< double > > var1;
    var1.insert(&this->var[0], &this->var[15]);

    var1.reset ();
    var1.insert(&this->var[0], &this->var[31]);

    TS_ASSERT_EQUALS(var1.count(), 31);
    TS_ASSERT(utility::feq(var1.mean(), this->mean));
    TS_ASSERT(utility::feq(var1.variance(), this->variance));
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1527727 "test_estimate_serialize"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    utility::estimate< utility::base_mean< double > > var1, var2;
    var1.insert(&this->var[0], &this->var[31]);

    TS_ASSERT(utility::feq(var1.mean(), this->mean));
    TS_ASSERT(utility::feq(var1.variance(), this->variance, 1<<9));
    std::stringstream store;
    {
      boost::archive::text_oarchive oa(store);
      // write class instance to archive
      oa << var1;
    }
    {
      boost::archive::text_iarchive ia(store);
      // write class instance to archive
      ia >> var2;
    }
    TS_ASSERT_EQUALS (var1.mean(), var2.mean());
    TS_ASSERT_EQUALS (var1.variance(), var2.variance());
    TS_ASSERT_EQUALS (var1.count(), var2.count());
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1527855 "test_estimate_range_append"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    utility::estimate< utility::base_mean_range< double > > var1;
    for (std::size_t ix = 0; ix != 31; ++ix)
      {
  	var1.append(this->var[ix]);
      }

    TS_ASSERT_EQUALS(var1.count(), 31);
    TS_ASSERT(utility::feq(var1.mean(), this->mean));
    TS_ASSERT(utility::feq(var1.variance(), this->variance));
  };
"
	
	
	
	
      end

      operation 1527983 "test_estimate_range_insert"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    utility::estimate< utility::base_mean_range< double > > var1;
    var1.insert(&this->var[0], &this->var[31]);

    TS_ASSERT(utility::feq(var1.mean(), this->mean));
    TS_ASSERT(utility::feq(var1.variance(), this->variance, 1<<9));
  };
"
	
	
	
	
      end

      operation 1528111 "test_estimate_range_reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    utility::estimate< utility::base_mean_range< double > > var1;
    var1.insert(&this->var[0], &this->var[15]);

    var1.reset ();
    var1.insert(&this->var[0], &this->var[31]);

    TS_ASSERT_EQUALS(var1.count(), 31);
    TS_ASSERT(utility::feq(var1.mean(), this->mean));
    TS_ASSERT(utility::feq(var1.variance(), this->variance));
  };
"
	
	
	
	
      end

      operation 1528239 "test_estimate_range_serialize"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    utility::estimate< utility::base_mean_range< double > > var1, var2;
    var1.insert(&this->var[0], &this->var[31]);

    TS_ASSERT(utility::feq(var1.mean(), this->mean));
    TS_ASSERT(utility::feq(var1.variance(), this->variance, 1<<9));
    std::stringstream store;
    {
      boost::archive::text_oarchive oa(store);
      // write class instance to archive
      oa << var1;
    }
    {
      boost::archive::text_iarchive ia(store);
      // write class instance to archive
      ia >> var2;
    }
    TS_ASSERT_EQUALS (var1.mean(), var2.mean());
    TS_ASSERT_EQUALS (var1.variance(), var2.variance());
    TS_ASSERT_EQUALS (var1.count(), var2.count());
    TS_ASSERT_EQUALS (var1.minimum(), var2.minimum());
    TS_ASSERT_EQUALS (var1.maximum(), var2.maximum());
  };
"
	
	
	
	
      end

      operation 1528367 "test_estimate_array_append"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    utility::estimate_array< utility::base_mean< double > > var1;
    var1.resize(std::distance(&this->var[0], &this->var[31]));
    var1.append (&this->var[0], &this->var[31]);
    var1.append (&this->var[0], &this->var[31]);
    var1.append (&this->var[0], &this->var[31]);
    var1.append (&this->var[0], &this->var[31]);
    
    TS_ASSERT_EQUALS (var1.count(), 4);
    for (int i_ = 0; i_ != 31; ++i_)
      {
	TS_ASSERT_EQUALS (var1.mean(i_), this->var[i_]);
	TS_ASSERT_EQUALS (var1.variance(i_), 0.0);
      }

  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1528495 "test_estimate_array_serialize"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    utility::estimate_array< utility::base_mean< double > > var1, var2;
    var1.resize(std::distance(&this->var[0], &this->var[31]));
    var1.append (&this->var[0], &this->var[31]);
    var1.append (&this->var[0], &this->var[31]);
    var1.append (&this->var[0], &this->var[31]);
    var1.append (&this->var[0], &this->var[31]);
    
    std::stringstream store;
    {
      boost::archive::text_oarchive oa(store);
      // write class instance to archive
      oa << var1;
    }
    {
      boost::archive::text_iarchive ia(store);
      // write class instance to archive
      ia >> var2;
    }

    TS_ASSERT_EQUALS (var2.count(), 4);
    for (int i_ = 0; i_ != 31; ++i_)
      {
	TS_ASSERT_EQUALS (var2.mean(i_), this->var[i_]);
      }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end
  end

  deploymentview 134705 "tmpl stats tests"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 578863 "histogram_test"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
//--
#include \"utility/histogram.hpp\"
#include \"utility/utility.hpp\"

${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 870575 // histogram_test_suite
      end
      comment "// -------------------------------------------------------------
// Running Statistics Module Test
//
// Simple compliance test for histogram module.
// -------------------------------------------------------------
"
    end

    artifact 578095 "estimate_test"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
//-
#include \"utility/utility.hpp\"
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 868271 // estimate_test_suite
      end
      simplerelation 134703
	---|>
	  stereotype "import"
	  on artifact_ref 336687 // fuzzy_equals
      end

      simplerelation 134831
	---|>
	  stereotype "import"
	  on artifact_ref 580143 // utility
      end
    end
  end
end
