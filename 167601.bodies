class specie_count
!!!487857.cpp!!!	description(inout os : ostream) : void
os << "SAMPLER [" << this->type_label_() << "]\n";
os << " Sample average specie numbers.\n";
!!!487857.python!!!	description(inout os : ostream) : void
print >>os, "[observer]",self.type_label()
print >>os, " Sample the average particle number in the whole"
print >>os, " cell of each specie."
print >>os, " Provides signals:",self.type_label()+"-mean",self.type_label()+"-variance"
pass
!!!640689.cpp!!!	enrol(inout reporter : report_manager) : void
if (not reporter.has_signal(this->type_label()))
{
  boost::any sig = &this->mean_signal_;
  reporter.set_signal(this->type_label(), sig);
}
!!!640689.python!!!	enrol(inout reporter : report_manager) : void
if not self.report_conx_ or not self.report_conx.connected():
  sig = sim.get_signal("report")
  self.report_conx_ = sig.connect(lambda *args: self.on_report(*args))
if not self.sample_conx_ or not self.sample_conx_.connected():
  sig = sim.get_signal("outer-loop")
  self.sample_conx_ = sig.connect(lambda *args: self.on_sample(*args))
if not self.mean_signal_:
  import signals
  self.mean_signal_ = signals.signal()
if not sim.has_signal(self.type_label()):
  sim.set_signal(self.type_label(), self.mean_signal_)
!!!365361.cpp!!!	make_sampler(in paramset : string, inout sim : simulator) : void
UTILITY_INPUT( paramset.empty(), "The "+specie_count::type_label_()+" sampler takes no parameters.", core::strngs::sampler_label() );
boost::shared_ptr< base_sampler > smplr( new specie_count );
sim.share_observer( smplr );
!!!594865.cpp!!!	on_report(in sim : simulator, inout out : ostream, inout reporter : report_manager) : void
if (not this->count_.empty())
{
   boost::format fmt_head(" %3s %7s %8s %8s %8s %8s");
   out << boost::format(fmt_head) % "SPC" % "COUNT" % "[]" % "<COUNT>" % "<[]>" % "VAR" << "\n";
   const static boost::format fmt_row1(" %3s %7d %8.4f ######## ######## ########");
   const static boost::format fmt_row2(" %3s %7d %8.4f %8.4f %8.4f %8.4f");
   for (size_t ispec = 0; ispec != this->count_.size(); ++ispec)
   {
      auto const& runr = this->count_[ispec];
      auto const& spc = sim.get_specie(ispec);
      const double count_to_conc = core::constants::to_SI()/sim.volume( ispec );
      if (runr.count() == 0)
      {
         out << boost::format(fmt_row1) % spc.label() % spc.count() % (spc.count()*count_to_conc) << "\n";
      }
      else
      {
         out << boost::format(fmt_row2) % spc.label() % spc.count() % (spc.count()*count_to_conc) % runr.mean() % (runr.mean()*count_to_conc) % runr.variance() << "\n";
      }
   }

   {
      // Write out specie count data
      const std::string filename { "specie-count.dat" };

      const std::size_t loopindex { sim.get_outer_loop_index() };

      core::output_series dset { sim.run_uuid() };
      dset.set_title( "Time series specie counts" );

      dset.push_back_entry( core::output_field( "INDEX", "ORDINAL", [loopindex](std::ostream& os, std::size_t)
      {
         os << loopindex;
      } ) );

      for (std::size_t ispec = 0; ispec != this->count_.size(); ++ispec)
      {
         auto const& spc = sim.get_specie( ispec );
         auto estmt = this->count_[ ispec ];
         dset.push_back_entry( core::output_field( spc.label() + "_MEAN" , "COUNT", [estmt](std::ostream& os, std::size_t)
         {
            os << estmt.mean();
         } ) );
         dset.push_back_entry( core::output_field( spc.label() + "_VAR" , "COUNT", [estmt](std::ostream& os, std::size_t)
         {
            os << estmt.variance();
         } ) );
      }

      dset.write( filename, reporter.get_sink(), sim.report_interval() == loopindex );
   }
}
!!!594865.python!!!	on_report(in sim : simulator, inout out : ostream, inout reporter : report_manager) : void
if self.count_ != None:
  print >>out, " %3s %7s %8s %8s %8s %8s"%("SPC","COUNT","[]","<COUNT>","<[]>","VAR")
  from constants import constants
  for ispec, (runr, spc) in enumerate( zip( self.count_, sim.get_species() ) ):
    count_to_conc = constants.to_SI()/sim.get_cell_region().volume( ispec )
    if spc.count == None:
      print >>out," %3s ########"% (spc.label())
    else:
      if runr.count() == 0:
        print >>out," %3s %7d %8.4f ######## ######## ########"% (spc.label(),spc.count(),(spc.count()*count_to_conc))
      else:
        print >>out," %3s %7d %8.4f %8.4f %8.4f %8.4f"% (spc.label(),spc.count(),(spc.count()*count_to_conc),runr.mean(),(runr.mean()*count_to_conc),runr.variance())
pass

!!!304177.cpp!!!	on_sample(in sys : simulator) : void
size_t ispec = 0;
for (auto const& spc : sys.get_species())
{
  this->count_[ispec].append( spc.count() );
  ++ispec;
}
if (not this->mean_signal_.empty())
{
  this->mean_signal_(this->count_);
}
!!!304177.python!!!	on_sample(in sys : simulator) : void
for m, s in zip( self.count_, sys.get_species() ):
  m.append( s.count() )
# publish data
if len( self.mean_signal_ ) != 0:
  self.mean_signal_( self.count_ )
pass
!!!304305.cpp!!!	prepare(inout sim : simulator) : void
if (this->count_.size() != sim.specie_count())
{
  this->count_.clear();
}
if (this->count_.empty())
{
  this->count_.resize(sim.specie_count());
}
else
{
  for (auto &mean : this->count_) mean.reset();
}
!!!304305.python!!!	prepare(inout sim : simulator) : void
if not self.count_ or len(self.count_) !=  sim.specie_count():
  self.count_ = []
  from estimater import estimater
  for i in range( sim.specie_count() ):
    self.count_.append( estimater() )
else:
  for mean in self.count_:
    mean.reset()
!!!594993.python!!!	__init__(inout self : , in sim : simulator)
sim.add_observer( self );
pass
!!!595121.python!!!	__del__(in self : )
if self.report_conx_ != None and self.report_conx_.connected():
  self.report_conx_.disconnect()
  self.report_conx_ = None
if self.sample_conx_ != None and self.sample_conx_.connected():
  self.sample_conx_.disconnect()
  self.sample_conx_ = None
if self.mean_signal_ != None and len(self.mean_signal_) != 0:
  self.mean_signal_.disconnect_all_slots()
  self.mean_signal_ = None
pass

!!!217008.cpp!!!	do_write_document(inout wr : input_document, in ix : size_t) : void
wr[ ix ].add_entry( core::strngs::fstype(), this->type_label_() );

