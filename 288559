format 75
"Geometry" // geometry::Geometry
  revision 23
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "CC/geometry"
  cpp_src_dir "CC/geometry"
  cpp_namespace "ionch::geometry"
  python_dir "grs/geometry"
  python_package "grs.geometry"
  classview 321327 "geometry"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 268847 // geometry
    classdiagram 306735 "Geometries"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    sequencediagram 359087 "geometry definitions"
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
      overlapping_bars size A4
    end

    class 446639 "geometry_factory"
      visibility package stereotype "factory"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Objects of this type manage the definition of the system geometries.
 For efficiency the calculation of displacement uses a template
 parameter for whether the displacment should be calculated in a
 periodic system or not.  On the other hand checking the validity
 of a position is delegated to state objects that depend on whether
 the simulation is periodic or not.

 The geometry factory is only used during program initialisation
 at the end of which it will be deleted.  If their have been no regions
 requiring the state_ attribute as their validator_ attribute, then
 this too will be deleted.
"
      attribute 668719 "index"
	private explicit_type "size_t"
	init_value "a_idx"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The global index of the region. It refers to sub-volume of the simulation
 that has a common functional meaning.  Regions with the same index
 usually refer to largely overlapping sub-volumes, only adjusted for the region's
 specie. "
      end

      attribute 723887 "names"
	class_attribute const_attribute private explicit_type "string"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The user-defined names of the regions"
      end

      attribute 723503 "curve_radius_"
	const_attribute private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Radius of the arc joining the channel ends to the outer surface of the protein."
      end

      classrelation 756399 // parent_ (<composition>)
	relation_ref 741935 // <composition>
      end

      attribute 723247 "protein_radius_"
	const_attribute private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Radius of the outer edge of the channel protein"
      end

      attribute 549551 "region_names_"
	private explicit_type "string"
	multiplicity "[constants::nrgnmx]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The user-input names of the regions."
      end

      attribute 723631 "structural_hlength_"
	const_attribute private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  Hard limit for structural ion movement along the z-axis.

  REQUIRE structural_hlength_ <= pore_length_ - vestibule_radius_"
      end

      attribute 549679 "target_particle_number_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " target number of particles for given ionstr and volume

 When set in the input file this number is combined with the
 target ionic strength to define the final cell volume.
 Conversely, when not set this number is determined from the
 specified volume and ionic strength.
 fortran equiv geom::ntrg"
      end

      attribute 549423 "use_boda_bounds_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Do we use old region boundary definition or new one?

 This parameter changes the move geometry limits used when
 generating a trial move.  In the original code these limits lead
 to slow convergence in particle number at the boundaries of the
 channel.  For example the region from <zl(2) to >zl(2)+r was
 considered in the 'ibulk' region so recieved far fewer trials
 than the adjacent >zl(2).  When this is true the boundaries used
 in Boda's version 16 code are followed.  When this is false, new
 move geometry limits are used that overlap adjacent regions and
 smooth out the number of samples per z-axis unit (meaning the
 number of samples per unit volume significantly increases through
 the channel!)
 fortran equiv geom::useold"
      end

      extra_member 340911 "** DONE **"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 719791 "displacement"
	class_operation public explicit_return_type "double"
	nparams 6
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "double"
	  param in name "c" explicit_type "double"
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "z" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract}
{
  return std::sqrt(${name}_sq (a, b, c, x, y, z));
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Cartesian displacement between two points.

 If IsPBC is true this calculates the displacement in a periodic
 cube.  This means calculating the minimum distance of two points
 accounting for periodic boundary conditions.  If IsPBC is false
 it uses the simple differences.

"
      end

      operation 719919 "displacement_sq"
	class_operation public explicit_return_type "double"
	nparams 6
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "double"
	  param in name "c" explicit_type "double"
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "z" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract}
{
  return std::pow(a-x,2)+std::pow(b-y,2)+std::pow(c-z,2);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Square of minimum distance of two points accounting for periodic boundary
 conditions."
      end

      operation 986031 "generate_region"
	stereotype "shared_ptr"
	const public return_type class_ref 526511 // Region
	nparams 3
	  param in name "ireg" explicit_type "int"
	  param in name "a_radius" explicit_type "double"
	  param in name "a_use_zlimit" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}bal::shared_ptr< ${type} > ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}bal::shared_ptr< ${type} > ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  Generate a region object that can categorise and validate particle
  positions."
      end

      operation 723375 "input_help"
	public explicit_return_type "void"
	nparams 2
	  param inout name "a_os" explicit_type "ostream"
	  param in name "msg" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 723631 "interpret_input"
	public explicit_return_type "void"
	nparams 1
	  param inout name "os_log" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Finalise the read process for geometry package

"
      end

      operation 1138991 "pore_radius"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return state_->${name} ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the radius of the pore internal cylinder"
      end

      operation 1138863 "pore_cylinder_hlength"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return state_->${name} ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the half-length of the pore internal cylinder"
      end

      operation 723119 "protein_curve"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
    return curve_radius_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  This is the radius of the arc at the outer edge of the protein."
      end

      operation 723503 "read_input"
	public explicit_return_type "void"
	nparams 3
	  param inout name "fid" explicit_type "istream"
	  param in name "sname" explicit_type "string"
	  param in name "svalue" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Read geometry information section

 @param fid : input unit number
 @param sname : the name value that caused this function to be called
 @param svalue : the value associated with the name (may be mepty string)

 @pre sname=fsgeom"
      end

      operation 722479 "target_particle_number"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return ${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Target number of particles"
      end

      operation 1138735 "vestibule_radius"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return state_->${name} ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the radius of the arc that describes the pore vestibule."
      end

      operation 1053743 "volume_of_rotation"
	class_operation public explicit_return_type "double"
	nparams 5
	  param in name "axial_disp" explicit_type "double"
	  param in name "radial_disp" explicit_type "double"
	  param in name "arc_radius" explicit_type "double"
	  param in name "z_0" explicit_type "double"
	  param in name "z_1" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Calculate the volume of rotation _underneath_ an arc between z_0
 and z_1.

 This calculates the volume of rotation underneath an arc whose
 centrepoint is (axial_disp,radial_disp) and has the given arc_radius.
 The volume is the slice between the z_0 and z_1 .

 \\pre radial_disp > arc_radius
"
      end

      operation 723759 "write_input"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 723247 "zlimit"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
    return structural_hlength_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  The z-coordinate limit for structural ions."
      end

      extra_member 341039 "IN PROGRESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      classrelation 801967 // grid_builders (<directional composition>)
	relation 786607 *-->
	  stereotype "list"
	  a role_name "grid_builders" multiplicity "*" private
	    comment "The set of geometric shape builders available."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 801967 // grid_builders (<directional composition>)
	  b parent class_ref 697647 // SurfaceShapeBuilder
      end

      classrelation 802223 // environment (<composition>)
	relation 786863 *---
	  a role_name "environment" multiplicity "1" private
	    comment "The environment in which you are making patches"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 802223 // environment (<composition>)
	  b role_name "geom" multiplicity "1" private
	    comment "The geometry definition"
	    classrelation_ref 809007 // <composition>
      end
    end

    class 581423 "GeometryValidator"
      visibility package stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " The validator classes are used to verify that a particle is
 in a valid position with respect to the current simulation
 space

 On checking a particle the validator returns one of three
 possible results:

 + Overlap: Particle is not fully in the solvent phase

 + Invalid: Particle is not in the volume that this validator
 is for

 + No-overlap: Particle is valid for this object and is fully
 in the solvent phase.

 RESPONSIBILITY:

 * Check particle is entirely in solvent domain and does not
 overlap any boundaries.

 fortran equiv geom::q4b3p4

 The validator classes are used to verify that a particle does not
 overlap with the boundaries of the simulation cell, protein and
 membrane.  It therefore contains the dimensions of the protein
 donut and the entire MC cell.  It is one of the classes that is
 instantiated by the geometry_factory.

 RESPONSIBILITY:

 * (inherit) Check particle is entirely in solvent domain.  For
 this class the check involves the simulation cell, protein and
 membrane boundaries

 * Instantiate region objects that define geometric sub-spaces of
 the simulation cell.  These region objects are specific to the
 boundary parameters and to a specific particle specie.

 fortran equiv geom::q4b3p4

"
      classrelation 673711 // <generalisation>
	relation 659631 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 673711 // <generalisation>
	  b parent class_ref 275887 // noncopyable
      end

      attribute 723759 "cell_radius_"
	const_attribute private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Radius of the arc joining the channel ends to the outer surface of the protein."
      end

      attribute 722991 "cell_hlength_"
	const_attribute private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  Half length for the z-extent of the simulation cell"
      end

      attribute 722863 "pore_hlength_"
	const_attribute private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  Half length of the central cylinder"
      end

      attribute 723119 "pore_radius_"
	const_attribute private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The radius of the inner cylinder of the pore"
      end

      attribute 723375 "vestibule_radius_"
	const_attribute private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "radius of the arc at the pore entry to bulk zone"
      end

      attribute 549167 "volume_"
	const_attribute private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The total volume occupied by the solvent continuum.  This is the
 total PBC cube volume for bulk simulation.  For channel simulations
 this is the pore volume and the outer region volumes.

 fortran equiv geom::s9d1h4
"
      end

      operation 722863 "cell_hlength"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the half-length of the entire simulation cell"
      end

      operation 722735 "cell_radius"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the radius of the entire simulation cell"
      end

      operation 1053231 "GeometryValidator"
	public explicit_return_type ""
	nparams 6
	  param in name "zl4" explicit_type "double"
	  param in name "rl5" explicit_type "double"
	  param in name "zl1" explicit_type "double"
	  param in name "rl1" explicit_type "double"
	  param in name "rl4" explicit_type "double"
	  param in name "rlvest" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throw} 
${body}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 1052463 "~GeometryValidator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 1130927 "pore_radius"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the radius of the pore internal cylinder"
      end

      operation 1131183 "pore_cylinder_hlength"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the half-length of the pore internal cylinder"
      end

      operation 1138607 "set_volume"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  Set volume  from input cell parameters.

 \\pre volume() = 0"
      end

      operation 1131311 "set_volume"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_volume" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  Set cell parameters once the total volume is known.

 \\pre volume() = 0"
      end

      operation 1131055 "vestibule_radius"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the radius of the arc that describes the pore vestibule."
      end

      operation 978863 "valid_position"
	const public explicit_return_type "bool"
	nparams 3
	  param in name "a_z" explicit_type "double"
	  param in name "a_r" explicit_type "double"
	  param in name "a_radius" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  Is the given particle completely within the volume containing ionic solution.

  \\pre in_region"
      end

      operation 985903 "volume"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return volume_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  The total volume occupied by the solvent continuum.  This includes
  the pore volume and the outer region volumes."
      end

      operation 1053615 "volume_of_rotation"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "radial_disp" explicit_type "double"
	  param in name "arc_radius" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Calculate the volume of rotation _underneath_ an arc.

 This calculates the total volume of rotation underneath an
 arc whose centrepoint is radial_disp away from axis of 
 rotation and with the given arc_radius.  The volume is the
 total volume and so extends along rotation axis by +/-
 arc_radius.

 This is a special case of the more general five parameter
 version where axial_displacement = 0 and z0 = -arc_radius
 and z1 = +arc_radius.

 \\pre radial_disp > arc_radius
"
      end
    end
  end

  deploymentview 268847 "geometry"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 335151 "geometry"
      stereotype "source"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 446639 // geometry_factory
	class_ref 690991 // CylinderRegion
	class_ref 649007 // SplitRegion
	class_ref 648879 // ValidatorRegion
      end
    end
  end
end
