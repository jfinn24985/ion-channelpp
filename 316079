format 75
"trial" // trial
  revision 238
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  stereotype "library"
  cpp_h_dir "trial"
  cpp_src_dir "trial"
  cpp_namespace "trial"
  python_dir "cmc"
  comment "The trial library provides the classes for generating
proposed changes to the ensemble of particles. It has two
major sub-groups of classes: Trial encoding classes and trial
generating classes.

The trial encoding classes (change_set and change_atom) contain
the information about the proposed changes to the ensemble. The
change_atom contains a change to a single particle in the
ensemble. It can encode movement, addition or removal of the
particle. The change_set contains one or more change_atoms
objects for a trial.

The generator classes are more involved as they allow for
selecting trial types in the input file. The main classes are:

* base_choice (and derived classes) generate a specific trial.
Each object generates a single trial with specific a specie
(or for multi-particle trial).

* base_chooser (and derived classes) manage a type of trial.
They examine the simulation and create base_choice objects
that implement the trial for all the appropriate species in
the simulation.

* choice_manager manages the chooser and choice objects for
the simulation.

* choice_meta interprets the input file.


The choice_meta object interprets the input file and generates
base_chooser derived class objects for the trial types
listed in the input file. These chooser objects are added to
a choice_manager object. At the start of the simulation the
chooser objects generate the choice objects that will be used
during the simulation.
"
  classview 525487 "choices"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 358959 // trial class deployment
    classdiagram 259120 "Overview"
      draw_all_relations default hide_attributes yes hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      comment "Over view of the trial library"
      size A4
    end

    classdiagram 570287 "Choices"
      draw_all_relations default hide_attributes default hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    collaborationdiagram 213296 "Generate Choices"
      show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
      comment "Process from input file to choice generation"
      size A4
    end

    classdiagram 180785 "choosers from input"
      draw_all_relations yes hide_attributes yes hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      comment "Classes involved in creating choosers from input file."
      size A4
    end

    classdiagram 274095 "selection"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    classdiagram 239536 "ownership relations"
      draw_all_relations default hide_attributes yes hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 400048 "choice_hash"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Hash for use with choice objects.

 Code should not care about the sort order of the hash. The
 purpose of the hash is to allow hash_tables, sets or maps
 and search methods to be used.
"
      attribute 441136 "key"
	public explicit_type "size_t"
	init_value "0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Empty first byte or specie key"
      end

      attribute 441264 "start"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of particles in change set at start of trial."
      end

      attribute 441392 "finish"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of particles in the change set at end of trial."
      end

      attribute 441520 "subtype"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Trial subtype indicator. Value is user defined."
      end

      operation 747696 "choice_hash"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}: key(0), start(0), finish(0), subtype(0) {}
"
	
	
	
	
      end

      operation 747824 "~choice_hash"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	
	
      end

      operation 747952 "choice_hash"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 400048 // choice_hash
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${)}${volatile}${throw}
: key(${p0}.key)
, start(${p0}.start)
, finish(${p0}.finish)
, subtype(${p0}.subtype)
{}
"
	
	
	
	
      end

      operation 748080 "choice_hash"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 400048 // choice_hash
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: key(${p0}.key)
, start(${p0}.start)
, finish(${p0}.finish)
, subtype(${p0}.subtype)
{}
"
	
	
	
	
      end

      operation 748208 "operator="
	public return_type class_ref 400048 // choice_hash
	nparams 1
	  param in name "source" type class_ref 400048 // choice_hash
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap(${p0});
  return *this;
}
"
	
	
	
	
      end

      operation 748336 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 400048 // choice_hash
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap(this->key, ${p0}.key);
  std::swap(this->start, ${p0}.start);
  std::swap(this->finish, ${p0}.finish);
  std::swap(this->subtype, ${p0}.subtype);
}
"
	
	
	
	
      end

      operation 748592 "choice_hash"
	public explicit_return_type ""
	nparams 4
	  param in name "speciekey" explicit_type "size_t"
	  param in name "start_count" explicit_type "size_t"
	  param in name "finish_count" explicit_type "size_t"
	  param in name "choice_subtype" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}
: key(${p0})
, start(${p1})
, finish(${p2})
, subtype(${p3})
{}
"
	
	
	
	
      end

      extra_member 370608 "friend"
	
	cpp "

  friend class boost::serialization::access;

" ""
	java ""
	php ""
	python ""
	idl ""
      end

      classrelation 506800 // <dependency>
	relation 505904 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 506800 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 783536 "serialize"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & key;
    ar & start;
    ar & finish;
    ar & subtype;
  }
"
	
	
	
	
	comment "We serialize the object using the struct members not the
hash. This should ensure the object has the same logical 
state regardless of endianness."
      end

      operation 755120 "equivalent"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 400048 // choice_hash
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->key == ${p0}.key
	&& this->start == ${p0}.start
	&& this->finish == ${p0}.finish
	&& this->subtype == ${p0}.subtype;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 783664 "match"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 400048 // choice_hash
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->start == ${p0}.start
	&& this->finish == ${p0}.finish
	&& this->subtype == ${p0}.subtype;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Two choice_hash objects match if they are equivalent except for the specie key,
 which may or may not be equivalent."
      end

      operation 755376 "less_than"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 400048 // choice_hash
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->key < ${p0}.key
	|| (this->key == ${p0}.key && (this->start < ${p0}.start
		|| (this->start == ${p0}.start && (this->finish < ${p0}.finish
			|| (this->finish == ${p0}.finish && this->subtype < ${p0}.subtype)))));
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 363440 "operator=="
	
	cpp "friend inline bool operator==(choice_hash const& lhs, choice_hash const&rhs)
{
  return lhs.equivalent(rhs);
}
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 363568 "operator!="
	
	cpp "friend inline bool operator!=(choice_hash const& lhs, choice_hash const&rhs)
{
  return not lhs.equivalent(rhs);
}
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 363696 "operator<"
	
	cpp "friend inline bool operator<(choice_hash const& lhs, choice_hash const&rhs)
{
  return lhs.less_than(rhs);
}
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 363824 "operator>="
	
	cpp "friend inline bool operator>=(choice_hash const& lhs, choice_hash const&rhs)
{
  return not lhs.less_than(rhs);
}
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 363952 "operator>"
	
	cpp "friend inline bool operator>(choice_hash const& lhs, choice_hash const&rhs)
{
  return rhs.less_than(lhs);
}
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 364080 "operator<="
	
	cpp "friend inline bool operator<=(choice_hash const& lhs, choice_hash const&rhs)
{
  return not rhs.less_than(lhs);
}
" ""
	java ""
	php ""
	python ""
	idl ""
      end
    end

    class 1026095 "base_choice"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}(object):
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Objects of this class can be used to generate a trial MC move. 

 Normalization of the probabilities of the choice objects is the 
 responsibility of the user (e.g. a choice_manager object)."
      classrelation 1154607 // <generalisation>
	relation 1117487 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1154607 // <generalisation>
	  b parent class_ref 275887 // noncopyable
      end

      classrelation 427569 // <dependency>
	relation 427057 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 427569 // <dependency>
	  b parent class_ref 134959 // ensemble
      end

      attribute 352561 "key_"
	private type class_ref 400048 // choice_hash
	init_value "ispec"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The ID of the change"
      end

      attribute 375857 "probability_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The chance this choice happens. Normalization of the probabilities
 of the choice objects is the responsibility of the user."
      end

      operation 1964207 "~base_choice"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
      end

      operation 620337 "base_choice"
	public explicit_return_type ""
	nparams 1
	  param in name "key" type class_ref 400048 // choice_hash
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}
: key_ (${p0})
, probability_(0.0)
{}

"
	
	
	
	
	comment " Make a choice without a parent"
      end

      operation 579761 "__init__"
	public explicit_return_type ""
	nparams 3
	  param inout name "self" explicit_type ""
	  param in name "ispec" explicit_type ""
	  param in name "parent" explicit_type ""
	    defaultvalue "None"
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}:
${docstring}super(${class}, ${p0}).__init__()
${body}
"
	
	comment "Python ctor"
      end

      operation 2046767 "base_choice"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
	comment "Make a choice for use in deserialization"
      end

      operation 1964591 "generate"
	abstract cpp_virtual public return_type class_ref 986543 // change_set
	nparams 1
	  param inout name "sys" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::unique_ptr< ${type} > ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "Generate a new change set based on this choice type."
      end

      operation 545584 "permitted"
	const cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "spec" type class_ref 134577 // specie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  return true;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Is the combination of this choice subtype and the given specie
a valid choice?

(default is true)"
      end

      operation 619953 "probability"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->probability_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.probability_"
	
	comment " The chance this choice happens. "
      end

      operation 620081 "set_probability"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->probability_ = value;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.probability_ = value
"
	
	comment "Change probability of this choice"
      end

      operation 146361 "key"
	const public return_type class_ref 400048 // choice_hash
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->key_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.key_
"
	
	comment " This choice ID "
      end

      extra_member 449071 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      classrelation 1169327 // <dependency>
	relation 1132207 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 1169327 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 2036271 "serialize"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & key_;
    ar & probability_;
  }
"
	
	
	
	
      end
    end

    class 1026223 "move_choice"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Objects of this class define an MC move that involves a
displacement within a cube. The displacement is defined by a
displacement of max_displacement by a random number in [0,1)
for each coordinate.

During the non-production phase of the MC simulation the 
object adjusts the max displacement so that only about
50% of trials will be successful.

In the MC literature, the optimisation to 50% success rate is
thought to maximise efficiency of sampling the phase space.
(To many successes mean that the particles remain independent
and to few successes mean that a successful trial is added
many times.)

choice_hash subtype is \"0\", so hash pattern is ( X, 1, 1, 0 )"
      classrelation 1178159 // <generalisation>
	relation 1141039 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1178159 // <generalisation>
	  b parent class_ref 1026095 // base_choice
      end

      classrelation 141489 // <dependency>
	relation 141489 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 141489 // <dependency>
	  b parent class_ref 204975 // bind
      end

      classrelation 1169711 // <dependency>
	relation 1132591 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1169711 // <dependency>
	  b parent class_ref 912431 // access
      end

      attribute 1330735 "delta_"
	private explicit_type "double"
	init_value "delta"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Maximum displacement"
      end

      attribute 183856 "default_delta"
	class_attribute const_attribute private explicit_type "double"
	init_value "0.1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  Default delta value if none is given in the input."
      end

      operation 1965103 "generate"
	public return_type class_ref 986543 // change_set
	nparams 1
	  param inout name "sys" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::unique_ptr< ${type} > ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}std::unique_ptr< ${type} > ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1965999 "max_displacement"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->delta_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.delta_
"
	
      end

      operation 1964719 "move_choice"
	public explicit_return_type ""
	nparams 2
	  param in name "ispec" explicit_type "size_t"
	  param in name "params" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, std::map< ${t1}, ${t1} > const& ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, std::map< ${t1}, ${t1} > const& ${p1}${)}${throw}
: base_choice( trial::choice_hash( ${p0}, 1, 1, 0 ) )
, delta_( default_delta )
{
  ${body}
}
"
	
	
	
	
      end

      operation 579889 "__init__"
	public explicit_return_type ""
	nparams 3
	  param inout name "self" explicit_type ""
	  param in name "ispec" explicit_type ""
	  param in name "delta" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}:
${docstring}super(${class}, ${p0}).__init__(${p1})
${body}
"
	
      end

      operation 2054575 "move_choice"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: base_choice()
, delta_()
{}
"
	
	
	
	
	comment "Default ctor for serialization only"
      end

      operation 1964847 "~move_choice"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
      end

      extra_member 449455 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 2036399 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & boost::serialization::base_object< base_choice >(*this);
    ar & delta_;
  };
"
	
	
	
	
      end
    end

    class 170160 "base_chooser"
      abstract visibility protected 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Generator class for choices.

 The chooser interface has a single virtual function,
 generate_choices. This method creates and adds 
 choice objects to a list of possible trial types.

 Choosers can be set in the input file. This implies that
 they are self describing and can be used to recreate 
 an input file during the simulation. Such object 
 persistence implies they must also be serializable.

 The input key word is given by core::strngs::fstry()
 { default = \"trial\" }"
      classrelation 182320 // <dependency>
	relation 182064 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 182320 // <dependency>
	  b parent class_ref 912431 // access
      end

      attribute 448048 "parameter_set_"
	private explicit_type "string"
	multiplicity "*"
	stereotype "map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}, ${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Non-standard parameters used to generate the choice 
 from the input file.

 This contains all parameters other than \"type\" and \"rate\" that
 where specified in the input file. The chooser generator functions 
 are responsible for checking this parameter set has valid
 entries (it should not be necessary to check the parameters in
 a constructor.)"
      end

      attribute 448304 "rate_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  The relative rate of the generated choices.

  This matches the (normalized) \"rate\" value used in the input file."
      end

      attribute 448176 "type_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  A label for the trial generated by the choice.

  This matches the (normalized) \"type\" label used in the input file."
      end

      operation 819888 "base_chooser"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create empty chooser (mainly for serialization)."
      end

      operation 819760 "base_chooser"
	public explicit_return_type ""
	nparams 3
	  param in name "params" explicit_type "string"
	  param in name "type" explicit_type "string"
	  param in name "rate" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}
: parameter_set_( ${p0} )
, rate_( ${p2} )
, type_( ${p1} )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create chooser from data in input file."
      end

      operation 819632 "base_chooser"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 170160 // base_chooser
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " No Copy contents. BEWARE would cause slicing."
      end

      operation 819504 "base_chooser"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 170160 // base_chooser
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " No Move. BEWARE this would cause slicing."
      end

      operation 819376 "operator="
	private return_type class_ref 170160 // base_chooser
	nparams 1
	  param in name "source" type class_ref 170160 // base_chooser
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " No Assignment. BEWARE this would cause slicing."
      end

      operation 230960 "~base_chooser"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 818864 "description"
	stereotype "OBSOLETE"
	const cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Provide a description of the chooser state."
      end

      operation 230832 "generate_choices"
	abstract const cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "species" type class_ref 134577 // specie
	  param inout name "choices" type class_ref 1026095 // base_choice
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const std::vector< ${t0} >& ${p0}${v0}, boost::ptr_vector< ${t1} >& ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  Generate and add choices to simulator."
      end

      extra_member 470319 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 2086831 "serialize"
	public explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "a_ver" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}template< class ${t0} > ${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ar & parameter_set_;
  ar & type_;
  ar & rate_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Read/write object to an archive."
      end

      operation 240176 "write_document"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "wr" type class_ref 163632 // input_document
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Add an input file section.

 only throw possible should be from os.write() operation

 The output of this factory method is made up like

 chooser
 <call do_write_document>
 end
"
      end
    end

    class 393392 "choice_manager"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Manage objects that generate new trials.

 The objects that generate trials are created in two steps.
 Reading the input file creates 'chooser' objects. These are
 meta-choice objects that act as factories for the 'choice'
 objects. At the beginning of the simulation run, the real
 choice objects are created based on the meta-choice objects
 and the simulation. For example a \"move\" chooser object
 instantiates a \"move_choice\" object for every specie in the
 simulation ensemble.

 The 'chooser' objects contain information about a type of
 trial, for example a \"move\" chooser might represent trials that
 displace a single particle within a small cube. The 'choice'
 objects make this concrete, for example a \"move_choice\" might
 generate trials that displace in a cube a certain specie in
 a certain sub-region of the simulation.

 The 'chooser' objects maintain a probability rate indicating
 the proportion of the number of trials that should be this
 type of trial compared to all trials. The sum of these rates
 need not be unity, the manager will normalize the rates to one
 when needed. A 'choice' object's probability rate indicates
 this specific object's chance of generating a trial. In this
 case the sum of the choice objects' rates will be unity.
 This is enforced by this manager object when it generates
 the choice list.

 During a simulation the list of choice objects is used to
 select the current trial move. Before the simulation the list
 is randomised. On a trial a number is generated between 0 and
 1 and the choice list is walked to find a choice object. At
 each step the current choice's probability is subtracted from
 the generated number and if the number is now less than 0
 the choice object is used.
"
      classrelation 493488 // choosers_ (<directional composition>)
	relation 492592 *-->
	  stereotype "ptr_vector"
	  a role_name "choosers_" multiplicity "*" private
	    comment " Reading the input file creates this 'chooser' list. These are
 meta-choice objects that act as factories for the 'choice'
 objects. The 'chooser' objects contain information about a
 type of trial, for example a \"move\" chooser might represent
 trials that displace a single particle within a small cube,
 and a probability rate indicating the proportion of the
 number of trials that should be this type of trial compared
 to all trials. The sum of these rates need not be unity, the
 manager will normalize the rates to one when needed. At the
 start of a simulation the list of choice objects is generated
 from this list of choosers.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    classrelation_ref 493488 // choosers_ (<directional composition>)
	  b parent class_ref 170160 // base_chooser
      end

      classrelation 493616 // choices_ (<directional composition>)
	relation 492720 *-->
	  stereotype "ptr_vector"
	  a role_name "choices_" multiplicity "*" private
	    comment " The list of 'choice' objects that generate trials. A 'choice'
 object's probability rate indicates this specific object's
 chance of generating a trial. The sum of the choice objects'
 rates in this list will be unity. During a simulation this
 list of choice objects is used to select the current trial
 move. Before the simulation the list is randomised. On a trial
 a number is generated between 0 and 1 and the choice list
 is walked to find a choice object. At each step the current
 choice's probability is subtracted from the generated number
 and if the number is now less than 0 the choice object is used.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    classrelation_ref 493616 // choices_ (<directional composition>)
	  b parent class_ref 1026095 // base_choice
      end

      class 399920 "const_iterator"
	visibility package stereotype "typedef" base_type class_ref 1026095 // base_choice
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment " Constant iterator over choice list"
      end

      operation 745776 "choice_manager"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
      end

      operation 745904 "~choice_manager"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}; = default;"
	
	
	
	
      end

      operation 746032 "choice_manager"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 393392 // choice_manager
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;
"
	
	
	
	
	comment "No move"
      end

      operation 746160 "choice_manager"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 393392 // choice_manager
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	
	
	comment "No copy"
      end

      operation 746288 "operator="
	private return_type class_ref 393392 // choice_manager
	nparams 1
	  param in name "source" type class_ref 393392 // choice_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	
	
	comment "No assignment"
      end

      operation 746672 "add_chooser"
	public explicit_return_type "void"
	nparams 1
	  param in name "choice" type class_ref 170160 // base_chooser
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}std::unique_ptr< ${t0} > ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}std::unique_ptr< ${t0} > ${p0}${)}${const}${volatile}${throw}${staticnl}
{
   this->choosers_.push_back( ${p0}.get() );
   ${p0}.release();
}
"
	
	
	
	
	comment " Transfer ownership of chooser 'choice' into our chooser list.

"
      end

      operation 747440 "begin"
	stereotype "const"
	const public return_type class_ref 399920 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->choices_.${name}();
}
"
	
	
	
	
	comment " Iterator over the choice list."
      end

      operation 746544 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment " Details about the current choosers to be written to the
 log at the start of the simulation."
      end

      operation 747056 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->choosers_.empty();
}
"
	
	
	
	
	comment " Do we have and _choosers_?"
      end

      operation 747568 "end"
	stereotype "const"
	const public return_type class_ref 399920 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->choices_.${name}();
}
"
	
	
	
	
      end

      operation 746800 "generate"
	public return_type class_ref 986543 // change_set
	nparams 2
	  param inout name "sys" type class_ref 1129135 // simulator
	  param in name "selector" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::unique_ptr< ${type} > ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}std::unique_ptr< ${type} > ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Select a choice based on 'selector' and generate a new change set.
"
      end

      operation 746928 "prepare"
	public explicit_return_type "void"
	nparams 1
	  param in name "species" type class_ref 134577 // specie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const std::vector< ${t0} >& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const std::vector< ${t0} >& ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Create choice list from choosers.  Resets the choice list before
 generating a new list."
      end

      operation 747312 "write_document"
	public explicit_return_type "void"
	nparams 1
	  param inout name "wr" type class_ref 163632 // input_document
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment " Write choosers to an input document"
      end
    end

    class 170288 "chooser"
      visibility package 
      nformals 1
      formal name "Choice" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 174768 // <generalisation>
	relation 174512 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 174768 // <generalisation>
	  b parent class_ref 170160 // base_chooser
      end

      class 432816 "chooser_type"
	visibility package stereotype "typedef" explicit_base_type "Choice"
	cpp_decl "${comment}typedef typename ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment " The \"choice\" class template type."
      end

      operation 232240 "generate_choices"
	const cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "species" type class_ref 134577 // specie
	  param inout name "choices" type class_ref 1026095 // base_choice
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const std::vector< ${t0} >& ${p0}${v0}, boost::ptr_vector< ${t1} >& ${p1}${v1}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const std::vector< ${t0} >& ${p0}, boost::ptr_vector< ${t1} >& ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Generate and add choices to list.

 The sum of probability for the added choices
 must equal the rate attribute of the chooser. "
      end

      operation 231216 "chooser"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 231984 "chooser"
	public explicit_return_type ""
	nparams 3
	  param in name "params" explicit_type "string"
	  param in name "type" explicit_type "string"
	  param in name "rate" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}
: base_chooser( ${p0}, ${p1}, ${p2} )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 231344 "~chooser"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 231472 "chooser"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 170288 // chooser
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: base_chooser( ${p0} )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 231728 "chooser"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 170288 // chooser
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: base_chooser( std::move( ${p0}) )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 231600 "operator="
	public return_type class_ref 170288 // chooser
	nparams 1
	  param in name "source" type class_ref 170288 // chooser
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 231856 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 170288 // chooser
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
   this->base_chooser::swap( ${p0} );
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 232112 "make_chooser"
	class_operation public return_type class_ref 170160 // base_chooser
	nparams 3
	  param in name "params" explicit_type "string"
	  param in name "type" explicit_type "string"
	  param in name "rate" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::unique_ptr< ${type} > ${name}${(}const std::map< ${t0}, ${t0} >& ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}std::unique_ptr< ${type} > ${class}::${name}${(}const std::map< ${t0}, ${t0} >& ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  Function to be used to instantiate chooser objects from input file."
      end

      classrelation 182448 // <dependency>
	relation 182192 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 182448 // <dependency>
	  b parent class_ref 912431 // access
      end

      extra_member 470447 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 819120 "serialize"
	public explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "a_ver" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}template< class ${t0} > ${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ar & boost::serialization::base_object< trial::base_chooser >(*this);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Read/write object to an archive."
      end
    end

    class 183984 "chooser_by_simulator"
      visibility package 
      nformals 2
      formal name "Choice" type "class" explicit_default_value ""
        explicit_extends ""
      formal name "Sim" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Template derived class to be used with choice types that take a specific simulator
 subtype in their constructor."
      classrelation 190128 // <generalisation>
	relation 189872 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 190128 // <generalisation>
	  b parent class_ref 170160 // base_chooser
      end

      attribute 214064 "parameter_set_"
	private explicit_type "string"
	multiplicity "*"
	stereotype "map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}, ${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Non-standard parameters used to generate the choice 
 from the input file."
      end

      attribute 214192 "type_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  A label for the trial generated by the choice."
      end

      attribute 214320 "rate_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  The relative rate of the generated choices."
      end

      operation 253232 "description"
	const cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Provide a description of the chooser state."
      end

      operation 253360 "do_write_document"
	preserve_cpp_body_indent const private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Add derived content to input file section wr[ix]. 

 only throw possible should be from os.write() operation"
      end

      operation 253488 "generate_choices"
	const cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "sim" type class_ref 1129135 // simulator
	  param inout name "choices" type class_ref 1026095 // base_choice
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, boost::ptr_vector< ${t1} >& ${p1}${v1}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, boost::ptr_vector< ${t1} >& ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  Generate and add choices to simulator."
      end

      operation 253616 "chooser_by_simulator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 253744 "chooser_by_simulator"
	public explicit_return_type ""
	nparams 3
	  param in name "params" explicit_type "string"
	  param in name "type" explicit_type "string"
	  param in name "rate" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}
: parameter_set_( ${p0} )
, type_( ${p1} )
, rate_( ${p2} )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 253872 "~chooser_by_simulator"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 254000 "chooser_by_simulator"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 183984 // chooser_by_simulator
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: parameter_set_(  ${p0}.parameter_set_ )
, type_(  ${p0}.type_ )
, rate_(  ${p0}.rate_ )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 254128 "chooser_by_simulator"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 183984 // chooser_by_simulator
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: parameter_set_(  std::move( ${p0}.parameter_set_ ) )
, type_(  std::move( ${p0}.type_ ) )
, rate_(  std::move( ${p0}.rate_ ) )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 254256 "operator="
	public return_type class_ref 183984 // chooser_by_simulator
	nparams 1
	  param in name "source" type class_ref 183984 // chooser_by_simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 254384 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 183984 // chooser_by_simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
   std::swap( parameter_set_, ${p0}.parameter_set_ );
   std::swap( type_, ${p0}.type_ );
   std::swap( rate_, ${p0}.rate_ );
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 254512 "make_chooser"
	class_operation public explicit_return_type "void"
	nparams 4
	  param in name "params" explicit_type "string"
	  param in name "type" explicit_type "string"
	  param in name "rate" explicit_type "double"
	  param inout name "sim" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const std::map< ${t0}, ${t0} >& ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const std::map< ${t0}, ${t0} >& ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} & ${p3}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  Function to add move choice objects to the simulation."
      end

      classrelation 190256 // <dependency>
	relation 190000 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 190256 // <dependency>
	  b parent class_ref 912431 // access
      end

      extra_member 171184 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 254640 "serialize"
	public explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "a_ver" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}template< class ${t0} > ${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ar & boost::serialization::base_object< trial::base_chooser >(*this);
  ar & parameter_set_;
  ar & type_;
  ar & rate_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Read/write object to an archive."
      end
    end

    class 386864 "adjust_move_displacement_sampler"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Adjust max displacement of move choice based on trial success rate."
      operation 1965615 "sample"
	public explicit_return_type "void"
	nparams 2
	  param in name "sys" type class_ref 1129135 // simulator
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Adjusts maximum displacement such that about 50% of the moves will be accepted
"
      end

      operation 204848 "make_chooser"
	class_operation public explicit_return_type "void"
	nparams 4
	  param in name "params" explicit_type "string"
	  param in name "rate" explicit_type "double"
	  param in name "type" explicit_type "string"
	  param inout name "sim" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const std::map< ${t0}, ${t0} >& ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const std::map< ${t0}, ${t0} >& ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} & ${p3}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  Function to add move choice objects to the simulation."
      end
    end

    class 426288 "region"
      visibility package stereotype "pattern"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Pattern for template region type to be used by choice classes."
      operation 805168 "volume"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the volume of the region"
      end

      operation 805296 "accessible_volume"
	public explicit_return_type "double"
	nparams 1
	  param in name "radius" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the volume of the region accessible to a 
 sphere of the given radius."
      end

      operation 805424 "generate_coordinate"
	public return_type class_ref 986799 // coordinate
	nparams 1
	  param in name "rnd" type class_ref 463407 // random_distribution
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create a random position inside the region."
      end

      operation 805552 "contains"
	public explicit_return_type "bool"
	nparams 1
	  param inout name "a_point" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Check if point is in a region. For regions with
 periodicity it is permissible to adjust 'a_point' to be
 inside the primary period region.
"
      end
    end
  end

  classview 551727 "Choice Metas"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 358959 // trial class deployment
    classdiagram 630575 "choice meta from input file"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 1143471 "choice_meta"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Interpreter of choice definitions in the input file.

 Selecting choice types for different simulation types is
 done by setting appropriate functors in the type_to_object
 map through the add_trial_type method.

 It is anticipated that only one of these objects will be 
 created. Creating multiple objects of this type is undefined."
      classrelation 1313071 // <generalisation>
	relation 1274543 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1313071 // <generalisation>
	  b parent class_ref 1082671 // input_base_meta
      end

      class 1143855 "choice_generator_fn"
	visibility package stereotype "typedef" base_type class_ref 156336 // function3
	nactuals 4
	actual class class_ref 156336 // function3
	  rank 0 explicit_value "std::unique_ptr< base_chooser >"
	actual class class_ref 156336 // function3
	  rank 1 explicit_value "std::map< std::string, std::string >"
	actual class class_ref 156336 // function3
	  rank 2 explicit_value "std::string"
	actual class class_ref 156336 // function3
	  rank 3 explicit_value "double"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	classrelation 520496 // <realization>
	  relation 519600 -_-|>
	    a public
	      cpp default "${type}"
	      python "${type}"
	      classrelation_ref 520496 // <realization>
	    b parent class_ref 156336 // function3
	end
      end

      class 156208 "anon_choice_options"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum
 {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl "${comment}${visibility}final class ${name} {
${items}}
"
	python_decl "class ${name}:
${docstring}${members}
"
	idl_decl "${comment}enum ${name} {
${items}};
"
	explicit_switch_type ""
	
	attribute 183472 "CHOICE_RATE"
	  public type class_ref 156208 // anon_choice_options
	  init_value "0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Trial choice relative rate"
	end

	attribute 183600 "CHOICE_TYPE"
	  public type class_ref 156208 // anon_choice_options
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Choice type"
	end

	attribute 199088 "CHOICE_TAG_COUNT"
	  public type class_ref 156208 // anon_choice_options
	  init_value "2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " The number of required tags  in choice input section."
	end
      end

      class 446000 "choice_definition"
	abstract visibility package stereotype "IDEA"
	cpp_decl ""
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	comment " IDEA"
	attribute 468272 "label"
	  public explicit_type "string"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Chooser sub-type label"
	end

	attribute 468144 "choice_gen_fn_"
	  public type class_ref 1143855 // choice_generator_fn
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Generate a new chooser object."
	end

	attribute 468400 "suboptions_"
	  public explicit_type "string"
	  multiplicity "*"
	  stereotype "map"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}, ${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${stereotype}()
"
	  idl_decl ""
	  comment " Suboption labels and help strings"
	end

	operation 906672 "add_documentation"
	  abstract const cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param inout name "helper" type class_ref 1004335 // input_help
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment " "
	end

	operation 906800 "operator<"
	  friend public explicit_return_type "bool"
	  nparams 2
	    param in name "lhs" type class_ref 446000 // choice_definition
	    param in name "rhs" type class_ref 446000 // choice_definition
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return lhs.label < rhs.label;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment " Ordering operation."
	end

	operation 907056 "operator<"
	  friend public explicit_return_type "bool"
	  nparams 2
	    param in name "lhs" type class_ref 446000 // choice_definition
	    param in name "label" explicit_type "string"
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return lhs.label < label;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment " Label-based ordering operation."
	end

	operation 906928 "operator=="
	  friend public explicit_return_type "bool"
	  nparams 2
	    param in name "lhs" type class_ref 446000 // choice_definition
	    param in name "label" explicit_type "string"
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return lhs.label == label;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment " Label comparison operation."
	end
      end

      classrelation 520368 // manager_ (<directional composition>)
	relation 519472 *-->
	  stereotype "shared_ptr"
	  a role_name "manager_" multiplicity "0..1" private
	    comment "The trial generation object"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 520368 // manager_ (<directional composition>)
	  b parent class_ref 393392 // choice_manager
      end

      attribute 1444655 "parameter_set_"
	private explicit_type "string"
	multiplicity "*"
	stereotype "map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}, ${type} > ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Non-standard parameters of the currently processing trial section."
      end

      attribute 183344 "missing_required_tags_"
	private explicit_type "CHOICE_TAG_COUNT"
	multiplicity "*"
	stereotype "bitset"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Flags to check all options have been seen in input file. 
 (\"type\" and \"rate\")"
      end

      attribute 1444399 "rate_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The trial \"rate\" of the currently processing trial section."
      end

      classrelation 567600 // type_to_object_2 (<directional composition>)
	relation 566704 *-->
	  stereotype "IDEA"
	  a role_name "type_to_object_2" multiplicity "*" private
	    comment " subtype generation table."
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 567600 // type_to_object_2 (<directional composition>)
	  b parent class_ref 446000 // choice_definition
      end

      classrelation 1313583 // type_to_object_ (<directional composition>)
	relation 1275055 *-->
	  stereotype "map"
	  a role_name "type_to_object_" multiplicity "*" private
	    comment " Map of \"type\" parameters to chooser classes."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${association}, ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1313583 // type_to_object_ (<directional composition>)
	  b parent class_ref 1143855 // choice_generator_fn
	  association_explicit_type "string"
      end

      attribute 1444527 "type_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The trial \"type\" parameter value of the currently processing section."
      end

      operation 826416 "add_trial_type"
	public explicit_return_type "void"
	nparams 2
	  param in name "trial_label" explicit_type "string"
	  param in name "ctor" type class_ref 1143855 // choice_generator_fn
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add ctor for input \"trial\" section with \"type = [trial_label]\" 

 \\pre not has_trial_type( trial_label )
 \\post has_trial_type( trial_label )"
      end

      operation 2164655 "choice_meta"
	public explicit_return_type ""
	nparams 1
	  param inout name "man" type class_ref 393392 // choice_manager
	cpp_decl "    ${comment}${inline}${name}${(}boost::shared_ptr< ${t0} > ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}boost::shared_ptr< ${t0} > ${p0}${)}${throw} 
: input_base_meta( core::strngs::fstry(), true, true )
, manager_( ${p0} )
, parameter_set_()
, missing_required_tags_(std::bitset< CHOICE_TAG_COUNT >( true ))
, rate_()
, type_()
{}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " "
      end

      operation 2164783 "~choice_meta"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 833200 "add_documentation"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "helper" type class_ref 1004335 // input_help
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " "
      end

      operation 204592 "do_read_entry"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "reader" type class_ref 313392 // input_base_reader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Read an entry in the input file. Return true if the entry was processed.

 Throws an error if input file is incorrect (using UTILITY_INPUT macro)"
      end

      operation 204720 "do_read_end"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Perform checks at the end of reading a section. Then create a chooser
 object and add it to the choice manager. Resets the
 meta object state ready for the next 'trial' input section.

 Throws an error if input file is incorrect (using UTILITY_INPUT macro)"
      end

      operation 826544 "has_trial_type"
	public explicit_return_type "bool"
	nparams 1
	  param in name "trial_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Is there a ctor to match input \"trial\" section with
 \"type = [trial_label]\""
      end
    end
  end

  deploymentview 358959 "trial class deployment"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 162352 "base_chooser"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manual include
#include \"core/strngs.hpp\"
// -
${namespace_start}
${members}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_GUID(trial::base_chooser, \"trial::base_chooser\");"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 170160 // base_chooser
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 681391 "choice"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
// Default inc
#include \"utility/config.hpp\"
#include <map>
// End
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manuals
#include \"core/strngs.hpp\"
#include \"particle/ensemble.hpp\"
#include \"platform/simulator.hpp\"
// -
${namespace_start}
${members}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_GUID(trial::base_choice, \"trial::base_choice\");


"
      python_src "${comment}
${definition}"
      associated_classes
	class_ref 1026095 // base_choice
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 410544 "choice_hash"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

// As hash is a union we need to tell the serialization system that
// it is serializable.
//BOOST_CLASS_IMPLEMENTATION(trial::choice_hash,boost::serialization::object_serializable)
#endif
"
      associated_classes
	class_ref 400048 // choice_hash
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 397488 "choice_manager"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manuals
#include \"core/strngs.hpp\"

#include <boost/format.hpp>
// -
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 393392 // choice_manager
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 789679 "choice_meta"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manual incls
#include <sstream>
#include <bitset>
#include \"core/strngs.hpp\"
#include \"core/input_help.hpp\"
#include \"utility/utility.hpp\"
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 1143471 // choice_meta
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 162224 "chooser"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
// Manual includes
#include \"core/strngs.hpp\"
#include \"utility/fuzzy_equals.hpp\"

#include <boost/tokenizer.hpp>
// -
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 170288 // chooser
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 169136 "chooser_by_simulator"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 183984 // chooser_by_simulator
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 128816 "move_choice"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#include <boost/serialization/export.hpp>

BOOST_CLASS_EXPORT_KEY(trial::move_choice);
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manual includes
#include \"core/strngs.hpp\"
#include \"particle/ensemble.hpp\"
#include \"trial/chooser.hpp\"
// -
${namespace_start}
${members}
${namespace_end}

BOOST_CLASS_EXPORT_IMPLEMENT(trial::move_choice);"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 1026223 // move_choice
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 694959 "libionch_trial"
      stereotype "library"
      associated_artifacts
	artifact_ref 128816 // move_choice
	artifact_ref 162352 // base_chooser
	artifact_ref 681391 // choice
	artifact_ref 789679 // choice_meta
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end
  end

  package_ref 426031 // trial_test
end
