format 75
"observable" // observable
  revision 213
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  stereotype "library"
  cpp_h_dir "observable"
  cpp_src_dir "observable"
  cpp_namespace "observable"
  python_dir "cmc"
  classview 328111 "samplers"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 341807 // Observer deployment
    classdiagram 298800 "parallel sampling"
      draw_all_relations default hide_attributes yes hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    collaborationdiagram 298928 "Parallel sampling"
      show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
      size A4
    end

    classdiagram 630959 "Base observable hierachy"
      draw_all_relations default hide_attributes no hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    classdiagram 134705 "Outcome overview"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    classdiagram 491695 "Trial sampler classes"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    classdiagram 206897 "Class attribute relations"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    classdiagram 246064 "lifetime management"
      draw_all_relations default hide_attributes default hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 340656 "report_manager"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Manage statistical accumlators

Design concept.

The report manager provides an interface between the statistics samplers
and the rest of the simulation.  Samplers register to collect data in
either the inner loop (tracked_observable) or outer loop 
(base_observable). During the simulation the simulator
calls on_trial_end and on_sample of the manager, which then calls the
registered samplers. At some point the simulator calls on_report which
signals the samplers to save aggregated data to permanent storage. The
report_manager manages the connection between the samplers and storage.

The system uses shared pointers to the samplers. On checkpointing the
report_manager will pass on write_document and serialize calls to the
samplers. This ensures that any samplers not shared with another object
will be correctly saved.
"
      classrelation 391728 // <dependency>
	relation 391216 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 391728 // <dependency>
	  b parent class_ref 912431 // access
      end

      classrelation 411696 // variables_ (<directional aggregation>)
	relation 411056 o-->
	  stereotype "vector"
	  a role_name "variables_" multiplicity "*" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${association}< ${type} > > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 411696 // variables_ (<directional aggregation>)
	  b parent class_ref 353840 // tracked_observable
	  association_explicit_type "shared_ptr"
      end

      classrelation 904496 // samples_ (<directional aggregation>)
	relation 903600 o-->
	  stereotype "vector"
	  a role_name "samples_" multiplicity "*" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${association}< ${type} > > ${name}${value};"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 904496 // samples_ (<directional aggregation>)
	  b parent class_ref 1144367 // base_observable
	  association_explicit_type "shared_ptr"
      end

      classrelation 391856 // sink_ (<directional composition>)
	relation 391344 *-->
	  stereotype "shared_ptr"
	  a role_name "sink_" multiplicity "1..*" private
	    comment "Manages serialization of output data to long-term storage."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 391856 // sink_ (<directional composition>)
	  b parent class_ref 313520 // base_sink
      end

      extra_member 316976 "LIFETIME"
	
	cpp "// LIFETIME METHODS

" "// LIFETIME METHODS

"
	java ""
	php ""
	python ""
	idl ""
      end

      operation 614064 "report_manager"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
${body}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 614192 "~report_manager"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 614320 "report_manager"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 340656 // report_manager
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 614448 "report_manager"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 340656 // report_manager
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 614576 "operator="
	private return_type class_ref 340656 // report_manager
	nparams 1
	  param in name "source" type class_ref 340656 // report_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 606128 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  // data_source_ not serialized.
  ar & this->variables_;
  ar & this->samples_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 317104 "MODIFY"
	
	cpp "// MODIFY METHODS

" "// MODIFY METHODS

"
	java ""
	php ""
	python ""
	idl ""
      end

      operation 672176 "add_sample"
	public explicit_return_type "void"
	nparams 1
	  param in name "var" type class_ref 1144367 // base_observable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}boost::shared_ptr< ${t0} > ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}boost::shared_ptr< ${t0} > ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "add sampled variable to list.

/pre not has_sample(var.label())"
      end

      operation 650544 "add_tracked"
	public explicit_return_type "void"
	nparams 1
	  param inout name "var" type class_ref 353840 // tracked_observable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}boost::shared_ptr< ${t0} > ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}boost::shared_ptr< ${t0} > ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "add variable to list.

/pre not has_tracked(var.label())"
      end

      operation 605232 "on_trial_end"
	public explicit_return_type "void"
	nparams 1
	  param in name "trial" type class_ref 986543 // change_set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Accumulate data after every trial"
      end

      operation 605360 "on_sample"
	public explicit_return_type "void"
	nparams 3
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Accumulate data after a sequence of trials"
      end

      operation 607024 "on_report"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get all samplers to save statistical data to permanent storage"
      end

      operation 606000 "prepare"
	const public explicit_return_type "void"
	nparams 3
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Get all samplers to prepare themselves for a simulation. Check for
 connection to signals of interest and connect if necessary.
"
      end

      operation 679472 "remove_sample"
	public explicit_return_type "void"
	nparams 1
	  param inout name "var" type class_ref 1144367 // base_observable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}boost::shared_ptr< ${t0} > & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}boost::shared_ptr< ${t0} > & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " remove sampled variable from list.

 \\pre has_sample(var->get_label()) and get_sample(var->get_label()).get() == var.get()
 \\post not has_sample(var->get_label())"
      end

      operation 650672 "remove_tracked"
	public explicit_return_type "void"
	nparams 1
	  param inout name "var" type class_ref 353840 // tracked_observable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}boost::shared_ptr< ${t0} > & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}boost::shared_ptr< ${t0} > & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " remove tracked variable from list.

 \\pre has_tracked(var->get_label()) and get_tracked(var->get_label()).get() == var.get()

 \\post not has_sample(var->get_label())"
      end

      operation 606384 "set_sink"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sink" type class_ref 313520 // base_sink
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}boost::shared_ptr< ${t0} > ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->sink_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the object that manages where the output data goes. Silently
 overwrites any previous value."
      end

      extra_member 317232 "ACCESS"
	
	cpp "// ACCESSOR METHODS

" "// ACCESSOR METHODS

"
	java ""
	php ""
	python ""
	idl ""
      end

      operation 605744 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get all samplers to write their descriptions."
      end

      operation 642352 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->variables_.empty() and this->samples_.empty();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Are there any observables?"
      end

      operation 606256 "get_sink"
	const public return_type class_ref 313520 // base_sink
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return *(this->sink_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get reference to the data output sink"
      end

      operation 672304 "get_sample"
	public return_type class_ref 1144367 // base_observable
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Attempt to retrieve a variable by label.

/pre has_sample"
      end

      operation 732464 "get_sample"
	stereotype "const"
	const public return_type class_ref 1144367 // base_observable
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Attempt to retrieve a variable by label.

/pre has_sample"
      end

      operation 650288 "get_tracked"
	public return_type class_ref 353840 // tracked_observable
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Attempt to retrieve a variable by label.

/pre has_tracked"
      end

      operation 732592 "get_tracked"
	stereotype "const"
	const public return_type class_ref 353840 // tracked_observable
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Attempt to retrieve a variable by label.

/pre has_tracked"
      end

      operation 672432 "has_sample"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Attempt to retrieve a variable by label

/nothrow"
      end

      operation 650416 "has_tracked"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Attempt to retrieve a variable by label

/nothrow"
      end

      operation 642480 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->variables_.size() + this->samples_.size();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " How many observables?"
      end

      operation 605616 "write_document"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "wr" type class_ref 163632 // input_document
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Get all samplers to write their input information."
      end

      operation 679600 "get_sample_"
	private return_type class_ref 1144367 // base_observable
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::vector< boost::shared_ptr< ${type} > >::iterator ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}std::vector< boost::shared_ptr< ${type} > >::iterator ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Retrieve iterator pointing to sampled variable
with the given name or \"end\".

/nothrow
"
      end

      operation 679856 "get_sample_"
	stereotype "const"
	const private return_type class_ref 1144367 // base_observable
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::vector< boost::shared_ptr< ${type} > >::const_iterator ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}std::vector< boost::shared_ptr< ${type} > >::const_iterator ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Retrieve iterator pointing to sampled variable
with the given name or \"end\".

/nothrow
"
      end

      operation 679728 "get_tracked_"
	private return_type class_ref 353840 // tracked_observable
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::vector< boost::shared_ptr< ${type} > >::iterator ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}std::vector< boost::shared_ptr< ${type} > >::iterator ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Retrieve iterator pointing to tracked variable
with the given name or \"end\".

/nothrow
"
      end

      operation 679984 "get_tracked_"
	stereotype "const"
	const private return_type class_ref 353840 // tracked_observable
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::vector< boost::shared_ptr< ${type} > >::const_iterator ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}std::vector< boost::shared_ptr< ${type} > >::const_iterator ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Retrieve iterator pointing to tracked variable
with the given name or \"end\".

/nothrow
"
      end
    end

    class 1144367 "base_observable"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Perform sampling of a simulation that leads to some estimated
result. 

Standard operation:
- create sampler and add to simulator : sim.add_observable(...);
- after input file has been reador the system is deserialized 
the owning simulator calls enrol : obs.enrol(sim); This 
should register any signals produced by the sampler (and 
optionally connect to simulator signals).
- before every simulation sequence the simulator object
calls 'prepare' on its children. The children should connect
to signals of interest to them and setup internal state in
preparation for the simulation. At this point the sampler
should have connected to all signals of interest.
- simulator runs the simulation, issuing 'inner-loop',
'outer-loop', 'report' and 'checkpoint' signals.
- at any point the simulator may call serialize to 
archive the simulation.
- destructor is called.


The observable_meta class and make_XXX methods for a particular
derived class are responsible for determining if an observable 
is useable with the given simulation type.  This mechanism
allows make_XXX methods to choose between particular derived 
types that sample the same 'observation' in different
simulation subtypes (bulk, channel etc).
"
      classrelation 438960 // <dependency>
	relation 438320 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 438960 // <dependency>
	  b parent class_ref 634799 // any
      end

      classrelation 1315247 // <dependency>
	relation 1276719 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 1315247 // <dependency>
	  b parent class_ref 912431 // access
      end

      extra_member 530352 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 496815 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 2146735 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 2175151 "~base_observable"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}  = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 664496 "base_observable"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 664624 "base_observable"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 1144367 // base_observable
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 664752 "base_observable"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 1144367 // base_observable
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 664880 "operator="
	private return_type class_ref 1144367 // base_observable
	nparams 1
	  param in name "source" type class_ref 1144367 // base_observable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 530224 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 487217 "description"
	abstract const cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Log message descibing the observable and its parameters"
      end

      operation 664368 "get_label"
	abstract const cpp_virtual public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "The human readable label of this variable.

General format will be \"{type-label}[:obj-label]\"

For derived classes that will only have a single 
sampler instantiated, this label will be the same
as the sampler type-label in the input document."
      end

      operation 650160 "get_value"
	abstract const cpp_virtual public explicit_return_type "boost::any"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Retrieve the current value of the variable."
      end

      operation 225585 "prepare"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 4
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	  param in name "sman" type class_ref 340656 // report_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Prepare the sampler for use with the given simulator. Reset
 all data."
      end

      operation 607152 "on_report"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param inout name "out" explicit_type "ostream"
	  param inout name "sink" type class_ref 313520 // base_sink
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Save statistical data to output log and permanent storage"
      end

      operation 607280 "on_sample"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 3
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Accumulate data after a sequence of trials."
      end

      operation 2166319 "write_document"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "wr" type class_ref 163632 // input_document
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Add an input file section to wr.

 Output of this method is something like

 sampler
 <call do_write_input_section>
 end
"
      end

      operation 216752 "do_write_document"
	abstract const cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Update wr[ix] section with information from the derived class."
      end
    end

    class 353840 "tracked_observable"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "A dependent variable that may obtain a new value after every 
trial."
      classrelation 424752 // <generalisation>
	relation 424112 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 424752 // <generalisation>
	  b parent class_ref 1144367 // base_observable
      end

      classrelation 425008 // <dependency>
	relation 424368 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 425008 // <dependency>
	  b parent class_ref 912431 // access
      end

      extra_member 529968 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 657200 "tracked_observable"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 657328 "~tracked_observable"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 657456 "tracked_observable"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 353840 // tracked_observable
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 657584 "tracked_observable"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 353840 // tracked_observable
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 657712 "operator="
	private return_type class_ref 353840 // tracked_observable
	nparams 1
	  param in name "source" type class_ref 353840 // tracked_observable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 323760 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 649264 "serialize"
	stereotype "template"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ${p0} & boost::serialization::base_object< base_observable >(*this);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Save variable to checkpoint"
      end

      extra_member 530096 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1317424 "on_trial_end"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "trial" type class_ref 986543 // change_set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Update variable after every trial."
      end
    end

    class 360496 "sampled_observable"
      abstract visibility package stereotype "deprecated"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "A dependent variable that is sampled from the simulation at regular 
intervals.

The samping interval should have been chosen by the simulator to 
enhance the independence of successive samples."
      classrelation 424880 // <generalisation>
	relation 424240 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 424880 // <generalisation>
	  b parent class_ref 1144367 // base_observable
      end

      classrelation 425136 // <dependency>
	relation 424496 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 425136 // <dependency>
	  b parent class_ref 912431 // access
      end

      extra_member 530608 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 665520 "sampled_observable"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 665392 "~sampled_observable"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 665264 "sampled_observable"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 360496 // sampled_observable
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 665136 "sampled_observable"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 360496 // sampled_observable
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 665008 "operator="
	private return_type class_ref 360496 // sampled_observable
	nparams 1
	  param in name "source" type class_ref 360496 // sampled_observable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 330288 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 665648 "serialize"
	stereotype "template"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ${p0} & boost::serialization::base_object< base_observable >(*this);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Save variable to checkpoint"
      end

      extra_member 530480 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end
    end

    activity 128177 "ALPHA"
    end

    class 380208 "acceptance_observable"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 466480 // <generalisation>
	relation 465584 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 466480 // <generalisation>
	  b parent class_ref 353840 // tracked_observable
      end

      class 605360 "key_type"
	visibility package stereotype "typedef" base_type class_ref 400048 // change_hash
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment " Map key type"
      end

      class 605488 "estimater_type"
	visibility package stereotype "typedef" base_type class_ref 176049 // estimater
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment " Type used to manage mean and variance."
      end

      attribute 644784 "data_"
	private type class_ref 176049 // estimater
	multiplicity "*"
	stereotype "map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< particle::change_hash, std::pair< ${type}, ${type} > > ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Estimates of the success trials."
      end

      attribute 434480 "dictionary_"
	private type class_ref 400048 // change_hash
	multiplicity "*"
	stereotype "map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type}, std::pair< std::size_t, std::size_t > > ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Sampling data: Map of change_hash ids to attempt and success counts."
      end

      attribute 427952 "total_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The total number of attempted trials."
      end

      extra_member 537776 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 343600 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 717232 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ${p0} & boost::serialization::base_object< tracked_observable >(*this);
  ${p0} & this->data_;
  ${p0} & this->dictionary_;
  ${p0} & this->total_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 717360 "acceptance_observable"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: data_(), dictionary_(), total_() {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Only construct through make_sampler and serialize"
      end

      operation 717488 "~acceptance_observable"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 717616 "acceptance_observable"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 380208 // acceptance_observable
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "no move"
      end

      operation 717744 "acceptance_observable"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 380208 // acceptance_observable
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "no copy"
      end

      operation 717872 "operator="
	private return_type class_ref 380208 // acceptance_observable
	nparams 1
	  param in name "source" type class_ref 380208 // acceptance_observable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "no assignment"
      end

      extra_member 537904 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1326128 "add_definition"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "meta" type class_ref 1144111 // sampler_meta
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add definition for generating objects of this 
 class to the meta object."
      end

      operation 718128 "description"
	const cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Log message descibing the observable and its parameters"
      end

      operation 718256 "get_label"
	const cpp_virtual public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override
{
  return ${class}::type_label_();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "The human readable label of this variable.

General format will be \"{type-label}[:obj-label]\"

For derived classes that will only have a single 
sampler instantiated, this label will be the same
as the sampler type-label in the input document."
      end

      operation 718384 "get_value"
	const cpp_virtual public explicit_return_type "boost::any"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Retrieve the current value of the variable. In this case the
value is of type map< change_hash, pair< estimater, estimater > >."
      end

      operation 719280 "make_sampler"
	class_operation public return_type class_ref 353840 // tracked_observable
	nparams 1
	  param in name "param_set" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Make a trial_acceptance_observable from input file

no parameters"
      end

      operation 718640 "on_report"
	cpp_virtual public explicit_return_type "void"
	nparams 2
	  param inout name "out" explicit_type "ostream"
	  param inout name "sink" type class_ref 313520 // base_sink
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Save statistical data to permanent storage. "
      end

      operation 1485104 "on_sample"
	cpp_virtual public explicit_return_type "void"
	nparams 3
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Accumulate data after a sequence of trials."
      end

      operation 718000 "on_trial_end"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "trial" type class_ref 986543 // change_set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Update variable after every trial."
      end

      operation 718512 "prepare"
	cpp_virtual public explicit_return_type "void"
	nparams 4
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	  param in name "sman" type class_ref 340656 // report_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Prepare the sampler for a simulation phase. Reset
 all data."
      end

      operation 718768 "type_label_"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return ${type}(\"trial-rate\");
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Type label is \"trial-success\""
      end

      operation 719408 "do_write_document"
	const cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write an input file section.

 only throw possible should be from os.write() operation"
      end

      extra_member 605488 "LOCAL METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1498672 "get_datum"
	const public return_type class_ref 176049 // estimater
	nparams 1
	  param in name "id" type class_ref 400048 // change_hash
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::pair< ${type}, ${type} > ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}std::pair< ${type}, ${type} > ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  auto iter = this->data_.find( ${p0} );
  UTILITY_REQUIRE( this->data_.end() != iter, \"Change hash not in acceptance object data set.\" );
  return iter->second;

}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Does this have an estimate of the acceptance data?

 This requires at least one sampling cycle to be complete
 before it will be true."
      end

      operation 1498288 "get_sample"
	const public explicit_return_type "size_t"
	nparams 1
	  param in name "id" type class_ref 400048 // change_hash
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::pair< ${type}, ${type} > ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}std::pair< ${type}, ${type} > ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  auto iter = this->dictionary_.find( ${p0} );
  UTILITY_REQUIRE( this->dictionary_.end() != iter, \"Change hash not in acceptance object data set.\" );
  return iter->second;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get counts of acceptance and trials in the current
 sample cycle.

 \\pre has_sample( id )"
      end

      operation 1498544 "has_datum"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "id" type class_ref 400048 // change_hash
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  return this->data_.end() != this->data_.find( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Does this have an estimate of the acceptance data?

 This requires at least one sampling cycle to be complete
 before it will be true."
      end

      operation 1498416 "has_sample"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "id" type class_ref 400048 // change_hash
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  return this->dictionary_.end() != this->dictionary_.find( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get counts of acceptance and trials in the current
 sample cycle.

 \\pre has_sample( id )"
      end
    end

    classdiagram 200240 "density samplers"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 286000 "density_zaxis"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " sample a density distribution along the z axis (axis of rotation)
"
      classrelation 931504 // <generalisation>
	relation 930608 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 931504 // <generalisation>
	  b parent class_ref 1144367 // base_observable
      end

      classrelation 319920 // <dependency>
	relation 319536 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 319920 // <dependency>
	  b parent class_ref 912431 // access
      end

      classrelation 320048 // <dependency>
	relation 319664 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 320048 // <dependency>
	  b parent class_ref 278960 // output_dataset
      end

      classrelation 931376 // data_sets_ (<directional composition>)
	relation 930480 *-->
	  stereotype "vector"
	  a role_name "data_sets_" multiplicity "*" private
	    comment " Per-specie 1D population histograms."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 931376 // data_sets_ (<directional composition>)
	  b parent class_ref 585776 // histogram
      end

      attribute 671280 "filenames_"
	private explicit_type "string"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " The names of the output data. Indexing is the same as for data_sets_"
      end

      attribute 334256 "stepsize_"
	private explicit_type "double"
	init_value "0.2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The width of the histogram bins (default 0.2).  Narrower bins
gives better detail but requires longer runs."
      end

      extra_member 625712 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1549232 "density_zaxis"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " For serialization and factory only"
      end

      operation 499376 "~density_zaxis"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 262960 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 499504 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ${p0} & boost::serialization::base_object< base_observable >(*this);
  ar & this->data_sets_;
  ar & this->filenames_;
  ar & this->stepsize_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 625584 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1548848 "add_definition"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "meta" type class_ref 1144111 // sampler_meta
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add definition for generating objects of this 
 class to the meta object."
      end

      operation 498608 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Log message descibing the observable and its parameters"
      end

      operation 1548336 "default_stepsize"
	class_operation public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return 0.2;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The default step size in the digitizers"
      end

      operation 499632 "get_label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override
{
  return density_zaxis::type_label_();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Type label to access an object of this type in a report_manager and use in 
input file for this observable"
      end

      operation 672560 "get_value"
	const public explicit_return_type "boost::any"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Retrieve the current z-axis density profiles.

return value is of type const*const vector< estimate_array >"
      end

      operation 498864 "make_sampler"
	class_operation public return_type class_ref 1144367 // base_observable
	nparams 1
	  param in name "param_set" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Make a z-axis population sampler

 Allowed parameters : \"stepsize\""
      end

      operation 498992 "on_report"
	public explicit_return_type "void"
	nparams 2
	  param inout name "out" explicit_type "ostream"
	  param inout name "sink" type class_ref 313520 // base_sink
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Report 1D population histograms"
      end

      operation 305329 "on_sample"
	public explicit_return_type "void"
	nparams 3
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 499248 "prepare"
	public explicit_return_type "void"
	nparams 4
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	  param in name "sman" type class_ref 340656 // report_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Prepare the observer for a simulation. Reset any existing data."
      end

      operation 499760 "type_label_"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return ${type}(\"population-zaxis\");
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Type label is \"population-zaxis\""
      end

      operation 499888 "do_write_document"
	const cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Add sampler type, width and stepsize to wr[ix]"
      end

      extra_member 625840 "LOCAL METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1548592 "filename"
	const public explicit_return_type "string"
	nparams 1
	  param in name "ispec" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->filenames_.at( ispec );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The output filename for specie ispec

 \\pre ispec < size"
      end

      operation 1548464 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return this->data_sets_.size();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The number of data sets."
      end

      operation 1548720 "data_set"
	const public return_type class_ref 585776 // histogram
	nparams 1
	  param in name "ispec" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  return this->data_sets_.at( ispec );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Data set for specie ispec

 \\pre ispec < size"
      end
    end

    classdiagram 174257 "3D Dist relations"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 506032 "digitizer_3d"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Convert a coordinate inside a bounding box into a linear
 index suitable for making a histogram. Convert a linear
 index into a subcube of the bounding box (\"corners\").

 The digitizer operated in a fixed size bounding box.

 Bounding box is
 ( x_axis.mininum, y_axis.minimum, z_axis.minimum ) to 
  ( x_axis.maxinum, y_axis.maximum, z_axis.maximum )"
      classrelation 686000 // <dependency>
	relation 685104 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 686000 // <dependency>
	  b parent class_ref 912431 // access
      end

      class 625712 "data_type"
	visibility package stereotype "typedef" base_type class_ref 986799 // coordinate
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment " The data type we convert into an integer"
      end

      attribute 550192 "xaxis_"
	private type class_ref 175409 // digitizer
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " X-axis digitizer"
      end

      attribute 550320 "yaxis_"
	private type class_ref 175409 // digitizer
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Y-axis digitizer"
      end

      attribute 550448 "zaxis_"
	private type class_ref 175409 // digitizer
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Z-axis digitiser"
      end

      attribute 550576 "spacing_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Sampling cube/digitiser width"
      end

      attribute 550704 "yskip_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Number of bins in X direction.

 \\invariant yskip = xaxis.size"
      end

      attribute 550832 "zskip_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Number of bins in XY plane

 \\invariant zskip = xaxis.size * yaxis.size"
      end

      attribute 550960 "size_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Total number of bins

 \\invariant size = x_axis.size * y_axis.size * z_axis.size"
      end

      extra_member 458288 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1151024 "digitizer_3d"
	public explicit_return_type ""
	nparams 3
	  param in name "small" type class_ref 986799 // coordinate
	  param in name "big" type class_ref 986799 // coordinate
	  param in name "spacing" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${throw}
: xaxis_( std::min( small.x, big.x ), std::max( small.x, big.x ), spacing )
, yaxis_( std::min( small.y, big.y ), std::max( small.y, big.y ), spacing )
, zaxis_( std::min( small.z, big.z ), std::max( small.z, big.z ), spacing )
, spacing_( spacing )
, yskip_( xaxis_.size() )
, zskip_( yaxis_.size() * yskip_ )
, size_( zaxis_.size() * zskip_ )
{
  UTILITY_REQUIRE( spacing > 0.0, \"Cannot define digitizer with zero or negative spacing.\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create digitizer.

 NOTE: spacing <= 0.0 is undefined."
      end

      operation 1151920 "digitizer_3d"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
: xaxis_()
, yaxis_()
, zaxis_()
, spacing_()
, yskip_()
, zskip_()
, size_()
{}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " For serialization."
      end

      operation 1152048 "~digitizer_3d"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1152176 "digitizer_3d"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 506032 // digitizer_3d
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: xaxis_( std::move( ${p0}.xaxis_ ) )
, yaxis_( std::move( ${p0}.yaxis_ ) )
, zaxis_( std::move( ${p0}.zaxis_ ) )
, spacing_( std::move( ${p0}.spacing_ ) )
, yskip_( std::move( ${p0}.yskip_ ) )
, zskip_( std::move( ${p0}.zskip_ ) )
, size_( std::move( ${p0}.size_ ) )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1152304 "digitizer_3d"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 506032 // digitizer_3d
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: xaxis_( ${p0}.xaxis_ )
, yaxis_( ${p0}.yaxis_ )
, zaxis_( ${p0}.zaxis_ )
, spacing_( ${p0}.spacing_ )
, yskip_( ${p0}.yskip_ )
, zskip_( ${p0}.zskip_ )
, size_( ${p0}.size_ )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1152560 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 506032 // digitizer_3d
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap( xaxis_, ${p0}.xaxis_ );
  std::swap( yaxis_, ${p0}.yaxis_ );
  std::swap( zaxis_, ${p0}.zaxis_ );
  std::swap( spacing_, ${p0}.spacing_ );
  std::swap( yskip_, ${p0}.yskip_ );
  std::swap( zskip_, ${p0}.zskip_ );
  std::swap( size_, ${p0}.size_ );
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1152432 "operator="
	public return_type class_ref 506032 // digitizer_3d
	nparams 1
	  param in name "source" type class_ref 506032 // digitizer_3d
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 458160 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1152688 "serialize"
	public explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "a_ver" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}template< class ${t0} > ${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ar & xaxis_; ar & yaxis_; ar & zaxis_; ar & spacing_; ar & yskip_; ar & zskip_; ar & size_;
}
"
	
	
	
	
	comment "Read/write object to an archive."
      end

      extra_member 458416 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1606192 "bin_maximum"
	const cpp_inline public return_type class_ref 986799 // coordinate
	nparams 1
	  param in name "bin" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::size_t xi, yi, zi;
  this->bin_to_index( ${p0}, xi, yi, zi );
  return ${type}( this->xaxis_.${name}( xi ),  this->yaxis_.${name}( yi ),  this->zaxis_.${name}( zi ) );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The end of a particular bin"
      end

      operation 1606320 "bin_midpoint"
	const cpp_inline public return_type class_ref 986799 // coordinate
	nparams 1
	  param in name "bin" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::size_t xi, yi, zi;
  this->bin_to_index( ${p0}, xi, yi, zi );
  return ${type}( this->xaxis_.${name}( xi ),  this->yaxis_.${name}( yi ),  this->zaxis_.${name}( zi ) );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The end of a particular bin"
      end

      operation 1606448 "bin_minimum"
	const cpp_inline public return_type class_ref 986799 // coordinate
	nparams 1
	  param in name "bin" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::size_t xi, yi, zi;
  this->bin_to_index( ${p0}, xi, yi, zi );
  return ${type}( this->xaxis_.${name}( xi ),  this->yaxis_.${name}( yi ),  this->zaxis_.${name}( zi ) );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The end of a particular bin"
      end

      operation 1606576 "bin_width"
	const cpp_inline public return_type class_ref 986799 // coordinate
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return ${type}( this->xaxis_.${name}(),  this->yaxis_.${name}(),  this->zaxis_.${name}() );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The end of a particular bin"
      end

      operation 1151152 "convert"
	const public explicit_return_type "size_t"
	nparams 1
	  param in name "pos" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  const std::size_t xidx = this->xaxis_.convert( pos.x );
  const std::size_t yidx = this->yaxis_.convert( pos.y );
  const std::size_t zidx = this->zaxis_.convert( pos.z );
  return zidx * this->zskip_ + yidx * this->yskip_ + xidx;
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Convert a coordinate inside the bounding box into a
 linear index.

 \\pre xaxis.in_range(pos.x) and yaxis.in_range(pos.y) and zaxis.in_range(pos.z)
 \\post result < size"
      end

      operation 1607344 "equivalent"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 506032 // digitizer_3d
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->xaxis_.${name}( ${p0}.xaxis_ ) and this->yaxis_.${name}( ${p0}.yaxis_ ) and this->zaxis_.${name}( ${p0}.zaxis_ );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The end of a particular bin"
      end

      operation 1606832 "in_range"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "val" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->xaxis_.${name}( ${p0}.x ) and this->yaxis_.${name}( ${p0}.y ) and this->zaxis_.${name}( ${p0}.z );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The end of a particular bin"
      end

      operation 1606960 "maximum"
	const cpp_inline public return_type class_ref 986799 // coordinate
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return ${type}( this->xaxis_.${name}(),  this->yaxis_.${name}(),  this->zaxis_.${name}() );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The end of a particular bin"
      end

      operation 1607088 "minimum"
	const cpp_inline public return_type class_ref 986799 // coordinate
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return ${type}( this->xaxis_.${name}(),  this->yaxis_.${name}(),  this->zaxis_.${name}() );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The end of a particular bin"
      end

      operation 1605168 "operator=="
	friend public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" type class_ref 506032 // digitizer_3d
	  param in name "rhs" type class_ref 506032 // digitizer_3d
	cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return ${p0}.equivalent( ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1605040 "operator!="
	friend public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" type class_ref 506032 // digitizer_3d
	  param in name "rhs" type class_ref 506032 // digitizer_3d
	cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return not ${p0}.equivalent( ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1151408 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return size_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The number of bins"
      end

      operation 1606704 "width"
	const cpp_inline public return_type class_ref 986799 // coordinate
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return ${type}( this->xaxis_.${name}(),  this->yaxis_.${name}(),  this->zaxis_.${name}() );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The end of a particular bin"
      end

      extra_member 654512 "LOCAL METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1615536 "bin_to_index"
	const private explicit_return_type "void"
	nparams 4
	  param in name "bin" explicit_type "size_t"
	  param inout name "xidx" explicit_type "size_t"
	  param inout name "yidx" explicit_type "size_t"
	  param inout name "zidx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Convert 3d bin index into x, y and z axis bin indices"
      end

      operation 1151280 "corners"
	public explicit_return_type "void"
	nparams 2
	  param in name "idx" explicit_type "size_t"
	  param inout name "points" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, std::array< ${t1}, 8 > & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, std::array< ${t1}, 8 > & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Calculate corners of the sampling cube at given index.

 \\pre idx < size
 \\post all points inside bounding box defined by ( x_axis.mininum, y_axis.minimum, z_axis.minimum ) to 
  ( x_axis.maxinum, y_axis.maximum, z_axis.maximum )"
      end

      operation 1151536 "x_axis"
	const public return_type class_ref 175409 // digitizer
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return xaxis_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1151664 "y_axis"
	const public return_type class_ref 175409 // digitizer
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return yaxis_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1151792 "z_axis"
	const public return_type class_ref 175409 // digitizer
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return zaxis_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end
    end

    class 197169 "d3_distribution"
      visibility protected 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      associated_diagram classdiagram_ref 174257 // 3D Dist relations
      comment "Sample the 3D distribution of particles. "
      classrelation 313521 // <generalisation>
	relation 313265 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 313521 // <generalisation>
	  b parent class_ref 1144367 // base_observable
      end

      class 625840 "histogram_type"
	visibility package stereotype "typedef" base_type class_ref 618544 // fixed_size_histogram
	nactuals 1
	actual class class_ref 618544 // fixed_size_histogram
	  rank 0 value class_ref 506032 // digitizer_3d
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	classrelation 959152 // <realization>
	  relation 958256 -_-|>
	    a public
	      cpp default "${type}"
	      python "${type}"
	      classrelation_ref 959152 // <realization>
	    b parent class_ref 618544 // fixed_size_histogram
	end
      end

      classrelation 313777 // <dependency>
	relation 313521 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 313777 // <dependency>
	  b parent class_ref 1016239 // strngs
      end

      classrelation 959280 // distributions_ (<directional composition>)
	relation 958384 *-->
	  stereotype "vector"
	  a role_name "distributions_" multiplicity "*" private
	    comment " Particle distributions indexed by specie key"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 959280 // distributions_ (<directional composition>)
	  b parent class_ref 625840 // histogram_type
      end

      attribute 261809 "regions_"
	private explicit_type "string"
	multiplicity "*"
	stereotype "map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}, ${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Map of specie labels to regions."
      end

      attribute 691120 "specie_labels_"
	private explicit_type "string"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Vector of specie labels."
      end

      attribute 690992 "stepsize_"
	private explicit_type "double"
	init_value "0.2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The width of the histogram bins (default 0.2).  Narrower bins
 gives better detail but requires more memory and converge 
 slower."
      end

      extra_member 654896 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1608496 "d3_distribution"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
: distributions_()
, regions_()
, specie_labels_()
, stepsize_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " For serialization"
      end

      operation 529713 "~d3_distribution"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      classrelation 313905 // <dependency>
	relation 313649 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 313905 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 366129 "serialize"
	public explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "size_t"
	cpp_decl "    ${comment}template< class ${t0} > ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ${p0} & boost::serialization::base_object< base_observable >(*this);
  ar & this->distributions_;
  ar & this->regions_;
  ar & this->specie_labels_;
  ar & this->stepsize_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 654768 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1607472 "add_definition"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "meta" type class_ref 1144111 // sampler_meta
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add definition for generating objects of this 
 class to the meta object."
      end

      operation 1607600 "default_bin_width"
	class_operation public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return 0.2;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the default bin/step size"
      end

      operation 487985 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Log message descibing the observable and its parameters"
      end

      operation 1607728 "get_value"
	const public explicit_return_type "boost::any"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Retrieve the radial distribution profiles

/return vector< estimate_array > const*const where
  rdf(i, j) is at index [i x specie_count + j]



"
      end

      operation 366257 "get_label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override
{
  return ${class}::type_label_();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 365617 "make_sampler"
	class_operation public return_type class_ref 1144367 // base_observable
	nparams 1
	  param in name "paramset" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 365745 "prepare"
	public explicit_return_type "void"
	nparams 4
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	  param in name "sman" type class_ref 340656 // report_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Prepare the evaluator for a simulation."
      end

      operation 365873 "on_report"
	public explicit_return_type "void"
	nparams 2
	  param inout name "out" explicit_type "ostream"
	  param inout name "sink" type class_ref 313520 // base_sink
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Save 3d average particle counts to a data sink."
      end

      operation 366001 "on_sample"
	cpp_virtual public explicit_return_type "void"
	nparams 3
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Sample particle density"
      end

      operation 366385 "type_label_"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return ${type}(\"3d-distribution\");
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1608112 "do_write_document"
	const cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write an input file section.

 only throw possible should be from os.write() operation"
      end

      extra_member 654640 "LOCAL METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1608240 "get_histogram"
	const public return_type class_ref 625840 // histogram_type
	nparams 1
	  param in name "ispec" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->distributions_.at( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Access a particular histogram

 \\pre ispec < size"
      end

      operation 1607856 "process_region_list"
	public explicit_return_type "void"
	nparams 1
	  param in name "list" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Parse a list of \"label:region\" pairs into the
 regions_ array"
      end

      operation 1607984 "region_map"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const std::map< ${type}, ${type} >& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->regions_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Access the specie label : region name map."
      end

      operation 1608368 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->distributions_.size();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The number of distributions

 \\invariant size <= {specie_count}"
      end
    end

    classdiagram 134833 "Metropolis sampler"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 663343 "metropolis_sampler"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "  Sample the metropolis factor generated by each trial. Failed
  trials have a factor of 0."
      classrelation 418224 // <generalisation>
	relation 417584 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 418224 // <generalisation>
	  b parent class_ref 353840 // tracked_observable
      end

      classrelation 938288 // <dependency>
	relation 937392 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 938288 // <dependency>
	  b parent class_ref 278960 // output_dataset
      end

      classrelation 299441 // boltzmann_factor_ (<directional composition>)
	relation 299185 *-->
	  a role_name "boltzmann_factor_" multiplicity "1" private
	    comment "Estimate of the boltzmann acceptance factor."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 299441 // boltzmann_factor_ (<directional composition>)
	  b parent class_ref 176049 // estimater
      end

      classrelation 299313 // energy_change_ (<directional composition>)
	relation 299057 *-->
	  a role_name "energy_change_" multiplicity "1" private
	    comment "Change in potential energy (ignores mu_ex and prefactor)"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 299313 // energy_change_ (<directional composition>)
	  b parent class_ref 176049 // estimater
      end

      classrelation 938160 // energy_ (<directional composition>)
	relation 937264 *-->
	  a role_name "energy_" multiplicity "1" private
	    comment "Histogram of the energy"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 938160 // energy_ (<directional composition>)
	  b parent class_ref 585776 // histogram
      end

      extra_member 632624 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1556272 "metropolis_sampler"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
: tracked_observable()
, boltzmann_factor_()
, energy_change_()
, energy_( 0.0, 1.0, 0.01, true )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " For serialization and factory"
      end

      operation 173745 "~metropolis_sampler"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 147761 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 173489 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
  ${p0} & boost::serialization::base_object< tracked_observable >(*this);
  ${p0} & boltzmann_factor_;
  ${p0} & energy_change_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 632496 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1556016 "add_definition"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "meta" type class_ref 1144111 // sampler_meta
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add definition for generating objects of this 
 class to the meta object."
      end

      operation 487601 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Log message descibing the observable and its parameters"
      end

      operation 174129 "get_label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return ${class}::type_label_();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 672688 "get_value"
	const public explicit_return_type "boost::any"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Retrieve the current estimate of the boltzmann factor and
energy change.

/return Type pair< estimater, estimater > with
  result.first -> boltzmann factor and 
  result.second -> energy change"
      end

      operation 175025 "make_sampler"
	class_operation public return_type class_ref 353840 // tracked_observable
	nparams 1
	  param in name "param_set" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}const std::map< ${t0}, ${t0} >& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}const std::map< ${t0}, ${t0} >& ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1162543 "on_trial_end"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "trial" type class_ref 986543 // change_set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Collect information about the a_trial move"
      end

      operation 1556144 "on_sample"
	public explicit_return_type "void"
	nparams 3
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Accumulate data after a sequence of trials."
      end

      operation 174769 "on_report"
	public explicit_return_type "void"
	nparams 2
	  param inout name "out" explicit_type "ostream"
	  param inout name "sink" type class_ref 313520 // base_sink
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Reporting operations."
      end

      operation 174641 "prepare"
	cpp_virtual public explicit_return_type "void"
	nparams 4
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	  param in name "sman" type class_ref 340656 // report_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Prepare for a main simulation loop"
      end

      operation 174385 "type_label_"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return \"metropolis\";
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 217136 "do_write_document"
	const cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Add type of sampler to wr[ix] document section"
      end

      extra_member 632368 "LOCAL METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1556656 "boltzmann_factor"
	const public return_type class_ref 176049 // estimater
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The boltzmann estimater"
      end

      operation 1556784 "energy_change"
	const public return_type class_ref 176049 // estimater
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The log( -energy ) estimater"
      end

      operation 1556528 "energy"
	const public return_type class_ref 585776 // histogram
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The histogram of log( -E )"
      end
    end

    classdiagram 167601 "RDF relations"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 167729 "rdf_sampler"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "sample a radial distribution function around each ion collated by
ion specie
"
      classrelation 944944 // <generalisation>
	relation 944048 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 944944 // <generalisation>
	  b parent class_ref 1144367 // base_observable
      end

      classrelation 278449 // <dependency>
	relation 278193 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 278449 // <dependency>
	  b parent class_ref 912431 // access
      end

      classrelation 319536 // <dependency>
	relation 319152 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 319536 // <dependency>
	  b parent class_ref 278960 // output_dataset
      end

      classrelation 945072 // data_sets_ (<directional composition>)
	relation 944176 *-->
	  stereotype "vector"
	  a role_name "data_sets_" multiplicity "*" private
	    comment " The radial  distribution functions.

 As these are symmetric with respect to the specie, only the
 \"upper triangle\" of the matrix is saved : M(i,j) where i<=j.
 The data is linearly so care must be taken when calculating
 the index. 

 Where N is the number of specie:
   M(i,j){i<=j} = data_sets_[(2N+1-i)*i/2 + j]
   data_sets_.size = N*(N+1)/2"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 945072 // data_sets_ (<directional composition>)
	  b parent class_ref 585776 // histogram
      end

      attribute 684464 "specie_labels_"
	private explicit_type "string"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Vector of specie labels."
      end

      attribute 240945 "stepsize_"
	private explicit_type "double"
	init_value "0.2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The width of the histogram bins (default 0.2).  Narrower bins
gives better detail but requires longer runs."
      end

      attribute 240817 "width_"
	private explicit_type "double"
	init_value "20.0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The width of the total RDF histogram. Acts as a cut-off."
      end

      extra_member 639408 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1570992 "rdf_sampler"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " For serialization and factory only"
      end

      operation 305201 "~rdf_sampler"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 173873 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 305073 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ${p0} & boost::serialization::base_object< base_observable >(*this);
  ar & data_sets_;
  ar & specie_labels_;
  ar & stepsize_;
  ar & width_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 639280 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1570096 "add_definition"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "meta" type class_ref 1144111 // sampler_meta
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add definition for generating objects of this 
 class to the meta object."
      end

      operation 1570224 "default_bin_width"
	class_operation public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return 0.2;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the default bin/step size"
      end

      operation 1570352 "default_width"
	class_operation public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return 20.0;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the default sampled width (this is starting value"
      end

      operation 487729 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Log message descibing the observable and its parameters

TODO: describe specific RDF functions (if not default)"
      end

      operation 672816 "get_value"
	const public explicit_return_type "boost::any"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Retrieve the radial distribution profiles

/return vector< estimate_array > const*const where
  rdf(i, j) is at index [i x specie_count + j]



"
      end

      operation 304945 "get_label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return rdf_sampler::type_label_();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Type label to use in input file for this observable"
      end

      operation 336305 "make_sampler"
	class_operation public return_type class_ref 1144367 // base_observable
	nparams 1
	  param in name "param_set" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Make an rdf_observable (independent of type) from input file

 parameters : \"region\" \"stepsize\""
      end

      operation 336049 "on_report"
	public explicit_return_type "void"
	nparams 2
	  param inout name "out" explicit_type "ostream"
	  param inout name "sink" type class_ref 313520 // base_sink
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Report radial distribution/density profiles"
      end

      operation 499120 "on_sample"
	public explicit_return_type "void"
	nparams 3
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 304817 "prepare"
	public explicit_return_type "void"
	nparams 4
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	  param in name "sman" type class_ref 340656 // report_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Prepare the sampler for a simulation.

 Initialize histogram matrix and capture specie labels."
      end

      operation 336177 "type_label_"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return ${type}(\"rdf-specie\");
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Type label is \"rdf-specie\""
      end

      operation 217264 "do_write_document"
	const private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Add sampler type, width and stepsize to wr[ix]"
      end

      extra_member 639152 "LOCAL METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1570480 "get_histogram"
	const public return_type class_ref 585776 // histogram
	nparams 2
	  param in name "ispec" explicit_type "size_t"
	  param in name "jspec" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type}& ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get histogram for specie pair (i,j)

 \\pre ispec < specie_count and jspec < specie_count"
      end

      operation 1571248 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->data_sets_.size();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The number of pairwise data sets"
      end

      operation 1570608 "specie_count"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->specie_labels_.size();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The number of species.

 Only meaningful after \"prepare\" is called."
      end

      operation 1570736 "specie_label"
	const public explicit_return_type "string"
	nparams 1
	  param in name "ispec" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->specie_labels_.at( ispec );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get specie label.

 Only valid after \"prepare\".

 \\pre ispec < specie_count"
      end

      operation 1571376 "stepsize"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The actual step size used"
      end

      operation 1571504 "width"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The actual step size used"
      end
    end

    classdiagram 213425 "Specie-count"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 167601 "specie_count"
      visibility protected 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}(object):
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Observe and report the average number of particles from periodic sampling.
"
      classrelation 904624 // <generalisation>
	relation 903728 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 904624 // <generalisation>
	  b parent class_ref 1144367 // base_observable
      end

      classrelation 312880 // <dependency>
	relation 312496 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 312880 // <dependency>
	  b parent class_ref 271792 // output_series
      end

      classrelation 278321 // <dependency>
	relation 278065 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 278321 // <dependency>
	  b parent class_ref 1016239 // strngs
      end

      classrelation 904752 // count_ (<directional composition>)
	relation 903856 *-->
	  a role_name "count_" multiplicity "1" private
	    comment " The particle count estimates."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 904752 // count_ (<directional composition>)
	  b parent class_ref 175665 // estimate_array
      end

      attribute 657968 "specie_list_"
	private explicit_type "std::pair< size_t, double >"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " The set of species to sample (Only SOLUTE type species) and corresponding
 per-specie cell volume."
      end

      extra_member 612016 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 633777 "specie_count"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
	comment " For serialization and factory"
      end

      operation 594993 "__init__"
	public explicit_return_type ""
	nparams 2
	  param inout name "self" explicit_type ""
	  param in name "sim" type class_ref 1129135 // simulator
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}super(${class}, ${p0}).__init__()
${body}
"
	
      end

      operation 595121 "__del__"
	public explicit_return_type ""
	nparams 1
	  param in name "self" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Disconnect any signals/slots as we exit"
      end

      operation 529585 "~specie_count"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
      end

      classrelation 278065 // <dependency>
	relation 277809 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 278065 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 304049 "serialize"
	public explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "size_t"
	cpp_decl "    ${comment}template< class ${t0} > ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ${p0} & boost::serialization::base_object< base_observable >(*this);
  ar & this->count_; ar & this->specie_list_;
}
"
	
	
	
	
      end

      extra_member 612272 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1512112 "add_definition"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "meta" type class_ref 1144111 // sampler_meta
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add definition for generating objects of this 
 class to the meta object."
      end

      operation 487857 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Log message descibing the observable and its parameters"
      end

      operation 304433 "get_label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override
{
  return ${class}::type_label_();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return \"specie-count\"
"
	
      end

      operation 672944 "get_value"
	const public explicit_return_type "boost::any"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Retrieve the current specie count estimates

 \\return type estimater_array const*const"
      end

      operation 365361 "make_sampler"
	class_operation public return_type class_ref 1144367 // base_observable
	nparams 1
	  param in name "paramset" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Generate specie_count object using data in paramset. As this
 sampler takes no special parameters the paramset should be
 empty."
      end

      operation 594865 "on_report"
	public explicit_return_type "void"
	nparams 2
	  param inout name "out" explicit_type "ostream"
	  param inout name "sink" type class_ref 313520 // base_sink
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment " Write the average specie counts to out and the data sink."
      end

      operation 304177 "on_sample"
	public explicit_return_type "void"
	nparams 3
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Sample average particle numbers."
      end

      operation 304305 "prepare"
	public explicit_return_type "void"
	nparams 4
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	  param in name "sman" type class_ref 340656 // report_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Prepare the sampler for a simulation run. Reset any existing data."
      end

      operation 304561 "type_label_"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  return ${type}(\"specie-count\");
}
"
	
	
	
	
      end

      operation 217008 "do_write_document"
	const cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write an input file section.

 only throw possible should be from os.write() operation"
      end

      extra_member 612144 "LOCAL METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1518896 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->count_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Do we have any estimates of specie count"
      end

      operation 1519024 "mean"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->count_.${name}( ${p0} );
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Mean count of specie at given index

 \\pre idx < size"
      end

      operation 1518768 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->count_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " How many estimates do we have"
      end

      operation 1525936 "specie_key"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->specie_list_[ ${p0} ].first;
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Mean count of specie at given index

 \\pre idx < size"
      end

      operation 1519152 "variance"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->count_.${name}( ${p0} );
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Variance of the count of specie at given index

 \\pre idx < size"
      end

      operation 1526064 "volume"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->specie_list_[ ${p0} ].second;
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Mean count of specie at given index

 \\pre idx < size"
      end
    end

    class 612016 "specie_region_count"
      visibility protected 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}(object):
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Observe and report the average number of particles per region with
 periodic sampling."
      classrelation 917808 // <generalisation>
	relation 916912 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 917808 // <generalisation>
	  b parent class_ref 1144367 // base_observable
      end

      classrelation 917936 // <dependency>
	relation 917040 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 917936 // <dependency>
	  b parent class_ref 271792 // output_series
      end

      classrelation 918064 // <dependency>
	relation 917168 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 918064 // <dependency>
	  b parent class_ref 1016239 // strngs
      end

      classrelation 918192 // count_ (<directional composition>)
	relation 917296 *-->
	  a role_name "count_" multiplicity "1" private
	    comment " The particle count estimates."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 918192 // count_ (<directional composition>)
	  b parent class_ref 175665 // estimate_array
      end

      attribute 664496 "volume_"
	private explicit_type "double"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " The per-region volumes for each specie. vol(reg,spc) = volume_[ ireg * nspec = ispec ]."
      end

      attribute 664752 "nspec_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of active species."
      end

      extra_member 618800 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1532592 "specie_region_count"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
	comment " For serialization and factory"
      end

      operation 1532976 "~specie_region_count"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
      end

      classrelation 918320 // <dependency>
	relation 917424 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 918320 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 1533104 "serialize"
	public explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "size_t"
	cpp_decl "    ${comment}template< class ${t0} > ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ${p0} & boost::serialization::base_object< base_observable >(*this);
  ar & this->count_; ar & this->volume_; ar & this->nspec_;
}
"
	
	
	
	
      end

      extra_member 618928 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1533232 "add_definition"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "meta" type class_ref 1144111 // sampler_meta
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add definition for generating objects of this 
 class to the meta object."
      end

      operation 1533360 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Log message descibing the observable and its parameters"
      end

      operation 1533488 "get_label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override
{
  return ${class}::type_label_();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return \"specie-count\"
"
	
      end

      operation 1533616 "get_value"
	const public explicit_return_type "boost::any"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Retrieve the current specie count estimates

 \\return type estimater_array const*const"
      end

      operation 1533744 "make_sampler"
	class_operation public return_type class_ref 1144367 // base_observable
	nparams 1
	  param in name "paramset" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Generate specie_count object using data in paramset. As this
 sampler takes no special parameters the paramset should be
 empty."
      end

      operation 1533872 "on_report"
	public explicit_return_type "void"
	nparams 2
	  param inout name "out" explicit_type "ostream"
	  param inout name "sink" type class_ref 313520 // base_sink
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment " Write the average specie counts to out and the data sink."
      end

      operation 1534000 "on_sample"
	public explicit_return_type "void"
	nparams 3
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Sample average particle numbers."
      end

      operation 1534128 "prepare"
	public explicit_return_type "void"
	nparams 4
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	  param in name "sman" type class_ref 340656 // report_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Prepare the sampler for a simulation run. Reset any existing data."
      end

      operation 1534256 "type_label_"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  return ${type}(\"specie-region-count\");
}
"
	
	
	
	
      end

      operation 1534384 "do_write_document"
	const cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write an input file section.

 only throw possible should be from os.write() operation"
      end

      extra_member 619056 "LOCAL METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1534512 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->count_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Do we have any estimates of specie count"
      end

      operation 1534640 "mean"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->count_.${name}( ${p0} );
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Mean count of specie at given index

 \\pre idx < size"
      end

      operation 1534768 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->count_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " How many estimates do we have"
      end

      operation 1535024 "variance"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->count_.${name}( ${p0} );
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Variance of the count of specie at given index

 \\pre idx < size"
      end

      operation 1535152 "volume"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->volume_[ ${p0} ];
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Mean count of specie at given index

 \\pre idx < size"
      end
    end

    activity 128049 "IN PROGRESS"
    end

    classdiagram 193841 "Widom sampler"
      draw_all_relations default hide_attributes default hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 135087 "widom"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl "${comment}struct ${name} {
${members}};
"
      explicit_switch_type ""
      
      comment " Widom observable, calculate the excess chemical potential from insertion
 trials. This class calculates an average global value."
      classrelation 979120 // <generalisation>
	relation 978224 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 979120 // <generalisation>
	  b parent class_ref 353840 // tracked_observable
      end

      classrelation 985648 // <dependency>
	relation 984752 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 985648 // <dependency>
	  b parent class_ref 513200 // add_specie
      end

      classrelation 1243439 // <dependency>
	relation 1205679 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1243439 // <dependency>
	  b parent class_ref 1026095 // base_choice
      end

      classrelation 1155375 // <dependency>
	relation 1118255 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1155375 // <dependency>
	  b parent class_ref 986415 // change_atom
      end

      classrelation 1075119 // <dependency>
	relation 1037999 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1075119 // <dependency>
	  b parent class_ref 134959 // ensemble
      end

      classrelation 447921 // <dependency>
	relation 447409 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 447921 // <dependency>
	  b parent class_ref 128559 // fp_env
      end

      classrelation 448049 // <dependency>
	relation 447537 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 448049 // <dependency>
	  b parent class_ref 871087 // input_reader
      end

      classrelation 384944 // <dependency>
	relation 384560 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 384944 // <dependency>
	  b parent class_ref 271920 // output_field
      end

      classrelation 384688 // <dependency>
	relation 384304 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 384688 // <dependency>
	  b parent class_ref 271792 // output_series
      end

      classrelation 369201 // <dependency>
	relation 368945 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 369201 // <dependency>
	  b parent class_ref 1016239 // strngs
      end

      class 367152 "widom_datum"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit}
 {
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	comment "Widom based free energy estimate for one specie."
	classrelation 446128 // specie_count_ (<directional composition>)
	  relation 445232 *-->
	    a role_name "specie_count_" multiplicity "1" public
	      comment " The average number of particles of this specie"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      python "${comment}${self}${name} = ${type}()
"
	      classrelation_ref 446128 // specie_count_ (<directional composition>)
	    b parent class_ref 176049 // estimater
	end

	classrelation 446256 // exp_potential_ (<directional composition>)
	  relation 445360 *-->
	    a role_name "exp_potential_" public
	      comment "The probability {exp(-energy)} based chemical potential estimate"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      python "${comment}${self}${name} = ${type}()
"
	      classrelation_ref 446256 // exp_potential_ (<directional composition>)
	    b parent class_ref 176049 // estimater
	end

	attribute 407344 "count_"
	  public explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment "The count of the number of add attempts completed so far in
one sampling cycle."
	end

	attribute 718000 "conc_"
	  public explicit_type "double"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Species target concentration."
	end

	attribute 704944 "excess_potential_"
	  public explicit_type "double"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " The excess chemical potential of the specie at the start of the
 simulation."
	end

	attribute 407472 "key_"
	  public explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment "The specie index of this datum."
	end

	attribute 698416 "label_"
	  public explicit_type "string"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " The label of the specie."
	end

	attribute 718128 "volume_"
	  public explicit_type "double"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Volume of simulation for this specie"
	end

	extra_member 336816 "friend"
	  
	  cpp "
  friend class boost::serialization::access;" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	end

	operation 688176 "serialize"
	  stereotype "template"
	  cpp_inline private explicit_return_type "void"
	  nparams 2
	    param inout name "ar" explicit_type "Archive"
	    param in name "version" explicit_type "unsigned int"
	  cpp_decl "    ${comment}template<class Archive>
${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ${p0} & specie_count_;
  ${p0} & exp_potential_;
  ${p0} & count_;
  ${p0} & conc_;
  ${p0} & excess_potential_;
  ${p0} & key_;
  ${p0} & label_;
  ${p0} & volume_;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 688304 "widom_datum"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: specie_count_()
, exp_potential_()
, count_()
, conc_()
, excess_potential_()
, key_()
, label_()
, volume_()
{}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 688944 "widom_datum"
	  public explicit_return_type ""
	  nparams 1
	    param in name "key" explicit_type "size_t"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}
: specie_count_()
, exp_potential_()
, count_()
, conc_()
, excess_potential_()
, key_( ${p0} )
, label_()
, volume_()
{}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment "Constructor with specie key"
	end

	operation 688432 "~widom_datum"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}
{}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 688560 "widom_datum"
	  stereotype "move"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "source" type class_ref 367152 // widom_datum
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: specie_count_( std::move( source.specie_count_ ) )
, exp_potential_( std::move( source.exp_potential_ ) )
, count_( std::move( source.count_ ) )
, conc_( std::move( source.conc_ ) )
, excess_potential_( std::move( source.excess_potential_ ) )
, key_( std::move( source.key_ ) )
, label_( std::move( source.label_ ) )
, volume_( std::move( source.volume_ ) )
{}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 688688 "widom_datum"
	  stereotype "copy"
	  public explicit_return_type ""
	  nparams 1
	    param in name "source" type class_ref 367152 // widom_datum
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: specie_count_( source.specie_count_ )
, exp_potential_( source.exp_potential_ )
, count_( source.count_ )
, conc_( source.conc_ )
, excess_potential_( source.excess_potential_ )
, key_( source.key_ )
, label_( source.label_ )
, volume_( source.volume_ )
{}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 688816 "operator="
	  public return_type class_ref 367152 // widom_datum
	  nparams 1
	    param in name "source" type class_ref 367152 // widom_datum
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap(${p0});
  return *this;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 689072 "swap"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "source" type class_ref 367152 // widom_datum
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract}
{
   std::swap( this->specie_count_, source.specie_count_ );
   std::swap( this->exp_potential_, source.exp_potential_ );
   std::swap( this->count_, source.count_ );
   std::swap( this->conc_, source.conc_ );
   std::swap( this->excess_potential_, source.excess_potential_ );
   std::swap( this->key_, source.key_ );
   std::swap( this->label_, source.label_ );
   std::swap( this->volume_, source.volume_ );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end
      end

      classrelation 446384 // data_ (<directional composition>)
	relation 445488 *-->
	  stereotype "vector"
	  a role_name "data_" multiplicity "*" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 446384 // data_ (<directional composition>)
	  b parent class_ref 367152 // widom_datum
      end

      attribute 282161 "key_labels_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Optional restricted list of specie labels to use, from the input file. If empty use
 all SOLUTE species."
      end

      attribute 282417 "ranf_"
	private type class_ref 463407 // random_distribution
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "(Justin) Use a separate random number
generator for the widom sampler so that runs of 
the main simulation should be identical regardless
of whether the Widom sampler is used or not. "
      end

      attribute 1422127 "trials_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Number of trials to make per sample cycle, default is 0"
      end

      attribute 711472 "loop_count_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " How many times have samples been taken?"
      end

      extra_member 661680 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 450351 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      classrelation 1170479 // <dependency>
	relation 1133359 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 1170479 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 2037295 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ${p0} & boost::serialization::base_object< tracked_observable >(*this);
  ar & data_;
  ar & key_labels_;
  ar & ranf_;
  ar & trials_;
  ar & loop_count_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 2037679 "widom"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
: tracked_observable()
, data_()
, key_labels_()
, ranf_( boost::shared_ptr< boost::mt19937 >( new boost::mt19937 ) )
, trials_( 0 )
, loop_count_( 0 )
{}
"
	
	
	
	
	comment " default ctor (for serialize and factory only)"
      end

      operation 2102575 "~widom"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 661552 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1628976 "add_definition"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "meta" type class_ref 1144111 // sampler_meta
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add definition for generating objects of this 
 class to the meta object."
      end

      operation 488113 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Log message descibing the observable and its parameters

TODO: Develop description further"
      end

      operation 2167727 "get_label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override
{
  return type_label_();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 695984 "get_value"
	const public explicit_return_type "boost::any"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "value object is of type vector< widom_datum >"
      end

      operation 2175279 "make_sampler"
	class_operation public return_type class_ref 353840 // tracked_observable
	nparams 1
	  param in name "params" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Create a new widom sampler using the given parameter set."
      end

      operation 1747631 "on_report"
	public explicit_return_type "void"
	nparams 2
	  param inout name "out" explicit_type "ostream"
	  param inout name "sink" type class_ref 313520 // base_sink
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Save energy estimates to permanent storage"
      end

      operation 688048 "on_sample"
	public explicit_return_type "void"
	nparams 3
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Perform insertion trials to reach 'trials' attempts per sample cycle."
      end

      operation 1622064 "on_trial_end"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "trial" type class_ref 986543 // change_set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Update variable after every trial. Sample every insertion attempt."
      end

      operation 2167599 "prepare"
	public explicit_return_type "void"
	nparams 4
	  param in name "pman" type class_ref 446128 // particle_manager
	  param in name "gman" type class_ref 452656 // geometry_manager
	  param in name "eman" type class_ref 439344 // evaluator_manager
	  param in name "sman" type class_ref 340656 // report_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Prepare Widom observable for a new simulation

 Reset all accumulated data. Build list of specie
 keys from input list of labels (key_labels) and
 adjust key_labels to contain only used keys. 
 Allocate storage for accumulating data once the
 number of species to observe is known. "
      end

      operation 434225 "type_label_"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return std::string (\"widom\");
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 222128 "do_write_document"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Add details of widom sampler to wr[ix]."
      end

      extra_member 661424 "LOCAL METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1628720 "loop_count"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "The number of trials to make per sampling cycle."
      end

      operation 1629360 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->data_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The number of species to be sampled."
      end

      operation 686512 "specie_of_interest"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};

"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Is specie of given index target of Widom observation?

/nothrow"
      end

      operation 2138671 "trials"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "The number of trials to make per sampling cycle."
      end

      operation 434481 "update_data"
	private explicit_return_type "void"
	nparams 2
	  param in name "atom" type class_ref 986415 // change_atom
	  param in name "is_fail" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Collect a sample from a trial"
      end
    end

    class 367024 "widom_monitor"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Monitor the simulation and capture add attempts occuring as
part of the standard simulation."
      classrelation 445488 // <generalisation>
	relation 444848 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 445488 // <generalisation>
	  b parent class_ref 353840 // tracked_observable
      end

      operation 686640 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "(does nothing, handled by parent widom
object)"
      end

      operation 689328 "do_write_document"
	const private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  wr.remove_section(ix);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " (does nothing but remove section, the real write
 of document is handled in parent widom object)
"
      end

      operation 686768 "get_label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return this->parent_->get_label();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "(returns parent->get_label)

/post get_label == parent.get_label"
      end

      operation 686896 "get_value"
	const public explicit_return_type "boost::any"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return this->parent_->get_value();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "(returns parent->get_value)

/post get_value == parent.get_value"
      end

      operation 687024 "prepare"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sim" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override {}
"
	
	
	
	
	comment "(does nothing, handled by parent widom
object)"
      end

      operation 687152 "on_report"
	public explicit_return_type "void"
	nparams 3
	  param in name "sim" type class_ref 1129135 // simulator
	  param inout name "out" explicit_type "ostream"
	  param inout name "reporter" type class_ref 340656 // report_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} override {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "(does nothing, handled by parent widom
object)"
      end

      operation 434353 "on_trial_end"
	public explicit_return_type "void"
	nparams 1
	  param in name "trial" type class_ref 986543 // change_set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Collect data for all add attempts."
      end

      extra_member 336944 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 689200 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ${p0} & boost::serialization::base_object< tracked_observable >(*this);
  ${p0} & parent_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 687280 "widom_monitor"
	public explicit_return_type ""
	nparams 1
	  param in name "parent" type class_ref 135087 // widom
	cpp_decl "    ${comment}${inline}explicit ${name}${(}boost::shared_ptr< ${t0} > ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}boost::shared_ptr< ${t0} > ${p0}${)}${throw}
: parent_(${p0})
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 687408 "~widom_monitor"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
{
   this->parent_.reset();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 687536 "widom_monitor"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 367024 // widom_monitor
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 687664 "widom_monitor"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 367024 // widom_monitor
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 687792 "operator="
	private return_type class_ref 367024 // widom_monitor
	nparams 1
	  param in name "source" type class_ref 367024 // widom_monitor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 687920 "widom_monitor"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Intended to be usable only for serialization"
      end
    end
  end

  classview 551855 "Sampler meta"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 341807 // Observer deployment
    classdiagram 630831 "sample meta from input file"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 533040 "sampler_definition"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Information about a sample type to be used to instantiate
 a sample from an input file."
      classrelation 761008 // <generalisation>
	relation 760112 ---|>
	  a private
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 761008 // <generalisation>
	  b parent class_ref 539568 // input_definition
      end

      class 1144239 "sampler_generator_fn"
	visibility package stereotype "typedef" base_type class_ref 252719 // function1
	nactuals 2
	actual class class_ref 252719 // function1
	  rank 0 explicit_value "boost::shared_ptr< observable::base_observable >"
	actual class class_ref 252719 // function1
	  rank 1 explicit_value "std::map< std::string, std::string > const&"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	classrelation 774704 // <realization>
	  relation 773808 -_-|>
	    a public
	      cpp default "${type}"
	      python "${type}"
	      classrelation_ref 774704 // <realization>
	    b parent class_ref 252719 // function1
	end
      end

      attribute 578352 "factory_"
	private type class_ref 1144239 // sampler_generator_fn
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " A method for generating sampler objects."
      end

      extra_member 523440 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1308848 "sampler_definition"
	const public explicit_return_type ""
	nparams 2
	  param in name "label" explicit_type "string"
	  param in name "fn" type class_ref 1144239 // sampler_generator_fn
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}
: input_definition( ${p0} )
, factory_( ${p1} )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Main Ctor

 \\param label : name of the region subtype."
      end

      operation 1308720 "sampler_definition"
	const private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1308592 "~sampler_definition"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1308464 "sampler_definition"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 533040 // sampler_definition
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1308336 "sampler_definition"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 533040 // sampler_definition
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1308208 "operator="
	private return_type class_ref 533040 // sampler_definition
	nparams 1
	  param in name "source" type class_ref 533040 // sampler_definition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 523312 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1308080 "operator()"
	const public return_type class_ref 1144367 // base_observable
	nparams 1
	  param in name "params" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}const std::map< ${t0}, ${t0} > & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->factory_( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Generate a sampler from the given label and paramneters and
 add to the report manager.
"
      end

      extra_member 523184 "access base class methods"
	
	stereotype "using"
	cpp "using input_definition::add_definition;
using input_definition::empty;
using input_definition::has_definition;
using input_definition::label;
using input_definition::publish_help;
using input_definition::size;
" ""
	java ""
	php ""
	python ""
	idl ""
      end
    end

    class 553008 "tracked_definition"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Information about a sample type to be used to instantiate
 a sample from an input file."
      classrelation 774320 // <generalisation>
	relation 773424 ---|>
	  a private
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 774320 // <generalisation>
	  b parent class_ref 539568 // input_definition
      end

      class 553136 "tracked_generator_fn"
	visibility package stereotype "typedef" base_type class_ref 251439 // function2
	nactuals 2
	actual class class_ref 252719 // function1
	  rank 0 explicit_value "boost::shared_ptr< observable::tracked_observable >"
	actual class class_ref 252719 // function1
	  rank 1 explicit_value "std::map< std::string, std::string > const&"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	classrelation 774832 // <realization>
	  relation 773936 -_-|>
	    a public
	      cpp default "${type}"
	      python "${type}"
	      classrelation_ref 774832 // <realization>
	    b parent class_ref 252719 // function1
	end
      end

      attribute 598192 "factory_"
	private type class_ref 553136 // tracked_generator_fn
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " A method for generating sampler objects."
      end

      extra_member 537392 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1325104 "tracked_definition"
	const public explicit_return_type ""
	nparams 2
	  param in name "label" explicit_type "string"
	  param in name "fn" type class_ref 553136 // tracked_generator_fn
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}
: input_definition( ${p0} )
, factory_( ${p1} )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Main Ctor

 \\param label : name of the region subtype."
      end

      operation 1325232 "tracked_definition"
	const private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1325360 "~tracked_definition"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1325488 "tracked_definition"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 553008 // tracked_definition
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1325616 "tracked_definition"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 553008 // tracked_definition
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1325744 "operator="
	private return_type class_ref 553008 // tracked_definition
	nparams 1
	  param in name "source" type class_ref 553008 // tracked_definition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 537520 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1325872 "operator()"
	const public return_type class_ref 353840 // tracked_observable
	nparams 1
	  param in name "params" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}const std::map< ${t0}, ${t0} > & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->factory_( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Generate a sampler from the given label and paramneters and
 add to the report manager.
"
      end

      extra_member 537648 "access base class methods"
	
	stereotype "using"
	cpp "using input_definition::add_definition;
using input_definition::empty;
using input_definition::has_definition;
using input_definition::label;
using input_definition::publish_help;
using input_definition::size;
" ""
	java ""
	php ""
	python ""
	idl ""
      end
    end

    class 1144111 "sampler_meta"
      visibility protected 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1314735 // <generalisation>
	relation 1276207 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1314735 // <generalisation>
	  b parent class_ref 1082671 // input_base_meta
      end

      classrelation 300081 // <dependency>
	relation 299825 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 300081 // <dependency>
	  b parent class_ref 1144367 // base_observable
      end

      class 156080 "anonymous_missing_sampler_options"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum
 {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl "${comment}${visibility}final class ${name} {
${items}}
"
	python_decl "class ${name}:
${docstring}${members}
"
	idl_decl "${comment}enum ${name} {
${items}};
"
	explicit_switch_type ""
	
	comment " Indices used to check for missing options."
	attribute 183216 "SAMPLER_TYPE"
	  public type class_ref 156080 // anonymous_missing_sampler_options
	  init_value "0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Type of sampler option"
	end

	attribute 198960 "SAMPLER_TAG_COUNT"
	  public type class_ref 156080 // anonymous_missing_sampler_options
	  init_value "1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " The number of required tags"
	end
      end

      attribute 1445423 "parameter_set_"
	private explicit_type "string"
	multiplicity "*"
	stereotype "map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}, ${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
      end

      classrelation 527152 // manager_ (<directional composition>)
	relation 526256 *-->
	  stereotype "shared_ptr"
	  a role_name "manager_" multiplicity "0..1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 527152 // manager_ (<directional composition>)
	  b parent class_ref 340656 // report_manager
      end

      attribute 183088 "missing_required_tags_"
	private explicit_type "SAMPLER_TAG_COUNT"
	multiplicity "*"
	stereotype "bitset"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Check for missing options."
      end

      classrelation 761264 // type_to_sample_ (<directional composition>)
	relation 760368 *-->
	  stereotype "ptr_vector"
	  a role_name "type_to_sample_" multiplicity "*" private
	    comment " Map input file sampler type label to corresponding object
 factories"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 761264 // type_to_sample_ (<directional composition>)
	  b parent class_ref 533040 // sampler_definition
      end

      classrelation 774576 // type_to_tracked_ (<directional composition>)
	relation 773680 *-->
	  stereotype "ptr_vector"
	  a role_name "type_to_tracked_" multiplicity "*" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 774576 // type_to_tracked_ (<directional composition>)
	  b parent class_ref 553008 // tracked_definition
      end

      attribute 1445295 "type_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The type label of the current observable"
      end

      operation 2166703 "sampler_meta"
	public explicit_return_type ""
	nparams 1
	  param in name "manager" type class_ref 340656 // report_manager
	cpp_decl "    ${comment}${inline}${name}${(}boost::shared_ptr< ${t0} > ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}boost::shared_ptr< ${t0} > ${p0}${)}${throw} 
: input_base_meta( core::strngs::sampler_label(), true, true )
, parameter_set_()
, manager_( ${p0} )
, missing_required_tags_( true )
, type_to_sample_()
, type_to_tracked_()
, type_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 2166191 "~sampler_meta"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 833584 "add_sampler_type"
	public explicit_return_type "void"
	nparams 1
	  param inout name "defn" type class_ref 533040 // sampler_definition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}std::unique_ptr< ${t0} > & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}std::unique_ptr< ${t0} > & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add ctor for input \"trial\" section with \"type = [trial_label]\" 

 \\pre not has_trial_type( defn.label )
 \\post has_trial_type( defn.label )"
      end

      operation 1326000 "add_tracked_type"
	public explicit_return_type "void"
	nparams 1
	  param inout name "defn" type class_ref 553008 // tracked_definition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}std::unique_ptr< ${t0} > & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}std::unique_ptr< ${t0} > & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add ctor for input \"trial\" section with \"type = [trial_label]\" 

 \\pre not has_trial_type( defn.label )
 \\post has_trial_type( defn.label )"
      end

      operation 1371056 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this->type_to_sample_.${name}() and this->type_to_tracked_.${name}(); }

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Ary there no evaluator definitions?"
      end

      operation 833456 "has_type"
	public explicit_return_type "bool"
	nparams 1
	  param in name "label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Is there a ctor to match input \"sampler\" section with
 \"type = [label]\""
      end

      operation 833328 "publish_help"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "helper" type class_ref 1004335 // input_help
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 204208 "do_read_entry"
	cpp_virtual private explicit_return_type "bool"
	nparams 1
	  param inout name "reader" type class_ref 313392 // input_base_reader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Read an entry in the input file. Return true if the entry was processed.

throw an error if input file is incorrect (using UTILITY_INPUT macro)"
      end

      operation 204336 "do_read_end"
	cpp_virtual private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Perform checks at the end of reading a section."
      end

      operation 1308976 "do_reset"
	cpp_virtual private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Reset internal data."
      end

      operation 1370928 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this->type_to_sample_.${name}() + this->type_to_tracked_.${name}(); }

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The number of evaluator definitions"
      end
    end
  end

  deploymentview 341807 "Observer deployment"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 377904 "acceptance_observable"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_KEY( observable::acceptance_observable );
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"core/output_file.hpp\"
#include \"core/strngs.hpp\"
//#include \"particle/ensemble.hpp\"
// - 
//#include <iomanip>
//#include <fstream>
#include <boost/format.hpp>
//#include <boost/io/ios_state.hpp>
#include <boost/tuple/tuple.hpp>
// --
${namespace_start}
${members}
${namespace_end}

BOOST_CLASS_EXPORT_IMPLEMENT( observable::acceptance_observable );"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 380208 // acceptance_observable
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 631215 "base_observable"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_KEY( observable::tracked_observable );
BOOST_CLASS_EXPORT_KEY( observable::sampled_observable );
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manual includes
#include \"core/strngs.hpp\"
// -
${namespace_start}
${members}
${namespace_end}

BOOST_CLASS_EXPORT_IMPLEMENT( observable::tracked_observable );
BOOST_CLASS_EXPORT_IMPLEMENT( observable::sampled_observable );"
      associated_classes
	class_ref 1144367 // base_observable
	class_ref 353840 // tracked_observable
	class_ref 360496 // sampled_observable
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 275248 "density_zaxis"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_KEY( observable::density_zaxis );
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manuals
#include \"core/input_base_reader.hpp\"
#include \"core/strngs.hpp\"
#include \"particle/ensemble.hpp\"
// - 
${namespace_start}
${members}
${namespace_end}

BOOST_CLASS_EXPORT_IMPLEMENT( observable::density_zaxis );"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 286000 // density_zaxis
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 504112 "digitizer_3d"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 506032 // digitizer_3d
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 213937 "d3_distribution"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_KEY( observable::d3_distribution );
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manuals
#include \"core/input_base_reader.hpp\"
#include \"core/strngs.hpp\"
#include \"particle/ensemble.hpp\"
#include \"particle/specie_key.hpp\"
// - 
${namespace_start}
${members}
${namespace_end}

BOOST_CLASS_EXPORT_IMPLEMENT( observable::d3_distribution );"
      associated_classes
	class_ref 197169 // d3_distribution
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 135345 "metropolis_sampler"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_KEY( observable::metropolis_sampler );
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manuals
#include <boost/bind.hpp>
#include \"core/strngs.hpp\"
// - 
${namespace_start}
${members}
${namespace_end}

BOOST_CLASS_EXPORT_IMPLEMENT( observable::metropolis_sampler );

"
      associated_classes
	class_ref 663343 // metropolis_sampler
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 351792 "report_manager"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manual includes
#include \"core/strngs.hpp\"
// -

${namespace_start}
${members}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_GUID(observable::report_manager, \"observable::report_manager\");"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 340656 // report_manager
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 200881 "rdf_sampler"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_KEY( observable::rdf_sampler );
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manuals
#include \"core/strngs.hpp\"
#include \"core/input_base_reader.hpp\"
#include \"particle/ensemble.hpp\"
// - 
${namespace_start}
${members}
${namespace_end}

BOOST_CLASS_EXPORT_IMPLEMENT( observable::rdf_sampler );"
      associated_classes
	class_ref 167729 // rdf_sampler
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 789807 "sampler_meta"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manual incls
#include <sstream>
#include <bitset>
#include \"core/strngs.hpp\"
#include \"core/input_help.hpp\"
#include \"utility/utility.hpp\"
${namespace_start}
${members}
${namespace_end}
"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 533040 // sampler_definition
	class_ref 553008 // tracked_definition
	class_ref 1144111 // sampler_meta
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 181041 "specie_count"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_KEY( observable::specie_count );
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"particle/ensemble.hpp\"
// -
#include <boost/format.hpp>
// --
${namespace_start}
${members}
${namespace_end}

BOOST_CLASS_EXPORT_IMPLEMENT( observable::specie_count );"
      python_src "${comment}
${definition}"
      associated_classes
	class_ref 167601 // specie_count
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 563632 "specie_region_count"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_KEY( observable::specie_region_count );
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"particle/ensemble.hpp\"
// -
#include <boost/format.hpp>
// --
${namespace_start}
${members}
${namespace_end}

BOOST_CLASS_EXPORT_IMPLEMENT( observable::specie_region_count );"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 612016 // specie_region_count
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 651823 "widom"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_KEY( observable::widom );
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manual includes
#include <fstream>
#include <boost/tokenizer.hpp>
// -
${namespace_start}
${members}
${namespace_end}

BOOST_CLASS_EXPORT_IMPLEMENT( observable::widom );
"
      associated_classes
	class_ref 135087 // widom
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 769583 "libionch_observable"
      stereotype "library"
      associated_artifacts
	artifact_ref 135345 // metropolis_sampler
	artifact_ref 181041 // specie_count
	artifact_ref 200881 // rdf_sampler
	artifact_ref 213937 // d3_distribution
	artifact_ref 275248 // density_zaxis
	artifact_ref 351792 // report_manager
	artifact_ref 377904 // acceptance_observable
	artifact_ref 504112 // digitizer_3d
	artifact_ref 563632 // specie_region_count
	artifact_ref 631215 // base_observable
	artifact_ref 651823 // widom
	artifact_ref 789807 // sampler_meta
      end
    end
  end

  classview 475311 "loop samplers"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 918959 "base_loop_observable"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      operation 1674031 "operator()"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_form" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end
  end

  package_ref 295471 // Sample collection

  classview 461999 "data accumulator"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 874543 "accu"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Results of the MC simulation.

Set of results accumulated during the MC simulation."
      extra_member 389167 "friend"
	
	cpp "
    friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      class 874799 "anonymous1"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum 
 {
${items}
};
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1104047 "Move"
	  public explicit_type "anonymous1"
	  init_value " 0
        "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1104175 "Jump"
	  public explicit_type "anonymous1"
	  init_value " 1
        "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1104303 "JumpIn"
	  public explicit_type "anonymous1"
	  init_value " 2
        "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1104431 "JumpOut"
	  public explicit_type "anonymous1"
	  init_value " 3
        "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1104559 "Create"
	  public explicit_type "anonymous1"
	  init_value " 0
        "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1104687 "Destroy"
	  public explicit_type "anonymous1"
	  init_value " 1
        "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1104815 "Attempt"
	  public explicit_type "anonymous1"
	  init_value " 0
        "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1104943 "Succeed"
	  public explicit_type "anonymous1"
	  init_value " 1
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end
      end

      operation 1555247 "serialize"
	stereotype "template"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<class Archive>
${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      class 874927 "distribution_type"
	visibility package stereotype "struct"
	nformals 1
	formal name "Value" type "class" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	class 875055 "value_type"
	  visibility package stereotype "typedef" explicit_base_type "Value"
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl ""
	  php_decl ""
	  python_decl "class ${name}${inherit}:
${docstring}${members}
"
	  idl_decl ""
	  explicit_switch_type ""
	  
	end

	classrelation 945327 // data (<directional composition>)
	  relation 916015 *-->
	    a role_name "data" multiplicity "[SpecieSize][RegionSize]" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	      python "${comment}${self}${name} = ${type}()
"
	      classrelation_ref 945327 // data (<directional composition>)
	    b parent class_ref 875055 // value_type
	end

	operation 1555375 "serialize"
	  stereotype "template"
	  preserve_cpp_body_indent public explicit_return_type "void"
	  nparams 2
	    param inout name "ar" explicit_type "Archive"
	    param in name "version" explicit_type "unsigned int"
	  cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}template<class Archive>
${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 1555503 "operator ()"
	  cpp_inline public explicit_return_type "value_type"
	  nparams 2
	    param in name "spc" explicit_type "uint16_type"
	    param in name "rgn" explicit_type "uint16_type"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} { return data[spc][rgn]; };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 1555631 "operator ()"
	  const cpp_inline public explicit_return_type "value_type"
	  nparams 2
	    param in name "spc" explicit_type "uint16_type"
	    param in name "rgn" explicit_type "uint16_type"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} { return data[spc][rgn]; };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end
      end

      attribute 1105071 "ah"
	private explicit_type " double "
	stereotype "std::valarray"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "* Sum of \"h\" for each accum [ionch/accu/ah]
     
[PatchSize];"
      end

      attribute 1105199 "gz"
	private explicit_type " uint64_type "
	multiplicity "[SpecieSize]"
	stereotype "std::valarray"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "* histogram of particles and distance across zzreg regions 
 [SpecieSize][AccumulatorSize1];"
      end

      attribute 1105327 "calgin"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "* Indicate if we should calculate gin or not

     (Note as gin_geometry is separate object. This variable
     can be replaced with gin_obj_ptr != 0)
     "
      end

      attribute 1105455 "gin"
	private explicit_type " uint32_type "
	multiplicity "[SpecieSize]"
	stereotype "std::valarray"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "* Count of particles by distance into zzinlft region
     and radial. gin[last] is similar but is sum charges.
     
 [SpecieSize][AccumulatorSize2][AccumulatorSize2];"
      end

      attribute 1105583 "gin_charge"
	private explicit_type " double "
	stereotype "std::valarray"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [AccumulatorSize2][AccumulatorSize2];"
      end

      attribute 1105711 "calrdf"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Data for radial distribution function.
* Should we calculate rdf? "
      end

      attribute 1105839 "drdf"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      class 875567 "anonymous2"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum 
 {
${items}
};
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1105967 "Center"
	  public explicit_type "anonymous2"
	  init_value " 0      // Anaca/asuba indices
        "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1106095 "Filter"
	  public explicit_type "anonymous2"
	  init_value " 1  //
        "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1106223 "Channel"
	  public explicit_type "anonymous2"
	  init_value " 2
        "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1106351 "Bulk"
	  public explicit_type "anonymous2"
	  init_value " 3
        "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1106479 "ASize"
	  public explicit_type "anonymous2"
	  init_value " 4   //  Anaca/asuba size
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end
      end

      attribute 1106607 "anaca"
	private explicit_type " distribution_type< double > "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " First index is specie
 Second index is region
 Last index is counter
 [SpecieSize][ASize][KSubMax];"
      end

      attribute 1106735 "asuba"
	private explicit_type " distribution_type< double > "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [SpecieSize][ASize][KSubMax];"
      end

      attribute 1106863 "zocc"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "* Centre occupancy ?? "
      end

      classrelation 946863 // parent_ (<unidirectional association>)
	relation 917551 --->
	  a role_name "parent_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    python "${comment}${self}${name} = ${value}
"
	    classrelation_ref 946863 // parent_ (<unidirectional association>)
	  b parent class_ref 875695 // evaluator
      end

      operation 1555759 "accu"
	private explicit_return_type ""
	nparams 1
	  param in name "" explicit_type "accu"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " no copy or assign"
      end

      operation 1555887 "operator ="
	private explicit_return_type "accu"
	nparams 1
	  param in name "" explicit_type "accu"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " no copy or assign"
      end

      operation 1556015 "accu"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param inout name "a_parent" explicit_type "evaluator"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}${)}
    : an (uint64_type (0U), size_t (SpecieSize))
    , ah ()
    , anin ()
    , amove (uint64_type (0U), size_t (SpecieSize * 4 * 2))
    , acreat (uint64_type (0U), size_t (RegionSize * SaltSize * 2 * 2))
    , aocc ()
    , athist (0U)
    , ataccu (0U)
    , gz ()
    , calgin (false)
    , gin ()
    , gin_charge (0., size_t (AccumulatorSize2 * AccumulatorSize2))
    , calrdf (false)
    , ardf ()
    , rdf ()
    , drdf (constants::rdf_cutoff / AccumulatorSize2)
    , nrdf (0)
    , anaca ()
    , asuba ()
    , zocc (2.5)
    , parent_ (a_parent)
    , gzgeom_ (new gz_geometry (a_parent.get_environment(), a_parent.get_specie ()))
    , gingeom_ ()
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " CTOR
<       zocc=2.5 >"
      end

      operation 1556143 "~accu"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1556271 "accum"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "bufer_1" explicit_type "guard_letter"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// _________ 
//<       subroutine accum >

${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Sample system"
      end

      operation 1556399 "calc_gin"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return calgin;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1556527 "do_readin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "scnr" explicit_type "reader"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " readin in parameters for sampler"
      end

      operation 1556655 "do_readin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// accum_ 

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Finalise sampler part of readin"
      end

      operation 1556783 "do_wrcf"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "a_os" explicit_type "ostream"
	  param in name "a_spec" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write data to disk. (called from ion_specie.wrcf)"
      end

      operation 1556911 "grow"
	cpp_inline public explicit_return_type "void"
	nparams 4
	  param in name "a_rgn" explicit_type "uint8_type"
	  param in name "a_slt" explicit_type "uint8_type"
	  param in name "a_movetype" explicit_type "uint8_type"
	  param in name "succeed_or_attempt" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        GRS400_REQUIRE (a_rgn < RegionSize, \"Region index out of range\");
        GRS400_REQUIRE (a_slt < SaltSize, \"Salt index out of range\");
        GRS400_REQUIRE (a_movetype <= Destroy, \"Move type out of range\");
        GRS400_REQUIRE (succeed_or_attempt < 2, \"Attempt or succeed not 0 or 1\");
        ++acreat[acreat_(a_rgn,a_slt,a_movetype,succeed_or_attempt)];
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Get notice about attempts to change the number of particles"
      end

      operation 1557039 "hist"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// _________ 
//<       subroutine hist  >

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Gather histogram data"
      end

      operation 1557167 "move"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "a_ispec" explicit_type "uint8_type"
	  param in name "a_movetype" explicit_type "uint8_type"
	  param in name "succeed_or_attempt" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        GRS400_REQUIRE (a_ispec < SpecieSize, \"Specie index out of range\");
        GRS400_REQUIRE (a_movetype <= JumpOut, \"Move type out of range\");
        GRS400_REQUIRE (succeed_or_attempt < 2, \"Attempt or succeed not 0 or 1\");
        ++amove[amove_(a_ispec,a_movetype,succeed_or_attempt)];
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Get notice about attempts to move a particle"
      end

      operation 1557295 "reset"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// hist_ 
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
//<       subroutine zero >

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Reset the data collection."
      end

      operation 1557423 "saves"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param inout name "a_os" explicit_type "ostream"
	  param in name "istep" explicit_type "uint32_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Digest and write out data"
      end
    end

    class 873263 "Accum"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      operation 1553967 "rdf_index"
	const private explicit_return_type "size_t"
	nparams 3
	  param in name "ispec" explicit_type "size_t"
	  param in name "jspec" explicit_type "size_t"
	  param in name "ireg" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      classrelation 943791 // accum (<directional composition>)
	relation 914479 *-->
	  a role_name "accum" class_relation public
	    comment " exemplar"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 943791 // accum (<directional composition>)
	  b parent class_ref 873263 // Accum
      end

      attribute 1097519 "nrgmx"
	class_attribute const_attribute public explicit_type "size_t"
	init_value "=  2048"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " maximum number of histogram bins in r direction"
      end

      attribute 1097647 "noccmx"
	class_attribute const_attribute public explicit_type "size_t"
	init_value "=  4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " maximum number of particles in filter region we count for
 generating the co-occupancy matrix 'aocc'"
      end

      attribute 1097775 "ah"
	private explicit_type " double "
	stereotype "ublas::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Sum of h vector from patch class (average: ah/ataccu) {"
      end

      attribute 1097903 "aocc"
	private explicit_type "size_t"
	multiplicity "[3][noccmx+1][noccmx+1][noccmx+1][noccmx+1]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " co-occupancy matrix - record what sets of particles
 are in the filter region at the same time"
      end

      attribute 1098031 "anin"
	private explicit_type "hist2array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Histogram of particles in each region

 (merged 'an' into anin as anin(ibulk,*)"
      end

      attribute 1098159 "abulk"
	private explicit_type " double "
	stereotype "ublas::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Sum of per-specie particle number in bulk region (average: abulk/athist)"
      end

      attribute 1098287 "cbulk"
	private explicit_type " double "
	stereotype "ublas::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Current per-specie concentration in bulk"
      end

      attribute 1098415 "acharge"
	private explicit_type "runstat"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Sum of charges (average: acharge/ataccu)"
      end

      attribute 1098543 "athist"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Count of calls to 'hist' routine; used to determine average
 of statistics collected in 'hist' routine"
      end

      attribute 1098671 "ataccu"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Count of calls to 'accmlt' routine; used to determine
 average of statistics collected in 'accmlt' routine"
      end

      attribute 1098799 "drg"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Width of bins (both axial and radial) in 2D 'gin' distribution
 and 3D 'gxyz' and 'grtz' distributions."
      end

      attribute 1098927 "zinlft"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The axial outer-most point of the 2D 'gin' distribution"
      end

      attribute 1099055 "rinup"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The radial outer-most point of the 2D 'gin distribution"
      end

      attribute 1099183 "drdf"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Width of histogram bins in the inter-particle radial distribution"
      end

      attribute 1099311 "zocc"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Width to #include \"for the inner-most occupancy calculations (defaults to zlimit).hpp\"
=0.D0"
      end

      attribute 1099439 "ginvol"
	private explicit_type " double "
	stereotype "ublas::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " volumes for the 2D 'gin' histogram bins (indep} //ent of z and specie)"
      end

      attribute 1099567 "gin"
	private explicit_type "hist3array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The 2D 'gin' distribution"
      end

      attribute 1099695 "grtz_zero"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Index of the particle to #include \"as the theta zero.hpp\""
      end

      attribute 1099823 "d3_width"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Width of bins (both axial and radial) in 3D 'gxyz' and 'grtz' distributions."
      end

      attribute 1099951 "d3_vol"
	private explicit_type " double "
	stereotype "ublas::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " volumes for the 3D 'grtz' histogram bins (indep} //ent of z and specie)"
      end

      attribute 1100079 "rdfhist"
	private explicit_type "hist1array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The counts (numerator) for the inter-particle radial distribution
 INDEX (ireg, jspec, ispec)
 type (hist1array), private, allocatable, dimension (:,:,:) :: "
      end

      attribute 1100207 "gzhist"
	private explicit_type "hist2array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The z-axial 'gz' distribution data"
      end

      attribute 1100335 "nrg"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of in-#include \"bins in the 'gz' distribution.hpp\""
      end

      attribute 1100463 "nrgr"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of radial bins in 2D 'gin' distribution"
      end

      attribute 1100591 "nrgz"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of axial bins in 2D 'gin' distribution"
      end

      attribute 1100719 "nrdf"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of active bins in the inter-particle radial distribution"
      end

      attribute 1100847 "ksub"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of times we have saved a digest (ie called 'saves')
 =0;"
      end

      attribute 1100975 "isave"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [INPUT] How often the statistic data is saved."
      end

      attribute 1101103 "calgin"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [INPUT] calgin: compute 2D (z,r) profiles
 =.false."
      end

      attribute 1101231 "calrdf"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [INPUT] calrdf: compute inter-particle radial distribution
 =.false."
      end

      attribute 1101359 "calacc"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [INPUT] calacc: show move acceptance ratios
 =.false."
      end

      attribute 1101487 "calmob"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [INPUT] calmob: calculate information about 'mobile' ions
 =.false."
      end

      attribute 1101615 "ninj"
	private explicit_type " double "
	stereotype "ublas::matrix"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " fluctuation variable sum(N_i * N_j) used in iterat
 [Constants::nspcmx][Constants::nspcmx];"
      end

      class 873391 "chem_pot_method"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name}
 {
${items}
};
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1101743 "no_update"
	  public type class_ref 873391 // chem_pot_method
	  init_value "0
      "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1101871 "malas1"
	  public type class_ref 873391 // chem_pot_method
	  init_value "1
      "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1101999 "malas2"
	  public type class_ref 873391 // chem_pot_method
	  init_value "2
      "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1102127 "accept"
	  public type class_ref 873391 // chem_pot_method
	  init_value "3
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end
      end

      operation 1554095 "Accum"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : amobdl(Constants::nspcmx)
    , amobvr(Constants::nspcmx)
    , amobdx(Constants::nspcmx)
    , amobdy(Constants::nspcmx)
    , amobdz(Constants::nspcmx)
    , ah()
    , aocc()
    , anin()
    , abulk(Constants::nspcmx)
    , cbulk(Constants::nspcmx)
    , acharge()
    , athist(0)
    , ataccu(0)
    , drg(0.1), zinlft(0.0), rinup(0.0), drdf(0.0), zocc(0.0)
    , ginvol()
    , gin()
    , gxyz(), grtz()
    , grtz_zero(0)
    , d3_width(0.1), d3_rmax(0.0), d3_zmax(0.0)
    , d3_zgrid_size(0), d3_rgrid_size(0)
    , d3_vol()
    , rdfhist(NULL)
    , gzhist()
    , nrg(0), nrgr(0), nrgz(0), nrdf(0)
    , ksub(0), isave(0)
    , calgin(false)
    , calrdf(false)
    , calacc(false)
    , calmob(false)
    , ninj(Constants::nspcmx,Constants::nspcmx)
  {
    for (std::size_t idx = 0; idx //= Constants::nspcmx; ++idx)
      {
	for (std::size_t jdx = 0; jdx //= Constants::nspcmx; ++jdx)
	  {
	    ninj(idx, jdx) = 0;
	  }
      }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1554223 "Accum"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 873263 // Accum
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Undefined"
      end

      operation 1554351 "operator ="
	private return_type class_ref 873263 // Accum
	nparams 1
	  param in name "" type class_ref 873263 // Accum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Undefined"
      end

      operation 1554479 "~Accum"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
    if (rdfhist //= NULL) delete [] rdfhist;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1554607 "accmlt"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    // LOCALS
    std::size_t ireg,ispec  // loop counters for regions,species,patches
      ,i1,i2,i3,i4; // histogram indices

    ++this->ataccu;
    this->acharge.rs_push(Conf::conf.charge);

    // for (h3c4v2:  ; XXX != ; ++XXX) {
    for (ireg = Constants::izlim; ireg //= Constants::ichan + 1; ++ireg)
      {
	i1 = std::min(Conf::conf.nin(ireg,Spec::spec.idxcl()),noccmx);
	i2 = std::min(Conf::conf.nin(ireg,Spec::spec.idxcl()+1),noccmx);
	i3 = std::min(Conf::conf.nin(ireg,Spec::spec.idxcl()+2),noccmx);
	i4 = std::min(Conf::conf.nin(ireg,Spec::spec.idxcl()+3),noccmx);
	++this->aocc[ireg][i1][i2][i3][i4];
      } //for (h3c4v2 ; XXX != ; ++XXX) {

    // for (l0z8a5: do  ; XXX != ; ++XXX) {
    for (ispec = 0; ispec //= Spec::spec.nspec(); ++ispec);
    {
      this->anin.hist_push (Constants::izlim, ispec, Conf::conf.nin(Constants::izlim,ispec));
      this->anin.hist_push (Constants::ifilt, ispec, Conf::conf.nin(Constants::ifilt,ispec));
      this->anin.hist_push (Constants::ichan, ispec, Conf::conf.nin(Constants::ichan,ispec));
      this->anin.hist_push (Constants::ibulk, ispec, Conf::conf.ni(ispec));
    } //for (l0z8a5 ; XXX != ; ++XXX) {

    if (not Patch::patch.homog)
      {
	for (std::size_t ipch = 0; ipch //= Patch::patch.npatch(); ++ipch)
	  {
	    this->ah[ipch] += Conf::conf.h(ipch);
	  }
      }
    this->anin.hist_};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "public :: accmlt, acceql, accblk, iterat, ecaccu, gz_av, hist, rdaccu, rfaccu, saves, zeroac
 -------------------------------------------------------------
 Accumulate simple collective statistics

  This routine collects filter occupancy data from 'nin' arrays.
  It also saves the 'h' vector and charge."
      end
    end
  end

  deploymentview 321071 "aaa"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 580399 "Accum"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 873263 // Accum
      end
    end
  end

  package_ref 163376 // observable_test
end
