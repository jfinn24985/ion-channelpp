class localizer
!!!1381040.cpp!!!	add_definition(inout meta : evaluator_meta) : void
std::string desc( "Calculate a harmonic restraining potential for localized ion species." );
std::unique_ptr< evaluator_definition > defn( new evaluator_definition( localizer::type_label_(), desc, &localizer::make_evaluator ) );
// Add parameter definitions.
defn->add_definition( { core::strngs::fskmob(), "number", ">0", "4.5", "The spring factor of the harmonic localization force. The default value is 4.5. This value when paired with R values equal to 2 x X-ray B-factor/RMSD give a force field that should produce an atom distribution similar to that of the X-ray or atomic simulation." } );
meta.add_definition( defn );
!!!276016.cpp!!!	make_evaluator(in param_set : string, in reader : input_base_reader) : base_evaluator
// Evaluator meta should ensure only valid parameters were
// set.
std::unique_ptr< localizer > cc( new localizer );
if( not param_set.empty() )
{
  std::string bad_params;
  for( auto& entry : param_set )
  {
    if( entry.first.find( core::strngs::fskmob() ) == 0 )
    {
      double spring_factor;
      reader.float_input( core::strngs::fskmob(), entry.second, "Harmonic potential factor", core::strngs::evaluator_label(), spring_factor, true, true, &reader );
      cc->spring_factor( spring_factor );
    }
    else
    {
      if( bad_params.empty() )
      {
        bad_params = entry.first;
      }
      else
      {
        bad_params += " " + entry.first;
      }
    }
  }
  if( not bad_params.empty() )
  {
    reader.invalid_parameter_subtype_error( core::strngs::evaluator_label(), type_label_(), bad_params );
  }
}
std::unique_ptr< base_evaluator > result( cc.release() );
return result;
!!!276272.cpp!!!	type_label_() : string
  return core::strngs::localizer_label();
!!!275376.cpp!!!	compute_potential(in pman : particle_manager, in gman : geometry_manager, inout changes : change_set) : void
auto const& spcs = pman.get_species();
auto const& ens = pman.get_ensemble();
for (auto &atom: changes)
{
   if ( particle::specie_key::nkey ==  atom.key )
   {
      continue;
   }
   // ASSUMPTION: localized atoms can only be moved, not
   // added or removed.
   if ( spcs[ atom.key ].is_localized() )
   { 
      // Get localization data after converting global index into a per-specie index
      const geometry::centroid rs( spcs[ atom.key ].get_localization_data( ens.specie_index( atom.index ) ) );
      // new penalty
      const double r_sq{ gman.calculate_distance_squared( atom.new_position, rs.position() ) };
      if (rs.r * rs.r < r_sq)
      {
         // New position outside of cutoff, fail move.
         changes.set_fail();
         return; 
      }
      atom.energy_new += this->spring_factor_ * r_sq / (rs.r * rs.r);

      // old penalty
      atom.energy_old += this->spring_factor_ *
            ( gman.calculate_distance_squared( atom.old_position, rs.position() ) ) / (rs.r * rs.r);

   }
}
!!!538928.cpp!!!	compute_total_potential(in pman : particle_manager, in gman : geometry_manager) : double
double energy = 0.0;
auto const& ens = pman.get_ensemble();
for( std::size_t idx = 0; idx != ens.size(); ++idx )
{
  std::size_t ispec = ens.key( idx );
  if( particle::specie_key::nkey == ispec )
  {
    continue;
  }
  // ASSUMPTION: localized atoms can only be moved, not
  // added or removed.
  if( pman.get_specie( ispec ).is_localized() )
  {
    // Get localization data after converting global index into a per-specie index
    const geometry::centroid rs( pman.get_specie( ispec ).get_localization_data( ens.specie_index( idx ) ) );
    // penalty
    const double r_sq
    {
      gman.calculate_distance_squared( ens.position( idx ), rs.position() )
    };
    energy += this->spring_factor_ * r_sq / ( rs.r * rs.r );
  }
}
return energy;

!!!275504.cpp!!!	do_description(inout os : ostream) : void
os << " Compute the harmonic potential to localize specific particles\n\n";
os << "  For a harmonic oscillator the potential stored in a particle is\n\n";
os << "     U = 1/2 k r^2\n\n";
os << "  Where k is the spring constant and r is the distance from the mean position\n";
os << "  of the oscillation. The potential to approximate a Uniform distribution is:\n\n";
os << "     U  = k_bT/2 ( r^2 )/( sigma^2 )  -- eqn 1\n\n";
os << "  We reformulate this as (now in units of \"k_bT\"):\n\n";
os << "     U = C_mob ( r^2 )/( R_i^2 ) -- eqn 2\n\n";
os << "  Where \"C_mob\" is a simulation wide constant (the spring factor) and R_i\n";
os << "  is a per-particle is the cut-off distance.\n\n";
os << "  To get eqn 2 to model a Uniform distribution our values of the spring factor\n";
os << "  (C_mob, parameter \"mobk\") and R_i must satisfy the relations.\n\n";
os << "     C_mob = 1/2 n^2 and R_i = n * sigma -- eqn 3\n\n";
os << "  where n is any factor. Conversely, given kmob and R_i the distribution\n";
os << "  models a Uniform distribution with \n\n";
os << "     sigma^2 = R_i^2 / (2 * C_mob)\n\n";
os << "  DEFAULT SETTINGS:\n\n";
os << "  In a Uniform distribution, greater that 99.5\% of the distribution\n";
os << "  is within 3 standard deviations of the mean position. We take this as\n";
os << "  the default by defining (n) in eqn 3 as 3 giving:\n\n";
os << "     C_mob = 4.5\n";
os << "     R_i  = 3 * sigma\n\n";
os << "  If we have B factors from an X-ray we can determine R_i from\n\n";
os << "     R_i = 3 * sigma = 3 { 1/(2 pi) sqrt( B_i/2 ) }\n\n";
os << " Spring factor: " << this->spring_factor_ << " (kT)\n";

!!!276144.cpp!!!	do_write_document(inout wr : input_document, in ix : size_t) : void
wr[ ix ].add_entry( core::strngs::fskmob(), this->spring_factor_ );

