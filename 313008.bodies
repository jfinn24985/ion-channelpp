class input_node
!!!550576.cpp!!!	getline(out line : string) : void
if (this->pos_ > this->buffer_.size())
{
   // Handle case of reading past last line of file
   line.clear();
   return;
}
else if (this->pos_ == this->buffer_.size())
{
   // Handle case of last line of file being '\n{EOF}'
   line.clear();
   ++this->pos_;
}
else
{
   std::string::size_type ipos = this->buffer_.find('\n', this->pos_);
   // Handle case of last line of buffer when ipos = npos
   if (ipos == std::string::npos)
   {
      line = this->buffer_.substr( this->pos_, ipos );
      this->pos_ = this->buffer_.size();
   }
   else
   {
      line = this->buffer_.substr( this->pos_, ipos - this->pos_ );
      this->pos_ = ipos + 1;
   }
}
++this->line_no_;
!!!551088.cpp!!!	set_buffer(in filename : path) : bool
this->path_ = boost::filesystem::absolute( filename ).string();
// read file into our buffer stream
std::ifstream ifs( this->path_.c_str() );
std::string temp_buffer;
if ( ifs )
{
   ifs.seekg(0, std::ios::end);
   std::streampos length = ifs.tellg();
   ifs.seekg(0, std::ios::beg);
   temp_buffer.reserve( length );
   temp_buffer.assign( ( std::istreambuf_iterator<char>( ifs ) ), ( std::istreambuf_iterator<char>() ) );
  std::swap( temp_buffer, this->buffer_ );
  this->rewind();
  return true;
}
else
{
  return false;
}
!!!551216.cpp!!!	set_buffer(in filename : path, in buffer : string) : bool
this->path_ = boost::filesystem::absolute( filename ).string();
this->line_no_ = 0;
this->buffer_ = buffer;
return true;
