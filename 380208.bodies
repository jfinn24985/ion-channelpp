class acceptance_observable
!!!1326128.cpp!!!	add_definition(inout meta : sampler_meta) : void
std::string desc( "Monitor the trial acceptance rate for the different trial types. This is a metric to optimise the simulation and is not a result of the simulation." );
std::unique_ptr< tracked_definition > result( new tracked_definition( type_label_(), desc, &acceptance_observable::make_sampler ) );
// no extra parameters
meta.add_tracked_type( result );

!!!718128.cpp!!!	description(inout out : ostream) : void
out << " " << this->type_label_() << "\n";
out << " " << std::string( this->type_label_().size(), '-' ) << "\n";
out << "    Collect and report trial acceptance probabilities.\n";
!!!718384.cpp!!!	get_value() : boost::any
boost::any result = this->data_;
return result;
!!!719280.cpp!!!	make_sampler(in param_set : input_parameter_memo) : tracked_observable
UTILITY_REQUIRE( param_set.size() == 1, "This sampler requires no parameters." );
boost::shared_ptr< tracked_observable > tmp(new acceptance_observable);
return tmp;
!!!718640.cpp!!!	on_report(inout out : ostream, inout sink : base_sink) : void
// data is  [change_hash] : <<success/trial>> : <<attempts>>
// (0, 1, 1, 0) 0.66666667          0 0.30000000 0.00000000
const std::string label( "acceptance.dat" );
if( not this->data_.empty() )
{
  // LOG OUTPUT
  // ----------
  {
    const static boost::format title_str( " %14s %10s %10s %10s %10s" );
    out << "Trial occurence data since last report.\n";
    out << boost::format( title_str ) % "Trial" % "Accept.av" % "Accept.var" % "Trial.av" % "Trial.var" << "\n";
    const static boost::format format_str( " %14s %10.8f %10.8f %10.8f %10.8f" );
    for( auto const& entry : this->data_ )
    {
      std::stringstream hashval;
      hashval << entry.first;
      out << boost::format( format_str ) % hashval.str() % entry.second.mean( 0 ) % entry.second.variance( 0 ) % entry.second.mean( 1 ) % entry.second.variance( 1 ) << "\n";
    }
  }
  // SAVED OUTPUT
  // ------------
  if( not this->locked_ )
  {
    // need to give a data set definition
    std::unique_ptr< observable::output_series >definition{ new observable::output_series( label, true ) };
    definition->set_title( "Trial acceptance and rate data." );
    {
      std::unique_ptr< observable::key_output > field{ new observable::key_output( "Trial", "ID", true ) };
      // Add keys.
      for( auto const& entry : this->data_ )
      {
        std::stringstream hashval;
        hashval << entry.first;
        field->push_back( hashval.str() );
      }
      definition->push_back_field( std::move( field ) );
    }
    {
      std::unique_ptr< observable::mean_variance_output > field{ new observable::mean_variance_output( "Accept.mean Accept.var", "Rate Rate2" ) };
      definition->push_back_field( std::move( field ) );
    }
    {
      std::unique_ptr< observable::mean_variance_output > field{ new observable::mean_variance_output( "Trial.mean Trial.var", "Rate Rate2" ) };
      definition->push_back_field( std::move( field ) );
    }
    if( not sink.has_dataset( label ) )
    {
      sink.add_dataset( std::move( definition ) );
    }
    // else
    //  sink.replace_dataset( std::move( definition ) );
    this->locked_ = true; // Can not add any new trials.
  }
  // CHECK ALL COUNTS ARE EQUAL
  UTILITY_ENSURE_OLD( const std::size_t check_counter = this->data_.begin()->second.count() );
  // Convert map to series.
  std::size_t rank{ 0 };
  for( auto & entry : this->data_ )
  {
    UTILITY_ENSURE( check_counter == entry.second.count(), "Serious error, estimater counters should all be equal" );
    std::unique_ptr< observable::output_series_datum > datum( new observable::output_series_datum{ rank, new utility::estimate_array{ 2 } } );
    datum->arr->swap( entry.second );
    sink.receive_data( label, std::move( datum ) );
    ++rank;
  }
}
!!!1485104.cpp!!!	on_sample(in pman : particle_manager, in gman : geometry_manager, in eman : evaluator_manager) : void
// If we have a vary rare trial it might not appear in the
// first sample window. Therefore we may need to add an
// estimater after the first sample window. This would
// require incrementing the counter of new estimater by
// calling append "count" times with zero.
std::size_t count = 0;
if( not this->data_.empty() )
{
  count = this->data_.begin()->second.count();
}
for( auto & entry : this->dictionary_ )
{
  // entry.first : hash
  // entry.second.first : success
  // entry.second.second : attempts
  auto iter = this->data_.find( entry.first );
  // iter->first : hash
  // iter->second.first : success chance per attempt
  // iter->second.second : attempt chance
  if( this->data_.end() == iter )
  {
    iter = this->data_.insert( std::make_pair( entry.first, utility::estimate_array{ 2ul } ) ).first;
    // for late added estimaters we need to increase their
    // counter
    double dummy[ 2 ]{ 0.0, 0.0 };
    for( std::size_t catchup = 0; catchup != count; ++catchup)
    {
       iter->second.append( &dummy[0], &dummy[2] );
    }
  }
  if( 0 == entry.second.second )
  {
    double dummy[ 2 ]{ 0.0, 0.0 };
    iter->second.append( &dummy[0], &dummy[2] );
  }
  else
  {
    double dummy[ 2 ]{ double(entry.second.first)/double(entry.second.second), double(entry.second.second)/double(this->total_) };
    iter->second.append( &dummy[0], &dummy[2] );
  }
  // reset counters
  entry.second.first = 0ul;
  entry.second.second = 0ul;
}
// reset total count
this->total_ = 0ul;
!!!718000.cpp!!!	on_trial_end(in trial : change_set) : void
auto iter = this->dictionary_.find( trial.id() );
if( this->dictionary_.end() == iter )
{
  UTILITY_REQUIRE( not this->locked_, "Attempt to extend acceptance sampler after defining the first report.\n\n** Increase reporting interval or trial probability. **\n" );
  iter = this->dictionary_.insert( std::pair< particle::change_hash, std::pair< std::size_t, std::size_t > >( trial.id(), { 0ul, 0ul } ) ).first;
}
++this->total_;
++(iter->second.second);
if (trial.accept())
{
  ++(iter->second.first);
}
!!!718512.cpp!!!	prepare(in pman : particle_manager, in gman : geometry_manager, in eman : evaluator_manager, in sman : report_manager) : void
this->data_.clear();
this->dictionary_.clear();
this->total_ = 0ul;
this->locked_ = false;
!!!719408.cpp!!!	do_write_document(inout wr : input_document, in ix : size_t) : void
wr[ix].add_entry(core::strngs::fstype(), this->type_label_());

!!!1498672.cpp!!!	get_datum(in id : change_hash) : estimate_array
auto iter = this->data_.find( id );
UTILITY_REQUIRE( this->data_.end() != iter, "Change hash not in acceptance object data set." );
return iter->second;
