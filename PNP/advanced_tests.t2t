Advanced Tests
Justin Finnnerty
2017


+ Introduction +

The project uses both traditional unit-tests and small
simulations to test the workings of the components of the
project. Shell scripts are provided to simplify running these
tests under UNIX like systems (requires the ''find'' command).

The unit-tests verify the piecewise operation of the
programs. These test the correctness of the components rapidly
and take less tham a minute to run them all. To test the
working of algorithms that use random numbers, we need to
test the distributions of the results. These require longer
tests and take some time to run. Some of these longer tests
currently also require manual interpretation of the results.

+ Basic Unit-tests +

All test programs exist in subdirectories of their associated
library. The program names all end with the suffix
''_exec''. For example the unit-tests for the particle
library (''libionch_particle'') is in ''src/particle'' and
its unit-tests are in ''src/particle/particle_test'' and is
called ''particle_exec''.  Any program not mentioned below is
a rapid unit-test.

The scripts to run these tests are called ''do_tests.sh'' and
''do_release_tests.sh'', to run the DEBUG and RELEASE 
compilation variants.

+ Small simulation tests +

The following test programs take some time to complete and
manual inspection of the results to verify the tests have
passed.

These can be run, along with the basic unit-tests, using
the script ''do_all_tests.sh'' which runs the unit-tests
made with the RELEASE compilation variant.

++ geom_distribution_exec ++

The program tests the distribution of new particle positions
generated by the various region objects.  These distributions
should be equivolume throughout the region. The program
generates many new positions and samples the distribution of
the positions in a 3D grid. It is expected that the number of
positions in each cell form a //normal// distribution, so the
program prints the average and variance as well as the ratio
of cells outside 2 and 3 standard deviations of the mean. The
user should expect that the mean and variance are about equal
and that less than 5 percent of cells are outside 2 standard
devations and 0.5 percent are outside 3 standard deviations.

++ imc_convergence_exec ++

This tests several things. The first set of tests involve the
methods used to calculate the excess chemical potentials. The
methods used are those of Lamperski, Malasics and Widom.
The Lamperski and Malasics methods are iterative Monte Carlo
methods. During these iterations, the Widom particle insertion
method is also used to calculate the excess chemical potentials.
As this is a simulation the excess chemical potential values
will form distributions. These distributions should be
''normal'' and the three methods should provide similar results.

The second test involves testing the Metropolis-Hastings
algorithm and the energy distribution it produces. This test
involves saving a log of all trials and post-processing the
results using a second script. This script presents the log as
several graphs. One of the graphs is the energy distribution,
which should be a ''normal'' distribution.  This is further
checked by a probit plot, which should be parallel to the
X-axis for a ''normal'' distribution. Another graph compares
the acceptance probability of the trial with the acceptance
expectation. This plot should also be parallel to the X-axis
and within the displayed varying error estimates.

The script is called ''trial-log-test.py'' and is a python
script that requires the ''numpy'' and ''matplotlib'' python
libraries installed.
