#ifndef IONCH_PERIODIC_CUBE_ALTERNATER_CHOOSER_HPP
#define IONCH_PERIODIC_CUBE_ALTERNATER_CHOOSER_HPP

//----------------------------------------------------------------------
//This source file is free software: you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program.  If not, see <http://www.gnu.org/licenses/>.
//----------------------------------------------------------------------

#include "trial/base_chooser.hpp"
#include <boost/serialization/shared_ptr.hpp>
#include <string>
#include <boost/ptr_container/serialize_ptr_vector.hpp>
#include <boost/serialization/map.hpp>
#include <iostream>
#include <cstddef>

namespace periodic_cube { class alternater_sampler; } 
namespace platform { class simulator; } 
namespace trial { class base_choice; } 
namespace core { class input_document; } 
namespace periodic_cube { class alternater_choice; } 

namespace periodic_cube {

class alternater_chooser : public trial::base_chooser
 {
   private:
    // The sampler for gathering add/remove success rates.
    boost::shared_ptr< alternater_sampler > sampler_;

    //  A label for the trial generated by the choice.
    static std::string type_;

    //  The relative rate of the generated choices.
    double rate_;


   public:
    //  Generate and add choices to simulator.
    virtual void generate_choices(const platform::simulator & sim, boost::ptr_vector< trial::base_choice >& choices) const override;

    alternater_chooser() = default;

    alternater_chooser(double rate)
    : sampler_()
    , rate_( rate )
    {}

    virtual ~alternater_chooser();

    alternater_chooser(const alternater_chooser & source)
    : sampler_(  source.sampler_ )
    , rate_(  source.rate_ )
    {}
    alternater_chooser(alternater_chooser && source)
    : sampler_(  std::move( source.sampler_ ) )
    , rate_(  std::move( source.rate_ ) )
    {}
    alternater_chooser & operator=(alternater_chooser source)
    {
      this->swap( source );
      return *this;
    }

    void swap(alternater_chooser & source)
    {
       std::swap( sampler_, source.sampler_ );
       std::swap( rate_, source.rate_ );
    }
    //  Function to add move choice objects to the simulation.
    static void make_chooser(const std::map< std::string, std::string >& params, std::string type, double rate, platform::simulator & sim);

    // Provide a description of the chooser state.
    virtual void description(std::ostream & os) const;


   private:
    // Add derived content to input file section wr[ix]. 
    //
    // only throw possible should be from os.write() operation
    void do_write_document(core::input_document & wr, std::size_t ix) const override;


};

} // namespace periodic_cube
#endif
