//----------------------------------------------------------------------
//This source file is free software: you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program.  If not, see <http://www.gnu.org/licenses/>.
//----------------------------------------------------------------------


#ifndef DEBUG
#define DEBUG 0
#endif

#include "cscpbc/alternater_chooser.hpp"
#include "cscpbc/alternater_sampler.hpp"
#include "platform/simulator.hpp"
#include "trial/choice.hpp"
#include "core/input_document.hpp"
#include "cscpbc/alternater_choice.hpp"

// manual includes
#include "core/strngs.hpp"
#include "utility/fuzzy_equals.hpp"
#include "utility/utility.hpp"
// -
namespace periodic_cube {

//  A label for the trial generated by the choice.
std::string alternater_chooser::type_ = "alternater";

//  Generate and add choices to simulator.
void alternater_chooser::generate_choices(const platform::simulator & sim, boost::ptr_vector< trial::base_choice >& choices) const
{
  for (std::size_t ispec = 0; ispec != sim.specie_count (); ++ispec)
  {
     // All species with non-zero specie rate can have Grand Canonical trials
     auto const& spec = sim.get_specie( ispec );
     const double choice_rate { this->rate_ * spec.rate() };
     if ( not utility::feq( choice_rate, 0.0 ) )
     {
        std::unique_ptr< alternater_choice > choice_ptr(new alternater_choice(ispec));
        choice_ptr->set_probability( choice_rate );
        choices.push_back(choice_ptr.release());
     }
  }

}

alternater_chooser::~alternater_chooser() = default;

//  Function to add move choice objects to the simulation.
void alternater_chooser::make_chooser(const std::map< std::string, std::string >& params, std::string type, double rate, platform::simulator & sim)
{
  UTILITY_INPUT( params.empty(), "Accept trial requires no extra parameters", core::strngs::fstry(), nullptr );
  
  std::unique_ptr< alternater_chooser > choice_ptr(new alternater_chooser(rate));
  choice_ptr->sampler_.reset(new periodic_cube::alternater_sampler);
  boost::shared_ptr< observable::sampled_observable > result(choice_ptr->sampler_);
  sim.add_chooser(choice_ptr.release());
  sim.get_reporter().add_sample(result);

}

// Provide a description of the chooser state.
void alternater_chooser::description(std::ostream & os) const
{
  static const boost::format header(" %6s %7.2f");
  os << boost::format(header) % core::strngs::fstype() % (100.0*this->rate_) << "\n";

}

// Add derived content to input file section wr[ix]. 
//
// only throw possible should be from os.write() operation
void alternater_chooser::do_write_document(core::input_document & wr, std::size_t ix) const
{
wr[ ix ].add_entry( core::strngs::fstype(), this->type_ );
wr[ ix ].add_entry( core::strngs::rate_label(), this->rate_ );

}


} // namespace periodic_cube

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_GUID(periodic_cube::alternater_chooser, "periodic_cube::alternater_chooser");