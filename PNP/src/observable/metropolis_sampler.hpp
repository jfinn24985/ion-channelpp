#ifndef IONCH_OBSERVABLE_METROPOLIS_SAMPLER_HPP
#define IONCH_OBSERVABLE_METROPOLIS_SAMPLER_HPP

//----------------------------------------------------------------------
//This source file is free software: you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License
//along with this program.  If not, see <http://www.gnu.org/licenses/>.
//----------------------------------------------------------------------

#include "observable/base_observable.hpp"
#include "utility/estimater.hpp"
#include "utility/histogram.hpp"
#include <iostream>
#include <string>
#include <boost/serialization/shared_ptr.hpp>
#include <boost/serialization/vector.hpp>
#include <cstddef>

namespace observable { class output_dataset; } 
namespace observable { class sampler_meta; } 
namespace core { class input_parameter_memo; } 
namespace particle { class change_set; } 
namespace particle { class particle_manager; } 
namespace geometry { class geometry_manager; } 
namespace evaluator { class evaluator_manager; } 
namespace observable { class base_sink; } 
namespace observable { class report_manager; } 
namespace core { class input_document; } 

namespace observable {

//  Sample the metropolis factor generated by each trial. Failed
//  trials have a factor of 0.
class metropolis_sampler : public tracked_observable
 {
   private:
    //Estimate of the boltzmann acceptance factor.
    utility::estimater boltzmann_factor_;

    //Change in potential energy (ignores mu_ex and prefactor)
    utility::estimater energy_change_;

    //Histogram of the energy
    //
    // NOTE: The energy histogram is extendable until the first call to "on_report"
    utility::histogram energy_;

    // For serialization and factory
    metropolis_sampler();


   public:
    virtual ~metropolis_sampler();


  friend class boost::serialization::access;
   private:
    template<class Archive>
      inline void serialize(Archive & ar, const unsigned int version) {
      ar & boost::serialization::base_object< tracked_observable >(*this);
      ar & boltzmann_factor_;
      ar & energy_change_;
      ar & energy_;
    }


   public:
    // Add definition for generating objects of this 
    // class to the meta object.
    static void add_definition(sampler_meta & meta);

    //Log message descibing the observable and its parameters
    void description(std::ostream & out) const override;

    std::string get_label() const override;

    //Retrieve the current estimate of the boltzmann factor and
    //energy change.
    //
    ///return Type pair< estimater, estimater > with
    //  result.first -> boltzmann factor and 
    //  result.second -> energy change
    boost::any get_value() const override;

    static boost::shared_ptr< tracked_observable > make_sampler(const std::vector< core::input_parameter_memo >& param_set);

    //Collect information about the a_trial move
    virtual void on_trial_end(const particle::change_set & trial) override;

    //Accumulate data after a sequence of trials.
    void on_sample(const particle::particle_manager & pman, const geometry::geometry_manager & gman, const evaluator::evaluator_manager & eman) override;

    // Reporting operations.
    //
    // NOTE: The energy histogram is extendable only until first call to "on_report"
    void on_report(std::ostream & out, base_sink & sink) override;

    // Prepare for a main simulation loop
    virtual void prepare(const particle::particle_manager & pman, const geometry::geometry_manager & gman, const evaluator::evaluator_manager & eman, const report_manager & sman) override;

    static std::string type_label_();


   private:
    // Add type of sampler to wr[ix] document section
    virtual void do_write_document(core::input_document & wr, std::size_t ix) const;


   public:
    // The boltzmann estimater
    const utility::estimater& boltzmann_factor() const
    {
      return this->boltzmann_factor_;
    }
    // The log( -energy ) estimater
    const utility::estimater& energy_change() const
    {
      return this->energy_change_;
    }
    // The histogram of log( -E )
    const utility::histogram& energy() const
    {
      return this->energy_;
    }

};

} // namespace observable

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_KEY( observable::metropolis_sampler );
#endif
