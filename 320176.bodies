class gdbm_sink
!!!569648.cpp!!!	gdbm_sink(in path : string, in mode : base_sink::open_mode = RW_CREATE)
const std::string ext( ".dbm" );
if ( ext != this->path_.substr( this->path_.size() - ext.size() ) )
{
   this->path_.append( ext );
}
!!!567600.cpp!!!	do_append(in path : string, in buffer : string) : void
// Empty buffer is allowed, but ignored.
UTILITY_CHECK( not buffer.empty(), "append method should ensure buffer is not empty before calling append_priv." );

this->ensure_open();
datum_type key;
key.buffer( path );
datum_type content( std::move( ::gdbm_fetch( static_cast< GDBM_FILE >(this->dbf_), key ) ) );
content.append( buffer );
::gdbm_store( static_cast< GDBM_FILE >(this->dbf_), key, content, GDBM_REPLACE );

!!!567728.cpp!!!	ensure_open() : void
UTILITY_REQUIRE( not this->path_.empty(), "Attempt to use sink before setting path" );
if( nullptr == this->dbf_ )
{
  // Check path exits
  boost::filesystem::path parent( boost::filesystem::path( this->path_ ).parent_path() );
  if( not parent.empty() )
  {
    if( not boost::filesystem::exists( parent ) )
    {
      boost::filesystem::create_directories( parent );
    }
    if( not boost::filesystem::is_directory( parent ) )
    {
      throw core::input_error::input_logic_error( "Problem with \"" + core::strngs::outputdir_label() + "\" value", core::strngs::simulator_label(), "Unable to create directory " + parent.string() + "." );
    }
  }
  int flag;
  bool must_exist = false;
  switch( this->mode() )
  {
  case READ_ONLY:
    flag = GDBM_READER;
    must_exist = true;
    break;
  case READ_WRITE:
    flag = GDBM_WRITER;
    must_exist = true;
    break;
  case RW_CREATE:
    flag = GDBM_WRCREAT;
    break;
  case NEW_SINK:
    flag = GDBM_NEWDB;
    break;
  default:
  {
    UTILITY_ALWAYS( false, "Should never be here!" );
    break;
  }
  }
  if( must_exist )
  {
    if( not boost::filesystem::exists( this->path_ ) )
    {
      throw core::input_error::input_logic_error( "Problem with \"" + core::strngs::outputdir_label() + "\" value", core::strngs::simulator_label(), "Request to open archive file " + this->path_ + " but file does not exist." );
    }
  }
  this->dbf_ = ::gdbm_open( const_cast< char* >( this->path_.c_str() ), 4096, flag, 0644, nullptr );
  if( nullptr == this->dbf_ )
  {
    // error occurred
    std::string mesg = ::gdbm_strerror( ::gdbm_errno );
    throw core::input_error::input_logic_error( "Possible problem with \"" + core::strngs::outputdir_label() + "\" value", core::strngs::simulator_label(), mesg );
  }
}
!!!567856.cpp!!!	ensure_close() : void
if ( nullptr != this->dbf_ )
{
   ::gdbm_close( static_cast< GDBM_FILE >(this->dbf_) );
   this->dbf_ = nullptr;
}

!!!567472.cpp!!!	do_exists(in path : string) : bool
this->ensure_open();
datum_type key;
key.buffer( path );
return 0 != ::gdbm_exists( static_cast< GDBM_FILE >(this->dbf_), key );
!!!567344.cpp!!!	do_read(in path : string, out outbuffer : string) : bool
UTILITY_REQUIRE( not path.empty(), "Can not read from empty path." );
this->ensure_open();
datum_type key;
key.buffer( path );
if ( 0 != ::gdbm_exists( static_cast< GDBM_FILE >(this->dbf_), key ) )
{
   datum_type content( std::move( ::gdbm_fetch( static_cast< GDBM_FILE >(this->dbf_), key ) ) );
   outbuffer = content.buffer();
   return true;
}
else
{
   return false;
}
!!!567216.cpp!!!	do_write(in path : string, in buffer : string) : void
this->ensure_open();
datum_type key, content;
key.buffer( path );
content.buffer( buffer );
::gdbm_store( static_cast< GDBM_FILE >(this->dbf_), key, content, GDBM_REPLACE );
