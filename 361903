format 75
"particle" // particle
  revision 200
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  stereotype "library"
  cpp_h_dir "particle"
  cpp_src_dir "particle"
  cpp_namespace "particle"
  python_dir "cmc"
  python_package "cmc"
  comment "Classes that manage information about particles and species

Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
  classview 511919 "ensemble change delta"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    classdiagram 438575 "Ensemble delta definition"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 400048 "change_hash"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Hash for use with choice objects.

 Code should not care about the sort order of the hash. The
 purpose of the hash is to allow hash_tables, sets or maps
 and search methods to be used.
"
      attribute 441136 "key_"
	private explicit_type "size_t"
	init_value "0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Empty first byte or specie key"
      end

      attribute 441264 "start_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of particles in change set at start of trial."
      end

      attribute 441392 "finish_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of particles in the change set at end of trial."
      end

      attribute 441520 "subtype_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Trial subtype indicator. Value is user defined."
      end

      operation 747696 "change_hash"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}: key_(0), start_(0), finish_(0), subtype_(0) {}
"
	
	
	
	
      end

      operation 747824 "~change_hash"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	
	
      end

      operation 747952 "change_hash"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 400048 // change_hash
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: key_( std::move( ${p0}.key_ ) )
, start_( std::move( ${p0}.start_ ) )
, finish_( std::move( ${p0}.finish_ ) )
, subtype_( std::move( ${p0}.subtype_ ) )
{}
"
	
	
	
	
      end

      operation 748080 "change_hash"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 400048 // change_hash
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: key_( ${p0}.key_ )
, start_( ${p0}.start_ )
, finish_( ${p0}.finish_ )
, subtype_( ${p0}.subtype_ )
{}
"
	
	
	
	
      end

      operation 748208 "operator="
	public return_type class_ref 400048 // change_hash
	nparams 1
	  param in name "source" type class_ref 400048 // change_hash
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	
	
      end

      operation 748336 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 400048 // change_hash
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap( this->key_, ${p0}.key_ );
  std::swap( this->start_, ${p0}.start_ );
  std::swap( this->finish_, ${p0}.finish_ );
  std::swap( this->subtype_, ${p0}.subtype_ );
}
"
	
	
	
	
      end

      operation 748592 "change_hash"
	public explicit_return_type ""
	nparams 4
	  param in name "speciekey" explicit_type "size_t"
	  param in name "start_count" explicit_type "size_t"
	  param in name "finish_count" explicit_type "size_t"
	  param in name "choice_subtype" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}
: key_( ${p0} )
, start_( ${p1} )
, finish_( ${p2} )
, subtype_( ${p3} )
{}
"
	
	
	
	
      end

      extra_member 370608 "friend"
	
	cpp "

  friend class boost::serialization::access;

" ""
	java ""
	php ""
	python ""
	idl ""
      end

      classrelation 506800 // <dependency>
	relation 505904 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 506800 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 783536 "serialize"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & key_;
    ar & start_;
    ar & finish_;
    ar & subtype_;
  }
"
	
	
	
	
	comment "We serialize the object using the struct members not the
hash. This should ensure the object has the same logical 
state regardless of endianness."
      end

      operation 755120 "equivalent"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 400048 // change_hash
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->key_ == ${p0}.key_
	&& this->start_ == ${p0}.start_
	&& this->finish_ == ${p0}.finish_
	&& this->subtype_ == ${p0}.subtype_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1332912 "finish"
	stereotype "get"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the hash's finish count"
      end

      operation 1333936 "finish"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the hash's finish count"
      end

      operation 1332656 "key"
	stereotype "get"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the hash's specie key."
      end

      operation 1334320 "key"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the hash's specie key."
      end

      operation 755376 "less_than"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 400048 // change_hash
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->key_ < ${p0}.key_
	|| (this->key_ == ${p0}.key_ && (this->start_ < ${p0}.start_
		|| (this->start_ == ${p0}.start_ && (this->finish_ < ${p0}.finish_
			|| (this->finish_ == ${p0}.finish_ && this->subtype_ < ${p0}.subtype_)))));
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 783664 "match"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 400048 // change_hash
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->start_ == ${p0}.start_
	&& this->finish_ == ${p0}.finish_
	&& this->subtype_ == ${p0}.subtype_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Two change_hash objects match if they are equivalent except for the specie key,
 which may or may not be equivalent."
      end

      extra_member 363440 "operator=="
	
	cpp "friend inline bool operator==(change_hash const& lhs, change_hash const&rhs)
{
  return lhs.equivalent(rhs);
}
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 363568 "operator!="
	
	cpp "friend inline bool operator!=(change_hash const& lhs, change_hash const&rhs)
{
  return not lhs.equivalent(rhs);
}
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 363696 "operator<"
	
	cpp "friend inline bool operator<(change_hash const& lhs, change_hash const&rhs)
{
  return lhs.less_than(rhs);
}
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 363824 "operator>="
	
	cpp "friend inline bool operator>=(change_hash const& lhs, change_hash const&rhs)
{
  return not lhs.less_than(rhs);
}
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 363952 "operator>"
	
	cpp "friend inline bool operator>(change_hash const& lhs, change_hash const&rhs)
{
  return rhs.less_than(lhs);
}
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 364080 "operator<="
	
	cpp "friend inline bool operator<=(change_hash const& lhs, change_hash const&rhs)
{
  return not rhs.less_than(lhs);
}
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1193136 "operator<<"
	stereotype "friend"
	friend public explicit_return_type "ostream"
	nparams 2
	  param in name "os" explicit_type "ostream"
	  param in name "rhs" type class_ref 400048 // change_hash
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}${t0}& ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  os << \"(\" << rhs.key_ << \", \" << rhs.start_ << \", \" << rhs.finish_ << \", \" << rhs.subtype_ << \")\";
  return os;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1332784 "start"
	stereotype "get"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the hash's start count."
      end

      operation 1334192 "start"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the hash's start count."
      end

      operation 1333040 "subtype"
	stereotype "get"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the hash's trial sub-type ID."
      end

      operation 1334064 "subtype"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the hash's trial sub-type ID."
      end
    end

    class 986543 "change_set"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}(object):
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "The set of change steps making up the trial move.

NOTE: Does not serialize pointer to choice. All deserialized
objects will have choice_ == nullptr (see below)

A trial change is composed of two stages: generating the
trial change and evaluating the change.  This class maintains
information from both stages.  One important piece of
information is whether the change is somehow not valid, this is
tested using the ``fail`` method.  This value does not indicate
the result of the Metropolis acceptance test.  An invalid
change set will always be rejected in the Metropolis test,
however a valid change set may also be rejected.  The validity
of the change set therefore has the following consequences.

+ A client object calls ``set_fail`` if it detects that the
current changes are invalid for some reason.

Serialization: This object is not intended to be serialized
into an archive. Serialization of this object is targeted at
transfer between parts of a parallel simulation. For this
purpose, only the source task will be generating and approving
change_sets and so sink tasks do not need the link to the
choice object that generated the change_set.
"
      class 986671 "const_iterator"
	visibility package stereotype "typedef" base_type class_ref 986415 // change_atom
	cpp_decl "${comment}typedef std::vector< ${type} >::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Iterator type of the vector of change atoms."
      end

      class 1055663 "iterator"
	visibility package stereotype "typedef" base_type class_ref 986415 // change_atom
	cpp_decl "${comment}typedef std::vector< ${type} >::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Iterator type of the vector of change atoms."
      end

      classrelation 1083055 // changes (<directional composition>)
	relation 1045935 *-->
	  stereotype "vector"
	  a role_name "changes" multiplicity "*" private
	    comment "The set of changes"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}_${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1083055 // changes (<directional composition>)
	  b parent class_ref 986415 // change_atom
      end

      attribute 1221807 "exponential_factor"
	private explicit_type "double"
	init_value "0.0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}_${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  Change in the chemical potential (in atomic units)

  Only valid if self.fail = True"
      end

      attribute 1222063 "probability_factor"
	private explicit_type "double"
	init_value "1.0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}_${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  Probability proportionality factor for the change in configuration

  Only valid if self.fail = True"
      end

      classrelation 781360 // id_ (<directional composition>)
	relation 780464 *-->
	  a role_name "id_" multiplicity "1" private
	    comment " The change atom identifier/key"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 781360 // id_ (<directional composition>)
	  b parent class_ref 400048 // change_hash
      end

      attribute 1222191 "fail"
	private explicit_type "bool"
	init_value "False"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}_${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Is this change still valid"
      end

      attribute 1360175 "accept"
	private explicit_type "bool"
	init_value "False"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}_${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Whether trial was commited or not"
      end

      extra_member 397232 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1770927 "change_set"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: changes_()
, exponential_factor_ (0.0)
, probability_factor_ (1.0)
, id_()
, fail_ (false)
, accept_ (false)
{}"
	
	
	
	
      end

      operation 572465 "__init__"
	public explicit_return_type ""
	nparams 1
	  param inout name "self" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}super(${class}, ${p0}).__init__()
${body}
"
	
	comment "Python ctor"
      end

      operation 572593 "__enter__"
	public explicit_return_type ""
	nparams 1
	  param in name "self" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}return self
"
	
	comment "Enter RAII zone"
      end

      operation 572721 "__exit__"
	public explicit_return_type ""
	nparams 2
	  param in name "self" explicit_type ""
	  param in name "*args" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}if self.choice != None:
  self.choice.end_trial (self)
"
	
	comment "End RAII zone"
      end

      operation 1771055 "~change_set"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	
	
      end

      operation 915888 "change_set"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 986543 // change_set
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: changes_( std::move( ${p0}.changes_ ) )
, exponential_factor_( std::move( ${p0}.exponential_factor_ ) )
, probability_factor_( std::move( ${p0}.probability_factor_ ) )
, id_( std::move( ${p0}.id_ ) )
, fail_( std::move( ${p0}.fail_ ) )
, accept_( std::move( ${p0}.accept_ ) )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 916016 "change_set"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 986543 // change_set
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: changes_( ${p0}.changes_ )
, exponential_factor_( ${p0}.exponential_factor_ )
, probability_factor_( ${p0}.probability_factor_ )
, id_( ${p0}.id_ )
, fail_( ${p0}.fail_ )
, accept_( ${p0}.accept_ )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1333424 "change_set"
	public explicit_return_type ""
	nparams 1
	  param in name "id" type class_ref 400048 // change_hash
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}
: changes_()
, exponential_factor_( 0.0 )
, probability_factor_( 1.0 )
, id_( ${p0} )
, fail_( false )
, accept_( false )
{}
"
	
	
	
	
      end

      operation 916144 "operator="
	public return_type class_ref 986543 // change_set
	nparams 1
	  param in name "source" type class_ref 986543 // change_set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 916272 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 986543 // change_set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap( this->changes_, ${p0}.changes_ );
  std::swap( this->exponential_factor_, ${p0}.exponential_factor_ );
  std::swap( this->probability_factor_, ${p0}.probability_factor_ );
  std::swap( this->id_, ${p0}.id_ );
  std::swap( this->fail_, ${p0}.fail_ );
  std::swap( this->accept_, ${p0}.accept_ );
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 442159 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1981103 "serialize"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ar & changes_;
  ar & exponential_factor_;
  ar & probability_factor_;
  ar & id_;
  ar & fail_;
  ar & accept_;
}
"
	
	
	
	
	comment "NOTE: Does not serialize pointer to choice. All deserialized
objects will have choice_ == nullptr

"
      end

      extra_member 397360 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 426801 "accept"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
	comment "Has this change been accepted 

This is false until after calling commit, when
it will be true."
      end

      operation 1770031 "add_atom"
	public explicit_return_type "void"
	nparams 1
	  param in name "an_atom" type class_ref 986415 // change_atom
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
   this->changes_.push_back(${p0});
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.changes.append( ${p0} )
"
	
	comment "Add an atom to the change set"
      end

      operation 1771951 "begin"
	stereotype "const"
	const public return_type class_ref 986671 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->changes_.${name}();
}
"
	
	
	
	
      end

      operation 2021935 "begin"
	public return_type class_ref 1055663 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->changes_.${name}();
}
"
	
	
	
	
      end

      operation 1772847 "end"
	stereotype "const"
	const public return_type class_ref 986671 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->changes_.${name}();
}
"
	
	
	
	
      end

      operation 2022063 "end"
	public return_type class_ref 1055663 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->changes_.${name}();
}
"
	
	
	
	
      end

      operation 1771439 "energy"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}val = 0.0
for atom in self.changes:
  val += atom.energy_new - atom.energy_old
return val"
	
      end

      operation 923056 "equivalent"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 986543 // change_set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Test if two change_atoms have the same data."
      end

      operation 1988015 "exponential_factor"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
      end

      operation 1773103 "fail"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->fail_;
}
"
	
	
	
	
	comment "Is this change valid?"
      end

      operation 1333168 "id"
	stereotype "get"
	const public return_type class_ref 400048 // change_hash
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->id_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the change set's ID/key"
      end

      operation 1333296 "id"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "id" type class_ref 400048 // change_hash
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->id_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the change set's ID/key"
      end

      operation 1770287 "metropolis_factor"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}import math
deltu = (self.energy() - self.exponential_factor - math.log(self.probability_factor))
# less than 0 will be accepted otherwise need comparison for acceptance
return 1.1 if deltu < 0 else math.exp(max (-250.0,-deltu))

"
	
	comment "Calculate the Metropolis-Hasting probability for this change

/pre is_valid
 /return  (0.0, VERY_LARGE)"
      end

      operation 1981359 "operator []"
	stereotype "const"
	const public return_type class_ref 986415 // change_atom
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->changes_[${p0}];
}
"
	
	
	python_def "${@}${static}${abstract}def __getitem__${(}self, ${p0}${v0}${)}:
${docstring}return self.changes[${p0}]
"
	
      end

      operation 1988143 "probability_factor"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
      end

      operation 655153 "set_accept"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->accept_ = ${p0};
}
"
	
	
	
	
      end

      operation 1773231 "set_fail"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  this->fail_ = true;
}
"
	
	
	
	
      end

      operation 1772975 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->changes_. ${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def __len__${(}self${)}:
${docstring}return len(self.changes)
"
	
      end

      operation 1770415 "update_exponential_factor"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->exponential_factor_ += ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.exponential_factor += ${p0}
"
	
	comment "  Add to the chemical potential for the change in the configuration (\"beta\" units)

   \\ensure self.chemical_potential = a_value + old(self.chemical_potential)"
      end

      operation 1770671 "update_probability_factor"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  UTILITY_REQUIRE (${p0} > 0.0, \"Bad update value, factor should be greater than 0.0\");
  this->probability_factor_ *= ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.probability_factor *= ${p0}

"
	
	comment "  Update the pre-exponential probability factor for this change

  \\pre value > 0
  \\ensure self.probability_factor = a_value * old(self.probability_factor)"
      end

      operation 686385 "operator<<"
	friend public explicit_return_type "std::ostream"
	nparams 2
	  param inout name "os" explicit_type "ostream"
	  param in name "rhs" type class_ref 986543 // change_set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type}& ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment " Stream insert function for visualizing object, possibly
 for debugging etc."
      end

      operation 923568 "operator=="
	friend public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" type class_ref 986543 // change_set
	  param in name "rhs" type class_ref 986543 // change_set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return lhs.equivalent( rhs );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 923440 "operator!="
	friend public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" type class_ref 986543 // change_set
	  param in name "rhs" type class_ref 986543 // change_set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return not lhs.equivalent( rhs );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end
    end

    class 986415 "change_atom"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Describe a change to a single particle."
      classrelation 581168 // <dependency>
	relation 580272 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 581168 // <dependency>
	  b parent class_ref 303025 // specie_key
      end

      attribute 346033 "old_rij"
	public explicit_type "double"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The inter-particle distances from any new position on
this atom."
      end

      attribute 212401 "new_rij"
	public explicit_type "double"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The inter-particle distances from any new position on
this atom."
      end

      attribute 1220783 "do_old"
	public explicit_type "bool"
	init_value "True"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Calculate the energy of the old position."
      end

      attribute 1220911 "do_new"
	public explicit_type "bool"
	init_value "True"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Calculate the energy of the new position"
      end

      attribute 1366703 "energy_old"
	public explicit_type "double"
	init_value "0.0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1366831 "energy_new"
	public explicit_type "double"
	init_value "0.0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1352111 "key"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The key for the given particle."
      end

      attribute 1221167 "index"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The (possible) index of the particle."
      end

      classrelation 1131823 // new_position (<directional composition>)
	relation 1094703 *-->
	  a role_name "new_position" multiplicity "1" public
	    comment "The possible new changed position"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}
from coordinate import coordinate
${self}${name} = coordinate()
"
	    classrelation_ref 1131823 // new_position (<directional composition>)
	  b parent class_ref 986799 // coordinate
      end

      classrelation 1131951 // old_position (<directional composition>)
	relation 1094831 *-->
	  a role_name "old_position" multiplicity "1" public
	    comment "The possible old position"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = coordinate()
"
	    classrelation_ref 1131951 // old_position (<directional composition>)
	  b parent class_ref 986799 // coordinate
      end

      extra_member 403888 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1769775 "change_atom"
	protected explicit_return_type ""
	nparams 6
	  param in name "use_old" explicit_type "bool"
	  param in name "use_new" explicit_type "bool"
	  param in name "aindex" explicit_type "size_t"
	  param in name "aoldpos" type class_ref 986799 // coordinate
	  param in name "anewpos" type class_ref 986799 // coordinate
	  param in name "akey" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} & ${p3}${v3}, const ${t4} & ${p4}${v4}, ${t5} ${p5}${v5}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}${)}${throw}
${body}
"
	
	
	
	
      end

      operation 1772079 "change_atom"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
: old_rij ()
, new_rij ()
, do_old (true)
, do_new (true)
, energy_old (0.0)
, energy_new (0.0)
, key (particle::specie_key::nkey)
, index(0)
, new_position ()
, old_position ()
{}
"
	
	
	
	
	comment "Default ctor"
      end

      operation 725936 "change_atom"
	public explicit_return_type ""
	nparams 1
	  param in name "ispec" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${volatile}${throw} 
: old_rij()
, new_rij()
, do_old(true)
, do_new(true)
, energy_old(0.0)
, energy_new(0.0)
, key(${p0})
, index(0)
, new_position()
, old_position()
{}
"
	
	
	
	
	comment "Construct with specie key"
      end

      operation 1772207 "~change_atom"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}
{}
"
	
	
	
	
      end

      operation 1772335 "change_atom"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 986415 // change_atom
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = default;"
	
	
	
	
      end

      operation 434352 "change_atom"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 986415 // change_atom
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} && ${p0}${)}${volatile}${throw}
${body}"
	
	
	
	
      end

      operation 1772463 "operator="
	public return_type class_ref 986415 // change_atom
	nparams 1
	  param in name "source" type class_ref 986415 // change_atom
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( source );
  return *this;
}
"
	
	
	
	
      end

      operation 1772719 "swap"
	stereotype "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 986415 // change_atom
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap (old_rij, source.old_rij);
  std::swap (new_rij, source.new_rij);
  std::swap (do_old, source.do_old);
  std::swap (do_new, source.do_new);
  std::swap (energy_old, source.energy_old);
  std::swap (energy_new, source.energy_new);
  std::swap (key, source.key);
  std::swap (index, source.index);
  std::swap (new_position, source.new_position);
  std::swap (old_position, source.old_position);
}
"
	
	
	
	
      end

      extra_member 442287 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1981231 "serialize"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & old_rij;
    ar & new_rij;
    ar & do_old;
    ar & do_new;
    ar & energy_old;
    ar & energy_new;
    ar & key;
    ar & index;
    ar & new_position;
    ar & old_position;
  };
"
	
	
	
	
      end

      extra_member 404016 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 427057 "equivalent"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "rhs" type class_ref 986415 // change_atom
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
      end

      operation 686257 "operator<<"
	friend public explicit_return_type "std::ostream"
	nparams 2
	  param inout name "os" explicit_type "ostream"
	  param in name "rhs" type class_ref 986415 // change_atom
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type}& ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
      end

      operation 923184 "operator=="
	friend public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" type class_ref 986415 // change_atom
	  param in name "rhs" type class_ref 986415 // change_atom
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return lhs.equivalent( rhs );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 923312 "operator!="
	friend public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" type class_ref 986415 // change_atom
	  param in name "rhs" type class_ref 986415 // change_atom
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return not lhs.equivalent( rhs );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end
    end
  end

  classview 441391 "ionch particle set classes"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 321199 // libparticle deployment
    classdiagram 174128 "particle heirachy"
      draw_all_relations default hide_attributes yes hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 446128 "particle_manager"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Manage the ensemble of particles and their type information

 TODO: write_document (need to update specie location info)
     generate_simulation (copy from specie location info)
    ** Scan simulator class for places where ensemble and specie state
    ** is changed."
      classrelation 567984 // <dependency>
	relation 567088 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 567984 // <dependency>
	  b parent class_ref 912431 // access
      end

      classrelation 567728 // ensemble_ (<directional composition>)
	relation 566832 *-->
	  stereotype "shared_ptr"
	  a role_name "ensemble_" multiplicity "0..1" private
	    comment " The set of particles"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 567728 // ensemble_ (<directional composition>)
	  b parent class_ref 134959 // ensemble
      end

      classrelation 567856 // species_ (<directional composition>)
	relation 566960 *-->
	  stereotype "vector"
	  a role_name "species_" multiplicity "*" private
	    comment " Set of species."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 567856 // species_ (<directional composition>)
	  b parent class_ref 134577 // specie
      end

      attribute 306736 "eps_"
	private explicit_type "double"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment "The value of the permittivity around the particle"
      end

      extra_member 390320 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 975152 "particle_manager"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
: ensemble_( new particle::ensemble )
, species_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 975280 "~particle_manager"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 975408 "particle_manager"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 446128 // particle_manager
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: ensemble_( std::move( ${p0}.ensemble_ ) )
, species_( std::move( ${p0}.species_ ) )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 975536 "particle_manager"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 446128 // particle_manager
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: ensemble_( ${p0}.ensemble_ )
, species_( ${p0}.species_ )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 975664 "operator="
	public return_type class_ref 446128 // particle_manager
	nparams 1
	  param in name "source" type class_ref 446128 // particle_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 975792 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 446128 // particle_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap( this->ensemble_, ${p0}.ensemble_ );
  std::swap( this->species_, ${p0}.species_ );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 390192 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 908336 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}template<class Archive> ${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
      end

      extra_member 410544 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 937520 "charge"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Current charge of system"
      end

      operation 907952 "description"
	const cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Details about the current ensemble of particles."
      end

      operation 434096 "eps"
	const public explicit_return_type "double"
	nparams 1
	  param in name "aindex" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_[${p0}];
}
"
	
	
	
	
	comment "Get the permittivity of the media around the particle.

\\undefined aindex >= size"
      end

      operation 907824 "get_ensemble"
	stereotype "const"
	const public return_type class_ref 134959 // ensemble
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return *(this->ensemble_.get ());
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.ensemble_
"
	
	comment " Get the current particle set"
      end

      operation 907696 "get_specie"
	stereotype "const"
	const public return_type class_ref 134577 // specie
	nparams 1
	  param in name "key" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} const& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->species_[key];
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}return self.species_[${p0}]
"
	
	comment " Get the definition of a specie by index"
      end

      operation 907568 "get_specie"
	public return_type class_ref 134577 // specie
	nparams 1
	  param in name "key" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->species_.at( key );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}return self.species_[${p0}]
"
	
	comment " Get the definition of a specie by index

 \\pre key < specie_count : out_of_range"
      end

      operation 907440 "get_specie_key"
	const public explicit_return_type "size_t"
	nparams 1
	  param in name "label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the key of a specie from a label. 

 \\pre has_specie(label)
 (C++ throws out_of_range if not found)
 (Python raises KeyError if not found)
"
      end

      operation 907312 "get_species"
	stereotype "const"
	const public return_type class_ref 134577 // specie
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::vector< ${type} > const& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->species_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.species_
"
	
	comment " Get the complete specie set"
      end

      operation 907184 "has_specie"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}return name in (x.label() for x in self.species_)
"
	
	comment " Do we have a specie with this label?"
      end

      operation 908208 "specie_count"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->species_.size();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return len(self.species_)
"
	
	comment " The number of different species

 ( equivalent to get_species().size() ("
      end

      operation 951216 "write_document"
	public explicit_return_type "void"
	nparams 1
	  param inout name "wr" type class_ref 163632 // input_document
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write ensemble and specie information as an input document"
      end

      extra_member 390448 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 908464 "add_specie"
	public explicit_return_type "size_t"
	nparams 1
	  param in name "spc" type class_ref 134577 // specie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  this->species_.push_back(spc);
  return this->species_.size() - 1;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.species_.append( ${p0} )
"
	
	comment " Add (copy) specie to set and return the index of the specie"
      end

      operation 951344 "add_predefined_particles"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Copy particles defined in the input file into the ensemble 
 (Should only be called when generating the initial ensemble)"
      end

      operation 1401264 "commit"
	public explicit_return_type "void"
	nparams 1
	  param inout name "atomset" type class_ref 986543 // change_set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  UTILITY_REQUIRE( not ${p0}.fail(), \"Can not commit failed change.\" );
  this->ensemble_->commit( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Change, add or remove a particles defined by change set if
 change has not failed.

 \\pre not atomset.fail"
      end

      operation 434224 "set_eps"
	public explicit_return_type "void"
	nparams 2
	  param in name "idx" explicit_type "size_t"
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  this->eps_[ ${p0} ] = ${p1};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the permittivity around the given particle"
      end
    end

    class 197552 "centroid"
      visibility protected 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Information about the centrepoints of localised atoms

 (x,y,z coordinates and spring constant/max displacement parameter r)"
      classrelation 204592 // <dependency>
	relation 204336 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 204592 // <dependency>
	  b parent class_ref 912431 // access
      end

      attribute 236592 "r"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Radial factor of localisation potential (not that the fortran version
 stores this value as the square of the value in the input to avoid
 squaring the value when required. This is not done here and the value
 must be squared when used.)"
      end

      attribute 236208 "x"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "X-coord of localisation centre point"
      end

      attribute 236336 "y"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Y-coord of localisation centre point"
      end

      attribute 236464 "z"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Z-coord of localisation centre point"
      end

      extra_member 191152 "IO"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 291120 "write"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract}
{
  os << this->r << \" \" << this->x << \" \" << this->y << \" \" << this->z;
}
"
	
	
	python_def "${@}${static}${abstract}def __str__${(}self${)}:
${docstring}return \"%9.4f %9.4f %9.4f\" % (self.x, self.y, self.z)
"
	
	comment " Write to stream.

 Not robust enough for interpreting user input."
      end

      operation 298288 "read"
	public explicit_return_type "void"
	nparams 1
	  param inout name "is" explicit_type "istream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract}
{
  is >> this->r >> this->x >> this->y >> this->z;
}"
	
	
	python_def "${@}${static}${abstract}def __str__${(}self${)}:
${docstring}return \"%9.4f %9.4f %9.4f\" % (self.x, self.y, self.z)
"
	
	comment " Read from stream (consumes four real numbers).

 Not robust enough for interpreting user input."
      end

      extra_member 184624 "friend"
	
	cpp "

  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 276528 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ar & this->x;
  ar & this->y;
  ar & this->z;
  ar & this->r;
}
"
	
	
	
	
      end

      extra_member 191280 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 277424 "centroid"
	public explicit_return_type ""
	nparams 4
	  param in name "ar" explicit_type "double"
	  param in name "ax" explicit_type "double"
	  param in name "ay" explicit_type "double"
	  param in name "az" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}
: r(ar)
, x(ax)
, y(ay)
, z(az)
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 276656 "centroid"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: r(0.0)
, x(0.0)
, y(0.0)
, z(0.0)
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 276784 "~centroid"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 276912 "centroid"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 197552 // centroid
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 277168 "centroid"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 197552 // centroid
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 277040 "operator="
	public return_type class_ref 197552 // centroid
	nparams 1
	  param in name "source" type class_ref 197552 // centroid
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 277296 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 197552 // centroid
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap( this->r, ${p0}.r );
  std::swap( this->x, ${p0}.x );
  std::swap( this->y, ${p0}.y );
  std::swap( this->z, ${p0}.z );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 191408 "OPERATORS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1387696 "position"
	const public return_type class_ref 986799 // coordinate
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return ${type}( this->x, this->y, this->z );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get centroid position as a coordinate"
      end

      operation 298160 "equivalent"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 197552 // centroid
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->r == other.r and this->x == other.x and this->y == other.y and this->z == other.z;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end
    end

    class 986799 "coordinate"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl "${comment}${abstract}${local}interface ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      
      classrelation 244912 // <dependency>
	relation 244656 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 244912 // <dependency>
	  b parent class_ref 912431 // access
      end

      attribute 1222447 "x"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1222575 "y"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1222703 "z"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 257969 "SPECIFIC"
	
	stereotype "lifetime"
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 557745 "__init__"
	public explicit_return_type ""
	nparams 2
	  param inout name "self" explicit_type ""
	  param in name "*args" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
      end

      operation 1972527 "coordinate"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}: x(0.0), y(0.0), z(0.0) {}"
	
	
	
	
	comment "C++ default constructor"
      end

      operation 1973039 "coordinate"
	public explicit_return_type ""
	nparams 3
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "double"
	  param in name "c" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}
: x(a)
, y(b)
, z(c)
{}
"
	
	
	
	
	comment "3 Arg C++ constructor"
      end

      operation 1972655 "~coordinate"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;"
	
	
	
	
      end

      operation 1972783 "coordinate"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: x(source.x)
, y(source.y)
, z(source.z)
{}
"
	
	
	
	
      end

      operation 2191791 "coordinate"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: x( std::move( source.x ) )
, y( std::move( source.y ) )
, z( std::move( source.z ) )
{}
"
	
	
	
	
      end

      operation 1972911 "operator="
	public return_type class_ref 986799 // coordinate
	nparams 1
	  param in name "source" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap (source);
  return *this;
}
"
	
	
	
	
      end

      extra_member 435631 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1973295 "serialize"
	public explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "a_ver" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}template< class ${t0} > ${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ar & x; ar & y; ar & z;
}
"
	
	
	
	
	comment "Read/write object to an archive."
      end

      operation 1973167 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap (x, source.x);
  std::swap (y, source.y);
  std::swap (z, source.z);
}
"
	
	
	
	
      end

      extra_member 258097 "C++"
	
	stereotype "mutate"
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 2078767 "read"
	public explicit_return_type "void"
	nparams 1
	  param inout name "is" explicit_type "istream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract}
{
  is >> this->x >> this->y >> this->z;
}"
	
	
	
	
	comment " Read from stream.

 Not robust enough for interpreting user input.

"
      end

      extra_member 258225 "python"
	
	stereotype "mutate"
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 557361 "extract"
	public explicit_return_type "string"
	nparams 1
	  param in name "line" explicit_type "string"
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}arr = line.split(3)
self.x = float(arr[0])
self.y = float(arr[1])
self.z = float(arr[2])
return arr[3] if len(arr)>3 else \"\"
"
	
	comment "Read/extract x, y and z as floats from the
given line of text, returning any unused
part of the line."
      end

      extra_member 257841 "COMMON"
	
	stereotype "access"
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 249649 "equivalent"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "rhs" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} const& ${p0}${)}${const}${volatile}${throw}${abstract}
{
  return (this == &rhs) or (x == rhs.x and y == rhs.y and z == rhs.z);
}
"
	
	
	python_def "${@}${static}${abstract}def __eq__${(}${p0}${v0}${)}:
${docstring}return (self.x == rhs.x and self.y == rhs.y and self.z == rhs.z)
"
	
	comment "Equality test

(is __eq__ for python)"
      end

      operation 2078639 "write"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  os << this->x << \" \" << this->y << \" \" << this->z;
}

"
	
	
	python_def "${@}${static}${abstract}def __str__${(}self${)}:
${docstring}return \"%9.4f %9.4f %9.4f\" % (self.x, self.y, self.z)
"
	
	comment " Write to stream

 (is __str__ for python)

 Not robust enough for interpreting user input."
      end

      operation 557489 "operator[]"
	public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  switch(idx)
  {
    case 0: return this->x; 
    case 1: return this->y; 
    case 2: return this->z;
    default: UTILITY_ALWAYS(idx < 3, \"Coordinate only has three index positions\");
      return 0.0; // to stop complaint about no return value
  }
}
"
	
	
	python_def "${@}${static}${abstract}def __getitem__${(}self, ${p0}${v0}${)}:
${docstring}if idx == 0:
  return self.x
elif idx == 1:
  return self.y
elif idx == 2:
  return self.z
else:
  raise IndexError(\"Coordinate has only three elements\")

"
	
	comment "Get x, y or z by index; 0, 1 or 2
respectively."
      end

      operation 1097136 "coordinate_input"
	class_operation public explicit_return_type "void"
	nparams 5
	  param in name "name" explicit_type "string"
	  param in name "value" explicit_type "string"
	  param in name "title" explicit_type "string"
	  param in name "section_name" explicit_type "string"
	  param inout name "target" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} & ${p4}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Attempt to read an input value as a floating point number

 \\param name : input parameter name
 \\param value : value in input file
 \\param title : text giving class context for error, should start with capital.
 \\param section_name : section context for error
 \\param target : where to put the result, unchanged on error
 \\parma above_zero : whether value should be positive
 \\param equal_zero : if above_zero is true, allows value to also equal zero 
"
      end
    end

    class 223792 "coordinate_set"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " A set of ( x, y, z ) coordinates.  This does not conform to
 any of the STL definitions of a container."
      classrelation 245040 // <dependency>
	relation 244784 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 245040 // <dependency>
	  b parent class_ref 912431 // access
      end

      attribute 243120 "x_"
	private explicit_type "double"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment "The X coordinates of the particles"
      end

      attribute 243248 "y_"
	private explicit_type "double"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment "The Y coordinates of the particles"
      end

      attribute 243376 "z_"
	private explicit_type "double"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment "The Z coordinates of the particles"
      end

      operation 334128 "coordinate_set"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: x_()
, y_()
, z_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 334256 "coordinate_set"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 223792 // coordinate_set
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}
: x_( source.x_ )
, y_( source.y_ )
, z_( source.z_ )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 334384 "coordinate_set"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 223792 // coordinate_set
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: x_( std::move( source.x_ ) )
, y_( std::move( source.y_ ) )
, z_( std::move( source.z_ ) )
{}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 335536 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 223792 // coordinate_set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
   std::swap( this->x_, source.x_ );
   std::swap( this->y_, source.y_ );
   std::swap( this->z_, source.z_ );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Swap contents of two objects"
      end

      operation 349232 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   this->x_.clear();
   this->y_.clear();
   this->z_.clear();
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Remove all coordinates"
      end

      operation 334512 "empty"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->x_.empty();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Is the set empty?"
      end

      operation 334640 "operator ="
	public return_type class_ref 223792 // coordinate_set
	nparams 1
	  param in name "source" type class_ref 223792 // coordinate_set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
   this->swap( source );
   return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Assign to this set"
      end

      operation 334768 "resize"
	public explicit_return_type "void"
	nparams 1
	  param in name "npart" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
   this->x_.resize(npart, 0.0);
   this->y_.resize(npart, 0.0);
   this->z_.resize(npart, 0.0);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Change size of vector"
      end

      extra_member 204720 "friend"
	
	cpp "

  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 334896 "serialize"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
   ar & x_;
   ar & y_;
   ar & z_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 335024 "set_x"
	public explicit_return_type "void"
	nparams 2
	  param in name "idx" explicit_type "size_t"
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
   this->x_[ idx ] = val;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  Set x position"
      end

      operation 335152 "set_y"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "idx" explicit_type "size_t"
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
   this->y_[ idx ] = val;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  Set y position"
      end

      operation 335280 "set_z"
	public explicit_return_type "void"
	nparams 2
	  param in name "idx" explicit_type "size_t"
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
    this->z_[ idx ] = val;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  Set z position"
      end

      operation 335408 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->x_.size();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Number of coordinates"
      end

      operation 335664 "x"
	const public explicit_return_type "double"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
   return this->x_[index];
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get an x coordinate"
      end

      operation 335792 "y"
	const public explicit_return_type "double"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
   return this->y_[index];
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get an y coordinate"
      end

      operation 335920 "z"
	const public explicit_return_type "double"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
   return this->z_[index];
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get an z coordinate"
      end
    end

    class 506032 "digitizer_3d"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Convert a coordinate inside a bounding box into a linear
 index suitable for making a histogram. Convert a linear
 index into a subcube of the bounding box (\"corners\").

 Bounding box is
 ( x_axis.mininum, y_axis.minimum, z_axis.minimum ) to 
  ( x_axis.maxinum, y_axis.maximum, z_axis.maximum )"
      classrelation 686000 // <dependency>
	relation 685104 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 686000 // <dependency>
	  b parent class_ref 912431 // access
      end

      class 506160 "index_3d_type"
	visibility package stereotype "typedef" explicit_base_type "size_t"
	cpp_decl "${comment}typedef std::array< ${type}, 3 > ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      attribute 550192 "xaxis_"
	private type class_ref 175409 // digitizer
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " X-axis digitizer"
      end

      attribute 550320 "yaxis_"
	private type class_ref 175409 // digitizer
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Y-axis digitizer"
      end

      attribute 550448 "zaxis_"
	private type class_ref 175409 // digitizer
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Z-axis digitiser"
      end

      attribute 550576 "spacing_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Sampling cube/digitiser width"
      end

      attribute 550704 "yskip_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Number of bins in X direction."
      end

      attribute 550832 "zskip_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Number of bins in XY plane"
      end

      attribute 550960 "size_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Total number of bins"
      end

      extra_member 458288 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1151024 "digitizer_3d"
	public explicit_return_type ""
	nparams 3
	  param in name "small" type class_ref 986799 // coordinate
	  param in name "big" type class_ref 986799 // coordinate
	  param in name "spacing" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${throw}
: xaxis_( std::min( small.x, big.x ), std::max( small.x, big.x ), spacing )
, yaxis_( std::min( small.y, big.y ), std::max( small.y, big.y ), spacing )
, zaxis_( std::min( small.z, big.z ), std::max( small.z, big.z ), spacing )
, spacing_( spacing )
, yskip_( xaxis_.size() )
, zskip_( yaxis_.size() * yskip_ )
, size_( zaxis_.size() * zskip_ )
{
  UTILITY_REQUIRE( spacing > 0.0, \"Cannot define digitizer with zero or negative spacing.\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create digitizer.

 NOTE: spacing <= 0.0 is undefined."
      end

      operation 1151920 "digitizer_3d"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " For serialization."
      end

      operation 1152048 "~digitizer_3d"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1152176 "digitizer_3d"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 506032 // digitizer_3d
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: xaxis_( std::move( ${p0}.xaxis_ ) )
, yaxis_( std::move( ${p0}.yaxis_ ) )
, zaxis_( std::move( ${p0}.zaxis_ ) )
, spacing_( std::move( ${p0}.spacing_ ) )
, yskip_( std::move( ${p0}.yskip_ ) )
, zskip_( std::move( ${p0}.zskip_ ) )
, size_( std::move( ${p0}.size_ ) )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1152304 "digitizer_3d"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 506032 // digitizer_3d
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: xaxis_( ${p0}.xaxis_ )
, yaxis_( ${p0}.yaxis_ )
, zaxis_( ${p0}.zaxis_ )
, spacing_( ${p0}.spacing_ )
, yskip_( ${p0}.yskip_ )
, zskip_( ${p0}.zskip_ )
, size_( ${p0}.size_ )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1152560 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 506032 // digitizer_3d
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap( xaxis_, ${p0}.xaxis_ );
  std::swap( yaxis_, ${p0}.yaxis_ );
  std::swap( zaxis_, ${p0}.zaxis_ );
  std::swap( spacing_, ${p0}.spacing_ );
  std::swap( yskip_, ${p0}.yskip_ );
  std::swap( zskip_, ${p0}.zskip_ );
  std::swap( size_, ${p0}.size_ );
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1152432 "operator="
	public return_type class_ref 506032 // digitizer_3d
	nparams 1
	  param in name "source" type class_ref 506032 // digitizer_3d
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 458160 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1152688 "serialize"
	public explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "a_ver" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}template< class ${t0} > ${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ar & xaxis_; ar & yaxis_; ar & zaxis_; ar & spacing_; ar & yskip_; ar & zskip_; ar & size_;
}
"
	
	
	
	
	comment "Read/write object to an archive."
      end

      extra_member 458416 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1151152 "convert"
	const public explicit_return_type "size_t"
	nparams 1
	  param in name "pos" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  const std::size_t xidx = xaxis_.convert( pos.x );
  const std::size_t yidx = yaxis_.convert( pos.y );
  const std::size_t zidx = zaxis_.convert( pos.z );
  return zidx * zskip_ + yidx * yskip_ + xidx;
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Convert a coordinate inside the bounding box into a
 linear index.

 \\pre xaxis.in_range(pos.x) and yaxis.in_range(pos.y) and zaxis.in_range(pos.z)
 \\post result < size"
      end

      operation 1152816 "convert"
	const public explicit_return_type "void"
	nparams 2
	  param in name "pos" type class_ref 986799 // coordinate
	  param inout name "idx" type class_ref 506160 // index_3d_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  idx[0] = xaxis_.convert( pos.x );
  idx[1] = yaxis_.convert( pos.y );
  idx[2] = zaxis_.convert( pos.z );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Convert a coordinate inside the bounding box into a
 3D index.

 \\pre xaxis.in_range(pos.x) and yaxis.in_range(pos.y) and zaxis.in_range(pos.z)
 \\post result[0] < xaxis.size, result[1] < yaxis.size, result[2] < zaxis.size"
      end

      operation 1152944 "convert"
	const public explicit_return_type "size_t"
	nparams 1
	  param in name "idx" type class_ref 506160 // index_3d_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return idx[2] * zskip_ + idx[1] * yskip_ + idx[0];
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Convert a 3D index into a linear index.

 \\pre xaxis.in_range(pos.x) and yaxis.in_range(pos.y) and zaxis.in_range(pos.z)
 \\post result[0] < xaxis.size, result[1] < yaxis.size, result[2] < zaxis.size"
      end

      operation 1151280 "corners"
	public explicit_return_type "void"
	nparams 2
	  param in name "idx" explicit_type "size_t"
	  param inout name "points" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, std::array< ${t1}, 8 > & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, std::array< ${t1}, 8 > & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Calculate corners of the sampling cube at given index.

 \\pre idx < size
 \\post all points inside bounding box defined by ( x_axis.mininum, y_axis.minimum, z_axis.minimum ) to 
  ( x_axis.maxinum, y_axis.maximum, z_axis.maximum )"
      end

      operation 1153072 "corners"
	public explicit_return_type "void"
	nparams 2
	  param in name "idx" type class_ref 506160 // index_3d_type
	  param inout name "points" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, std::array< ${t1}, 8 > & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, std::array< ${t1}, 8 > & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Calculate corners of the sampling cube at given index.

 \\pre idx[0] < xaxis.size and idx[1] < yaxis.size and idx[2] < zaxis.size
 \\post all points inside bounding box defined by ( x_axis.mininum, y_axis.minimum, z_axis.minimum ) to 
  ( x_axis.maxinum, y_axis.maximum, z_axis.maximum )"
      end

      operation 1151408 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return size_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The number of bins"
      end

      operation 1151536 "x_axis"
	const public return_type class_ref 175409 // digitizer
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return xaxis_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1151664 "y_axis"
	const public return_type class_ref 175409 // digitizer
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return yaxis_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1151792 "z_axis"
	const public return_type class_ref 175409 // digitizer
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return zaxis_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end
    end

    class 303025 "specie_key"
      visibility public stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Define important specie key values"
      attribute 389041 "nkey"
	public type class_ref 303025 // specie_key
	init_value "~(std::size_t(0))"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Invalid specie key value"
      end

      attribute 475056 "first"
	public type class_ref 303025 // specie_key
	init_value "0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The lowest possible key value (should be zero)"
      end
    end

    class 134959 "ensemble"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}(object):
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " A collection of particles defined by their position and specie ID.

 TODO: The number of particles of each specie is state of the ensemble
 not of the specie -> move here.  The charge is a meta property between the specie
 set and the number of each specie -> move to particle_manager"
      classrelation 581552 // <dependency>
	relation 580656 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 581552 // <dependency>
	  b parent class_ref 303025 // specie_key
      end

      attribute 1330351 "deletion_list_"
	private explicit_type "size_t"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment "The list of deleted particles."
      end

      attribute 481584 "key_counts_"
	private explicit_type "size_t"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Cached count of the number of particles of each specie in the ensemble."
      end

      attribute 1330479 "key"
	private explicit_type "size_t"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}_${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The index of the specie of each particle (0 == invalid)"
      end

      classrelation 245168 // xyz_ (<directional composition>)
	relation 244912 *-->
	  a role_name "xyz_" multiplicity "1" private
	    comment " The set of x,y,z coordinates"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 245168 // xyz_ (<directional composition>)
	  b parent class_ref 223792 // coordinate_set
      end

      attribute 325297 "inuse_particles_"
	private explicit_type "size_t"
	init_value "0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The number of in-use particle position definitions.

Number of valid particles = inuse_particle - deletion_list.size"
      end

      attribute 325425 "max_particles_"
	private explicit_type "size_t"
	init_value "0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The maximum number of particles."
      end

      extra_member 251057 "C++ only"
	
	stereotype "access"
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 336048 "get_coordinates"
	const public return_type class_ref 223792 // coordinate_set
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} const& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->xyz_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  Access the set of coordinates"
      end

      operation 1962671 "key"
	const public explicit_return_type "size_t"
	nparams 1
	  param in name "aindex" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_[${p0}];
}
"
	
	
	
	
	comment "Get the particle ID. If ID == spec::nkey(C++) or
sim.nspec() then particle is not active."
      end

      operation 1963055 "do_nth_index"
	const private explicit_return_type "size_t"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Determine the actual index of the nth valid 
position when deletion list is not empty

This ensemble class does not rearrange 
indices after a particle deletion. This
results in invalid definitions within the 
particle list that are detectable with 
key(i) == nkey. 
Therefore the nth index position is not 
necessarily the nth valid particle. This 
method returns the index of the nth valid particle

\\pre not deletion_list.empty
\\pre index < count
\\post result >= index and result < size"
      end

      operation 1767983 "x"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->xyz_.${name}( ${p0} );
}
"
	
	
	
	
	comment "Get X coordinate of particle

\\undefined aindex >= size"
      end

      operation 1768111 "y"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->xyz_.${name}( ${p0} );
}
"
	
	
	
	
	comment "Get Y coordinate of particle

\\undefined aindex >= size"
      end

      operation 1767855 "z"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->xyz_.${name}( ${p0} );
}
"
	
	
	
	
	comment "Get Z coordinate of particle

\\undefined aindex >= size"
      end

      extra_member 250801 "common Get/Set"
	
	stereotype "access"
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1962799 "count"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->inuse_particles_ - this->deletion_list_.size ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.inuse_particles_ - len(self.deletion_list_)
"
	
	comment "Number of actual particles in ensemble"
      end

      operation 976176 "known_keys"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->key_counts_.size();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The number of known specie keys"
      end

      operation 549809 "max_size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->max_particles_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.max_particles_
"
	
	comment "The maximum number of particles allowed in
the simulation.

DESIGN POLICY: The number of particles in a
simulation should be a binomial distribution
around some average. Since the standard deviation
for the distribution is the square root of the
mean, the system chooses a default max_size of
(about) twice the mean number of particles (with
a minimum of 64).  The chance that this number is
reached should be very small, and so truncating
the distribution (as for zero particles) should
not change the results.  The trial generators are
expected to enforce this by generating a failed
trial when max_size is reached.  Attempting to
add a particle once max_size is reached is
therefore considered an exception.

This policy also helps with systems that are
not in equilibrium, where you can get temporary
large changes in particle number.
"
      end

      operation 1962927 "nth_index"
	const public explicit_return_type "size_t"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return ( this->deletion_list_.empty() ?  ${p0} : do_nth_index( ${p0} ) );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}if 0 == len(self.deletion_list):
  return ${p0}
result = index
for ith in reversed(self.deletion_list):
  if ith <= result:
    result += 1
return result
"
	
	comment "Determine the actual index of the nth valid
position.

\\pre index < count()

This conformation class does not rearrange
indices after a particle deletion. This results
in invalid definitions within the particle list
that are detectable with key(i) == nkey.  Therefore
the nth index position is not necessarily the
nth valid particle. This method returns the
index of the nth valid particle

\\pre index < count

\\post result >= index and result < size
"
      end

      operation 1872175 "nth_specie_index"
	preserve_cpp_body_indent const public explicit_return_type "size_t"
	nparams 2
	  param in name "key" explicit_type "size_t"
	  param in name "lindx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment " Get the global index of a particle given a per-key index
 and key

\\pre lindx < specie[ key ].count

 This method finds the nth occurence of ispec in ispcbk. This
 means that it is reasonable fast, but not as fast as a direct
 array lookup. DO NOT USE THIS METHOD TO LOOP THROUGH ALL
 PARTICLES OF A SPECIE, if that is required use something like:

 for ii=1,size
   if (key(ii) == ispec) then
     ...

 NOTE: in earlier code scanning through per specie was generally
 only done when gathering data for all species.  Obviously, such
 code can be transformed into a single loop over particles with
 collecting data for all species."
      end

      operation 218801 "position"
	const public return_type class_ref 986799 // coordinate
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return ${type}( this->xyz_.x( ${p0} ), this->xyz_.y( ${p0} ), this->xyz_.z( ${p0} ) );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}from coordinate import coordinate
return coordinate(self.x[${p0}], self.y[${p0}], self.z[${p0}])
"
	
	comment "Get the coordinates of a particle at an index"
      end

      operation 137007 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->inuse_particles_;
}
"
	
	
	python_def "${@}${static}${abstract}def __len__${(}self${)}:
${docstring}return self.inuse_particles_
"
	
	comment "Number of particle positions in ensemble (not 
all positions may be active)"
      end

      operation 930736 "specie_count"
	const public explicit_return_type "size_t"
	nparams 1
	  param in name "ispec" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The count of particles of each specie index in ensemble

 \\pre ispec < known_keys"
      end

      operation 320944 "specie_index"
	const public explicit_return_type "size_t"
	nparams 1
	  param in name "gidx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the specie local index of the particle at gidx. Complementary
 method to nth_specie_index.

 The return value is the ordinal of this particle in the set of particles
 of this specie.

 \\pre gidx < size"
      end

      extra_member 251185 "common"
	
	stereotype "mutate"
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1768495 "commit"
	public explicit_return_type "void"
	nparams 1
	  param inout name "atomset" type class_ref 986543 // change_set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Change, add or remove a particle defined by atom."
      end

      operation 284592 "append_position"
	public explicit_return_type "void"
	nparams 2
	  param in name "key" explicit_type "size_t"
	  param in name "pos" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add a predefined particle to the ensemble. Unlike 'commit'
 this does not update specie counters."
      end

      operation 550193 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Write a human readable representation of the 
ensemble to 'out'"
      end

      operation 1872559 "resize"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "npart" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Reserve space for a simulation with, on average,
npart particles.  This resizes the internal
arrays to 2*npart and sets max_particles to
2*npart. If 2*npart < max_particles nothing is
changed otherwise space may be allocated so the
object can hold more particles
"
      end

      extra_member 250929 "common ctor/dtor"
	
	stereotype "lifetime"
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1768623 "ensemble"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: deletion_list_ ()
, key_counts_()
, key_()
, xyz_ ()
, inuse_particles_(0)
, max_particles_(0)
{}"
	
	
	
	
	comment "Default constructor."
      end

      operation 930096 "ensemble"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 134959 // ensemble
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} && ${p0}${)}${volatile}${throw}
${body}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 930224 "ensemble"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 134959 // ensemble
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
${body}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 930352 "operator="
	public return_type class_ref 134959 // ensemble
	nparams 1
	  param in name "source" type class_ref 134959 // ensemble
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
   this->swap( source );
   return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 930480 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 134959 // ensemble
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 549937 "~ensemble"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
	comment "Destructor"
      end

      extra_member 429103 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1963439 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & deletion_list_;
    ar & key_counts_;
    ar & key_;
    ar & xyz_;
    ar & inuse_particles_;
    ar & max_particles_;
  }
"
	
	
	
	
      end

      operation 692913 "check_invariants"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Check that this ensemble matches the following invariants

 deletion list is sorted high to low
 for each index in the deletion list key_[idx] = nkey
 any value in key_ equal to nkey has index in deletion list
 (following are optional if sim is not nul)
 - count of species in key_ equal to value stored in each specie
 - charge is correct
"
      end

      operation 706353 "dump"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Write a dense debug representation of the 
ensemble to 'out'"
      end

      operation 937264 "equivalent"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 134959 // ensemble
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Compare two ensembles for equalivalence

 NOTE: max_particles does not need to be equal
 for equivalence, this implies that arrays are
 only checked in range [0, inuse_particles)."
      end

      operation 937392 "operator=="
	friend public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" type class_ref 134959 // ensemble
	  param in name "rhs" type class_ref 134959 // ensemble
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return lhs.equivalent( rhs );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end
    end

    class 134577 "specie"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " A specie object contains all the position
 independent information for a particle in
 an ensemble.

 The specie contains general information
 required for all simulations as well as a
 dictionary of information containing data
 specific for certain types of evaluators.
 It is expected that evaluators will query
 specie specific information at the beginning of
 the simulation and cache the data of interest
 to them internally.  The dictionary contains
 key:value string pairs that each evaluator must
 convert to the required type.
"
      classrelation 217776 // <dependency>
	relation 217520 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 217776 // <dependency>
	  b parent class_ref 197552 // centroid
      end

      classrelation 134577 // <dependency>
	relation 134577 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 134577 // <dependency>
	  b parent class_ref 865967 // constants
      end

      classrelation 217904 // <dependency>
	relation 217648 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 217904 // <dependency>
	  b parent class_ref 986799 // coordinate
      end

      class 134833 "specie_type"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name}
 {
${items}
};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 135217 "MOBILE"
	  public type class_ref 134833 // specie_type
	  init_value "0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Localized ion in channel"
	end

	attribute 135345 "FLEXIBLE"
	  public type class_ref 134833 // specie_type
	  init_value "1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Localized ion"
	end

	attribute 135473 "CHANNEL_ONLY"
	  public type class_ref 134833 // specie_type
	  init_value "2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Free within channel"
	end

	attribute 135601 "SOLUTE"
	  public type class_ref 134833 // specie_type
	  init_value "3"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Anywhere in simulation"
	end

	attribute 135729 "INVALID"
	  public type class_ref 134833 // specie_type
	  init_value "4"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Non-specie flag"
	end
      end

      class 1095983 "const_iterator"
	visibility private stereotype "typedef" explicit_base_type "string"
	cpp_decl "${comment}typedef std::map< ${type} , ${type} >::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Iterator type for the parameter_set"
      end

      attribute 137777 "parameter_set_"
	private explicit_type "string"
	multiplicity "*"
	stereotype "map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}, ${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Map of key:value parameter pairs"
      end

      classrelation 211248 // locations_ (<directional composition>)
	relation 210992 *-->
	  stereotype "vector"
	  a role_name "locations_" multiplicity "*" private
	    comment " Cached location of particles in the ensemble.  This is updated on reading an input
 file and when writing an input file.  At all other times the correspondence between
 this data and that in the ensemble is undefined."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 211248 // locations_ (<directional composition>)
	  b parent class_ref 986799 // coordinate
      end

      classrelation 204720 // localize_data_ (<directional composition>)
	relation 204464 *-->
	  stereotype "vector"
	  a role_name "localize_data_" multiplicity "*" private
	    comment " (Optional) data for localiser evaluator."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 204720 // localize_data_ (<directional composition>)
	  b parent class_ref 197552 // centroid
      end

      attribute 136753 "concentration_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " target salt concentrations (in SI Molar (mol/l)"
      end

      attribute 268593 "excess_potential_"
	private explicit_type "double"
	init_value "None"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Excess chemical potential value"
      end

      attribute 136369 "label_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " specie code name"
      end

      attribute 191793 "radius_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Particle radius (default 0.0)"
      end

      attribute 183728 "rate_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  The relative probability members of this specie participate in a MC trial.

  Note that this the one probability value that is allowed to be zero"
      end

      attribute 191665 "valency_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "particle charge (default 0.0)"
      end

      classrelation 1218479 // type_ (<directional composition>)
	relation 1181103 *-->
	  a role_name "type_" multiplicity "1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1218479 // type_ (<directional composition>)
	  b parent class_ref 134833 // specie_type
      end

      extra_member 250289 "COMMON METHODS"
	
	stereotype "access"
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 382769 "chemical_potential"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}import math
from constants import constants
return 0.0 if self.concentration_ == 0.0 else math.log( self.concentration_/constants.to_SI() ) + self.excess_potential_

"
	
	comment "chemical potential in units of kT : log([conc]) - mu_ex

(mu_ex = excess_potential_)"
      end

      operation 137265 "concentration"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->concentration_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.concentration_
"
	
	comment " Target concentration of a specie (in SI Molar (mol/l))

 The target concentration of specie is the sum of the partial
 target concentrations from all salts it is a component of."
      end

      operation 549425 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Write a human readable summary of the specie to 'out'"
      end

      operation 413233 "excess_potential"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
 return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.${name}_
"
	
	comment "chemical potential in units of kT : log([conc]) - mu_ex

(mu_ex = excess_potential_)"
      end

      operation 135857 "label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->label_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.${name}_
"
	
	comment " specie code name/label

 \\pre (is_valid and result.size == 2) or result.empty"
      end

      operation 233649 "radius"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.${name}_
"
	
	comment "Radius of specie

 Always well defined"
      end

      operation 205104 "rate"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.${name}_
"
	
	comment "Radius of specie

 Always well defined"
      end

      operation 233521 "valency"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.${name}_
"
	
	comment "Charge of specie

 Always well defined"
      end

      extra_member 250417 "C++ only"
	
	stereotype "access"
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 304816 "equivalent"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 134577 // specie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Compare if two species have the same information"
      end

      operation 2079535 "has_parameter"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Test if parameter is present in this specie"
      end

      operation 135089 "is_channel_only"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->type_ == CHANNEL_ONLY;
}
"
	
	
	
	
	comment " Is this a structural channel-only specie?

 Particles of a channel-only specie are restricted to movement
 anywhere within the filter region.  They can move in increments
 from the current position or jump to anywhere in the filter.
 They can not be added or removed, not can jump into or out of
 the channel.

 chonly species are structural ions that are _not_ 'mobile' and
 _not_ 'flexible'.

 Always well defined"
      end

      operation 135217 "is_flexible"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->type_ == FLEXIBLE;
}
"
	
	
	
	
	comment " Is this a flexible structural specie type?

 Particles of a flexible specie do move within a sphere and can
 not be added or deleted.  Unlike the other structural ions they
 may exist outside zlimit.

 flexible species are structural ions that are _not_ 'mobile' and
 _not_ 'chonly'

 Always well defined"
      end

      operation 135345 "is_localized"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->type_ == MOBILE or this->type_ == FLEXIBLE;
}
"
	
	
	
	
	comment " Is this a localized structural specie type?

 Particles of a localized specie move within a sphere, and can not
 be added or deleted. Localized species are structural ions that are
 either 'mobile' or 'flexible'

  Always well defined"
      end

      operation 135473 "is_mobile"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->type_ == MOBILE;
}
"
	
	
	
	
	comment " Is this a mobile structural ion specie type?

 Particles of a mobile specie are restricted in two way, firstly
 they must remain within the filter region and secondly they must
 each remain within a fixed radius of a defined point.  The only
 movement possible is small displacement moves.  The can not be
 added or deleted from the simulation.

 mobile species are structural ions that are _not_ 'chonly' and
 _not_ 'flexible'

 Always well defined"
      end

      operation 135601 "is_solute"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->type_ == SOLUTE;
}
"
	
	
	
	
	comment " Is this a non-structural (ie free) ion?

 Particles of a free ion specie may participate in any move
 type, be a component of a salt and be added or deleted from
 the system.  is_solute species are _not_ structural ions

 Always well defined"
      end

      operation 135729 "is_valid"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->type_ != INVALID;
}
"
	
	
	
	
	comment " Is this a 'valid' specie type?

 Default constructed objects are not valid

 Always well defined"
      end

      operation 135985 "operator <"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 134577 // specie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
   UTILITY_REQUIRE(this->is_valid() and other.is_valid(), \"Can not sort an invalid specie object\");
   return this->type_ < other.type_;
}
"
	
	
	
	
	comment " Define a partial ordering of species based on type.

 The ordering is MOBILE < FLEXIBLE < CHANNEL < SOLUTE

 \\pre type != INVALID "
      end

      operation 974896 "operator=="
	friend public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" type class_ref 134577 // specie
	  param in name "rhs" type class_ref 134577 // specie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
   return lhs.equivalent( rhs );
}
"
	
	
	
	
	comment " Compare two species for equivalence"
      end

      operation 975024 "operator!="
	friend public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" type class_ref 134577 // specie
	  param in name "rhs" type class_ref 134577 // specie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
   return not lhs.equivalent( rhs );
}
"
	
	
	
	
	comment " Compare two species for equivalence"
      end

      operation 2079407 "parameter"
	const public explicit_return_type "string"
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Get a parameter value

\\pre has_parameter (name)"
      end

      operation 138161 "sub_type"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->type_;
}
"
	
	
	
	
	comment "Get the specie type

 Always well defined"
      end

      operation 549553 "type_label"
	class_operation public explicit_return_type "string"
	nparams 1
	  param in name "typeval" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment "Convert specie type value into a string

\\pre typeval in { MOBILE, FLEXIBLE, CHANNEL_ONLY, SOLUTE or INVALID }
( INVALID returns non-dictionary string \"invalid\" which is not recognised by
 the string_to_specie_type companion method )"
      end

      extra_member 250545 "COMMON"
	
	stereotype "lifetime"
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 136625 "specie"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
: parameter_set_ ()
, locations_()
, localize_data_()
, concentration_ (0.0)
, excess_potential_ (0.0)
, label_ ()
, radius_(0.0)
, rate_(0.0)
, valency_(0.0)
, type_ (INVALID)
{}
"
	
	
	
	
	comment " LIFETIME METHODS
 base constructor"
      end

      operation 282929 "specie"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 134577 // specie
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw} 
${body}
"
	
	
	
	
      end

      operation 230448 "specie"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 134577 // specie
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} && ${p0}${)}${throw} 
${body}
"
	
	
	
	
      end

      operation 283057 "operator="
	public return_type class_ref 134577 // specie
	nparams 1
	  param in name "source" type class_ref 134577 // specie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap (${p0});
  return *this;
}
"
	
	
	
	
      end

      classrelation 134833 // <dependency>
	relation 134833 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 134833 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 134577 "serialize"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & parameter_set_;
    ar & locations_;
    ar & localize_data_;
    ar & concentration_;
    ar & excess_potential_;
    ar & label_;
    ar & radius_;
    ar & rate_;
    ar & valency_;
    ar & type_;
  }
"
	
	
	
	
      end

      operation 137009 "~specie"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
	comment " unbuild object"
      end

      operation 283185 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 134577 // specie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
      end

      extra_member 250673 "COMMON METHODS"
	
	stereotype "mutate"
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 276017 "set_concentration"
	public explicit_return_type "void"
	nparams 1
	  param in name "conc" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->concentration_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.concentration_ = ${p0}
"
	
	comment " Target concentration of a specie (in SI Molar (mol/l))

 The target concentration of specie is the sum of the partial
 target concentrations from all salts it is a component of."
      end

      operation 458929 "set_excess_potential"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->excess_potential_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.excess_potential_ = ${p0};
"
	
	comment "Set the value of the excess chemical potential."
      end

      operation 669745 "set_label"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->label_ = ${p0};
}
"
	
	
	
	
      end

      operation 799921 "set_parameter"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "string"
	  param in name "value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Set a parameter value

\\pre not has_parameter( name )
\\post has_parameter( name )"
      end

      operation 669617 "set_radius"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->radius_ = ${p0};
}
"
	
	
	
	
      end

      operation 204976 "set_rate"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->rate_ = ${p0};
}
"
	
	
	
	
      end

      operation 669489 "set_valency"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->valency_ = ${p0};
}
"
	
	
	
	
      end

      operation 669361 "set_type"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->type_ = specie_type(${p0});
}
"
	
	
	
	
      end

      operation 204464 "string_to_specie_type"
	class_operation public return_type class_ref 134833 // specie_type
	nparams 2
	  param in name "val" explicit_type "string"
	  param out name "set" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Convert a text representation of a specie type (eg from input file) into 
 the specie type enum value. Users should \"dequote\" and \"trim\" values
 before calling this method.

 Sets 'set' to true if valid value is found, otherwise INVALID value is returned."
      end

      extra_member 134705 "IN PROGRESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1704879 "write_document"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "wr" type class_ref 163632 // input_document
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write representation of this specie object in the input file format.

 Adds standard data and parameter list. Adds x,y,z coordinates
 of cached particles. The position data must have been updated 
 (using update_position) from the ensemble if the generated file 
 is to have latest position information."
      end

      operation 283952 "update_position"
	public explicit_return_type "void"
	nparams 2
	  param in name "lidx" explicit_type "size_t"
	  param in name "pos" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Update the cached position of a particular particle. The index 'lidx' refers
 to the index of the particle within the species. This method automatically
 updates the size of the array, such resizing can be avoided by first calling
 update_position_size. Such resizing is only allowed for species that can  
 have particles added/removed from the simulation."
      end

      operation 944048 "update_position_size"
	public explicit_return_type "void"
	nparams 1
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Update the number cached positions. This is only allowed for types that support
 addition/deletion."
      end

      operation 284080 "append_position"
	public explicit_return_type "void"
	nparams 2
	  param in name "pos" type class_ref 986799 // coordinate
	  param in name "cntr" type class_ref 197552 // centroid
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add a particle to the specie from the input file when centroid information
 is available. This implicitly sets specie type to MOBILE if it is currently
 set to INVALID, otherwise the specie type must support localisation (e.g.
 MOBILE or FLEXIBLE).

 This method should only be called while the simulation is being 
 instantiated (specifically before simulator::generate_simulation is
 called). Calling this method after the simulation has begun is
 undefined."
      end

      operation 284208 "append_position"
	public explicit_return_type "void"
	nparams 1
	  param in name "pos" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add a particle to the specie from the input file when no centroid information
 is available. This does not implicitly set the specie type.

 This method should only be called while the simulation is being 
 instantiated (specifically before simulator::generate_simulation is
 called). Calling this method after the simulation has begun is
 undefined."
      end

      operation 284464 "get_position"
	const public return_type class_ref 986799 // coordinate
	nparams 1
	  param in name "lidx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type}& ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the cached position of a particular particle. The index 'lidx' refers
 to the index of the particle within the species, and is in the range 0
 to get_position_size().

 \\pre lidx < get_position_size()

 This data is the position data read from the input file. "
      end

      operation 944176 "get_position_size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->locations_.size();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the number of cached position.object."
      end

      operation 320816 "get_localization_data"
	const public return_type class_ref 197552 // centroid
	nparams 1
	  param in name "lidx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type}& ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the localization data of a particular particle. The index 'lidx' refers
 to the index of the particle within the species, and therefore fills the range
 0 to get_position_size() for localized species.

 \\pre is_localized and ldx < get_postion_size()"
      end

      operation 976048 "get_localization_size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->localize_data_.size();
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the number of defined localization data."
      end
    end

    class 1012527 "spec"
      visibility package stereotype "EXAMPLE"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Manage particle type data."
      operation 275889 "prepare"
	public explicit_return_type "void"
	nparams 2
	  param in name "ionic_str" explicit_type "double"
	  param inout name "logger" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Finalize the specie/salt/subspecie concentration sets
in preparation for a simulation

Logic:
Ignore all non-free species.

Stage 1: Set from Salts:
* If any salts are defined: all stage 1 concentrations are set from salts, overriding individual species.

* If no salts are defined and charged species are present: Salt concentrations defined from species, create salt definitions if necessary (first anion/cation used as counter ion.)

Stage 2: Set from subspecies:
* If any subspecies are defined, then recalculate specie concentrations based on subspecie definition. Create salt definitions if necessary. When creating a salt for an excited state assume only the ground state of the counter-ion specie will combine with it.
"
      end

      operation 289969 "prep_conc_no_salts"
	private explicit_return_type "void"
	nparams 2
	  param in name "ionic_str" explicit_type "double"
	  param inout name "logger" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "(To be called in prepare)

Set up the concentrations of the species if
no salt or subspecie definitions are present"
      end
    end

    class 905135 "salt"
      visibility package stereotype "EXAMPLE"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Describe a special relationship between two species

data:

- concentration
- rate_gc"
      attribute 1190575 "anion_"
	private explicit_type "specie_flyweight"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1190447 "cation_"
	private explicit_type "specie_flyweight"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1154991 "rate_gc_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The rate value for this salt participating in a grand-canonical move.

P(salt) = salt.rate_gc / sum(salt.rate_gc)"
      end

      attribute 1154863 "concentration_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The target concentration of the salt."
      end

      attribute 1190319 "label_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Code name for the salt, this should be four letters, the first
two being the cation label and the second two being the
anion label."
      end

      operation 1648303 "label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return label_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "A label for this salt

This should be four letters, the first two being the cation label and the second two being the
anion label."
      end

      operation 1704367 "anion"
	const public explicit_return_type "specie_flyweight"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   UTILITY_REQUIRE(this->cation_ != specie_flyweight(), \"Can not get salt anion from incompletely initialized object\");
   return this->anion_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "The salt anion. 

The number of anions is determined by cation.valency/anion.valency"
      end

      operation 1704495 "anion_count"
	const private explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->cation().get().valency() / this->anion().get().valency();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "The number of anions is determined by cation.valency/anion.valency"
      end

      operation 1585071 "chemical_excess"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->cation().get().${name}() + this->anion_count() * this->anion().get().${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "The salt chemical potential

     Merge of [ionch/encrea] and [ionch/endest] 
 bool energy (add_guard &buf, uint8_type igc, double &uii, double &uip, bool is_create) const;
extern int chcrea_(integer *igc);
extern int chdest_(integer *igc);"
      end

      operation 1585199 "chemical_potential"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->cation().get().${name}() + this->anion_count() * this->anion().get().${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "The salt chemical potential

The number of anions is determined by cation.valency/anion.valency"
      end

      operation 1585327 "cation"
	const public explicit_return_type "specie_flyweight"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   UTILITY_REQUIRE(this->cation_ != specie_flyweight(), \"Can not get salt cation from incompletely initialized object\");
   return this->cation_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1585967 "finalize_input"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Do update part of readin (part 2)

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Do update part of readin"
      end

      operation 1585839 "read_input"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "scnr" type class_ref 871087 // input_reader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Salt part of readin"
      end

      operation 1586607 "rate_gc"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->rate_gc_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Probability that a salt will be added or removed "
      end

      operation 1587119 "concentration"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1705135 "report"
	public explicit_return_type "void"
	nparams 2
	  param inout name "os" explicit_type "ostream"
	  param in name "verbose" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Write report to the output stream.  Write more information if
verbose is true."
      end

      classrelation 1044783 // <dependency>
	relation 1007791 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1044783 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 1704751 "serialize"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "size_t"
	cpp_decl "    ${comment}template< class ${t0} > ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template< class ${t0} > ${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 905263 "subspecie"
      visibility package stereotype "EXAMPLE"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Describe a special relationship between two species

data:

- thermodynamics of change
- rate_gc"
      class 959919 "state"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	comment "Information about a single state of the subspecie set"
      end

      attribute 1155119 "enthalpy_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The enthalpy change between the ground state and this state."
      end

      attribute 1155247 "entropy_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The entropy change between the the ground state and this state."
      end

      attribute 1162927 "excited_state_"
	private explicit_type "specie_flyweight"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The specie for this excited state"
      end

      operation 1705263 "enthalpy"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1705391 "entropy"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1705647 "excited_state"
	const public explicit_return_type "specie_flyweight"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      attribute 1162799 "ground_state_"
	private explicit_type "specie_flyweight"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1155375 "label_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "A 2 letter label for the collective specie state."
      end

      attribute 1155503 "rate_gc_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The rate value for this subspecie set participating in a grand-canonical change state move.

P(subspec) = subspec.rate_gc / sum(subspec.rate_gc)

"
      end

      operation 1704623 "finalize_input"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Do update part of readin (part 2)

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Do update part of readin"
      end

      operation 1705519 "ground_state"
	const public explicit_return_type "specie_flyweight"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1705903 "label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1705775 "rate_gc"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1658415 "read_input"
	public explicit_return_type "void"
	nparams 1
	  param inout name "scnr" type class_ref 871087 // input_reader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1705007 "report"
	public explicit_return_type "void"
	nparams 2
	  param inout name "os" explicit_type "ostream"
	  param in name "verbose" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Write report to the output stream.  Write more information if
verbose is true."
      end

      classrelation 1044655 // <dependency>
	relation 1007663 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1044655 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 1660463 "serialize"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "size_t"
	cpp_decl "    ${comment}template< class ${t0} > ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template< class ${t0} > ${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end
  end

  classview 532015 "ionch particle meta classes"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    classdiagram 603567 "Specie meta classes"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 946223 "specie_meta"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Interpret specie definitions in the input file.

 (NOTE: inherits from noncopyable)

 Echo individual spec section

 Write out the interpreted specie data from the input
 file in the same format as an input file.  This includes program
 default values for optional input data and normalised rate
 values.

 Echo input section for this specie

 Write out the interpreted specie data from the input file in the
 same format as an input file.  This includes program default
 values for optional input data, normalised rate values and
 particle position information provided by conf module."
      classrelation 1217327 // <generalisation>
	relation 1179951 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1217327 // <generalisation>
	  b parent class_ref 1082671 // input_base_meta
      end

      classrelation 1225647 // <dependency>
	relation 1188271 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1225647 // <dependency>
	  b parent class_ref 1016239 // strngs
      end

      classrelation 1226031 // <dependency>
	relation 1188655 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1226031 // <dependency>
	  b parent class_ref 1004335 // input_help
      end

      class 155824 "anonymous_specie_meta"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum
 {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl "${comment}${visibility}final class ${name} {
${items}}
"
	python_decl "class ${name}:
${docstring}${members}
"
	idl_decl "${comment}enum ${name} {
${items}};
"
	explicit_switch_type ""
	
	comment " Option indices in missing_required_flags_"
	attribute 182576 "SPECIE_LABEL"
	  public type class_ref 155824 // anonymous_specie_meta
	  init_value "0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Index of specie label option."
	end

	attribute 182704 "SPECIE_TYPE"
	  public type class_ref 155824 // anonymous_specie_meta
	  init_value "1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Index of specie type option "
	end

	attribute 494640 "SPECIE_DIAMETER"
	  public type class_ref 155824 // anonymous_specie_meta
	  init_value "2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Index of specie diameter option"
	end

	attribute 494768 "SPECIE_VALENCY"
	  public type class_ref 155824 // anonymous_specie_meta
	  init_value "3"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Index of specie valency option"
	end

	attribute 198704 "SPECIE_TAG_COUNT"
	  public type class_ref 155824 // anonymous_specie_meta
	  init_value "4"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " The number of required tags"
	end
      end

      attribute 1393967 "known_keywords_"
	class_attribute private explicit_type "string"
	multiplicity "*"
	stereotype "set"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment "The set of valid keywords"
      end

      attribute 182448 "missing_required_tags_"
	private explicit_type "SPECIE_TAG_COUNT"
	multiplicity "*"
	stereotype "bitset"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Flags to check for missing options in input file"
      end

      classrelation 574512 // manager_ (<directional composition>)
	relation 573616 *-->
	  stereotype "shared_ptr"
	  a role_name "manager_" multiplicity "*" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 574512 // manager_ (<directional composition>)
	  b parent class_ref 446128 // particle_manager
      end

      classrelation 481201 // specie_obj_ (<directional composition>)
	relation 480561 *-->
	  a role_name "specie_obj_" multiplicity "1" private
	    comment "The current specie object"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 481201 // specie_obj_ (<directional composition>)
	  b parent class_ref 134577 // specie
      end

      extra_member 396976 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 915376 "specie_meta"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " No default ctor"
      end

      operation 2079023 "specie_meta"
	public explicit_return_type ""
	nparams 1
	  param inout name "man" type class_ref 446128 // particle_manager
	cpp_decl "    ${comment}${inline}${name}${(}boost::shared_ptr< ${t0} > ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}boost::shared_ptr< ${t0} > ${p0}${)}${throw} 
: input_base_meta( core::strngs::fsspec (), true, true )
, missing_required_tags_()
, manager_( ${p0} )
, specie_obj_()
{
  missing_required_tags_.set();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Standard constructor."
      end

      operation 2079151 "~specie_meta"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 397104 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 2078895 "add_keyword"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Add a parameter keyword to the known keywords

 \\pre not is_standard_keyword(name)
 ideally also not has_keyword(name) except duplicate additions are simply ignored."
      end

      operation 267952 "is_standard_keyword"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Test if 'name' matches a standard keyword."
      end

      operation 2086575 "has_keyword"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Test if 'name' is already registered as a parameter keyword"
      end

      operation 915248 "publish_help"
	const cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "helper" type class_ref 1004335 // input_help
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 203312 "do_read_entry"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "reader" type class_ref 313392 // input_base_reader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Read an entry in the input file. Return true if the entry was processed.

throw an error if input file is incorrect (using UTILITY_INPUT macro)"
      end

      operation 203440 "do_read_end"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Perform checks at the end of reading a section."
      end

      operation 944688 "do_reset"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Perform checks at the end of reading a section."
      end
    end
  end

  deploymentview 321199 "libparticle deployment"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 658607 "change_set"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Default inc
#include \"utility/config.hpp\"
#include \"utility/utility.hpp\"
// End
${namespace_start}
${members}
${namespace_end}

//#include <boost/serialization/export.hpp>
//BOOST_CLASS_EXPORT_GUID(particle::change_set, \"particle::change_set\");"
      python_src "${comment}
${definition}"
      associated_classes
	class_ref 986415 // change_atom
	class_ref 986543 // change_set
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 410544 "change_hash"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

// As hash is a union we need to tell the serialization system that
// it is serializable.
//BOOST_CLASS_IMPLEMENTATION(particle::change_hash,boost::serialization::object_serializable)
#endif
"
      associated_classes
	class_ref 400048 // change_hash
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 687919 "coordinate"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
// Default inc
#include \"utility/utility.hpp\"
#include \"utility/archive.hpp\"
// End
${includes}
${declarations}
${namespace_start}
${definition}

static inline bool operator==(coordinate const& a, coordinate const& b)
{
  return a.equivalent(b);
}

static inline bool operator!=(coordinate const& a, coordinate const& b)
{
  return not a.equivalent(b);
}

static inline std::ostream &operator<<(std::ostream &os, coordinate const& a)
{
  a.write( os );
  return os;
}

static inline std::istream &operator>>(std::istream &is, coordinate & a)
{
  a.read( is );
  return is;
}

${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// - manuals
#include \"core/input_base_reader.hpp\"
// -
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 986799 // coordinate
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 215984 "coordinate_set"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 223792 // coordinate_set
      end
    end

    artifact 189232 "centroid"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}

static inline bool operator==(centroid const& a, centroid const& b)
{
  return a.equivalent(b);
}

static inline bool operator!=(centroid const& a, centroid const& b)
{
  return not a.equivalent(b);
}

static inline std::ostream &operator<<(std::ostream &os, centroid const& a)
{
  a.write( os );
  return os;
}

static inline std::istream &operator>>(std::istream &is, centroid & a)
{
  a.read( is );
  return is;
}

${namespace_end}
#endif
"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 197552 // centroid
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 504112 "digitizer_3d"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 506032 // digitizer_3d
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 651183 "ensemble"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
// Default inc
#include \"utility/config.hpp\"
#include \"utility/archive.hpp\"
// End
${includes}
// EXTRA INCS
// END
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// BEGIN EXTRA INCS
#include \"utility/mathutil.hpp\"
#include \"utility/utility.hpp\"
// -
#include <algorithm>
#include <boost/format.hpp>
#include <fstream>
// END
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}

${definition}"
      associated_classes
	class_ref 134959 // ensemble
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 436784 "particle_manager"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"core/strngs.hpp\"
//-
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 446128 // particle_manager
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 443312 "specie_key"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
// manual includes
#include <cstddef>
// -
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      associated_classes
	class_ref 303025 // specie_key
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 630447 "specie_meta"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}

${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manuals
#include \"particle/coordinate.hpp\"
#include \"particle/centroid.hpp\"
#include \"utility/utility.hpp\"
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
// -
#include <bitset>
${namespace_start}
${members}
${namespace_end}

"
      associated_classes
	class_ref 946223 // specie_meta
      end
      comment "Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 579631 "specie"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}

${includes}
//--
#include \"core/constants.hpp\"
#include \"utility/archive.hpp\"

${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
//--
#include \"core/strngs.hpp\"
#include \"core/input_help.hpp\"
//#include \"core/input_reader.hpp\"
#include \"utility/config.hpp\"
#include \"utility/fuzzy_equals.hpp\"
// -
#include <bitset>
#include <boost/lexical_cast.hpp>
#include <iostream>

${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 134577 // specie
      end
      comment "Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 617391 "libionch_particle"
      stereotype "library"
      associated_artifacts
	artifact_ref 436784 // particle_manager
	artifact_ref 504112 // digitizer_3d
	artifact_ref 579631 // specie
	artifact_ref 630447 // specie_meta
	artifact_ref 651183 // ensemble
	artifact_ref 658607 // change_set
	artifact_ref 687919 // coordinate
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end
  end

  package_ref 389039 // Test Suites

  package_ref 423727 // parallel formation

  package_ref 425775 // formation test suite
end
