class pattern_test
!!!762032.cpp!!!	canonical(in a : test_class, in b : test_class) : void
// default constructable
{
  test_class obj_1, obj_2;
  BOOST_CHECK( obj_1 == obj_2 );
  pattern_test::check_lt_on_eq< test_class, has_lessthan >( obj_1, obj_2 );
  pattern_test::check_serialize< test_class, has_serialize >( obj_1 );
}
// Copy constructor
{
    test_class dummy;
    BOOST_CHECK( not ( dummy == a ) );
    pattern_test::check_lt_on_ne< test_class, has_lessthan >( a, dummy );
    //, "First argument to function should not give the same state as default constructor." );
    test_class obj_a( a );
    test_class obj_b( b );
    BOOST_CHECK( obj_a == a );
    BOOST_CHECK( obj_b == b );
    pattern_test::check_lt_on_eq< test_class, has_lessthan >( obj_a, a );
    pattern_test::check_lt_on_eq< test_class, has_lessthan >( obj_b, b );
    pattern_test::check_serialize< test_class, has_serialize >( obj_a );
    pattern_test::check_serialize< test_class, has_serialize >( obj_b );
    if ( obj_a == obj_b )
    {
      BOOST_CHECK( a == b );
      pattern_test::check_lt_on_eq< test_class, has_lessthan >( obj_a, obj_b );
    }
    else
    {
      BOOST_CHECK( not ( a == b ) );
      pattern_test::check_lt_on_ne< test_class, has_lessthan >( obj_a, obj_b );
    }
}
// Assignment
{
  {
    test_class obj_1;
    test_class obj_2;
    obj_2 = obj_1;
    BOOST_CHECK( obj_1 == obj_2 );
    pattern_test::check_lt_on_eq< test_class, has_lessthan >( obj_1, obj_2 );
  }
  {
    test_class obj_1( a );
    test_class obj_2;
    obj_2 = obj_1;
    BOOST_CHECK( obj_1 == obj_2 );
    pattern_test::check_lt_on_eq< test_class, has_lessthan >( obj_1, obj_2 );
  }
}
// Move constructor
{
  {
    test_class obj_1;
    test_class obj_2( obj_1 );
    test_class obj_3( std::move( obj_1 ) );
    BOOST_CHECK( obj_2 == obj_3 );
    pattern_test::check_lt_on_eq< test_class, has_lessthan >( obj_2, obj_3 );
  }
  {
    test_class obj_1( a );
    test_class obj_2( obj_1 );
    test_class obj_3( std::move( obj_1 ) );
    BOOST_CHECK( obj_2 == obj_3 );
    pattern_test::check_lt_on_eq< test_class, has_lessthan >( obj_2, obj_3 );
  }
}



