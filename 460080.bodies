class open_split_cylinder_region
!!!1094704.cpp!!!	do_change_volume(in vol : double, in rad : double) : void
// **This region ignores rad argument**
// Maintain halflength/radius ratio
//
//  vol = 2 * HL * pi * R * R
//
//  if C = HL/R then HL = C.R
//
//  vol = 2 * pi * C * R**3
//
const double ratio { this->half_length() / this->radius() };

this->set_radius( std::cbrt( vol / (2 * ratio * core::constants::pi() ) ) );

this->set_half_length( vol / ( 2 * core::constants::pi() * std::pow( this->radius(), 2 ) ) );
!!!1008048.cpp!!!	do_is_inside(in pos : coordinate, in radius : double) : bool
if( ( this->offset_ ) > std::abs( pos.z ) )
{
  // sphere centre between two parts.
  return false;
}
if( ( this->offset_ + this->half_length() ) < std::abs( pos.z ) )
{
  // sphere beyond end.
  return false;
}
if( std::pow( this->radius(), 2 ) < ( pos.x * pos.x + pos.y * pos.y ) )
{
  // sphere outside wall
  return false;
}
return true;

!!!2043056.cpp!!!	do_make_gridder(inout rgenr : random_distribution, in count : size_t) : grid_generator
boost::shared_ptr< grid_generator > result;
result.reset( new split_tube_grid( this->offset_, 2*this->half_length(), this->radius(), count, rgenr ) );
return result;
!!!2042928.cpp!!!	do_make_gridder(in spacing : double, inout rgenr : random_distribution) : grid_generator
boost::shared_ptr< grid_generator > result;
result.reset( new split_tube_grid( this->offset_, 2*this->half_length(), this->radius(), spacing, rgenr ) );
return result;
!!!1008176.cpp!!!	do_new_position(inout rgnr : random_distribution, in radius : double) : coordinate
// A random position within either cylinder part
particle::coordinate pos( 0.0, 0.0, 0.0 );
// volume is linear in square of radius
const double r( std::sqrt( rgnr.uniform( std::pow( this->radius(), 2 ) ) ) );
const double phi( rgnr.uniform( 0.0, core::constants::pi() * 2 ) );
pos.x = r * std::cos( phi );
pos.y = r * std::sin( phi );
pos.z = rgnr.uniform( -this->half_length(), this->half_length() );
pos.z = ( pos.z < 0.0 ? pos.z - this->offset_ : pos.z + this->offset_ );
return pos;


!!!1310640.cpp!!!	do_write_document(inout wr : input_document, in ix : size_t) : void
const std::string half_length_label { "half-length" };
const std::string radius_label { "radius" };
const std::string offset_label { "offset" };
wr[ix].add_entry( core::strngs::fstype(), type_label() );
wr[ix].add_entry( half_length_label, this->half_length() );
wr[ix].add_entry( radius_label, this->radius() );
wr[ix].add_entry( offset_label, this->offset() );

!!!1093808.cpp!!!	region_factory(in label : string, in params : string) : base_region
// needed information
// label : from label arg
// radius : from param arg
// half_length : from param arg
// offset : from param arg
double half_length {};
double radius {};
double offset {};

const std::string half_length_label { "half-length" };
const std::string radius_label { "radius" };
const std::string offset_label { "offset" };

// check for required parameters.
UTILITY_INPUT( params.count( half_length_label ) == 1, "Split cylinder region \""+half_length_label+"\" parameter missing in input.", core::strngs::fsregn(), nullptr );
UTILITY_INPUT( params.count( radius_label ) == 1, "Split cylinder region \""+radius_label+"\" parameter missing in input.", core::strngs::fsregn(), nullptr );
UTILITY_INPUT( params.count( offset_label ) == 1, "Split cylinder region \""+offset_label+"\" parameter missing in input.", core::strngs::fsregn(), nullptr );

core::input_base_reader::float_input( half_length_label, params.at( half_length_label ), "Split cylinder region", core::strngs::fsregn(), half_length, true, false );

core::input_base_reader::float_input( radius_label, params.at( radius_label ), "Split cylinder region", core::strngs::fsregn(), radius, true, false );

core::input_base_reader::float_input( offset_label, params.at( offset_label ), "Split cylinder region", core::strngs::fsregn(), offset, true, false );

// build region object.
boost::shared_ptr< geometry::base_region > current;
current.reset( new open_split_cylinder_region( label, radius, half_length, offset ) );
return current;



!!!1093680.cpp!!!	add_definition(inout meta : region_meta) : void
std::string desc( "A cylindrical region centred on the origin with linear axis in z direction. All walls are considered soft. Cylinder is cut in the centre and the two parts displaced \"offset\" from the origin along the z-axis." );
std::unique_ptr< region_definition > cylinder_defn( new region_definition( type_label(), desc, &open_split_cylinder_region::region_factory ) );
cylinder_defn->add_definition( { "radius", "distance in Angstrom", ">0", "required", "The radius of the cylinder in the XY plane." } );
cylinder_defn->add_definition( { "half-length", "distance in Angstrom", ">0", "required", "Half the length of the cylinder. The cylinder is centred on the origin so: offset <= |z| <= half-length + offset." } );
cylinder_defn->add_definition( { "offset", "distance in Angstrom", ">0", "required", "Half the length of the gap between the two cylinder halves. The cylinder is centred on the origin so: offset <= |z| <= half-length + offset." } );
meta.add_definition( cylinder_defn );
