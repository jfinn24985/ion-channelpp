class open_split_cylinder_region
!!!1094704.cpp!!!	do_change_volume(in vol : double, in rad : double) : void
// **This region ignores rad argument**
// Maintain halflength/radius ratio
//
//  vol = 2 * HL * pi * R * R
//
//  if C = HL/R then HL = C.R
//
//  vol = 2 * pi * C * R**3
//
const double ratio { this->half_length() / this->radius() };

this->set_radius( std::cbrt( vol / (2 * ratio * core::constants::pi() ) ) );

this->set_half_length( vol / ( 2 * core::constants::pi() * std::pow( this->radius(), 2 ) ) );
!!!1008048.cpp!!!	do_is_inside(in pos : coordinate, in radius : double) : bool
if( ( this->offset_ ) > std::abs( pos.z ) )
{
  // sphere centre between two parts.
  return false;
}
if( ( this->offset_ + this->half_length() ) < std::abs( pos.z ) )
{
  // sphere beyond end.
  return false;
}
if( std::pow( this->radius(), 2 ) < ( pos.x * pos.x + pos.y * pos.y ) )
{
  // sphere outside wall
  return false;
}
return true;

!!!1008176.cpp!!!	do_new_position(inout rgnr : random_distribution, in radius : double) : coordinate
// A random position within either cylinder part
particle::coordinate pos( 0.0, 0.0, 0.0 );
// volume is linear in square of radius
const double r( std::sqrt( rgnr.uniform( std::pow( this->radius(), 2 ) ) ) );
const double phi( rgnr.uniform( 0.0, core::constants::pi() * 2 ) );
pos.x = r * std::cos( phi );
pos.y = r * std::sin( phi );
pos.z = rgnr.uniform( -this->half_length(), this->half_length() );
pos.z = ( pos.z < 0.0 ? pos.z - this->offset_ : pos.z + this->offset_ );
return pos;


!!!1093808.cpp!!!	region_factory(in label : string, in params : string) : base_region
// needed information
// label : from label arg
// radius : from param arg
// half_length : from param arg
// offset : from param arg
double half_length {};
double radius {};
double offset {};

const std::string half_length_label { "half-length" };
const std::string radius_label { "radius" };
const std::string offset_label { "offset" };

// check for required parameters.
UTILITY_INPUT( params.count( half_length_label ) == 1, "Split cylinder region \""+half_length_label+"\" parameter missing in input.", core::strngs::fsregn() );
UTILITY_INPUT( params.count( radius_label ) == 1, "Split cylinder region \""+radius_label+"\" parameter missing in input.", core::strngs::fsregn() );
UTILITY_INPUT( params.count( offset_label ) == 1, "Split cylinder region \""+offset_label+"\" parameter missing in input.", core::strngs::fsregn() );

core::input_base_reader::float_input( half_length_label, params.at( half_length_label ), "Split cylinder region", core::strngs::fsregn(), half_length, true, false );

core::input_base_reader::float_input( radius_label, params.at( radius_label ), "Split cylinder region", core::strngs::fsregn(), radius, true, false );

core::input_base_reader::float_input( offset_label, params.at( offset_label ), "Split cylinder region", core::strngs::fsregn(), offset, true, false );

// build region object.
boost::shared_ptr< geometry::base_region > current;
current.reset( new open_split_cylinder_region( label, radius, half_length, offset ) );
return current;



!!!1093680.cpp!!!	add_region_definition(inout meta : region_meta) : void
region_definition cylinder_defn;
cylinder_defn.type_name_ = "split-cylinder";
cylinder_defn.documentation_.insert( std::make_pair< std::string, std::string >( "radius", "[required, values > 0 in Angstrom] The radius of the cylinder in the XY plane." ) );
cylinder_defn.documentation_.insert( std::make_pair< std::string, std::string >( "half-length", "[required, value in Angstrom] Half the length of the cylinder. The cylinder is centred on the origin so: offset <= |z| <= half-length + offset." ) );
cylinder_defn.documentation_.insert( std::make_pair< std::string, std::string >( "offset", "[required, value in Angstrom] Half the length of the gap between the two cylinder halves. The cylinder is centred on the origin so: offset <= |z| <= half-length + offset." ) );
cylinder_defn.factory_ = &open_split_cylinder_region::region_factory;
meta.add_definition( cylinder_defn );
