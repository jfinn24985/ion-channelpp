class move_choice
!!!1964719.cpp!!!	move_choice(in ispec : size_t, in params : string)
if (params.find("delta") != params.end())
{
   try
   {
      this->delta_ = boost::lexical_cast< double >(params.at( "delta" ) );
      UTILITY_INPUT( this->delta_ > 0, "Input value for \"delta\" must be greater than zero", core::strngs::fstry() );
   }
   catch( boost::bad_lexical_cast const& err )
   {
      const bool invalid_conversion( false );
      UTILITY_INPUT( invalid_conversion, "Input value for \"delta\" is not a number", core::strngs::fstry() );
   }
}
!!!1965103.cpp!!!	generate(in particles : particle_manager, in regions : geometry_manager, inout rgnr : random_distribution) : change_set
std::unique_ptr< particle::change_set > result( new particle::change_set );
auto const& ens = particles.get_ensemble();
// Select a particle at random
particle::change_atom atom;
atom.key = this->key().key;
const std::size_t spc_count = ens.specie_count( this->key().key );
switch( spc_count )
{
case 0:
{
  result->set_fail(); // No particles of this specie
  return result;
}
break;
case 1:
{
  atom.index = ens.nth_specie_index( atom.key, 0 );
}
break;
default:
{
  atom.index = ens.nth_specie_index( atom.key, rgnr.randint( 0, spc_count - 1 ) );
}
break;
}
// Get old position
atom.old_position = ens.position( atom.index );

// give particle a random displacement from old position
atom.new_position = atom.old_position;
const bool isok = regions.system_region().new_position_offset( rgnr, atom.new_position, this->delta_, particles.get_specie( atom.key ).radius() );

// new position not inside system region.
if( not isok )
{
  result->set_fail();
}
result->add_atom( atom );
return result;

!!!1965103.python!!!	generate(in particles : particle_manager, in regions : geometry_manager, inout rgnr : random_distribution) : change_set
self.begin_trial()
ens = sys.get_ensemble()
genr = sys.get_random()
import change_set
result = change_set.change_set( self )
if sys.get_specie( self.key_ ).count() == 0:
  result.fail = True # No particles of this specie
  return result
atom = change_set.change_atom()
atom.key = self.specie_key()
atom.index = ens.nth_specie_index( atom.key, genr.randint( 0, sys.get_specie( atom.key ).count() - 1) )
atom.old_position = ens.position( atom.index )
atom.new_position.x = atom.old_position.x + genr.uniform( -self.delta_, self.delta_ )
atom.new_position.y = atom.old_position.y + genr.uniform( -self.delta_, self.delta_ )
atom.new_position.z = atom.old_position.z + genr.uniform( -self.delta_, self.delta_ )
if not sys.get_cell_region().is_valid_position( atom.new_position, atom.key ):
  result.fail = True # Particle not in valid position
  return result
result.add_atom( atom )
return result
!!!1171632.cpp!!!	add_definition(inout meta : choice_meta) : void
trial::choice_definition defn;

defn.type_name_ = "move";
defn.factory_ = &trial::chooser< move_choice >;
{
  std::string name = "delta";
  std::string help = "[number, optional] The maximum magnitude of the displacement from the original position made by this trial. Default value is " + std::to_string( move_choice::default_delta ) + ".";
  defn.parameter_definition_.insert( std::make_pair( name, help ) );
}
UTILITY_CHECK( not meta.has_trial_type( defn.type_name_ ), "This type has already been added to this meta object." );
meta.add_trial_type( defn );
