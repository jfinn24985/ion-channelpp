class digitizer_3d
!!!1151280.cpp!!!	corners(in idx : size_t, inout points : coordinate) : void
UTILITY_REQUIRE( idx < size_, "Index out of range." );
ldiv_t part;
part = std::div( (long int)idx, (long int)this->zskip_ );
const std::size_t zidx { (std::size_t)part.quot };
part = std::div( part.rem, (long int)this->yskip_ );
const std::size_t yidx { (std::size_t)part.quot };
const std::size_t xidx { (std::size_t)part.rem };

// llh
points[ 0 ] = particle::coordinate{ xaxis_.minimum() + xidx * spacing_, yaxis_.minimum() + yidx * spacing_, zaxis_.minimum() + zidx * spacing_ };
points[ 1 ] = particle::coordinate{ points[ 0 ].x + spacing_, points[ 0 ].y, points[ 0 ].z };
points[ 2 ] = particle::coordinate{ points[ 0 ].x, points[ 0 ].y + spacing_, points[ 0 ].z };
points[ 3 ] = particle::coordinate{ points[ 0 ].x + spacing_, points[ 0 ].y + spacing_, points[ 0 ].z };
points[ 4 ] = particle::coordinate{ points[ 0 ].x, points[ 0 ].y, points[ 0 ].z + spacing_ };
points[ 5 ] = particle::coordinate{ points[ 0 ].x + spacing_, points[ 0 ].y, points[ 0 ].z + spacing_ };
points[ 6 ] = particle::coordinate{ points[ 0 ].x, points[ 0 ].y + spacing_, points[ 0 ].z + spacing_ };
points[ 7 ] = particle::coordinate{ points[ 0 ].x + spacing_, points[ 0 ].y + spacing_, points[ 0 ].z + spacing_ };
!!!1153072.cpp!!!	corners(in idx : digitizer_3d::index_3d_type, inout points : coordinate) : void
UTILITY_REQUIRE( idx[0] < xaxis_.size(), "Index x out of range." );
UTILITY_REQUIRE( idx[1] < yaxis_.size(), "Index y out of range." );
UTILITY_REQUIRE( idx[2] < zaxis_.size(), "Index z out of range." );
// llh
points[ 0 ] = particle::coordinate{ xaxis_.minimum() + idx[0] * spacing_, yaxis_.minimum() + idx[1] * spacing_, zaxis_.minimum() + idx[3] * spacing_ };
points[ 1 ] = particle::coordinate{ points[ 0 ].x + spacing_, points[ 0 ].y, points[ 0 ].z };
points[ 2 ] = particle::coordinate{ points[ 0 ].x, points[ 0 ].y + spacing_, points[ 0 ].z };
points[ 3 ] = particle::coordinate{ points[ 0 ].x + spacing_, points[ 0 ].y + spacing_, points[ 0 ].z };
points[ 4 ] = particle::coordinate{ points[ 0 ].x, points[ 0 ].y, points[ 0 ].z + spacing_ };
points[ 5 ] = particle::coordinate{ points[ 0 ].x + spacing_, points[ 0 ].y, points[ 0 ].z + spacing_ };
points[ 6 ] = particle::coordinate{ points[ 0 ].x, points[ 0 ].y + spacing_, points[ 0 ].z + spacing_ };
points[ 7 ] = particle::coordinate{ points[ 0 ].x + spacing_, points[ 0 ].y + spacing_, points[ 0 ].z + spacing_ };
