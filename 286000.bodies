class density_zaxis
!!!1548848.cpp!!!	add_definition(inout meta : sampler_meta) : void
std::string desc( "Sample particle density distributions along the z axis (=axis of rotation for cylinder regions)." );
std::unique_ptr< sampler_definition > result( new sampler_definition( density_zaxis::type_label_(), desc, &density_zaxis::make_sampler ) );
// extra parameters
result->add_definition( { "stepsize", "distance in Angstrom", ">0", std::to_string( default_stepsize() ), "Bin width of the 1D population histogram." } );
meta.add_sampler_type( result );

!!!498608.cpp!!!	description(inout out : ostream) : void
out << " " << this->type_label_() << "\n";
out << " " << std::string( this->type_label_().size(), '-' ) << "\n";
out << "    Collect and report 1D population histogram along z-axis\n";
out << "    - Default histogram bin width   : " << this->stepsize_ << "\n";
!!!672560.cpp!!!	get_value() : boost::any
boost::any result = &this->data_sets_;
return result;
!!!498864.cpp!!!	make_sampler(in param_set : string) : base_observable
double stepsize = density_zaxis::default_stepsize();
const std::string param_name = "stepsize";
if (0 != param_set.count( param_name ))
{
  core::input_base_reader::float_input( param_name, param_set.at( param_name ), density_zaxis::type_label_(), core::strngs::sampler_label(), stepsize, true, false, nullptr );
}
std::unique_ptr< density_zaxis > result( new density_zaxis );
result->stepsize_ = stepsize;
boost::shared_ptr< base_observable > tmp( result.release() );
return tmp;
!!!498992.cpp!!!	on_report(inout out : ostream, inout sink : base_sink) : void
// Write out gz data
for( std::size_t ispec = 0; ispec != this->data_sets_.size(); ++ispec )
{
  auto const& data = this->data_sets_[ ispec ];
  if( data.count() > 0 )
  {
    const std::size_t sz = data.size();

    output_dataset dset { [sz]() { return sz; } };

    dset.set_title( "Z-axial distribution histogram for specie "+std::to_string( ispec ) );

    dset.push_back_entry( observable::output_field( "ZMIN", "ANGSTROM", [data]( std::ostream& os, std::size_t ii )
    {
      os << data.bin_minimum( ii );
    } ) );

    dset.push_back_entry( observable::output_field( "ZMAX", "ANGSTROM", [data]( std::ostream& os, std::size_t ii )
    {
      os << data.bin_maximum( ii );
    } ) );

    dset.push_back_entry( observable::output_field( "ZMID", "ANGSTROM", [data]( std::ostream& os, std::size_t ii )
    {
      os << data.bin_midpoint( ii );
    } ) );

    dset.push_back_entry( observable::output_field( "PMEAN", "COUNT", [data]( std::ostream& os, std::size_t ii )
    {
      os << data.bin_mean( ii );
    } ) );

    dset.push_back_entry( observable::output_field( "PVAR", "COUNT**2", [data]( std::ostream& os, std::size_t ii )
    {
      os << data.bin_variance( ii );
    } ) );

    dset.write( this->filenames_[ ispec ], sink );
  }
}

!!!305329.cpp!!!	on_sample(in pman : particle_manager, in gman : geometry_manager, in eman : evaluator_manager) : void
// Sample the z axis
const particle::ensemble &ens( pman.get_ensemble() );
for( auto &histo : this->data_sets_ )
{
  histo.begin_sample();
}
for( std::size_t ith = 0; ith != ens.size(); ++ith )
{
  const std::size_t ispec = ens.key( ith );
  if( ispec != particle::specie_key::nkey )
  {
    this->data_sets_[ ispec ].sample_datum( ens.z( ith ) );
  }
}
for( auto &histo : this->data_sets_ )
{
  histo.end_sample();
}

!!!499248.cpp!!!	prepare(in pman : particle_manager, in gman : geometry_manager, in eman : evaluator_manager, in sman : report_manager) : void
// Reset all
this->data_sets_.clear();
this->filenames_.clear();

// get simulation extent
geometry::coordinate llh, urh;

gman.system_region().extent( llh, urh, 0.0 );

double lower_bound = llh.z;
double upper_bound = urh.z;
UTILITY_CHECK( lower_bound < upper_bound, "Bad region extent definition." );

// Create data sets.
this->data_sets_.resize( pman.specie_count(), utility::histogram( lower_bound, upper_bound, this->stepsize_, false ) );
this->filenames_.resize( pman.specie_count() );

for (std::size_t ispec = 0; ispec != pman.specie_count(); ++ispec)
{
  this->filenames_[ ispec ] = "gz-"+pman.get_specie(ispec).label()+".dat";
}
!!!499888.cpp!!!	do_write_document(inout wr : input_document, in ix : size_t) : void
wr[ ix ].add_entry( core::strngs::fstype(), this->type_label_() );
wr[ ix ].add_entry( "stepsize", this->stepsize_ );
