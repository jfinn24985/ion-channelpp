format 75
"core" // core
  revision 194
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  stereotype "library"
  cpp_h_dir "core"
  cpp_src_dir "core"
  cpp_namespace "core"
  python_dir "cmc"
  python_package "cmc"
  comment "Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------

DEPENDENCIES:

This library is (only) dependent on the lionch_utility library.

"
  classview 454703 "Fundamental classes."
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 328239 // core deployment
    classdiagram 610351 "Data normalization"
      draw_all_relations default hide_attributes default hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    classdiagram 590255 "lib_core class overview"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    classdiagram 590383 "Application dependencies"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 865967 "constants"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "  -----------------------------------------------
  PHYSICAL CONSTANTS

  The set of physical constants used in this
  program.  There are standard and derived
  constants.

  The physical constants are all accessed using
  a function interface.

  -----------------------------------------------
  ARRAY AND LOOP SIZES (C++ only)

  Public definitions of array sizes that must
  be known in multiple modules.

  The sizes are defined using an anonymous
  enumeration.

  -----------------------------------------------
  SET INDICES (C++ only)

  Fixed indices used across modules. These
  include named constants for specific regions
  and for file ids.

  The indices are defined using an anonymous
  enumeration.

"
      classrelation 1199279 // <dependency>
	relation 1162159 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1199279 // <dependency>
	  b parent class_ref 204463 // format
      end

      class 866095 "anonymous1"
	visibility private stereotype "enum"
	cpp_decl "${comment}enum 
 {
${items}
};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1085871 "izlim"
	  public type class_ref 866095 // anonymous1
	  init_value " 0
	// Region in channel defined by +/-zl1
	"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1085999 "ifilt"
	  public type class_ref 866095 // anonymous1
	  init_value " 1
	// Region from channel end to end
	"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1086127 "ichan"
	  public type class_ref 866095 // anonymous1
	  init_value " 2
	// Region outside channel
	"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1086255 "ibulk"
	  public type class_ref 866095 // anonymous1
	  init_value " 3
      "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end
      end

      class 866223 "anonymous2"
	visibility private stereotype "enum"
	cpp_decl "${comment}enum 
 {
${items}
};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1086383 "nionmx"
	  public type class_ref 866223 // anonymous2
	  init_value " 2048

	// Maximum number of particles`
	"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1086511 "ntotmx"
	  public type class_ref 866223 // anonymous2
	  init_value " 8192

	// Maximum number of ICC patches
	"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1086639 "npchmx"
	  public type class_ref 866223 // anonymous2
	  init_value " 2048

	// Maximum number of species
	"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1086767 "nspcmx"
	  public type class_ref 866223 // anonymous2
	  init_value " 16

	// Maximum number of salts
	"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1086895 "nsltmx"
	  public type class_ref 866223 // anonymous2
	  init_value " 4

	// Maximum nuber of particles per salt
	"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1087023 "nnewmx"
	  public type class_ref 866223 // anonymous2
	  init_value " 4

	// Maximum nuber of regions
	"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1087151 "nrgnmx"
	  public type class_ref 866223 // anonymous2
	  init_value " 4

	// Maximum number of histogram bins in z direction
	"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1087279 "nzgmx"
	  public type class_ref 866223 // anonymous2
	  init_value " 4096

	// Default random seed 
	"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1087407 "mag"
	  public type class_ref 866223 // anonymous2
	  init_value " 12584210
      "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end
      end

      operation 1518255 "pi"
	class_operation public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  // 'pi'
  return 3.141592653589793;
};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return 3.141592653589793
"
	
	comment " Value of pi as used in program.

 (A fixed value is used to ensure common(ish) 
 value across programmes)"
      end

      operation 1518383 "to_SI"
	class_operation public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return 1660.539276735512625080121;
};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return 1660.539276735512625080121
"
	
	comment " Conversion from particles/per Ang**3 to 
 Molar {to S.I.}
 [ (10E-30)m3 / (N_av)mol * L / (10E-3)m3 ] 
 [ (10E-27/N_av) L/mol ]

 Units (psuedo SI) l{1} mol{-1}
 .:. reciprocal molar or molal"
      end

      operation 1518511 "angstrom"
	class_operation public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return 1.E-10;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return 1.E-10
"
	
	comment " Convert Amgstrom to meters

 Units (m{1} Angstrom{-1})"
      end

      operation 1518639 "epsilon_0"
	class_operation public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return 8.8542E-12;
};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return 8.8542E-12
"
	
	comment " Permittivity of a vacuum

 Epsilon_0 
 Units : m{-3} C{2} kg{-1} s{2}
 (equiv) : m{-3} kg{-1} s{4} A{2}"
      end

      operation 1518767 "avogadro_number"
	class_operation public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return 6.02214E23;
};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return 6.02214E23
"
	
	comment " Avogardo's Number (not used in program, but listed as it is the
 value used in calculating 'tosi' (N)

Units # mol{-1}"
      end

      operation 1518895 "boltzmann_constant"
	class_operation public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return 1.3806E-23;
};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return 1.3806E-23
"
	
	comment " Boltzmann's constant

 Units: (J{1} K{-1})
 (equiv) : m{2} kg{1} s{-2} K{-1}"
      end

      operation 1519023 "electron_charge"
	class_operation public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return 1.6021917E-19;
};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return 1.6021917E-19
"
	
	comment " Charge of an electron

 units (C{1})"
      end

      attribute 1088175 "filver"
	class_attribute const_attribute public explicit_type "int"
	init_value "1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}constexpr ${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The input file version number"
      end

      attribute 1088431 "fvermx"
	class_attribute const_attribute public explicit_type "int"
	init_value "1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}constexpr ${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The maximum input file version number the program 
 understands"
      end

      operation 2061487 "description"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Report the values of constants used in this program."
      end
    end

    class 1016239 "strngs"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "  INPUT FILE STRINGS

  String constants that are used in the input file.

  The string constants are all accessed using a function interface."
      operation 1905967 "fsaccu"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"accum\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"accum\"
"
	
      end

      operation 1909423 "fsadd"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// trial class option names {
//      uses  fsrtmv='ratmov'

${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"add\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"add\"
"
	
	comment " trial class option names
      uses  fsrtmv='ratmov'"
      end

      operation 1908271 "fscgin"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"calgin\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"calgin\"
"
	
	comment " statistic option names"
      end

      operation 1912239 "fschex"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"chex\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"chex\"
"
	
	comment " specie type parameter names"
      end

      operation 1905071 "fschnl"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// input file sections

${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"channel\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"channel\""
	
	comment "  -------------------
  INPUT FILE STRINGS
  -------------------
 input file sections"
      end

      operation 1913775 "fschon"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string (\"chonly\");
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"chonly\"
"
	
      end

      operation 1907759 "fschpt"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"usepot\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"usepot\"
"
	
      end

      operation 1908527 "fsclac"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"calacc\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"calacc\"
"
	
      end

      operation 1908655 "fsclmb"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"calmob\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"calmob\"
"
	
      end

      operation 1905327 "fsconf"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"conf\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"conf\"
"
	
      end

      operation 1908399 "fscrdf"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"calrdf\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"calrdf\"
"
	
      end

      operation 1914159 "fsctrg"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"ctarg\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"ctarg\"
"
	
      end

      operation 1912367 "fsd"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"d\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"d\"
"
	
      end

      operation 1909039 "fsdrg"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"drg\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"drg\"
"
	
      end

      operation 1909551 "fsdrmi"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"drmaxin\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"drmaxin\"
"
	
      end

      operation 1909679 "fsdrmo"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"drmaxout\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"drmaxout\"
"
	
      end

      operation 491696 "fsdxf"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// patch class option names {

${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"dxf\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"dxf\"
"
	
	comment " patch class option names"
      end

      operation 491568 "fsdxw"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"dxw\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"dxw\"
"
	
      end

      operation 1910319 "fsdzg"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"dzg\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"dzg\"
"
	
      end

      operation 1906735 "fsend"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"end\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"end\"
"
	
	comment " generic option names"
      end

      operation 1914287 "fsenth"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"enthalpy\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"enthalpy\"
"
	
	comment " subspecie parameter names"
      end

      operation 1914415 "fsentr"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"entropy\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"entropy\"
"
	
      end

      operation 1915439 "fsepsc"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"epsch\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"epsch\"
"
	
      end

      operation 1915183 "fsepsp"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"epspr\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"epspr\"
"
	
      end

      operation 1915311 "fsepsw"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"epsw\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"epsw\"
"
	
      end

      operation 1713967 "fsexct"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"excited\" ); 
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"excited\"
"
	
      end

      operation 1913647 "fsflxd"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"flex\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"flex\"
"
	
      end

      operation 1913903 "fsfree"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"free\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"free\"
"
	
      end

      operation 1906479 "fsfver"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"fileversion\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"fileversion\"
"
	
      end

      operation 1905199 "fsgeom"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"geom\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"geom\"
"
	
      end

      operation 1907887 "fsgrid"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"usegrid\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"usegrid\"
"
	
      end

      operation 1910959 "fsgrl1"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"rl1\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"rl1\"
"
	
      end

      operation 1911343 "fsgrl4"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"rl4\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"rl4\"
"
	
      end

      operation 1911471 "fsgrl5"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"rl5\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"rl5\"
"
	
      end

      operation 1911727 "fsgrlc"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"rlcurv\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"rlcurv\"
"
	
      end

      operation 1911599 "fsgrlv"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"rlvest\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"rlvest\"
"
	
      end

      operation 1517231 "fsgrnd"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"ground\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"ground\"
"
	
      end

      operation 1910447 "fsgzl1"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"zl1\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"zl1\"
"
	
	comment " geometry option names"
      end

      operation 1910831 "fsgzl4"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"zl4\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"zl4\"
"
	
      end

      operation 1911855 "fsgzlm"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"zlimit\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"zlimit\"
"
	
      end

      operation 1909295 "fsgzoc"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"zocc\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"zocc\"
"
	
      end

      operation 1906607 "fsincl"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"include\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"include\"
"
	
	comment " include subfiles option name"
      end

      operation 1909167 "fsisav"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"isave\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"isave\"
"
	
      end

      operation 1914031 "fsislt"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"cation\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"cation\"
"
	
	comment " salt parameter names"
      end

      operation 1908911 "fsiwid"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"iwidom\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"iwidom\"
"
	
      end

      operation 1910191 "fskmob"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"mobk\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"mobk\"
"
	
      end

      operation 1913519 "fsmobl"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"mob\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"mob\"
"
	
	comment " (allowed specie type values)"
      end

      operation 1907119 "fsname"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"name\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"name\"
"
	
      end

      operation 1907375 "fsnavr"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"naver\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return \"naver\"
"
	
      end

      operation 1907631 "fsnmcf"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"multiconf\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"multiconf\"
"
	
      end

      operation 1912495 "fsn"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"n\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"n\"
"
	
      end

      operation 1908143 "fsnoch"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"nocharge\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"nocharge\"
"
	
      end

      operation 1912111 "fsnsrt"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"oldreg\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"oldreg\"
"
	
      end

      operation 1907247 "fsnstp"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"nstep\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return \"nstep\"
"
	
	comment " simulation option names"
      end

      operation 1915055 "fsnsub"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"nsub\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"nsub\"
"
	
      end

      operation 1911983 "fsntrg"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"ntarg\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"ntarg\"
"
	
      end

      operation 1907503 "fsnblk"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"nbulk\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"nbulk\"
"
	
	comment " unused fortran label"
      end

      operation 1905455 "fsptch"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"patch\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"patch\"
"
	
      end

      operation 1905583 "fsregn"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"region\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"region\"
"
	
      end

      operation 1912751 "fsrtex"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"ratexc\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"ratexc\"
"
	
      end

      operation 1912623 "fsrtgr"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"ratgr\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"ratgr\"
"
	
      end

      operation 1909935 "fsrtid"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"ratind\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"ratind\"
"
	
      end

      operation 1910063 "fsrtjp"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"ratjmp\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"ratjmp\"
"
	
      end

      operation 1912879 "fsrtmv"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"ratmov\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"ratmov\"
"
	
      end

      operation 1913135 "fsrtrg"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"ratreg\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"ratreg\"
"
	
      end

      operation 1909807 "fsrtsl"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"ratslt\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"ratslt\"
"
	
      end

      operation 1913007 "fsrtsp"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"ratspc\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"ratspc\"
"
	
      end

      operation 1914671 "fsrtsw"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"ratswap\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"ratswap\"
"
	
      end

      operation 1905711 "fssalt"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"salt\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"salt\"
"
	
      end

      operation 1906223 "fsspec"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"specie\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"specie\"
"
	
      end

      operation 1906351 "fssubs"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"subspecie\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"subspecie\"
"
	
      end

      operation 1905839 "fstry"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"trial\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"trial\"
"
	
      end

      operation 1908015 "fstsi"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"kelvin\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return \"kelvin\"
"
	
      end

      operation 1913391 "fstype"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"type\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"type\"
"
	
      end

      operation 1908783 "fswidm"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"calwid\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"calwid\"
"
	
      end

      operation 1913263 "fsz"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"z\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"z\"
"
	
      end

      operation 2163759 "bulk_label"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"bulk\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"bulk\"
"
	
      end

      operation 336433 "comment_begin"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string (\"#\");
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"#\"
"
	
      end

      operation 336561 "comment_end"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"\"
"
	
      end

      operation 2165935 "evaluator_label"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string (\"evaluator\");
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"evaluator\"
"
	
      end

      operation 1915567 "horizontal_bar"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( 70ul, '-' );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"-\"*70
"
	
	comment " Formatting constants"
      end

      operation 223664 "imc_label"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"super-looper\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"simulator\"
"
	
      end

      operation 2163119 "inner_label"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"inner\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"inner\"
"
	
      end

      operation 2162351 "inputpattern_label"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"input\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"inputpattern\"
"
	
      end

      operation 327472 "localizer_label"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"localize\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"simulator\"
"
	
      end

      operation 2162223 "outputdir_label"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"outputdir\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"outputdir\"
"
	
      end

      operation 2174639 "rate_label"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"rate\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"rate\"
"
	
      end

      operation 2166063 "sampler_label"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"sampler\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"sampler\"
"
	
      end

      operation 2162863 "simulator_label"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::string( \"simulator\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"simulator\"
"
	
      end

      operation 899376 "is_one_word"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "word" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Check that argument is one \"word\"
 * valid words have no spaces anywhere in the string 
 * valid words have only alphabetic characters"
      end

      operation 899888 "is_valid_name"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "word" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Check that argument is a valid \"name\"
 * valid names have no spaces anywhere in the string 
 * valid names have only alphanumeric characters or '_' or '.'
 * in our case numbers, '.' and '_' can appear anywhere in the string"
      end

      operation 899632 "has_spaces"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "word" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Check that argument is one \"word\"
 * valid words have no spaces anywhere in the string "
      end
    end
  end

  classview 213552 "paragraph formatting"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 328239 // core deployment
    classdiagram 318640 "heirarchy"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 638896 "fixed_width_output_filter"
      visibility package stereotype "HEADER"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Boost IO OutputFilter that allows paragraph formatting, supporting fixed width lines
and indenting.
"
      classrelation 1012784 // <generalisation>
	relation 1011888 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1012784 // <generalisation>
	  b parent class_ref 639280 // output_filter
      end

      operation 1692848 "fixed_width_output_filter"
	public explicit_return_type ""
	nparams 3
	  param in name "indent_size" explicit_type "size_t"
	  param in name "depth" explicit_type "size_t"
	  param in name "max_width" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}
: current_word_(), col_no_(), depth_( ${p1} ), indent_size_( ${p0} )
, off_( std::string::npos ), spaces_( ${p1} * ${p0} ), width_( ${p2} ), state_(), word_state_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create output filter for the given indent size, indent depth
 and max text width."
      end

      attribute 725168 "current_word_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The current partial word."
      end

      attribute 725808 "col_no_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The current text column"
      end

      attribute 725552 "depth_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The current indentation level."
      end

      attribute 725680 "indent_size_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of spaces to indent.  "
      end

      attribute 725296 "off_"
	private explicit_type "std::string::size_type"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " How much of current_word_ we have processed.  Guard value is string::npos."
      end

      attribute 725424 "spaces_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The current number of spaces to indent. (== indent_size_ * depth_)"
      end

      attribute 725040 "width_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The target line width."
      end

      attribute 732336 "state_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Current state of the 'put' function."
      end

      attribute 732464 "word_state_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Current state of the 'write_word' function."
      end

      operation 1694000 "close"
	stereotype "template"
	public explicit_return_type "void"
	nparams 1
	  param inout name "dest" explicit_type "Sink"
	cpp_decl "    ${comment}template< typename ${t0} > ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  if( this->off_ == std::string::npos ) { this->off_ = 0; }
  if( not this->current_word_.empty() )
  {
    try
    {
       this->write_word( dest );
    }
    catch(...)
    {
       this->reset();
       throw;
    }
  }
  this->reset();
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Attempt to write the current word to the sink and reset state."
      end

      operation 1694128 "put"
	stereotype "template"
	public explicit_return_type "bool"
	nparams 2
	  param inout name "dest" explicit_type "Sink"
	  param in name "c" explicit_type "int"
	cpp_decl "    ${comment}template< typename ${t0} > ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  while( true ) {
  // std::cout << \"DO[\" << this->current_word_ << \"](\" << char(c) << \")#\" << this->col_no_ << \"S\" << this->spaces_ << \" F\" << this->off_ << \"{\" << this->state_ <<\"}\\n\"; 
  switch( this->state_ )
  {
     case 0: // beginning of line
       if( '\\n' == c )
          return this->put_char( dest, c );
       this->state_ = 1; // fall through
     case 1: // need indent
       if( std::isspace( c ) ) return true; // ignore spaces at indent
       if( '\\n' == c )
       {
          this->state_ = 0;
          return this->put_char( dest, c );
       }
       while( this->col_no_ < this->spaces_ )
       {
         if( not this->put_char(dest, ' ') ) return false;
       }
       this->state_ = 2; // fall through
     case 2: // begin entry
       if( std::isalpha( c ) )
         this->state_ = 3; // (in word)
       else if( std::isdigit( c ) or '-' == c )
         this->state_ = 4; // (start number)
       else if( '.' == c )
         this->state_ = 5; // (in number fraction (OR PUNCT))
       else if( '\\n' == c )
         {
           this->state_ = 0; // (in number fraction (OR PUNCT))
           return this->put_char( dest, c );
         }
       else
         {
           if( this->col_no_ == this->width_ ) {
             this->state_ = 8;
             break;
           }
           return this->put_char( dest, c );
         }
       this->current_word_.append( 1ul, static_cast< unsigned char >( c ) );
       return true;
     case 3: // in word
       if( not std::isalpha( c ) )
       {
          this->state_ = 9; // (end entry)
          break;
       }
       this->current_word_.append( 1ul, static_cast< unsigned char >( c ) );
       return true;
     case 4: // start number
       if( not std::isdigit( c ) ) {
         if( '.' == c ) this->state_ = 5; // (in number fraction)
         else if( 'd' == c or 'D' == c or 'e' == c or 'E' == c ) this->state_ = 6; // (in number start base)
         else {
           this->state_ = 9; // (end entry)
           break;
         }
       }
       this->current_word_.append( 1ul, static_cast< unsigned char >( c ) );
       return true;
     case 5: // number fraction
       if( not std::isdigit( c ) ) {
         if( 'd' == c or 'D' == c or 'e' == c or 'E' == c ) this->state_ = 6; // (in number start base)
         else {
           this->state_ = 9; // (end entry)
           break;
         }
       }
       this->current_word_.append( 1ul, static_cast< unsigned char >( c ) );
       return true;
     case 6: // number start base
       this->state_ = 7; // (number base)
       if( not std::isdigit( c ) or '-' != c ) {
           this->state_ = 9; // (end entry)
           break;
         }
       this->current_word_.append( 1ul, static_cast< unsigned char >( c ) );
       return true;
     case 7: // number start base
       if( not std::isdigit( c ) ) {
           this->state_ = 9; // (end entry)
           break;
         }
       this->current_word_.append( 1ul, static_cast< unsigned char >( c ) );
       return true;
     case 8: // wait for new line
       if( not this->put_char( dest, '\\n' ) ) return false;
       this->state_ = 0; // (beginning of line)
       break;
     case 9: // end entry 
       if( not this->write_word( dest ) ) return false;
       // write word sets state.
       break;
     default: // ERROR
       throw std::runtime_error( \"Should never get to default case\" );
    }
  } while( true );
  // never get here!
  return true;
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Process the next character from the out going stream."
      end

      operation 1701168 "write_word"
	stereotype "template"
	private explicit_return_type "bool"
	nparams 1
	  param inout name "dest" explicit_type "Sink"
	cpp_decl "    ${comment}template< typename ${t0} > ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  if( this->off_ == std::string::npos ) this->off_ = 0;
  const std::size_t left( this->current_word_.size() - this->off_ );
  if( this->col_no_ != this->spaces_ and this->col_no_ + left > this->width_ ) this->word_state_ = 1;
  while( this->off_ != std::string::npos )
  {
    switch( this->word_state_ )
    {
    case 1: // need new line
      if( not this->put_char( dest, '\\n' ) ) return false;
      this->word_state_ = 2; // (fall through)
    case 2:
      while( this->col_no_ < this->spaces_ )
      {
        if( not this->put_char(dest, ' ') ) return false;
      }
      this->word_state_ = 0; // (fall through)
    case 0: // write word
        while(this->off_ < this->current_word_.size()) {
          // handle words too long for one line or end on the line boundary
          if( this->col_no_ == this->width_ ) {
            this->word_state_ = 1;
            break;
          }
          if( not this->put_char( dest, this->current_word_[ this->off_ ] ) )
          { return false; }
          ++this->off_;
        }
        if( this->current_word_.size() == this->off_ ) this->off_ = std::string::npos;
      break;
    default: // ERROR
       throw std::runtime_error( \"Should never get to default case\" );
    }
  }
  if( this->off_ == std::string::npos )
  {
    this->current_word_.clear();
    this->state_ = 2; // begin entry
  }
  return true;
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Attempt to write the current word to the sink."
      end

      operation 1693488 "put_char"
	stereotype "template"
	private explicit_return_type "bool"
	nparams 2
	  param inout name "dest" explicit_type "Sink"
	  param in name "c" explicit_type "int"
	cpp_decl "    ${comment}template< typename ${t0} > ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  // std::cout << \"PUTCHAR[\" << this->current_word_ << \"](\" << char(c) << \")#\" << this->col_no_ << \"S\" << this->spaces_ << \" F\" << this->off_ << \"\\n\"; 
  if( not boost::iostreams::put( dest, c ) ) return false;
  if( c == '\\n' ) { this->col_no_ = 0; }
  else            { ++this->col_no_; }
  return true;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Writes the given character to Sink and updates column number."
      end

      operation 1693104 "depth"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->depth_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the current indentation level"
      end

      operation 1693232 "increment_depth"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  ++this->depth_;
  this->spaces_ += this->indent_size_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Increase indentation level by one."
      end

      operation 1693360 "decrement_depth"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  if( this->depth_ != 0ul )
  {
    --this->depth_;
    this->spaces_ -= this->indent_size_;
  }
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Increase indentation level by one."
      end

      operation 1694384 "text_width"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->width_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the current indentation level"
      end

      operation 1694512 "indent_size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->indent_size_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the current indentation level"
      end

      operation 1701296 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
 if( not this->current_word_.empty() ) this->current_word_.clear();
 this->off_ = std::string::npos;
 this->col_no_ = 0ul;
 this->state_ = 0ul;
 this->word_state_ = 0ul;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Return attributes ready for restarting formatting."
      end
    end

    class 645936 "indent_guard"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Class that automatically increments and decrements the indent of a filter."
      attribute 739760 "filter_"
	private type class_ref 638896 // fixed_width_output_filter
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} *${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The filter we increment/decrement the indent for"
      end

      operation 1710000 "indent_guard"
	public explicit_return_type ""
	nparams 1
	  param inout name "filt" type class_ref 638896 // fixed_width_output_filter
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${v0}${)}${volatile}${throw}
: filter_( &filt )
{
  filt.increment_depth();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1710128 "~indent_guard"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}
{
  this->filter_->decrement_depth();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1710256 "indent_guard"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 645936 // indent_guard
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1710384 "indent_guard"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 645936 // indent_guard
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1710512 "operator="
	private return_type class_ref 645936 // indent_guard
	nparams 1
	  param in name "source" type class_ref 645936 // indent_guard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end
    end
  end

  classview 441263 "input file management classes"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 328239 // core deployment
    classdiagram 597039 "Input file read"
      draw_all_relations default hide_attributes default hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    classdiagram 252592 "Relationship heirarchy"
      draw_all_relations default hide_attributes yes hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      comment " The usage relationship heirachy"
      size A4
    end

    classdiagram 325168 "help heirarchy"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 1004335 "input_help"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "  GLOBAL INPUT FILE DESCRIPTION  HELPER

  This class provides a consistent mechanism to generate a formatted
  help message for the program input file sections.

 PATTERN : Singleton

 Class to format help messages on input file parameters
 
 Formatter for information about the input file. "
      classrelation 1201071 // <generalisation>
	relation 1163951 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1201071 // <generalisation>
	  b parent class_ref 275887 // noncopyable
      end

      classrelation 1034160 // sections_ (<directional composition>)
	relation 1033264 *-->
	  stereotype "map"
	  a role_name "sections_" multiplicity "*" private
	    comment " The input section descriptions."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${association}, ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1034160 // sections_ (<directional composition>)
	  b parent class_ref 646192 // help_section
	  association_explicit_type "string"
      end

      operation 1917999 "exemplar"
	class_operation public return_type class_ref 1004335 // input_help
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1918127 "input_help"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}
: sections_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 862512 "~input_help"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1919023 "empty"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->sections_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Are there any section description objects defined?"
      end

      operation 1919151 "size"
	preserve_cpp_body_indent const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->sections_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " How many section descriptions are there?"
      end

      operation 1918511 "add_section"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "sect" type class_ref 646192 // help_section
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Add a section description.

 \\pre not has_section( sect.title() )
 \\post has_section( sect.title() )"
      end

      operation 1919279 "has_section"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 1
	  param in name "label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  return this->sections_.find( ${p0} ) != this->sections_.end();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Is there a section description set for this section label"
      end

      operation 1738160 "get_section"
	public return_type class_ref 646192 // help_section
	nparams 1
	  param in name "label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  auto result = this->sections_.find( ${p0} );
  UTILITY_REQUIRE( result != this->sections_.end(), \"Can not find section named \" + label);
  return result->second;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1751216 "get_section"
	stereotype "const"
	const public return_type class_ref 646192 // help_section
	nparams 1
	  param in name "label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} const& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} const& ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  auto result = this->sections_.find( ${p0} );
  UTILITY_REQUIRE( result != this->sections_.end(), \"Can not find section named \" + label);
  return result->second;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1738032 "do_assert"
	const public explicit_return_type "void"
	nparams 9
	  param in name "test" explicit_type "char"
	  param in name "mesg" explicit_type "string"
	  param in name "section" explicit_type "string"
	  param in name "reader" type class_ref 313392 // input_base_reader
	  param in name "func" explicit_type "char"
	  param in name "filename" explicit_type "char"
	  param in name "linenum" explicit_type "int"
	  param in name "backtrace" explicit_type "void"
	  param in name "backsz" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} const* ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} const* const ${p3}${v3}, ${t4} const* ${p4}${v4}, ${t5} const* ${p5}${v5}, ${t6} ${p6}${v6}, ${t7}* const* ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} const* ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} const* const ${p3}, ${t4} const* ${p4}, ${t5} const* ${p5}, ${t6} ${p6}, ${t7}* const* ${p7}, ${t8} ${p8}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create an error message and throw an exception."
      end

      operation 1751344 "write"
	const public explicit_return_type "void"
	nparams 2
	  param in name "section" explicit_type "string"
	  param inout name "errlog" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Write help information to errlog."
      end

      operation 1744688 "write"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "errlog" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Write help information to errlog."
      end
    end

    class 645808 "help_entry"
      visibility protected 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1027376 // <dependency>
	relation 1026480 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 1027376 // <dependency>
	  b parent class_ref 912431 // access
      end

      attribute 738992 "title_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The one word title/label this description applies to."
      end

      attribute 739120 "type_desc_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Description of the expected type."
      end

      attribute 739248 "range_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Description of the expected range."
      end

      attribute 739376 "default_value_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Description of any default value."
      end

      attribute 739504 "description_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Description of the particular option."
      end

      extra_member 668208 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1707824 "help_entry"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1709872 "help_entry"
	public explicit_return_type ""
	nparams 5
	  param in name "label" explicit_type "string"
	  param in name "type_desc" explicit_type "string"
	  param in name "range" explicit_type "string"
	  param in name "def_value" explicit_type "string"
	  param in name "desc" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${volatile}${throw}
: title_( ${p0} )
, type_desc_( ${p1} )
, range_( ${p2} )
, default_value_( ${p3} )
, description_( ${p4} )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1707952 "~help_entry"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1708080 "help_entry"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 645808 // help_entry
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1708208 "help_entry"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 645808 // help_entry
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1708336 "operator="
	public return_type class_ref 645808 // help_entry
	nparams 1
	  param in name "source" type class_ref 645808 // help_entry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1708464 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 645808 // help_entry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap( this->title_, ${p0}.title_ );
  std::swap( this->type_desc_, ${p0}.type_desc_ );
  std::swap( this->range_, ${p0}.range_ );
  std::swap( this->default_value_, ${p0}.default_value_ );
  std::swap( this->description_, ${p0}.description_ );
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      classrelation 1026608 // <dependency>
	relation 1025712 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1026608 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 1720496 "serialize"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & this->title_;
    ar & this->type_desc_;
    ar & this->range_;
    ar & this->default_value_;
    ar & this->description_;
  }
"
	
	
	
	
      end

      extra_member 668464 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1708976 "default_value"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the corresponding attribute."
      end

      operation 1708848 "default_value"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the corresponding attribute."
      end

      operation 1708592 "description"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the corresponding attribute."
      end

      operation 1708720 "description"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the corresponding attribute."
      end

      operation 1709232 "range"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the corresponding attribute."
      end

      operation 1709104 "range"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the corresponding attribute."
      end

      operation 1709744 "title"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the corresponding attribute."
      end

      operation 1709616 "title"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the corresponding attribute."
      end

      operation 1709488 "type_desc"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the corresponding attribute."
      end

      operation 1709360 "type_desc"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the corresponding attribute."
      end

      extra_member 668336 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1710768 "write"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "filt" type class_ref 638896 // fixed_width_output_filter
	  param inout name "dest" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Write help description to destination stream using the given filter."
      end
    end

    class 646064 "help_subtype"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1027504 // <dependency>
	relation 1026608 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 1027504 // <dependency>
	  b parent class_ref 912431 // access
      end

      class 652720 "iterator"
	visibility package stereotype "typedef" base_type class_ref 645808 // help_entry
	cpp_decl "${comment}typedef std::map< std::string, ${type} >::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 652848 "const_iterator"
	visibility package stereotype "typedef" base_type class_ref 645808 // help_entry
	cpp_decl "${comment}typedef std::map< std::string, ${type} >::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      classrelation 1019568 // children_ (<directional composition>)
	relation 1018672 *-->
	  stereotype "map"
	  a role_name "children_" multiplicity "*" private
	    comment " Sub-options of this entry."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${association}, ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1019568 // children_ (<directional composition>)
	  b parent class_ref 645808 // help_entry
	  association_explicit_type "string"
      end

      attribute 740272 "title_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The one word title/label this description applies to."
      end

      attribute 740144 "description_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Description of the particular option."
      end

      extra_member 669104 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1713328 "help_subtype"
	public explicit_return_type ""
	nparams 2
	  param in name "label" explicit_type "string"
	  param in name "desc" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}
: title_( ${p0} )
, description_( ${p1} )
{}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1720624 "help_subtype"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1720752 "~help_subtype"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1720880 "help_subtype"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 646064 // help_subtype
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: children_( std::move( ${p0}.children_ ) )
, title_( std::move( ${p0}.title_ ) )
, description_( std::move( ${p0}.description_ ) )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1721008 "help_subtype"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 646064 // help_subtype
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: children_( ${p0}.children_ )
, title_( ${p0}.title_ )
, description_( ${p0}.description_ )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1721136 "operator="
	public return_type class_ref 646064 // help_subtype
	nparams 1
	  param in name "source" type class_ref 646064 // help_subtype
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1721264 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 646064 // help_subtype
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap( this->children_, ${p0}.children_ );
  std::swap( this->title_, ${p0}.title_ );
  std::swap( this->description_, ${p0}.description_ );
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      classrelation 1026736 // <dependency>
	relation 1025840 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1026736 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 1720240 "serialize"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & this->children_;
    ar & this->title_;
    ar & this->description_;
  }
"
	
	
	
	
      end

      extra_member 668976 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1729328 "begin"
	public return_type class_ref 652720 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->children_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1729584 "begin"
	stereotype "const"
	const public return_type class_ref 652848 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->children_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1713200 "description"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the corresponding attribute."
      end

      operation 1713072 "description"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the corresponding attribute."
      end

      operation 1729456 "end"
	public return_type class_ref 652720 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->children_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1729712 "end"
	stereotype "const"
	const public return_type class_ref 652848 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->children_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1729200 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->children_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1729072 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->children_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1712944 "title"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the corresponding attribute."
      end

      operation 1712816 "title"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the corresponding attribute."
      end

      extra_member 668592 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1711152 "write"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "filt" type class_ref 638896 // fixed_width_output_filter
	  param inout name "dest" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Write help description to destination stream using the given filter.
 Include descriptions for child entries."
      end

      operation 1711408 "add_entry"
	public explicit_return_type "void"
	nparams 1
	  param in name "entry" type class_ref 645808 // help_entry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  UTILITY_REQUIRE( not this->has_entry( entry.title() ), \"Can not add two entries with the same title.\" );
  this->children_.insert( std::make_pair( entry.title(), entry ) );
  UTILITY_ENSURE( this->has_entry( entry.title() ), \"Failed to add entry with title [\"+entry.title()+\"].\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add a new help entry to this master entry

 \\pre not has_entry( entry.title )
 \\post has_entry( entry.title )"
      end

      operation 1711536 "has_entry"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "title" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->children_.find( ${p0} ) != this->children_.end();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Does this master entry have an entry with the given title?"
      end

      operation 1713456 "get_entry"
	public return_type class_ref 645808 // help_entry
	nparams 1
	  param in name "title" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type}& ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  auto result = this->children_.find( ${p0} );
  UTILITY_REQUIRE( result != this->children_.end(), \"No entry with given title found.\" );
  return result->second;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get entry with the given title.

 \\pre has_entry( title )"
      end

      operation 1711664 "get_entry"
	stereotype "const"
	const public return_type class_ref 645808 // help_entry
	nparams 1
	  param in name "title" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type}& ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  auto result = this->children_.find( ${p0} );
  UTILITY_REQUIRE( result != this->children_.end(), \"No entry with given title found.\" );
  return result->second;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get entry with the given title.

 \\pre has_entry( title )"
      end
    end

    class 646192 "help_section"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1027632 // <dependency>
	relation 1026736 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 1027632 // <dependency>
	  b parent class_ref 912431 // access
      end

      classrelation 1020080 // <generalisation>
	relation 1019184 ---|>
	  a private
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1020080 // <generalisation>
	  b parent class_ref 646064 // help_subtype
      end

      class 653104 "iterator"
	visibility package stereotype "typedef" base_type class_ref 646064 // help_subtype
	cpp_decl "${comment}typedef std::map< std::string, ${type} >::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 652976 "const_iterator"
	visibility package stereotype "typedef" base_type class_ref 646064 // help_subtype
	cpp_decl "${comment}typedef std::map< std::string, ${type} >::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      classrelation 1019824 // subtypes_ (<directional composition>)
	relation 1018928 *-->
	  stereotype "map"
	  a role_name "subtypes_" multiplicity "*" private
	    comment " optional subtypes for this stanza type"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${association}, ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1019824 // subtypes_ (<directional composition>)
	  b parent class_ref 646064 // help_subtype
	  association_explicit_type "string"
      end

      extra_member 668848 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1713712 "help_section"
	public explicit_return_type ""
	nparams 2
	  param in name "label" explicit_type "string"
	  param in name "desc" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}
: help_subtype( ${p0}, ${p1} )
{}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1722032 "help_section"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1721904 "~help_section"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1721776 "help_section"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 646192 // help_section
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: help_subtype( std::move( ${p0} ) )
, subtypes_( std::move( ${p0}.subtypes_ ) )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1721648 "help_section"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 646192 // help_section
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: help_subtype( ${p0} )
, subtypes_( ${p0}.subtypes_ )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1721520 "operator="
	public return_type class_ref 646192 // help_section
	nparams 1
	  param in name "source" type class_ref 646192 // help_section
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1721392 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 646192 // help_section
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->help_subtype::swap( ${p0} );
  std::swap( this->subtypes_, ${p0}.subtypes_ );
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      classrelation 1026864 // <dependency>
	relation 1025968 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1026864 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 1720368 "serialize"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & boost::serialization::base_object< help_subtype >(*this);
    ar & this->subtypes_;
  }
"
	
	
	
	
      end

      extra_member 669232 "USING"
	
	cpp "
public:
  // Methods we want to make public from help_subtype
  using help_subtype::description;
  using help_subtype::title;
  using help_subtype::add_entry;
  using help_subtype::has_entry;
  using help_subtype::get_entry;
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 668720 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1731504 "entry_begin"
	public return_type class_ref 652720 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->help_subtype::begin();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1731376 "entry_begin"
	stereotype "const"
	const public return_type class_ref 652848 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->help_subtype::begin();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1731248 "entry_end"
	public return_type class_ref 652720 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->help_subtype::end();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1731120 "entry_end"
	stereotype "const"
	const public return_type class_ref 652848 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->help_subtype::end();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1730992 "entry_empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->help_subtype::empty();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1730864 "entry_size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->help_subtype::size();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1730736 "subtype_begin"
	public return_type class_ref 653104 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->subtypes_.begin();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1730608 "subtype_begin"
	stereotype "const"
	const public return_type class_ref 652976 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->subtypes_.begin();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1730480 "subtype_end"
	public return_type class_ref 653104 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->subtypes_.end();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1730352 "subtype_end"
	stereotype "const"
	const public return_type class_ref 652976 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->subtypes_.end();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1730224 "subtype_empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->subtypes_.empty();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1730096 "subtype_size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->subtypes_.size();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 675760 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1712688 "write"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "filt" type class_ref 638896 // fixed_width_output_filter
	  param inout name "dest" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Write help description to destination stream using the given filter.
 Include descriptions for child entries."
      end

      operation 1712560 "add_subtype"
	public explicit_return_type "void"
	nparams 1
	  param in name "entry" type class_ref 646064 // help_subtype
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  UTILITY_REQUIRE( not this->has_subtype( entry.title() ), \"Can not add two subtypes with the same title.\" );
  this->subtypes_.insert( std::make_pair( entry.title(), entry ) );
  UTILITY_ENSURE( this->has_subtype( entry.title() ), \"Failed to add subtype with title [\"+entry.title()+\"].\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add a new help entry to this master entry

 \\pre not has_subtype( entry.title )
 \\post has_subtype( entry.title )"
      end

      operation 1712432 "has_subtype"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "title" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->subtypes_.find( ${p0} ) != this->subtypes_.end();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Does this master entry have an entry with the given title?"
      end

      operation 1713584 "get_subtype"
	public return_type class_ref 646064 // help_subtype
	nparams 1
	  param in name "title" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type}& ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  auto result = this->subtypes_.find( ${p0} );
  UTILITY_REQUIRE( result != this->subtypes_.end(), \"No subtype with given title found.\" );
  return result->second;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get subtype entry with the given title.

 \\pre has_subtype( title )"
      end

      operation 1712304 "get_subtype"
	stereotype "const"
	const public return_type class_ref 646064 // help_subtype
	nparams 1
	  param in name "title" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type}& ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  auto result = this->subtypes_.find( ${p0} );
  UTILITY_REQUIRE( result != this->subtypes_.end(), \"No subtype with given title found.\" );
  return result->second;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get subtype entry with the given title.

 \\pre has_subtype( title )"
      end
    end

    class 313392 "input_base_reader"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Base class for input readers.

Key responsibility: Interpretation of a single input line.
"
      attribute 372784 "line_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The current name from the line"
      end

      attribute 372656 "name_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The current name from the line"
      end

      attribute 372528 "value_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The current name from the line"
      end

      operation 553904 "input_base_reader"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: line_()
, name_()
, value_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 554032 "~input_base_reader"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 554160 "input_base_reader"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 313392 // input_base_reader
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 855728 "input_base_reader"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 313392 // input_base_reader
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 554288 "operator="
	private return_type class_ref 313392 // input_base_reader
	nparams 1
	  param in name "source" type class_ref 313392 // input_base_reader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      classrelation 355248 // <dependency>
	relation 354864 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 355248 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 554416 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
   ar & line_;
   ar & name_;
   ar & value_;
}"
	
	
	
	
      end

      extra_member 290736 "access"
	
	cpp "// --------------------------------------------------
// Observer methods
// --------------------------------------------
" "// --------------------------------------------------
// Observer methods
// --------------------------------------------
"
	java ""
	php ""
	python "# --------------------------------------------------
# Observer methods
# --------------------------------------------
"
	idl ""
      end

      operation 553776 "line"
	preserve_cpp_body_indent const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->line_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.line_
"
	
	comment " Get the current line (including comments)"
      end

      operation 553648 "name"
	preserve_cpp_body_indent const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->name_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.name_
"
	
	comment " Get the name part of the current line"
      end

      operation 554928 "trimmed_line"
	preserve_cpp_body_indent const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.line_
"
	
	comment " Get the current line (excluding comments)"
      end

      operation 553520 "value"
	preserve_cpp_body_indent const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->value_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.value_
"
	
	comment " --------------------------------------------
 Get the value part of the current line."
      end

      extra_member 290864 "mutate"
	
	cpp "// ----------------------------------------
// mutating methods
// ----------------------------------------
" "// ----------------------------------------
// mutating methods
// ----------------------------------------
"
	java ""
	php ""
	python "# ----------------------------------------
# mutating methods
# ----------------------------------------
"
	idl ""
      end

      operation 555440 "add_buffer"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "filename" type class_ref 252079 // path
	  param in name "buffer" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Add a new buffer to the input document."
      end

      operation 555568 "add_include"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "filename" type class_ref 252079 // path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add a new include file to the input document.

 This method reads the given file and all included file into
 the reader object. "
      end

      operation 555056 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
   this->line_.clear();
   this->name_.clear();
   this->value_.clear();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Clear value of 'line', 'name' and 'value'"
      end

      operation 553264 "current_filename"
	abstract preserve_cpp_body_indent const cpp_virtual public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return None if len(self.file_stack_) == 0 else self.file_stack_[-1].path_
"
	
	comment " --------------------------------------------
 CURRENT FILE NAME

 Get the name of the file that is currently being processed.
 If there is not current file then an empty string or None is returned"
      end

      operation 553136 "current_line_number"
	abstract preserve_cpp_body_indent const cpp_virtual public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return -1 if len(self.file_stack_) == 0 else self.file_stack_[-1].line_no_
"
	
	comment " --------------------------------------------
 CURRENT LINE NUMBER

 Get the line number of the file that is currently being
 processed. If there is no current file then 0(C++) or
 -1(python) is returned."
      end

      operation 553392 "next"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  this->clear();
  return this->do_next();
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------
 READ NEXT NAME,VALUE PAIR
 
 Return false when there is no more input

 Reads line from the current input file ignoring blank lines and
 deleting comments beginning with \"#\". Comments may appear
 anywhere on line.

 Splits the line into a name, value pair.  Value may be an empty
 string.

 (In 'include' statements C++ should handle relative paths, 
 python currently does not)
"
      end

      operation 555184 "do_next"
	abstract preserve_cpp_body_indent cpp_virtual private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------
 READ NEXT NAME,VALUE PAIR
 
 Return false when there is no more input

 Reads line from the current input file ignoring blank lines and
 deleting comments beginning with \"#\". Comments may appear
 anywhere on line.

 Splits the line into a name, value pair.  Value may be an empty
 string.

 (In 'include' statements C++ should handle relative paths, 
 python currently does not)
"
      end

      operation 554544 "set_line"
	public explicit_return_type "bool"
	nparams 1
	  param in name "line" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Set the current line and split into name and value.

\\post line() = line"
      end

      operation 553008 "decomment"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 2
	  param in name "a_val" explicit_type "string"
	  param in name "comment_start" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment "----------------------------------------------------------------------
 Decomment a string

 Attempt to remove comments from a string. Resulting string may be
 empty. Whitespace before the comment character is unchanged.

 returns the processed string

 |# abc  | -> empty
 | # abc  | -> | |
 | #abc| -> | |
 |abc  | unchanged if no comment character present
 |abc  #| -> |abc  |
"
      end

      operation 552880 "decomment"
	class_operation public explicit_return_type "string"
	nparams 1
	  param in name "a_val" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return ${class}::decomment(a_val, '#');
}
"
	
	
	
	
      end

      operation 552752 "dequote"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 1
	  param in name "a_val" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------------------------------------
 Dequote a string

 Attempt to remove leading and trailing quotes from a string.
 Returns altered string or original value if no quotes.

 Quotes are the characters ' or \" and they must match to be
 removed. A slash character has no special meaning before a
 quote. Leading and trailing whitespace outside the quotes is
 also removed, but whitespace in the quotes is unchanged.

 |'abc  '| -> |abc  |
 |\"abc  \"| -> |abc  |
 |\"abc  '| unchanged
 |\"abc  \" | -> |abc  |
 |\"abc  ' | unchanged
"
      end

      operation 552624 "read_as_floats"
	class_operation preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "input_buffer" explicit_type "string"
	  param inout name "a_arry" explicit_type "std::vector< double >"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------------
// Convert a string of numbers into a double array
//
// NOTE: this method assumes that the only spacing characters in strval
// will be spaces or tabs
//
// \\param strval : the line of numbers 
// \\param a_arry : the target array
// \\param a_size : the maximum number of values to read
// \\param a_cnt : the actual number read
// \\param a_istt : iostat code of last read, /= 0 means error

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p2}${v2}${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Convert the current line into an array of floats. Returns true
 if the whole line was converted.

 Any data in a_arry will be deleted on entry to the function.

 The actual number of elements converted will be the final size of
 a_arry."
      end

      operation 552496 "read_as_bool"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "astr" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Convert textual representation of true/false into bool.

Look for (english) textual representation of boolean.

(1) find 'true' or 'false' ignoring case

(2) if (1) fails attempt stringstream(a_val) >> a_res
"
      end

      operation 1097008 "float_input"
	class_operation public explicit_return_type "void"
	nparams 7
	  param in name "name" explicit_type "string"
	  param in name "value" explicit_type "string"
	  param in name "title" explicit_type "string"
	  param in name "section_name" explicit_type "string"
	  param inout name "target" explicit_type "double"
	  param in name "above_zero" explicit_type "bool"
	  param in name "equal_zero" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} & ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Attempt to read an input value as a floating point number

 \\param name : input parameter name
 \\param value : value in input file
 \\param title : text giving class context for error, should start with capital.
 \\param section_name : section context for error
 \\param target : where to put the result, unchanged on error
 \\parma above_zero : whether value should be positive
 \\param equal_zero : if above_zero is true, allows value to also equal zero 
"
      end

      operation 1097264 "bool_input"
	class_operation public explicit_return_type "void"
	nparams 7
	  param in name "name" explicit_type "string"
	  param in name "value" explicit_type "string"
	  param in name "title" explicit_type "string"
	  param in name "section_name" explicit_type "string"
	  param inout name "target" explicit_type "bool"
	  param in name "has_default" explicit_type "bool"
	  param in name "default_value" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} & ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Attempt to read an input value as a floating point number

 \\param name : input parameter name
 \\param value : value in input file
 \\param title : text giving class context for error, should start with capital.
 \\param section_name : section context for error
 \\param target : where to put the result, unchanged on error
 \\parma has_default : is an empty value an error
 \\param equal_zero : what is result when value is empty (if has_default)
"
      end

      operation 1628848 "ordinal_input"
	class_operation public explicit_return_type "void"
	nparams 5
	  param in name "name" explicit_type "string"
	  param in name "value" explicit_type "string"
	  param in name "title" explicit_type "string"
	  param in name "section_name" explicit_type "string"
	  param inout name "target" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} & ${p4}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Attempt to read an input value as a positive integer number

 \\param name : input parameter name
 \\param value : value in input file
 \\param title : text giving class context for error, should start with capital.
 \\param section_name : section context for error
 \\param target : where to put the result, unchanged on error
"
      end

      operation 1938736 "get_ordinal"
	public explicit_return_type "size_t"
	nparams 3
	  param in name "name" explicit_type "string"
	  param in name "title" explicit_type "string"
	  param in name "section_name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Attempt to read input value as a positive integer number. Throw consistently
 formatted error message on failure.

 \\param name : input parameter name
 \\param title : text giving class context for error, should start with capital.
 \\param section_name : section context for error
 \\return : the resulting ordinal
"
      end

      operation 1938864 "get_bool"
	public explicit_return_type "bool"
	nparams 5
	  param in name "name" explicit_type "string"
	  param in name "title" explicit_type "string"
	  param in name "section_name" explicit_type "string"
	  param in name "has_default" explicit_type "bool"
	  param in name "default_value" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Attempt to read input value as a boolean. Throw consistently
 formatted error message on failure. 

 \\param name : input parameter name
 \\param title : text giving class context for error, should start with capital.
 \\param section_name : section context for error
 \\parma has_default : is an empty value an error
 \\param equal_zero : what is result when value is empty (if has_default)
"
      end

      operation 1938992 "get_float"
	public explicit_return_type "double"
	nparams 5
	  param in name "name" explicit_type "string"
	  param in name "title" explicit_type "string"
	  param in name "section_name" explicit_type "string"
	  param in name "above_zero" explicit_type "bool"
	  param in name "equal_zero" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Attempt to read an input value as a floating point number. Throw consistently
 formatted error message on failure.

 \\param name : input parameter name
 \\param title : text giving class context for error, should start with capital.
 \\param section_name : section context for error
 \\parma above_zero : whether value should be positive
 \\param equal_zero : if above_zero is true, allows value to also equal zero 
"
      end
    end

    class 313008 "input_node"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Manage dat associated with line-wise reading of an input file. This
 includes the file name and current read position.

 This class follows canonical pattern."
      classrelation 547760 // <dependency>
	relation 546864 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 547760 // <dependency>
	  b parent class_ref 912431 // access
      end

      attribute 372144 "buffer_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Content of input file"
      end

      attribute 371888 "path_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Path of input stream"
      end

      attribute 372272 "pos_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Current position in the buffer."
      end

      attribute 372016 "line_no_"
	private explicit_type "int"
	init_value "-1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Current line number in file"
      end

      operation 549168 "input_node"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
: buffer_()
, path_()
, pos_(0)
, line_no_(-1)
{}
"
	
	
	
	
      end

      operation 549552 "~input_node"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
      end

      operation 549680 "input_node"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 313008 // input_node
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: buffer_(source.buffer_)
, path_(source.path_)
, pos_(source.pos_)
, line_no_(source.line_no_)
{}
"
	
	
	
	
      end

      operation 549808 "input_node"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 313008 // input_node
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: buffer_(std::move(source.buffer_))
, path_(std::move(source.path_))
, pos_(source.pos_)
, line_no_(source.line_no_)
{}
"
	
	
	
	
      end

      operation 549936 "operator="
	public return_type class_ref 313008 // input_node
	nparams 1
	  param in name "source" type class_ref 313008 // input_node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap(source);
  return *this;
}
"
	
	
	
	
      end

      operation 550064 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 313008 // input_node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap(buffer_, source.buffer_);  
  std::swap(path_, source.path_);
  std::swap(pos_, source.pos_);
  std::swap(line_no_, source.line_no_);
}

"
	
	
	
	
      end

      classrelation 354736 // <dependency>
	relation 354352 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 354736 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 550320 "serialize"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & buffer_;
    ar & path_;
    ar & pos_;
    ar & line_no_;
  }
"
	
	
	
	
      end

      operation 550448 "eof"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->buffer_.size() <= this->pos_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Is our current position at the end of the buffer?

 \"eof\" is true under the following condition:
 *  pos_ >= input_buffer.size"
      end

      operation 869168 "file_position"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->pos_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Current byte position in the file/buffer"
      end

      operation 550576 "getline"
	public explicit_return_type "void"
	nparams 1
	  param out name "line" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Get the next line from the buffer"
      end

      operation 869296 "line_number"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->line_no_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Current line number in the file/buffer"
      end

      operation 869040 "path"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->path_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The name of the file that we obtained the buffer contents from."
      end

      operation 878384 "read_stream_"
	private explicit_return_type "bool"
	nparams 1
	  param inout name "ais" explicit_type "istream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Read stream into internal buffer.

 If return value is true then node contains the contents of
 the named file. If false (or on exception) then contents are
 unchanged. "
      end

      operation 878256 "set_buffer"
	public explicit_return_type "bool"
	nparams 2
	  param in name "filename" type class_ref 252079 // path
	  param inout name "ais" explicit_type "istream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Work from stream, giving it the path 'filename'.

 If return value is true then node contains the contents of
 the named file. If false (or on exception) then contents are
 unchanged. "
      end

      operation 551088 "set_buffer"
	public explicit_return_type "bool"
	nparams 1
	  param in name "filename" type class_ref 252079 // path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Work from file pointed to by 'filename'.

 If return value is true then node contains the contents of
 the named file. If false (or on exception) then contents are
 unchanged. "
      end

      operation 551216 "set_buffer"
	public explicit_return_type "bool"
	nparams 2
	  param in name "filename" type class_ref 252079 // path
	  param in name "buffer" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Work from an existing 'buffer', giving it a dummy 'filename'.

 This should always return true.

 Throws the same exceptions as std::string::opertor= 
 and boost::filesystem::absolute."
      end

      operation 869424 "rewind"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  this->pos_ = 0;
  this->line_no_ = 0;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Reset the position and line number to the beginning of
 the file/buffer"
      end
    end

    class 312752 "input_preprocess"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "  ----------------------------------------------------------------------
  INPUT FILE READER AGGREGATION

  This class provides the ability to read all the input files
  into buffers before attempting to process the input.  This
  class supports serialization which
  allows the input document to be read by one thread and then
  distributed to other threads in a parallel application. It detects
  circular references by checking each include file resolves to
  a unique name and limiting the include stack.
  
"
      classrelation 355376 // <generalisation>
	relation 354992 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 355376 // <generalisation>
	  b parent class_ref 313392 // input_base_reader
      end

      classrelation 554288 // <dependency>
	relation 553392 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 554288 // <dependency>
	  b parent class_ref 313008 // input_node
      end

      classrelation 354480 // <dependency>
	relation 354096 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 354480 // <dependency>
	  b parent class_ref 1016239 // strngs
      end

      class 313136 "iterator"
	visibility package stereotype "typedef" base_type class_ref 313008 // input_node
	cpp_decl "${comment}typedef std::map< std::string, ${type} >::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 313264 "const_iterator"
	visibility package stereotype "typedef" base_type class_ref 313008 // input_node
	cpp_decl "${comment}typedef std::map< std::string, ${type} >::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      classrelation 354992 // includes_ (<directional composition>)
	relation 354608 *-->
	  stereotype "map"
	  a role_name "includes_" multiplicity "*" private
	    comment "Map of paths to files"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${association}, ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 354992 // includes_ (<directional composition>)
	  b multiplicity "0..1" parent class_ref 313008 // input_node
	  association_explicit_type "string"
      end

      attribute 371248 "file_stack_"
	private type class_ref 313136 // iterator
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The set of pointers to nodes."
      end

      attribute 372400 "root_node_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The path of the root input buffer "
      end

      extra_member 290224 "lifetime"
	
	cpp "// --------------------------------------------------
// Lifetime methods
// --------------------------------------------------
" "// --------------------------------------------------
// Lifetime methods
// --------------------------------------------------
" inline
	java ""
	php ""
	python "# --------------------------------------------------
# Lifetime methods
# --------------------------------------------------
"
	idl ""
      end

      operation 547120 "input_preprocess"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}  ${throw}
: input_base_reader()
, includes_()
, file_stack_()
{}
"
	
	
	
	
	comment " Generate a reader."
      end

      operation 547248 "~input_preprocess"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;"
	
	
	
	
      end

      operation 547504 "input_preprocess"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 312752 // input_preprocess
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} = delete;
"
	
	
	
	
	comment " invalid operation"
      end

      operation 855984 "input_preprocess"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 312752 // input_preprocess
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${throw} = delete;
"
	
	
	
	
	comment " invalid operation"
      end

      operation 547632 "operator ="
	private return_type class_ref 312752 // input_preprocess
	nparams 1
	  param in name "" type class_ref 312752 // input_preprocess
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " invalid operation"
      end

      classrelation 355120 // <dependency>
	relation 354736 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 355120 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 552240 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}template<class Archive> ${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
      end

      extra_member 290352 "access"
	
	cpp "// --------------------------------------------------
// Observer methods
// --------------------------------------------
" "// --------------------------------------------------
// Observer methods
// --------------------------------------------
"
	java ""
	php ""
	python "# --------------------------------------------------
# Observer methods
# --------------------------------------------
"
	idl ""
      end

      operation 551600 "begin"
	public return_type class_ref 313136 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->includes_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 551728 "begin"
	stereotype "const"
	const public return_type class_ref 313264 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->includes_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 547760 "current_filename"
	preserve_cpp_body_indent const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override
{
  return ( this->file_stack_.empty() ? ${type}() : this->file_stack_.back()->second.path() );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return None if len(self.file_stack_) == 0 else self.file_stack_[-1].path_
"
	
	comment " Get the name of the file that is currently being processed.
 If there is not current file then an empty string or None is returned"
      end

      operation 547888 "current_line_number"
	preserve_cpp_body_indent const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override
{
  return ( this->file_stack_.empty() ? 0 : this->file_stack_.back()->second.line_number() );
} 
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return -1 if len(self.file_stack_) == 0 else self.file_stack_[-1].line_no_
"
	
	comment " Get the line number of the file that is currently being
 processed. If there is no current file then 0(C++) or
 -1(python) is returned."
      end

      operation 551856 "end"
	public return_type class_ref 313136 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->includes_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 551984 "end"
	stereotype "const"
	const public return_type class_ref 313264 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->includes_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 551472 "find_include"
	public return_type class_ref 313136 // iterator
	nparams 1
	  param in name "filename" type class_ref 252079 // path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Find (and return) an include file with the given name. Return
'end' if not found."
      end

      extra_member 290480 "mutate"
	
	cpp "// ----------------------------------------
// mutating methods
// ----------------------------------------
" "// ----------------------------------------
// mutating methods
// ----------------------------------------
"
	java ""
	php ""
	python "# ----------------------------------------
# mutating methods
# ----------------------------------------
"
	idl ""
      end

      operation 552368 "add_buffer"
	public explicit_return_type "void"
	nparams 2
	  param in name "filename" type class_ref 252079 // path
	  param in name "buffer" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add a new buffer to the input document."
      end

      operation 552112 "add_include"
	public explicit_return_type "void"
	nparams 1
	  param in name "filename" type class_ref 252079 // path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add a new include file to the input document.

 This method reads the given file and all included file into
 the reader object. "
      end

      operation 550192 "process"
	private explicit_return_type "void"
	nparams 1
	  param inout name "anode" type class_ref 313008 // input_node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
      end

      extra_member 290608 "input line processing"
	
	cpp "// ----------------------------------------
// input line processing
// ----------------------------------------
" "// ----------------------------------------
// input line processing
// ----------------------------------------
"
	java ""
	php ""
	python "# ----------------------------------------
# input line processing
# ----------------------------------------
"
	idl ""
      end

      operation 548400 "do_next"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "//  dequote
// --------------------------------------------
// READ NEXT NAME, VALUE PAIR
// 
// Return false when there is no more input
//
// Reads line from the current input file ignoring blank lines and
// deleting comments beginning with \"#\". Comments may appear
// anywhere on line.  Included files will be automatically opened
// (and closed) as if they form one continuous input stream.
//
// Splits the line into a name, value pair.  Value may be an empty
// string.

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------
 READ NEXT NAME,VALUE PAIR
 
 Return false when there is no more input

 Reads line from the current input file skipping blank lines and
 deleting comments beginning with \"#\". Comments may appear
 anywhere on line. Lines that only contain whitespace and or
 comments are considered to be blank lines.

 Splits the line into a name, value pair.  Value may be an empty
 string.

 (In 'include' statements C++ should handle relative paths, 
 python currently does not)
"
      end
    end

    class 871087 "input_reader"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "  ----------------------------------------------------------------------
  INPUT FILE READER INTERFACE

  This class provides an iterator like interface over the input
  files. It internally handles include files and comments.  It uses
  lazy evaluation, openning include files in line. It detects
  circular references by limiting the include depth.

  The input_reader only understands two specific strings of the input
  file vocabulary: 'include' and '#'.  All other strings must be
  interpreted by managing object(s).


  ----------------------------------------------------------------------
  INPUT PROCESSING HELPER METHODS

  dequote - Remove matching quotes around a string
  decomment - Remove comment markers and comments

The requirement of needing an input file format that was readable
and writable by both humans and machines led to the Serializer and
SerializableMetaClass classes.  The definition of the input file
is fairly flexible and consists of:

 * three words with special meaning if they appear as the first
   word on a line.  The first two have special meaning only outside
   an input section.

  * 'fileversion' : denotes name,value pair of the version of the
    current input file.  The version only applies to input sections
    after the fileversion pair is encountered

  * 'include' : a name,value pair with the name of an input file
    to be read in-line at the current position.

  * 'end' : indicates the end of an input section.

 * whole and in-line comments beginning with '#'

 * input sections started by an arbitrary label and ending with the
   'end' special word.  Input sections may appear in any order.
   Handling of the content of a section is delegated to a
   SerializeMetaClass object with the same section label.  How
   multiple sections with the same label are handled is the
   responsibility of the SerializeMetaClass object.

To allow sections to appear in any order requires a two stage read
process.  In the first stage the sections are passed to the
SerializeMetaClass objects in the order they are encountered in the
input file.  The second stage occurs once the input file has been
completely read, the SerializeMetaClass objects are then notified
in the order they appear in the Serializer.section_handlers list.
"
      classrelation 355504 // <generalisation>
	relation 355120 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 355504 // <generalisation>
	  b parent class_ref 313392 // input_base_reader
      end

      classrelation 554416 // <dependency>
	relation 553520 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 554416 // <dependency>
	  b parent class_ref 313008 // input_node
      end

      classrelation 1200559 // <dependency>
	relation 1163439 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1200559 // <dependency>
	  b parent class_ref 1016239 // strngs
      end

      classrelation 561072 // file_stack_ (<directional composition>)
	relation 560176 *-->
	  stereotype "vector"
	  a role_name "file_stack_" multiplicity "*" private
	    comment " The set of buffered input streams/files"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 561072 // file_stack_ (<directional composition>)
	  b parent class_ref 313008 // input_node
      end

      extra_member 271665 "lifetime"
	
	cpp "// --------------------------------------------------
// Lifetime methods
// --------------------------------------------------
" "// --------------------------------------------------
// Lifetime methods
// --------------------------------------------------
" inline
	java ""
	php ""
	python "# --------------------------------------------------
# Lifetime methods
# --------------------------------------------------
"
	idl ""
      end

      operation 1541551 "input_reader"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "filename" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}
: input_base_reader()
, file_stack_(1)
{
  this->file_stack_[0].set_buffer( filename );
}
"
	
	
	
	
	comment " Generate a reader using the filename of the top-level file."
      end

      operation 1541679 "input_reader"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "filename" explicit_type "string"
	  param inout name "ais" explicit_type "istream"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1}& ${p1}${)}  ${throw}
: input_base_reader()
, file_stack_(1)
{
  this->file_stack_[0].set_buffer(${p0}, ${p1});
}
"
	
	
	
	
	comment " Generate a reader using a (possibly dummy) filename and a
 preexisting input stream."
      end

      operation 1541807 "~input_reader"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
      end

      operation 1541935 "input_reader"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
      end

      operation 1542063 "input_reader"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 871087 // input_reader
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} = delete;
"
	
	
	
	
	comment " invalid operation"
      end

      operation 878512 "input_reader"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 871087 // input_reader
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${throw};
"
	
	
	
	
	comment " invalid operation"
      end

      operation 1542191 "operator ="
	private return_type class_ref 871087 // input_reader
	nparams 1
	  param in name "" type class_ref 871087 // input_reader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " invalid operation"
      end

      extra_member 271793 "access"
	
	cpp "// --------------------------------------------------
// Observer methods
// --------------------------------------------
" "// --------------------------------------------------
// Observer methods
// --------------------------------------------
"
	java ""
	php ""
	python "# --------------------------------------------------
# Observer methods
# --------------------------------------------
"
	idl ""
      end

      operation 1543087 "current_filename"
	preserve_cpp_body_indent const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override
{
  return (this->file_stack_.empty() ? ${type}() : this->file_stack_.back().path());
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return None if len(self.file_stack_) == 0 else self.file_stack_[-1].path_
"
	
	comment " Get the name of the file that is currently being processed.
 If there is not current file then an empty string or None is returned"
      end

      operation 1542959 "current_line_number"
	preserve_cpp_body_indent const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override
{
  return (this->file_stack_.empty() ? 0 : this->file_stack_.back().line_number());
} 
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return -1 if len(self.file_stack_) == 0 else self.file_stack_[-1].line_no_
"
	
	comment " Get the line number of the file that is currently being
 processed. If there is no current file then 0(C++) or
 -1(python) is returned."
      end

      extra_member 271921 "mutate"
	
	cpp "// ----------------------------------------
// mutating methods
// ----------------------------------------
" "// ----------------------------------------
// mutating methods
// ----------------------------------------
"
	java ""
	php ""
	python "# ----------------------------------------
# mutating methods
# ----------------------------------------
"
	idl ""
      end

      operation 555824 "add_buffer"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "filename" type class_ref 252079 // path
	  param in name "buffer" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Add a preread buffer with a (possibly dummy) filename."
      end

      operation 555696 "add_include"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "filename" type class_ref 252079 // path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Add an included file."
      end

      operation 1542831 "do_next"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "//  dequote
// --------------------------------------------
// READ NEXT NAME, VALUE PAIR
// 
// Return false when there is no more input
//
// Reads line from the current input file ignoring blank lines and
// deleting comments beginning with \"#\". Comments may appear
// anywhere on line.  Included files will be automatically opened
// (and closed) as if they form one continuous input stream.
//
// Splits the line into a name, value pair.  Value may be an empty
// string.

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------
 READ NEXT NAME,VALUE PAIR
 
 Return false when there is no more input

 Reads line from the current input file ignoring blank lines and
 deleting comments beginning with \"#\". Comments may appear
 anywhere on line.

 Splits the line into a name, value pair.  Value may be an empty
 string.

 (In 'include' statements C++ should handle relative paths, 
 python currently does not)
"
      end
    end

    class 1012655 "input_delegater"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Manage link between input file section names and section readers

 Provide a map between the name of an input file section and a
 handler function for the section.  This class works with the
 input_reader class to provide a well managed interface to
 reading the randomly ordered content of an IONCH input file.

 This class does not handle any post-processing that may be
 necessary after the input file has been read.  For example,
 initialising objects in a specific dependency order."
      classrelation 1200943 // <generalisation>
	relation 1163823 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1200943 // <generalisation>
	  b parent class_ref 275887 // noncopyable
      end

      classrelation 540720 // <dependency>
	relation 539824 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 540720 // <dependency>
	  b parent class_ref 313392 // input_base_reader
      end

      classrelation 1201839 // <dependency>
	relation 1164719 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1201839 // <dependency>
	  b parent class_ref 205487 // lexical_cast
      end

      classrelation 1201583 // <dependency>
	relation 1164463 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1201583 // <dependency>
	  b parent class_ref 252079 // path
      end

      classrelation 1201711 // <dependency>
	relation 1164591 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1201711 // <dependency>
	  b parent class_ref 1016239 // strngs
      end

      classrelation 1210415 // input_delegate_map_ (<directional composition>)
	relation 1173039 *-->
	  stereotype "map"
	  a role_name "input_delegate_map_" multiplicity "*" private
	    comment "Map of section names to objects responsible for processing input file data."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${association}, boost::shared_ptr< ${type} > > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1210415 // input_delegate_map_ (<directional composition>)
	  b parent class_ref 1082671 // input_base_meta
	  association_explicit_type "string"
      end

      classrelation 1210543 // section_list_ (<directional composition>)
	relation 1173167 *-->
	  stereotype "vector"
	  a role_name "section_list_" multiplicity "*" private
	    comment " List of sections that appeared in the input file"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< boost::shared_ptr< ${type} > > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1210543 // section_list_ (<directional composition>)
	  b parent class_ref 1082671 // input_base_meta
      end

      attribute 1312943 "file_version_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1313071 "max_version_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 1916719 "input_delegater"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "maxver" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}
: input_delegate_map_()
, section_list_()
, file_version_(0ul)
, max_version_(maxver)
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 2087343 "input_delegater"
	preserve_cpp_body_indent private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "For serialization"
      end

      operation 1916847 "~input_delegater"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1916975 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
    return this->input_delegate_map_.empty ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1917103 "add_input_delegate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "delegate" type class_ref 1082671 // input_base_meta
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}boost::shared_ptr< ${t0} >  ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}boost::shared_ptr< ${t0} > ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  UTILITY_REQUIRE(nullptr != ${p0}.get (), \"Can not add null object.\");
  // Get copy of label string as '${p0}' will become invalid at some point during argument passing
  std::string label (${p0}->section_label ());
  UTILITY_REQUIRE(0 == this->input_delegate_map_.count (label), \"Can not add two meta objects for the same input section.\\\"\"+label+\"\\\"\");
  this->input_delegate_map_.insert (std::make_pair (label, ${p0}));
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1917231 "has_section"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
    return this->input_delegate_map_.end() != this->input_delegate_map_.find(${p0});
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Has a delegate that can interpret section {name}"
      end

      operation 1279024 "get_documentation"
	public explicit_return_type "void"
	nparams 1
	  param inout name "helper" type class_ref 1004335 // input_help
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  for(auto const& meta : this->input_delegate_map_ ) meta.second->publish_help( helper );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1917871 "max_version"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
    return this->max_version_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1917359 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
    return this->input_delegate_map_.size ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1917615 "read_input"
	public explicit_return_type "void"
	nparams 1
	  param inout name "reader" type class_ref 313392 // input_base_reader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1917743 "read_version"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
    return this->file_version_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1082671 "input_base_meta"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Manage information between input file format and real classes.

 Lifetime pattern: virtual, no copy"
      classrelation 1210287 // <generalisation>
	relation 1172911 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1210287 // <generalisation>
	  b parent class_ref 275887 // noncopyable
      end

      attribute 1386799 "section_label_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The name of the input section."
      end

      attribute 1386927 "multiple_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Can this section appear more than once"
      end

      attribute 1387055 "required_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "is this section required?"
      end

      operation 2069423 "input_base_meta"
	public explicit_return_type ""
	nparams 3
	  param in name "label" explicit_type "string"
	  param in name "multiple" explicit_type "bool"
	  param in name "required" explicit_type "bool"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}${throw}
: section_label_ (${p0})
, multiple_ (${p1})
, required_ (${p2})
{
  UTILITY_CHECK( core::strngs::is_valid_name(${p0}), \"section label must be single word without spaces or numbers\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 2069551 "~input_base_meta"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	
	
      end

      operation 2069807 "multiple"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Can this section appear multiple times?"
      end

      operation 186160 "read_section"
	public explicit_return_type "void"
	nparams 1
	  param inout name "reader" type class_ref 313392 // input_base_reader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Interpret a section  of the input file.

 throw an error if input file is incorrect (using UTILITY_INPUT macro)"
      end

      operation 833072 "publish_help"
	abstract const cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "helper" type class_ref 1004335 // input_help
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 2068911 "do_read_entry"
	abstract cpp_virtual private explicit_return_type "bool"
	nparams 1
	  param inout name "reader" type class_ref 313392 // input_base_reader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Read a name/value entry in the input file. Return true if the entry was processed.

throw an error if input file is incorrect (using UTILITY_INPUT macro)"
      end

      operation 186288 "do_read_end"
	abstract cpp_virtual private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Perform checks at the end of reading a section and create/add result to
 simulations. If multiple sections may be read, this method must also
 reset the meta object state."
      end

      operation 944304 "do_reset"
	abstract cpp_virtual private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Reset the object state on entry into read_seaction. This
 provides a stronger exception safety if the delegate is
 reused after raising an exception in read_section."
      end

      operation 2069935 "required"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Is an instance of this section required?"
      end

      operation 2069295 "section_label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 539568 "input_definition"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Information about a subtype and its special parameters.  Provides uniform
 interface to be used to instantiate a subtype from an input file.

 pattern: virtual noncopyable"
      attribute 584880 "label_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The label of this subtype in the input file."
      end

      attribute 746800 "description_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " A description of the subtype."
      end

      attribute 585008 "definitions_"
	private type class_ref 645808 // help_entry
	multiplicity "*"
	stereotype "map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< std::string, ${type} > ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Map of allowed parameter names and help documentation."
      end

      extra_member 502960 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1285552 "input_definition"
	public explicit_return_type ""
	nparams 2
	  param in name "label" explicit_type "string"
	  param in name "desc" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}
: label_( ${p0} )
, description_( ${p1} )
, definitions_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1285680 "~input_definition"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1285808 "input_definition"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 539568 // input_definition
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1285936 "input_definition"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 539568 // input_definition
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1286064 "operator="
	private return_type class_ref 539568 // input_definition
	nparams 1
	  param in name "source" type class_ref 539568 // input_definition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 503088 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1286320 "add_definition"
	public explicit_return_type "void"
	nparams 1
	  param in name "entry" type class_ref 645808 // help_entry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  UTILITY_REQUIRE( not this->has_definition( ${p0}.title() ), \"Can not overwrite existing definition.\" );
  this->definitions_[ ${p0}.title() ] = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add a help entry for this subtype

 \\pre not had_definition( entry.title )"
      end

      operation 1751472 "description"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->description_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1286960 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->definitions_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Are there no parameter definitions?"
      end

      operation 1286448 "has_definition"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  return this->definitions_.count( ${p0} ) == 1;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1286192 "label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->label_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1286576 "publish_help"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 2
	  param inout name "helper" type class_ref 1004335 // input_help
	  param in name "seclabel" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Put help information from definition into helper
 object."
      end

      operation 1286832 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->definitions_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " HOw many parameter definitions are there?"
      end
    end

    class 572720 "input_error_messages"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Input error message format templates."
      operation 1372592 "bad_boolean_value"
	class_operation preserve_cpp_body_indent public return_type class_ref 204463 // format
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  static boost::format fmt( \"Parameter \\\"%1%\\\" value (%2%) is not an expected boolean value in a %3% section.\" );
  return fmt;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"mobk\"
"
	
	comment " Message to indicate a value to a parameter was not recognised in the input file.

 Format takes (1) parameter name, (2) the non-boolean value and (3) section name as args."
      end

      operation 1372464 "bad_number_value"
	class_operation preserve_cpp_body_indent public return_type class_ref 204463 // format
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  static boost::format fmt( \"Parameter \\\"%1%\\\" value (%2%) is not an expected numerical value in a %3% section.\" );
  return fmt;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"mobk\"
"
	
	comment " Message to indicate a value to a parameter was not recognised in the input file.

 Format takes (1) parameter name, (2) the non-numerical value and (3) section name as args."
      end

      operation 1372336 "bad_subtype_value"
	class_operation preserve_cpp_body_indent public return_type class_ref 204463 // format
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  static boost::format fmt( \"Parameter \\\"%1%\\\" value (%2%) does not name a valid %3% subtype (see documentation).\" );
  return fmt;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"mobk\"
"
	
	comment " Message to indicate a value to a \"type\" parameter was not recognised in the input file.

 Format takes (1) parameter name, (2) the unknown subtype value and (3) section name as args."
      end

      operation 1371824 "bad_value"
	class_operation preserve_cpp_body_indent public return_type class_ref 204463 // format
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  static boost::format fmt( \"Parameter \\\"%1%\\\" value (%2%) is not valid in a %3% section.\" );
  return fmt;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"mobk\"
"
	
	comment " Message to indicate a value to a parameter was not recognised in the input file.

 Format takes (1) parameter name, (2) the unknown/bad value and (3) section name as args."
      end

      operation 1371568 "duplicate_parameter"
	class_operation preserve_cpp_body_indent public return_type class_ref 204463 // format
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  static boost::format fmt( \"Parameter \\\"%1%\\\" appears more than once in a %2% section.\" );
  return fmt;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"mobk\"
"
	
	comment " Message to indicate a parameter appears twice in input section.

 Format takes (1) parameter name and (2) section name as args."
      end

      operation 1371312 "missing_parameter"
	class_operation preserve_cpp_body_indent public return_type class_ref 204463 // format
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  static boost::format fmt( \"Required parameter \\\"%1%\\\" was not found in a %2% section.\" );
  return fmt;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"mobk\"
"
	
	comment " Message to indicate a required parameter was missing in input file.

 Format takes (1) parameter name and (2) section name as args."
      end

      operation 1371184 "missing_parameters"
	class_operation preserve_cpp_body_indent public return_type class_ref 204463 // format
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  static boost::format fmt( \"Required parameters were not found in a %1% section.\" );
  return fmt;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"mobk\"
"
	
	comment " Message to indicate (unnamed) required parameters were missing in input file.

 Format takes (1) section name as args."
      end

      operation 1371696 "missing_value"
	class_operation preserve_cpp_body_indent public return_type class_ref 204463 // format
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  static boost::format fmt( \"Parameter \\\"%1%\\\" requires a value in a %2% section.\" );
  return fmt;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"mobk\"
"
	
	comment " Message to indicate a parameter was missing a required value in input file.

 Format takes (1) parameter name and (2) section name as args."
      end

      operation 1371440 "invalid_parameter"
	class_operation preserve_cpp_body_indent public return_type class_ref 204463 // format
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  static boost::format fmt( \"Parameter \\\"%1%\\\" is not valid in a %2% section.\" );
  return fmt;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"mobk\"
"
	
	comment " Message to indicate a parameter was not valid for this section and subtype in input file.

 Format takes (1) parameter name and (2) section name as args."
      end

      operation 1372208 "invalid_parameter_subtype"
	class_operation preserve_cpp_body_indent public return_type class_ref 204463 // format
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  static boost::format fmt( \"Parameter \\\"%1%\\\" is not valid in a %2% \\\"%3%\\\" type section.\" );
  return fmt;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}return \"mobk\"
"
	
	comment " Message to indicate a parameter was not valid for this section and subtype in input file.

 Format takes (1) parameter name, (2) section name and (3) subtype name as args."
      end
    end

    classdiagram 148016 "input file write"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 163504 "input_section"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "  Data for a section in an input_document."
      attribute 191664 "content_"
	private explicit_type "string"
	multiplicity "*"
	stereotype "map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}, ${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Name/value pairs"
      end

      attribute 191536 "label_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The label of the section"
      end

      operation 220208 "input_section"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 220720 "input_section"
	public explicit_return_type ""
	nparams 1
	  param in name "lbl" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}
: content_()
, label_( ${p0} )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 220336 "~input_section"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 220464 "input_section"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 163504 // input_section
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: content_( ${p0}.content_ )
, label_( ${p0}.label_ )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 222000 "input_section"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 163504 // input_section
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: content_( std::move( ${p0}.content_ ) )
, label_( std::move( ${p0}.label_ ) )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 220592 "operator="
	public return_type class_ref 163504 // input_section
	nparams 1
	  param in name "source" type class_ref 163504 // input_section
	cpp_decl "   ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 220848 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 163504 // input_section
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
   std::swap( this->content_, ${p0}.content_ );
   std::swap( this->label_, ${p0}.label_ );
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 157104 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 220976 "serialize"
	public explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "a_ver" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}template< class ${t0} > ${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ar & this->content_;
  ar & this->label_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Read/write object to an archive."
      end

      extra_member 157232 "Access"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 221744 "add_entry"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "string"
	  param in name "value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  this->content_[ ${p0} ] = ${p1};
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add name/value pair to section

 Calls to this method with the same 'name' parameter
 will replace any previous value. 
"
      end

      operation 223536 "add_entry"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "string"
	  param in name "value" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  this->content_[ name ] = ( ${p1} ? \"true\" : \"false\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add name/value pair to section

 Calls to this method with the same 'name' parameter
 will replace any previous value even if the type of value
 is different.
"
      end

      operation 222384 "add_entry"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "string"
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  this->content_[ name ] = std::to_string( ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add name/value pair to section

 Calls to this method with the same 'name' parameter
 will replace any previous value even if the type of value
 is different.
"
      end

      operation 222512 "add_entry"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "string"
	  param in name "value" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  this->content_[ name ] = std::to_string( ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add name/value pair to section

 Calls to this method with the same 'name' parameter
 will replace any previous value even if the type of value
 is different.
"
      end

      operation 222640 "add_entry"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "string"
	  param in name "value" explicit_type "long long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  this->content_[ name ] = std::to_string( ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add name/value pair to section

 Calls to this method with the same 'name' parameter
 will replace any previous value even if the type of value
 is different.
"
      end

      operation 222768 "add_entry"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "string"
	  param in name "value" explicit_type "uint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  this->content_[ name ] = std::to_string( ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add name/value pair to section

 Calls to this method with the same 'name' parameter
 will replace any previous value even if the type of value
 is different.
"
      end

      operation 222896 "add_entry"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "string"
	  param in name "value" explicit_type "unsigned long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  this->content_[ name ] = std::to_string( ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add name/value pair to section

 Calls to this method with the same 'name' parameter
 will replace any previous value even if the type of value
 is different.
"
      end

      operation 223024 "add_entry"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "string"
	  param in name "value" explicit_type "unsigned long long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  this->content_[ name ] = std::to_string( ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add name/value pair to section

 Calls to this method with the same 'name' parameter
 will replace any previous value even if the type of value
 is different.
"
      end

      operation 223152 "add_entry"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "string"
	  param in name "value" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  if (${p1} < 1.0E6 and ${p1} > 1.0E-6)
    this->content_[ ${p0} ]= std::to_string( ${p1} );
  else
    this->${name}< ${t1} >( ${p0}, ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add name/value pair to section

 Calls to this method with the same 'name' parameter
 will replace any previous value even if the type of value
 is different.
"
      end

      operation 223280 "add_entry"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "string"
	  param in name "value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  if (${p1} < 1.0E6 and ${p1} > 1.0E-6)
    this->content_[ ${p0} ]= std::to_string( ${p1} );
  else
    this->${name}< ${t1} >( ${p0}, ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add name/value pair to section

 Calls to this method with the same 'name' parameter
 will replace any previous value even if the type of value
 is different.
"
      end

      operation 223408 "add_entry"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "string"
	  param in name "value" explicit_type "long double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  if (${p1} < 1.0E6 and ${p1} > 1.0E-6)
    this->content_[ ${p0} ]= std::to_string( ${p1} );
  else
    this->${name}< ${t1} >( ${p0}, ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add name/value pair to section

 Calls to this method with the same 'name' parameter
 will replace any previous value even if the type of value
 is different.
"
      end

      operation 222256 "add_entry"
	stereotype "template"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "string"
	  param in name "value" explicit_type "T"
	cpp_decl "    ${comment}${friend}template< class ${t1} > ${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  std::stringstream ss;
  ss << ${p1};
  this->content_[ name ] = ss.str();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add name/value pair to section

 Calls to this method with the same 'name' parameter
 will replace any previous value even if the type of value
 is different.
"
      end

      operation 484784 "empty"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->content_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 305072 "get_entry"
	const public explicit_return_type "string"
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->content_.at( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get value of entry with the given name.

  \\pre has_entry( name )"
      end

      operation 304944 "has_entry"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return 0 != this->content_.count( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Does this input section have entry with the given name."
      end

      operation 221488 "label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->label_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 221616 "set_label"
	public explicit_return_type "void"
	nparams 1
	  param in name "lbl" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->label_ = ${p0};
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 484656 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->content_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " How many entries?"
      end

      operation 221104 "write"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  Write the content in input file format to the given stream."
      end
    end

    class 163632 "input_document"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Manage writing of an input file

 Designed to allow the following \"safe\" usage. Note 

 void f(input_file_writer &wr)
 {
   std::size_t ix = wr.add_section( \"a\" );
   wr[ix].add_entry( \"name\", \"value1\" );
   wr[ix].add_entry( \"name2\", \"value2\" );
   // allow 'g' to update current section as well as adding new sections
   g(wr, ix);
 }

 void g(input_file_writer &wr, std::size_t ix)
 {
   // note overwrite of existing name in map
   // silently over-writes existing entry
   wr[ix].add_entry( \"name\", \"value3\" );
   std::size_t ix2 = wr.add_section( \"b\" );
   wr[ix2].add_entry( \"name\", \"value1\" );
 }
"
      classrelation 168112 // content_ (<directional composition>)
	relation 167856 *-->
	  stereotype "vector"
	  a role_name "content_" multiplicity "*" private
	    comment " The content of the input file."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 168112 // content_ (<directional composition>)
	  b parent class_ref 163504 // input_section
      end

      attribute 191792 "version_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The version of the input file"
      end

      operation 219952 "input_document"
	public explicit_return_type ""
	nparams 1
	  param in name "ver" explicit_type "size_t"
	cpp_decl "    ${comment}explicit ${inline}${name}${(}${t0} ${p0}${)}${volatile}${throw}
: content_()
, version_( ${p0} )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Construct writer with the given input file version."
      end

      operation 218544 "input_document"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Default ctor only for serialization."
      end

      operation 218672 "~input_document"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 218800 "input_document"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 163632 // input_document
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: content_( ${p0}.content_ )
, version_( ${p0}.version_ )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 221872 "input_document"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 163632 // input_document
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: content_( std::move( ${p0}.content_ ) )
, version_( std::move( ${p0}.version_ ) )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 218928 "operator="
	public return_type class_ref 163632 // input_document
	nparams 1
	  param in name "source" type class_ref 163632 // input_document
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 219056 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 163632 // input_document
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
   std::swap( content_, ${p0}.content_ );
   std::swap( version_, ${p0}.version_ );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 156976 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 220080 "serialize"
	public explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "a_ver" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}template< class ${t0} > ${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ar & content_;
  ar & version_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Read/write object to an archive."
      end

      extra_member 156720 "Manage content"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 219312 "add_section"
	public explicit_return_type "size_t"
	nparams 1
	  param in name "label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create and add an new section with the given label and return
 the index to it.
"
      end

      operation 689456 "remove_section"
	public explicit_return_type "void"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Remove a section with the given index.

 This make all indices higher than idx invalid."
      end

      operation 219824 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->content_.empty();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Test if there is any content."
      end

      operation 219184 "operator[]"
	public return_type class_ref 163504 // input_section
	nparams 1
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->content_[ ${p0} ];
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get a reference to the section by index.

  \\pre ix > size is undefined"
      end

      operation 219440 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->content_.size();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Return number of sections."
      end

      operation 491440 "version"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Return number of sections."
      end

      extra_member 156848 "Output content"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 219696 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  Write the content in input file format to the given stream."
      end
    end

    class 419760 "base_public_object"
      visibility package stereotype "IDEA"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Base class for types visible to the user via the 
 input file. These types support reading from and
 writing to the input file format and providing a
 readable self description in the simulation log.
"
      operation 798640 "do_write_document"
	abstract preserve_cpp_body_indent const cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Add derived content to input file section wr[ix]. 

 only throw possible should be from os.write() operation"
      end

      operation 798512 "write_document"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "wr" type class_ref 163632 // input_document
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Add an input file section.

 only throw possible should be from os.write() operation

 The output of this factory method is made up like

 chooser
 <call do_write_document>
 end
"
      end
    end
  end

  classview 154672 "output file management classes"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 328239 // core deployment
    comment " Small cluster of classes to assist in unifying format of output files."
    classdiagram 193712 "Output files"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 271920 "output_field"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " A column of data in the output."
      class 278704 "format_function_type"
	visibility package stereotype "typedef" base_type class_ref 251439 // function2
	nactuals 3
	actual class class_ref 251439 // function2
	  rank 0 explicit_value "void"
	actual class class_ref 251439 // function2
	  rank 1 explicit_value "std::ostream&"
	actual class class_ref 251439 // function2
	  rank 2 explicit_value "size_t"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	classrelation 305328 // <realization>
	  relation 304944 -_-|>
	    a public
	      cpp default "${type}"
	      python "${type}"
	      classrelation_ref 305328 // <realization>
	    b parent class_ref 251439 // function2
	end
      end

      attribute 327088 "label_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Single word labelling the content of the field."
      end

      attribute 327216 "unit_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Single word indicating units of field"
      end

      classrelation 305456 // formatter_ (<directional composition>)
	relation 305072 *-->
	  a role_name "formatter_" private
	    comment " The formatted output function."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 305456 // formatter_ (<directional composition>)
	  b parent class_ref 278704 // format_function_type
      end

      operation 469040 "output_field"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: label_()
, unit_()
, formatter_()
{}
"
	
	
	
	
	comment " Simple default ctor"
      end

      operation 469808 "output_field"
	public explicit_return_type ""
	nparams 3
	  param in name "name" explicit_type "string"
	  param in name "unit" explicit_type "string"
	  param in name "fmtr" type class_ref 278704 // format_function_type
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}
: label_( ${p0} )
, unit_( ${p1} )
, formatter_( ${p2} )
{}

"
	
	
	
	
	comment " Main ctor"
      end

      operation 469168 "~output_field"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	
	
      end

      operation 469296 "output_field"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 271920 // output_field
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}
: label_( ${p0}.label_ )
, unit_( ${p0}.unit_ )
, formatter_( ${p0}.formatter_ )
{}
"
	
	
	
	
	comment " Simple copy ctor"
      end

      operation 469680 "output_field"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param out name "source" type class_ref 271920 // output_field
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${throw}
: label_( std::move( ${p0}.label_ ) )
, unit_( std::move( ${p0}.unit_ ) )
, formatter_( std::move( ${p0}.formatter_ ) )
{}
"
	
	
	
	
	comment " Simple  movement ctor"
      end

      operation 472496 "swap"
	public explicit_return_type "void"
	nparams 1
	  param out name "source" type class_ref 271920 // output_field
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
 std::swap( label_, ${p0}.label_ );
 std::swap( unit_, ${p0}.unit_ );
 std::swap( formatter_, ${p0}.formatter_ );
}
"
	
	
	
	
	comment " Simple swap method"
      end

      operation 469424 "operator="
	public return_type class_ref 271920 // output_field
	nparams 1
	  param in name "source" type class_ref 271920 // output_field
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	
	
	comment " Simple assignment operation"
      end

      operation 448560 "label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->label_;
}
"
	
	
	
	
	comment " The user readable name of the field"
      end

      operation 472112 "set_label"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->label_ = ${p0};
}
"
	
	
	
	
	comment "  Set the user readable field label"
      end

      operation 472240 "set_unit"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->unit_ = ${p0};
}
"
	
	
	
	
	comment "  Set the field's unit label"
      end

      operation 472368 "set_format_function"
	public explicit_return_type "void"
	nparams 1
	  param in name "fmtr" type class_ref 278704 // format_function_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->formatter_ = ${p0};
}
"
	
	
	
	
	comment "  Set the field's formatting function"
      end

      operation 475312 "set_format_function"
	stereotype "move"
	public explicit_return_type "void"
	nparams 1
	  param inout name "fmtr" type class_ref 278704 // format_function_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} && ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->formatter_ = std::move( ${p0} );
}
"
	
	
	
	
	comment "  Set the field's formatting function"
      end

      operation 448688 "unit"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->unit_;
}
"
	
	
	
	
	comment " The human readable label for the units of the field"
      end

      operation 470576 "write"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "os" explicit_type "ostream"
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
   UTILITY_REQUIRE( this->valid(), \"Can not write incomplete field.\" );
   this->formatter_( ${p0}, ${p1} );
}
"
	
	
	
	
	comment " Write out formatted field data to the stream. For data
 sets, this could be the field in the idxth row of the data.
 For data series the idx can be ignored."
      end

      operation 477744 "valid"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return not (this->label_.empty() or this->unit_.empty() or this->formatter_.empty());
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  Check that we have label, unit and formatter function set."
      end
    end

    class 271792 "output_series"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " A set of fields in a data series. Each write
 will append a single new row to the data file."
      classrelation 306096 // <dependency>
	relation 305712 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 306096 // <dependency>
	  b parent class_ref 1016239 // strngs
      end

      class 279344 "const_iterator"
	visibility package stereotype "typedef" base_type class_ref 271920 // output_field
	cpp_decl "${comment}typedef std::vector< ${type} >::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      classrelation 297008 // entries_ (<directional composition>)
	relation 296624 *-->
	  stereotype "vector"
	  a role_name "entries_" multiplicity "*" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 297008 // entries_ (<directional composition>)
	  b parent class_ref 271920 // output_field
      end

      attribute 327344 "uuid_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  The simulations UUID"
      end

      attribute 327728 "title_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  Human readable title/description of the file content"
      end

      extra_member 248112 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 470960 "output_series"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: entries_()
, uuid_()
, title_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Default constructor"
      end

      operation 471600 "output_series"
	public explicit_return_type ""
	nparams 1
	  param in name "uuid" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}
: entries_()
, uuid_( ${p0} )
, title_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Main ctor"
      end

      operation 471088 "~output_series"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Simple dtor"
      end

      operation 471216 "output_series"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 271792 // output_series
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}
: entries_( ${p0}.entries_ )
, uuid_( ${p0}.uuid_ )
, title_( ${p0}.title_ )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Simple copy ctor"
      end

      operation 471472 "output_series"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 271792 // output_series
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: entries_( std::move( ${p0}.entries_ ) )
, uuid_( std::move( ${p0}.uuid_ ) )
, title_( std::move( ${p0}.title_ ) )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Simple move ctor"
      end

      operation 473776 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 271792 // output_series
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
   std::swap( entries_, ${p0}.entries_ );
   std::swap( uuid_, ${p0}.uuid_ );
   std::swap( title_, ${p0}.title_ );
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 471344 "operator="
	public return_type class_ref 271792 // output_series
	nparams 1
	  param in name "source" type class_ref 271792 // output_series
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Simple assignment operator"
      end

      extra_member 248240 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 477360 "begin"
	const public return_type class_ref 279344 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->entries_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Iterator to first field"
      end

      operation 477488 "end"
	const public return_type class_ref 279344 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->entries_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Iterator to terminate loop over fields"
      end

      operation 476976 "do_body"
	const cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Write the data section of the output file

 \\pre not empty"
      end

      operation 470064 "do_header"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Write the header of the data file

 \\pre not empty"
      end

      operation 477104 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->entries_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Check is there are any data fields defined."
      end

      operation 477232 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->entries_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Check is there are any data fields defined."
      end

      operation 473520 "title"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the title of the dataset"
      end

      operation 476848 "write"
	const public explicit_return_type "void"
	nparams 3
	  param in name "fname" explicit_type "string"
	  param inout name "sink" type class_ref 313520 // base_sink
	  param in name "overwrite" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}, ${t2} ${p2}${)}${const}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Create file if it doesn't exist and write the header and body. If
 the file exists append new data.

 \\pre not empty"
      end

      operation 473392 "uuid"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 248368 "MODIFY"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 476720 "push_back_entry"
	public explicit_return_type "void"
	nparams 1
	  param in name "field" type class_ref 271920 // output_field
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->entries_.push_back( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add an output field to the data set row"
      end

      operation 472880 "set_title"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->title_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the value of the files UUID"
      end

      operation 472624 "set_uuid"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->uuid_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the value of the files UUID"
      end
    end

    class 278960 "output_dataset"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "  An output dataset represents ensemble average data. With this
  output file the simulation overwrites existing data with new data at each
  report cycle."
      classrelation 305584 // <generalisation>
	relation 305200 ---|>
	  a private
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 305584 // <generalisation>
	  b parent class_ref 271792 // output_series
      end

      class 279216 "size_function_type"
	visibility package stereotype "typedef" base_type class_ref 252591 // function0
	nactuals 1
	actual class class_ref 252591 // function0
	  rank 0 explicit_value "size_t"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	classrelation 305712 // <realization>
	  relation 305328 -_-|>
	    a public
	      cpp default "${type}"
	      python "${type}"
	      classrelation_ref 305712 // <realization>
	    b parent class_ref 252591 // function0
	end
      end

      classrelation 305840 // sizer_ (<directional composition>)
	relation 305456 *-->
	  a role_name "sizer_" private
	    comment "  Function to get the number of rows to write."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 305840 // sizer_ (<directional composition>)
	  b parent class_ref 279216 // size_function_type
      end

      extra_member 248752 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 474928 "output_dataset"
	public explicit_return_type ""
	nparams 2
	  param in name "source" type class_ref 271792 // output_series
	  param in name "sz" type class_ref 279216 // size_function_type
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}
: ${t0}( ${p0} )
, sizer_( ${p1} )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Main ctor"
      end

      operation 474160 "output_dataset"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: output_series()
, sizer_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Simple default ctor"
      end

      operation 474288 "~output_dataset"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Simple default dtor"
      end

      operation 474416 "output_dataset"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 278960 // output_dataset
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: output_series( ${p0} )
, sizer_( ${p0}.sizer_ )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Simple copy ctor"
      end

      operation 474800 "output_dataset"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 278960 // output_dataset
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: output_series( ${p0} )
, sizer_( std::move( ${p0}.sizer_ ) )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Simple move ctor"
      end

      operation 475440 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 278960 // output_dataset
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
   this->output_series::swap( ${p0} );
   std::swap( sizer_, ${p0}.sizer_ );
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Simple swap method"
      end

      operation 474672 "operator="
	public return_type class_ref 278960 // output_dataset
	nparams 1
	  param in name "source" type class_ref 278960 // output_dataset
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Simple assignment operator"
      end

      extra_member 248880 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 474032 "do_body"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment " Write the data set

 \\pre not empty and have_size"
      end

      extra_member 249904 "using do_header"
	
	cpp "using output_series::do_header;

" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 477872 "have_size"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return not this->sizer_.empty();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Can we determine the number of data rows?"
      end

      extra_member 256432 "using set and get functions"
	
	cpp "// Make selected base class methods accessible
using output_series::begin;
using output_series::empty;
using output_series::end;
using output_series::set_title;
using output_series::set_uuid;
using output_series::size;
using output_series::title;
using output_series::uuid;
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 470192 "write"
	const public explicit_return_type "void"
	nparams 2
	  param in name "fname" explicit_type "string"
	  param inout name "sink" type class_ref 313520 // base_sink
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment "  Write/update the data set on permanent storage.

 \\pre not empty and have_size"
      end

      extra_member 249008 "MODIFY"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 249648 "using push_back_entry"
	
	cpp "using output_series::push_back_entry;

" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 475056 "set_size_function"
	public explicit_return_type "void"
	nparams 1
	  param in name "sz" type class_ref 279216 // size_function_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->sizer_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set functor to calculate number of rows"
      end

      operation 475184 "set_size_function"
	stereotype "move"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sz" type class_ref 279216 // size_function_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} && ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->sizer_ = std::move( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set functor to calculate number of rows"
      end
    end
  end

  deploymentview 328239 "core deployment"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 577711 "constants"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// -- manual includes
#include \"core/strngs.hpp\"
#include <boost/format.hpp>
// --

${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 865967 // constants
      end
      comment "Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 583344 "help_entry"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"utility/utility.hpp\"
// --
#include <boost/iostreams/filtering_stream.hpp>
// --
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 645808 // help_entry
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 583472 "help_subtype"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"utility/utility.hpp\"
// --
#include <boost/iostreams/filtering_stream.hpp>
// --
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 646064 // help_subtype
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 583600 "help_section"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"utility/utility.hpp\"
// --
#include <boost/iostreams/filtering_stream.hpp>
// --
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 646192 // help_section
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 742959 "input_base_meta"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"core/strngs.hpp\"
#include \"utility/utility.hpp\"
// --
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 1082671 // input_base_meta
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 288432 "input_base_reader"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"utility/utility.hpp\"
// -
#include <fstream>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/filesystem.hpp>
//--
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 313392 // input_base_reader
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 523696 "input_definition"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"utility/utility.hpp\"
//-
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 539568 // input_definition
      end
    end

    artifact 674607 "input_delegater"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// MANUAL INC
// - 
#include \"utility/utility.hpp\"
#include <fstream>
#include <iostream>
#include <set>
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 1012655 // input_delegater
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 155696 "input_document"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
// manual includes
#include <sstream>
// -
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manual includes
#include \"core/strngs.hpp\"
//
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 163504 // input_section
	class_ref 163632 // input_document
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 543664 "input_error_messages"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 572720 // input_error_messages
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 674735 "input_help"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
// manuals
#include \"core/fixed_width_output_filter.hpp\"
//-
#ifndef HAS_NO_BACKTRACE
extern \"C\"
{
#include <execinfo.h>
}
#endif

${declarations}
${namespace_start}

#ifndef HAS_NO_BACKTRACE
using ::backtrace_symbols;
#else // don't HAVE_BACKTRACE so provide dummy implementations
static char** backtrace_symbols (void*const*, int)
{
   return 0;
}
#endif

${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manuals
#include \"utility/utility.hpp\"
//-
#include <boost/program_options/options_description.hpp>
//=
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 1004335 // input_help
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 430256 "input_node"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual include
#include <fstream>
// -
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 313008 // input_node
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 288304 "input_preprocess"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
class input_preprocess;

${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manual includes
#include \"core/strngs.hpp\"
#include \"utility/utility.hpp\"

#include <boost/algorithm/string.hpp>
#include <boost/filesystem.hpp>
#include <boost/lexical_cast.hpp>
#include <fstream>
// --

${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 312752 // input_preprocess
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 579119 "input_reader"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
//--
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
//--
#include \"core/constants.hpp\"
#include \"utility/utility.hpp\"

#include <fstream>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/filesystem.hpp>

${namespace_start}
${members}
${namespace_end}
"
      python_src "${comment}
${definition}"
      associated_classes
	class_ref 871087 // input_reader
      end
      comment "Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 268720 "output_file"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// - manual includes
#include \"utility/utility.hpp\"
// -
#include <boost/filesystem.hpp>
#include <fstream>
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 271920 // output_field
	class_ref 271792 // output_series
	class_ref 278960 // output_dataset
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 576816 "fixed_width_output_filter"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
// manuals
#include <boost/iostreams/operations.hpp>
//
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 638896 // fixed_width_output_filter
	class_ref 645936 // indent_guard
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 736175 "strngs"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manual includes
#include <algorithm>
#include <cctype>
// -
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${definition}"
      associated_classes
	class_ref 1016239 // strngs
      end
      comment "Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 609327 "libionch_core"
      stereotype "library"
      associated_artifacts
	artifact_ref 155696 // input_document
	artifact_ref 268720 // output_file
	artifact_ref 288304 // input_preprocess
	artifact_ref 288432 // input_base_reader
	artifact_ref 430256 // input_node
	artifact_ref 523696 // input_definition
	artifact_ref 543664 // input_error_messages
	artifact_ref 577711 // constants
	artifact_ref 579119 // input_reader
	artifact_ref 583344 // help_entry
	artifact_ref 583472 // help_subtype
	artifact_ref 583600 // help_section
	artifact_ref 674607 // input_delegater
	artifact_ref 674735 // input_help
	artifact_ref 736175 // strngs
	artifact_ref 742959 // input_base_meta
      end
      comment "Library of the fundamental components of the program

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end
  end

  package_ref 388911 // libcore Test Suites
end
