class input_preprocess
!!!552240.cpp!!!	serialize(inout ar : Archive, in version : unsigned int) : void
ar & boost::serialization::base_object< input_base_reader >(*this);
ar & includes_;
ar & root_node_;
typename Archive::is_loading isload;
if ( isload )
{
   // reconstruct from paths.
   std::size_t count;
   ar & count;
   if (count > 0)
   {
      for (std::size_t ii = 0; ii != count; ++ii)
      {
         std::string pp;
         ar & pp;
         file_stack_.push_back( this->includes_.find( pp ) );
      }
   }
}
else
{
   // save paths instead of iterators.
   std::size_t count = file_stack_.size();
   ar & count;
   if ( not file_stack_.empty() )
   {
      for (auto const& ii : file_stack_)
      {
         std::string pp = ii->first;
         ar & pp;
      }
   }
}

!!!551472.cpp!!!	find_include(in filename : path) : input_preprocess::iterator
std::string fn = boost::filesystem::absolute( filename ).string();
return this->includes_.find( fn );
!!!552368.cpp!!!	add_buffer(in filename : path, in buffer : string) : void
// Make filename complete
std::string fn = boost::filesystem::absolute( filename ).string();
// Require that it is not already in the map
UTILITY_REQUIRE( this->end() == this->includes_.find( fn ), "Input file included multiple times." );

// Process the buffer
this->includes_[ fn ].set_buffer( fn, buffer );
this->process( this->includes_[ fn ] );

if ( this->file_stack_.empty() )
{
   // (re)initialize the system
   this->root_node_ = fn;
   UTILITY_CHECK( this->end() != this->includes_.find( fn ), "Input file not found after including it." );
   this->file_stack_.push_back( this->includes_.find( fn ) );
}
!!!552112.cpp!!!	add_include(in filename : path) : void
std::string fn = boost::filesystem::absolute( filename ).string();
// Require that it is not already in the map
UTILITY_REQUIRE( this->end() == this->includes_.find( fn ), "Input file included multiple times." );
this->includes_[ fn ].set_buffer( fn );
this->process( this->includes_[ fn ] );

if ( this->file_stack_.empty() )
{
   // initialize the system
   this->root_node_ = fn;
   UTILITY_CHECK( this->end() != this->includes_.find( fn ), "Input file not found after including it." );
   this->file_stack_.push_back( this->includes_.find( fn ) );
}

!!!550192.cpp!!!	process(inout anode : input_node) : void
//
// Attempt to handle input error cases where include keyword
// is found without a value
//
// "include\n"
// "include \n"

const std::string incl_label( core::strngs::fsincl() );
// look for include files in buffer
while ( not anode.eof() )
{
  std::string line;
  std::string name;
  std::string value;
  anode.getline( line );
  boost::algorithm::trim( line );
  // only consider lines with 'include' as first word
  if( 0 != line.find( incl_label ) ) continue;
  this->set_line( line );
  // If the name is not include (eg someone wrote include....) continue
  if( this->name() != incl_label ) continue;
  UTILITY_INPUT_OLD( not this->value().empty(), "Keyword 'include' used without file name in file \""+anode.path()+"\" at line "+std::to_string( anode.line_number() ), core::strngs::fsincl() );

  // Complete filename based on the current node's path
  boost::filesystem::path fn( this->value() );
  // reset name/value.
  this->clear();

  // Add include to map
  if( fn.has_relative_path() )
  {
    // All nodes should have absolute paths.
    boost::filesystem::path here( anode.path() );
    fn = here.parent_path() / fn;
  }
  this->add_include( fn );
}
// reset buffer position.
anode.rewind();

!!!548400.cpp!!!	do_next() : bool
if (this->file_stack_.empty())
{
   return false;
}
// Keep going until we get a result or reach the end of all files.
while (true)
{
   // Get the top most stream
   input_node &fid = this->file_stack_.back()->second;
   if (fid.eof())
   {
      this->file_stack_.pop_back();
      if (this->file_stack_.empty())
      {
         return false;
      }
      continue;
   }
   std::string line;
   fid.getline( line );
   if ( not this->set_line( line ) ) continue;

   // Check for include.
   if (this->name() == core::strngs::fsincl())
   {
      boost::filesystem::path fn( this->value());
      if ( fn.has_relative_path() )
      {
         boost::filesystem::path root( fid.path() );
         if ( root.has_parent_path() )
         {
            fn = root.parent_path() / fn;
         }
      }
      // search fid for include file and update
      // stack.
      UTILITY_INPUT_OLD( this->file_stack_.size() < 100, "Include depth exceeding 100 levels, which probably indicates an include cycle", core::strngs::fsincl() );
      this->file_stack_.push_back( this->find_include( fn ) );
      UTILITY_CHECK( this->end() != this->file_stack_.back(), "No matching input node for path "+fn.string() );
      continue;
   }
   break;
}
return true;
!!!548400.python!!!	do_next() : bool
if len(self.file_stack_) == 0:
  return False
# Keep going until we get a result or reach the end of all files.
while True:
  # Get the top most stream
  node = self.file_stack_[-1]
  self.name_ = None
  self.line_ = None
  self.value_ = None
  self.line_ = node.stream_.readline()
  if self.line_ == "":
    self.file_stack_.pop()
    if len(self.file_stack_) == 0:
      self.line_ = None
      return False
    continue
  # Keep track of the current line number.
  node.line_no_ += 1
  if self.line_ == "\n":
    continue
  self.line_ = input_reader.decomment(self.line_, '#')
  if self.line_ == "\n":
    continue
  self.line_ = self.line_.strip()
  if self.line_ == "":
    continue
  # Split line
  # have name/value ?? (look for ' ' or '=')
  if self.line_.find("=") >= 0:
    arr = self.line_.split("=",1)
    self.name_ = arr[0]
    if len(arr) > 1:
      self.value_ = arr[1]
  else:
    arr = self.line_.split(None,1)
    self.name_ = arr[0]
    if len(arr) > 1:
      self.value_ = arr[1]
  self.name_ = self.name_.strip()
  self.value_ = None if self.value_ == None else self.value_.strip()
  # Check for include.
  if self.name_ == "include":
    newnode = location_node()
    newnode.open(self.value_)
    self.file_stack_.append(newnode)
    continue
  break
return True
