format 75
"ion_channel" // ion_channel
  revision 56
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  stereotype "application"
  cpp_h_dir "cscchannel"
  cpp_src_dir "cscchannel"
  cpp_namespace "ion_channel"
  classview 128304 "simulator"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 128176 // ion_channel
    sequencediagram 226481 "simulator.update_rates"
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
      size A4
    end

    classdiagram 300207 "Ion channel simulation"
      draw_all_relations default hide_attributes yes hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 1129391 "channel_system"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Cell simulator with IONCH style pore geometry.

NOTE: Regions as a concept are the domain of the trial generator classes rather
than this class. Initial version will follow the legacy settings."
      classrelation 182576 // <generalisation>
	relation 182320 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 182576 // <generalisation>
	  b parent class_ref 1129135 // simulator
      end

      class 184112 "region_index"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum
 {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl "${comment}${visibility}final class ${name} {
${items}}
"
	python_decl "class ${name}:
${docstring}${members}
"
	idl_decl "${comment}enum ${name} {
${items}};
"
	explicit_switch_type ""
	
	attribute 214704 "IZLIM"
	  public type class_ref 184112 // region_index
	  init_value "0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Region within user-defined subregion bounded by 'structural_length'. This may
 be equal or smaller than IFILT region."
	end

	attribute 214576 "IFILT"
	  public type class_ref 184112 // region_index
	  init_value "1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Region within the central cylinder of protein model."
	end

	attribute 214832 "ICHAN"
	  public type class_ref 184112 // region_index
	  init_value "2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Region inside the protein model, including the central cylinder 
 and entrances."
	end

	attribute 214960 "IBULK"
	  public type class_ref 184112 // region_index
	  init_value "3"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " The entire simulation cell"
	end

	attribute 215088 "REGION_COUNT"
	  public type class_ref 184112 // region_index
	  init_value "4"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " The number of defined regions"
	end
      end

      attribute 311089 "region_names_"
	private explicit_type "string"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The user-defined names of the regions"
      end

      attribute 134576 "volumes_"
	private explicit_type "double"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment "The total accessible volume for individual species"
      end

      attribute 311601 "cell_hlength_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Half length of the cell (F90: ZL4)"
      end

      attribute 311729 "cell_radius_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Radius of the simulation cell (F90 : RL5)"
      end

      attribute 311985 "membrane_arc_radius_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Radius of the arc at the protein/membrane interface (F90 RLCURV)"
      end

      attribute 311345 "pore_hlength_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The half length of the pore cylinder. (F90 : ZL1)

The total length of the SF pore is 2 x (pore_hlength + vestibule_radius)"
      end

      attribute 312113 "pore_radius_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Radius of the pore (F90 : RL1)"
      end

      attribute 310833 "protein_radius_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Radius of the outer edge of the channel protein (F90 : RL4)"
      end

      attribute 310705 "structural_hlength_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  Hard limit for structural ion movement along the z-axis. (F90 : ZLIMIT)

  REQUIRE structural_hlength_ <= pore_hlength_ + vestibule_radius_"
      end

      attribute 310961 "vestibule_arc_radius_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Radius of the arc joining the channel ends to the outer surface of the protein. (F90 : RLVEST)"
      end

      attribute 148016 "epsw_"
	private explicit_type "double"
	init_value "80.0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Permittivity of the media, default media is water"
      end

      attribute 215216 "epspr_"
	private explicit_type "double"
	init_value "80.0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Permittivity of the protein, default value is 10.0"
      end

      attribute 310321 "use_boda_bounds_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Do we use old region boundary definition or new one?

 This parameter changes the move geometry limits used when
 generating a trial move.  In the original code these limits lead
 to slow convergence in particle number at the boundaries of the
 channel.  For example the region from <zl(2) to >zl(2)+r was
 considered in the 'ibulk' region so recieved far fewer trials
 than the adjacent >zl(2).  When this is true the boundaries used
 in Boda's version 16 code are followed.  When this is false, new
 move geometry limits are used that overlap adjacent regions and
 smooth out the number of samples per z-axis unit (meaning the
 number of samples per unit volume significantly increases through
 the channel!)
 fortran equiv geom::useold"
      end

      extra_member 242865 "LIFETIME"
	
	cpp "//
// Manage object lifetime
//" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 516529 "channel_system"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
${body}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 516401 "~channel_system"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 242737 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 516145 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & boost::serialization::base_object< platform::simulator >(*this);
    ar & region_names_;
    ar & volumes_;
    ar & cell_hlength_;
    ar & cell_radius_;
    ar & membrane_arc_radius_;
    ar & pore_hlength_;
    ar & pore_radius_;
    ar & protein_radius_;
    ar & structural_hlength_;
    ar & vestibule_arc_radius_;
    ar & epsw_;
    ar & epspr_;
    ar & use_boda_bounds_;
  };
"
	
	
	
	
      end

      extra_member 242993 "REGIONS"
	
	cpp "//
// Manage sub-regions within the cell
//" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 516785 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return REGION_COUNT;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "The number of regions"
      end

      operation 522545 "region_name"
	const public explicit_return_type "string"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}s_[${p0}];
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the name of a region at the given index

 \\pre idx < size"
      end

      extra_member 163888 "** BUILD THE SIMULATION **"
	
	cpp "// SIMULATION INITIATION
//
// Coordinate the setting up of the simulation
// trial loop.
// 
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 243120 "build_reader"
	stereotype "TODO"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "decoder" type class_ref 1012655 // input_delegater
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Register the input file reader classes for this simulation.

 The base method registers a set of classes that should be
 simulation cell independent. Derived classes should therefore
 call this method as well as adding simulation cell dependent
 parts."
      end

      operation 242736 "do_generate_simulation"
	cpp_virtual public return_type class_ref 289841 // grid_generator
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::unique_ptr< ${type} > ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}std::unique_ptr< ${type} > ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Generate an initial ensemble to run a simulation.

NOTE: region object that accepts 'set_volume' or 
a region factory that takes a volume parameter 
could be passed as an argument."
      end

      extra_member 164016 "IMPLEMENT VIRT METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 134704 "do_description"
	const cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Details about the current geometry to be written to the
log at the start of the simulation."
      end

      operation 577584 "do_license"
	const private explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Implement in derived classes to write the name of 
the program and any citation information."
      end

      operation 519857 "do_write_document"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 242864 "get_max_input_version"
	const cpp_virtual public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return 1;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  The maximum input file version to be understood by this program"
      end

      operation 182705 "volume"
	const public explicit_return_type "double"
	nparams 1
	  param in name "ispec" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override
{
  return this->volumes_[${p0}];
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}return self.volume_
"
	
	comment "Calculate the accessible volume for a particle of the given specie."
      end

      operation 501040 "range_x"
	const cpp_virtual public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::pair< ${type}, ${type} > ${name}${(}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}std::pair< ${type}, ${type} > ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::pair< ${type}, ${type} >( -this->cell_radius_, this->cell_radius_ );
}
"
	
	
	
	
	comment " Get the minimum and maximum dimension along the z coordinate"
      end

      operation 500912 "range_y"
	const cpp_virtual public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::pair< ${type}, ${type} > ${name}${(}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}std::pair< ${type}, ${type} > ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::pair< ${type}, ${type} >( -this->cell_radius_, this->cell_radius_ );
}"
	
	
	
	
	comment " Get the minimum and maximum dimension along the z coordinate"
      end

      operation 500784 "range_z"
	const cpp_virtual public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::pair< ${type}, ${type} > ${name}${(}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}std::pair< ${type}, ${type} > ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return std::pair< ${type}, ${type} >( -this->cell_hlength_, this->cell_hlength_ );
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the minimum and maximum dimension along the z coordinate"
      end

      extra_member 243633 "UTILITY"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 255536 "volume_of_rotation"
	class_operation public explicit_return_type "double"
	nparams 5
	  param in name "axial_disp" explicit_type "double"
	  param in name "radial_disp" explicit_type "double"
	  param in name "arc_radius" explicit_type "double"
	  param in name "z_0" explicit_type "double"
	  param in name "z_1" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Calculate the volume of rotation _underneath_ an arc between z_0
 and z_1.

 This calculates the volume of rotation underneath an arc whose
 centrepoint is (axial_disp,radial_disp) and has the given arc_radius.
 The volume is the slice between the z_0 and z_1 .

 \\pre radial_disp > arc_radius
"
      end

      operation 517809 "volume_of_rotation"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "radial_disp" explicit_type "double"
	  param in name "arc_radius" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return volume_of_rotation( 0.0, ${p0}, ${p1}, 0.0, ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Calculate the volume of rotation _underneath_ an arc whose
 centrepoint is (0.0,radial_disp) and has the given arc_radius.
 The volume is the slice between the 0.0 and arc_radius. In
 other words it is the volume under the half arc.

 \\pre radial_disp > arc_radius
"
      end

      extra_member 243249 "DISTANCES"
	
	cpp "//
// Manage distances between points
//" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 517425 "do_compute_distances"
	const private explicit_return_type "void"
	nparams 5
	  param in name "position" type class_ref 986799 // coordinate
	  param in name "coords" type class_ref 223792 // coordinate_set
	  param inout name "rij" type class_ref 270001 // array_type
	  param in name "endindex" explicit_type "size_t"
	  param in name "startindex" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}
{
  ${body}
}
"
	
	
	
	
	comment "Compute the distances between given position and existing positions.

\\pre rij.size <= ens.size
\\post rij[0:startindex] === 0
\\post rij[ens.size:] undefined"
      end

      operation 517297 "distance_sqr"
	const public explicit_return_type "double"
	nparams 2
	  param in name "lhs" type class_ref 986799 // coordinate
	  param in name "rhs" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  const double dx = ${p0}.x - ${p1}.x;
  const double dy = ${p0}.y - ${p1}.y;
  const double dz = ${p0}.z - ${p1}.z;
  return std::sqrt(dx*dx + dy*dy + dz*dz);
}
"
	
	
	
	
	comment "Compute distance between two coordinates."
      end

      extra_member 243121 "OBSTRUCTION"
	
	cpp "//
// Check if an object is obstructed by some fixed geoemtric
// object.
//
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 517169 "is_valid_position"
	const cpp_virtual public explicit_return_type "bool"
	nparams 2
	  param inout name "coord" type class_ref 986799 // coordinate
	  param in name "ispec" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Is a particle at the given position and radius in a valid position
in the system?"
      end

      extra_member 163760 "PERMITTIVITY"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 141360 "permittivity"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->epsw_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.epsw_
"
	
	comment "Get the permittivity for the region.

Note that nested regions may have different permittivity. The
permittivity of the inner-most region that contains a particular
particle is the value to use for that particle."
      end

      operation 255280 "protein_permittivity"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->epspr_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.epsw_
"
	
	comment "Get the permittivity for the region.

Note that nested regions may have different permittivity. The
permittivity of the inner-most region that contains a particular
particle is the value to use for that particle."
      end

      operation 141232 "set_permittivity"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->epsw_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.epsw_ = ${p0}
"
	
	comment "Set permitivity for whole geometry"
      end

      operation 255408 "set_protein_permittivity"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->epspr_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.epsw_ = ${p0}
"
	
	comment "Set permitivity for whole geometry"
      end

      extra_member 243505 "DERIVED DATA ACCESSORS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 521649 "cell_hlength"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the half length of the total cell"
      end

      operation 521521 "cell_radius"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the radius of the total cell"
      end

      operation 522161 "membrane_arc_radius"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the arc radius of the torus at the corner near the 
 membrane"
      end

      operation 522289 "pore_hlength"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the half length of the pore internal cylinder"
      end

      operation 518577 "pore_radius"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the radius of the pore internal cylinder"
      end

      operation 521777 "protein_radius"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the radius of the torus from the centre of rotation to
 the furthest extent "
      end

      operation 522417 "structural_hlength"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the hlength of the limit of structural ions"
      end

      operation 522673 "use_boda_bounds"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Test whether to use Dezso's original region
 bounds or new bounds."
      end

      operation 521905 "vestibule_arc_radius"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the arc radius of the torus at the corner at the 
 pore"
      end

      operation 241584 "cell_hlength"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} set_${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the half length of the total cell"
      end

      operation 241712 "cell_radius"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} set_${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the half length of the total cell"
      end

      operation 241840 "membrane_arc_radius"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} set_${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the half length of the total cell"
      end

      operation 241968 "pore_hlength"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} set_${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the half length of the total cell"
      end

      operation 242096 "pore_radius"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} set_${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the half length of the total cell"
      end

      operation 242224 "protein_radius"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} set_${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the half length of the total cell"
      end

      operation 242352 "structural_hlength"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} set_${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the half length of the total cell"
      end

      operation 242480 "boda_bounds"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} set_${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->use_${name}_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the half length of the total cell"
      end

      operation 242608 "vestibule_arc_radius"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} set_${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get the half length of the total cell"
      end

      operation 255152 "region_geometry"
	const public return_type class_ref 183856 // cylinder
	nparams 2
	  param in name "subregion" explicit_type "size_t"
	  param in name "ispec" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Generate a cylinder object containing the allowable sphere
 centrepoint region for a given specie."
      end
    end

    class 177072 "cell_simulator_meta"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Linker class between the input file and derived classes
of type 'base_simulator'

multiple = true

Implementation Notes: The simulator objects are held by
the application as owned pointers. Therefore we
can not retain a pointer to the simulator that can be
recovered after read/write serialization.  Not only
that, but the simulator objects are deleted ater their
part of the simulation has been run. In order to be
able to write a facsimile of the input file at any
time, this meta object retains the initial input data.
"
      classrelation 182704 // <generalisation>
	relation 182448 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 182704 // <generalisation>
	  b parent class_ref 1143343 // simulator_meta
      end

      class 177200 "anonymous_bulk_meta"
	visibility private stereotype "enum"
	cpp_decl "${comment}enum
 {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl "${comment}${visibility}final class ${name} {
${items}}
"
	python_decl "class ${name}:
${docstring}${members}
"
	idl_decl "${comment}enum ${name} {
${items}};
"
	explicit_switch_type ""
	
	comment " indices in missing option bitset"
	attribute 206384 "SIMULATOR_EPSW"
	  public type class_ref 177200 // anonymous_bulk_meta
	  init_value "0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " entry 'epsw'"
	end

	attribute 221744 "SIMULATOR_ZL1"
	  public type class_ref 177200 // anonymous_bulk_meta
	  init_value "1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 221872 "SIMULATOR_RL1"
	  public type class_ref 177200 // anonymous_bulk_meta
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 222000 "SIMULATOR_RL4"
	  public type class_ref 177200 // anonymous_bulk_meta
	  init_value "3"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 222128 "SIMULATOR_RLVEST"
	  public type class_ref 177200 // anonymous_bulk_meta
	  init_value "4"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 222256 "SIMULATOR_RLCURV"
	  public type class_ref 177200 // anonymous_bulk_meta
	  init_value "5"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 222384 "CELL_MAX_OPTION"
	  public type class_ref 177200 // anonymous_bulk_meta
	  init_value "6"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end
      end

      classrelation 183344 // cell_sim_ (<directional aggregation>)
	relation 183088 o-->
	  a role_name "cell_sim_" multiplicity "0..1" private
	    comment " This is the same address as this->sim_ but different type."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    python "${comment}${self}${name} = ${value}
"
	    classrelation_ref 183344 // cell_sim_ (<directional aggregation>)
	  b parent class_ref 1129391 // channel_system
      end

      attribute 206256 "missing_required_tags_"
	private explicit_type "CELL_MAX_OPTION"
	multiplicity "*"
	stereotype "bitset"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment "  Which input entrys have been seen"
      end

      operation 243248 "do_read_entry"
	protected explicit_return_type "bool"
	nparams 1
	  param inout name "reader" type class_ref 313392 // input_base_reader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Read an entry in the input file

 throw an error if input file is incorrect (using UTILITY_INPUT macro)"
      end

      operation 243376 "do_read_end"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "sim" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Check for completeness of input at end of section"
      end

      operation 243632 "cell_simulator_meta"
	public explicit_return_type ""
	nparams 1
	  param inout name "sim" type class_ref 1129391 // channel_system
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}${)}${volatile}${throw} 
: simulator_meta( ${p0} )
, cell_sim_( &${p0} )
, missing_required_tags_()
{
  this->missing_required_tags_.set();
  ${body}
}
"
	
	
	
	
      end

      operation 243760 "~cell_simulator_meta"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 243888 "cell_simulator_meta"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
	comment "for serialization only"
      end
    end

    class 448943 "channel_simulator"
      visibility package stereotype "substate"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl "${comment}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl "${comment}struct ${name} {
${members}};
"
      explicit_switch_type ""
      
      comment "Application class for ION CHannel application.

Manages construction and destruction of the simulation system

For Version IONCH 18

--

BULK v CELL Simulation

If usechm is set to false a bulk simulation is run.  This
generates and saves the cell simulation before creating the
bulk simulation.  Once the bulk simulation has run usechm is
set to true and the saved configuration reloaded.

--

This is a major change from version 16.
Features:
- particles stored contiguously
- \"no\" code duplication of core routines
- use of fortran 90/95 array operations
- more uniform specie handling
- accept run number and random seed on command-line
- active data set is not changed until commit operation, all
methods operate on /trial/ before commit.

EXTERNAL ROUTINES

Uses dgetrs,dgetrf LAPACK routines for manipulating ICC matrix
- any LAPACK library should do

ranff: External function that creates double random 
numbers using the Mersenne Twister with 19937 parameters.
sranff: Seed subroutine for the random number generator

dfeq: (double fuzzy equals) Floating point numbers that
are intuitively equal are rarely equal in practise. This is due
to the limited precision that results in an accumulation of 
numerical errors. The method provided in cutil.cpp says two
floating point numbers are equal if they only vary in the last
five binary bits.

DATA INPUT FILE

The program now uses a single data input file. This file consists
of labelled sections and labelled data elements.  The data can now
be input in any order so requires a two stage read process. Each
module should implement a 'rd{section}' subroutine for the sections
it is responsible for. This method may be called multiple times
depending on the input file and section type.  A second method
'rf{mod}' is called after the input file has been read.  This method
is where input file derived data should be calculated.  The order
these second methods are called is fixed, so data that has inter-
module dependencies can be finalised there.

"
      operation 2175535 "add_observer"
	public explicit_return_type "void"
	nparams 1
	  param in name "obs" type class_ref 1144367 // base_sampler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Manage the change over of one simulator state to another."
      end

      classrelation 756271 // geometry_initialiser_ (<composition>)
	relation 741935 *---
	  stereotype "unique_ptr"
	  a role_name "geometry_initialiser_" multiplicity "*" private
	    comment "  The object to be used to read and set up the geometry objects in the simulation"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 756271 // geometry_initialiser_ (<composition>)
	  b role_name "parent_" multiplicity "1" private
	    comment "  The parent/owener channel object of this object"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 756399 // parent_ (<composition>)
      end

      attribute 547503 "q_star_factor_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Charge factor (access using 'qstar()')"
      end

      extra_member 402863 "TOP LEVEL RATES"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      attribute 1154223 "rate_move_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The chance of choosing a particle movement trial

P(move) = rate_move / (rate_move + rate_individual + rate_salt + rate_change)"
      end

      attribute 1154351 "rate_individual_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The chance of choosing an individual particle addition

P(individual) = rate_individual / (rate_move + rate_individual + rate_salt + rate_change)"
      end

      attribute 1154479 "rate_salt_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The chance of adding or removing a salt

P(salt) = rate_salt / (rate_move + rate_individual + rate_salt + rate_change)"
      end

      attribute 1154607 "rate_change_"
	private explicit_type ""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The chance of performing a sub-specie state change move.

P(change) = rate_change / (rate_move + rate_individual + rate_salt + rate_change)"
      end

      attribute 578991 "byiter"
	private explicit_type "bool"
	init_value "(true)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Whether to output separate checkpoint files for each save step or
 overwrite previous saves."
      end

      attribute 1011503 "calculate_widom_energy"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  are we computing the Widom insertion method for free energy?"
      end

      operation 904239 "make_checkpoint_filename"
	public explicit_return_type "string"
	nparams 1
	  param in name "a_basename" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Use the basename to create a filename in the checkpoint directory.

@return : path with \"checkpoint_dir/basename.run_suffix\" in OS localised
format."
      end

      operation 904367 "make_result_filename"
	public explicit_return_type "string"
	nparams 1
	  param in name "a_basename" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Use the basename to create a filename in the checkpoint directory.

@return : path with \"checkpoint_dir/basename.run_suffix\" in OS localised
format."
      end

      operation 762031 "input_help"
	stereotype "error"
	const private explicit_return_type "void"
	nparams 2
	  param in name "a_os" explicit_type "ostream"
	  param in name "msg" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} &${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} &${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Help text produced when an input error is detected."
      end

      extra_member 402991 "STATE UPDATE METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1169455 "states"
	stereotype "ptr_vector"
	public explicit_return_type "base_stepper"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::ptr_vector< ${type} >& ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::ptr_vector< ${type} >& ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return this->states_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  Access the list of states"
      end

      operation 1233455 "commit"
	public explicit_return_type "void"
	nparams 1
	  param in name "delta" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment "Commit the given changes to the set"
      end

      operation 747951 "commit_virt"
	stereotype "TODO"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_range" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Commit changes after a MCGC move has been accepted

 @param isbulk : true when simulating the bulk "
      end

      extra_member 314415 "DATA COLLECTION CONTROL"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      attribute 542127 "calacc"
	private explicit_type "bool"
	init_value "(false)"
	stereotype "virtual"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [INPUT] calacc: collect and show move acceptance ratios"
      end

      attribute 541871 "calgin"
	private explicit_type "bool"
	init_value "(false)"
	stereotype "virtual"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [INPUT] calgin: compute 2D (z,r) profiles"
      end

      attribute 542255 "calmob"
	private explicit_type "bool"
	init_value "(false)"
	stereotype "virtual"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [INPUT] calmob: calculate information about 'mobile' ions"
      end

      attribute 541999 "calrdf"
	private explicit_type "bool"
	init_value "(false)"
	stereotype "virtual"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [INPUT] calrdf: compute inter-particle radial distribution"
      end

      extra_member 294319 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 750255 "rate_gc_individual"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
    return rate_individual_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Relative rate of  grand canonical indiv. ion add/del"
      end

      operation 750127 "rate_gc_salt"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
    return rate_salt_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Relative rate of salt grand canonical add/del"
      end

      operation 1681327 "rate_gc_state"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
    return rate_change_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Relative rate of  grand canonical state swap add+del"
      end

      operation 749999 "rate_move"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
    return rate_move_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Relative rate of movement trials"
      end

      operation 1574319 "move_factor_bulk"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return drmax[1];
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Multiplier for movement outside the channel "
      end

      operation 1574191 "move_factor_channel"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return drmax[0];
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Multiplier for movement within channel "
      end

      extra_member 403119 "OBSERVER METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1549103 "have_localized"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return (this->imax_mob_ + this->imax_flex_) != 0;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Are any of the specie objects for localised ions"
      end

      operation 676655 "dostep"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "main MC function: this is the function that is going to be executed every MC step."
      end

      extra_member 260143 "Core methods"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 361391 "IN PROGRESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 753199 "read_input_section"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 3
	  param inout name "fid" explicit_type "istream"
	  param in name "sname" explicit_type "string"
	  param in name "svalue" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " read channel input section"
      end

      operation 714927 "rfconf"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ------------------------------------------------------------------
// FINALISE INITIALISATION
//
// This method is called to finalise the process of initialising
// the conf module when an input file is being read.  This method
// is one of the input finalisation method that is called in a
// particular order in 'channel%readin' method.  To ensure correct
// initialisation the order these methods are called is critical.
//
// No consideration is given to the possibility this method is
// called more than once in a program run.
//
// The key activities are:
//   - check, allocate and zero in-use arrays
//   - copy particle position information present in input file from
//        the 'spec' module.
//   - tell the 'spec' module that the input position information
//        it has is no longer needed.
//   - use 'lookup' to generate inter-particle information (for
//        particles copied above.)
//   - compute the initial volume profile for structural ions in the
//        filter.

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 FINALISE INITIALISATION

 This method is called to finalise the process of initialising
 the conf module when an input file is being read.  This method
 is one of the input finalisation method that is called in a
 particular order in 'channel%readin' method.  To ensure correct
 initialisation the order these methods are called is critical.

 No consideration is given to the possibility this method is
 called more than once in a program run.

 The key activities are:
   - check, allocate and zero in-use arrays
   - copy particle position information present in input file from
        the 'spec' module.
   - tell the 'spec' module that the input position information
        it has is no longer needed.
   - use 'lookup' to generate inter-particle information (for 
        particles copied above.)
   - compute the initial volume profile for structural ions in the
        filter."
      end

      operation 1573039 "do_readin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Finalise reading parameters
     
     - attempt to generate particles to satisfy specie.count_target
     
     - or read existing configuration from filename_
     
     [ionch/initc]"
      end

      operation 1060527 "interpret_input"
	stereotype "CHECK"
	public explicit_return_type ""
	nparams 2
	  param in name "self" explicit_type ""
	  param inout name "aos" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment " Write a summary of all the specie parameters. 

 Tasks:
 * Finalise specie read-in
 * Create regions for species
 * "
      end

      operation 1573167 "do_saves"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// wrcf_ 
// Specie part of saves

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Specie part of saves"
      end

      operation 1573295 "do_wrcf"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 2
	  param inout name "a_os" explicit_type "ostream"
	  param in name "a_spec" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// move_ 
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
//<       subroutine wrcf(istep) >

${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Write particles in wrcf "
      end

      operation 1335983 "write_xyz"
	public explicit_return_type ""
	nparams 2
	  param in name "self" explicit_type "state_manager"
	  param in name "aos" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment "Write the particle set as an XYZ file. Use specie labels as atom labels."
      end

      operation 752687 "write_input_section"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Write the channel parameters in input-file format
"
      end

      operation 707631 "checkpoint"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "is_main" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  Save digest of statistics

  This is the most important method of the accumulation module as
  it is responsible for creating more in-depth statistics from the
  simulation.  Some of the data analysis is delegated to other
  modules (particularly when the data can be kept private to the
  other module.)

  fortran accum::saves"
      end

      operation 784431 "random_integer"
	cpp_inline private explicit_return_type "int"
	nparams 1
	  param in name "a_max" explicit_type "int"
	cpp_decl "  ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return std::max(0, std::min (a_max - 1, static_cast< int >(a_max * ranff ())));
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Generate random integer between (0,a_max] (excl a_max)"
      end

      extra_member 416303 "MAIN FUNCTION MEMBERS START"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 752943 "main"
	preserve_cpp_body_indent public explicit_return_type "int"
	nparams 2
	  param in name "argc" explicit_type "int"
	  param inout name "argv" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * * ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Execute the program"
      end

      operation 911535 "initialize"
	preserve_cpp_body_indent public explicit_return_type "int"
	nparams 2
	  param in name "argc" explicit_type "int"
	  param inout name "argv" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * * ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Process job parameters from input sources"
      end

      extra_member 416431 "MAIN FUNCTION MEMBERS END"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 754223 "reset_statistics"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "  ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Reset the outcome data-set of the system to the state immediately
after reading the input file."
      end

      operation 762159 "channel_simulator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
${body}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 762287 "~channel_simulator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      extra_member 294575 "TO DO"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 904879 "is_bulk"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Are we doing a PBC bulk simulation?"
      end

      operation 715055 "compute_volslb"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 3
	  param inout name "fid" explicit_type "ostream"
	  param in name "nival" explicit_type "int"
	  param in name "istep" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// --------------------------------------------------------------
// OCCLUDED VOLUME
//
// Compute volume fractions for spheres in the filter region.
//
// This model works by a combination of restricted volume and
// high charge density in the filter region.  Previous versions
// of the program did not limit the structural ions beyond
// restricting them to the filter region.  This version introduces
// the ability to reduce the mobility of structural ions.  This
// makes knowledge about the  profile of free space in the filter
// interesting.  This method calculates the percent volume occupied
// by structural ions in a set of intervals in filter.
//
// This information is saved into a file 'res/occvol.num.dat' and
// written to the input file descriptor.

${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------------------
 OCCLUDED VOLUME
 
 Compute volume fractions for spheres in the filter region.

 This model works by a combination of restricted volume and
 high charge density in the filter region.  Previous versions
 of the program did not limit the structural ions beyond
 restricting them to the filter region.  This version introduces
 the ability to reduce the mobility of structural ions.  This
 makes knowledge about the  profile of free space in the filter
 interesting.  This method calculates the percent volume occupied
 by structural ions in a set of intervals in filter.

 This information is saved into a file 'res/occvol.num.dat' and
 written to the input file descriptor."
      end

      operation 715183 "sphvol"
	class_operation preserve_cpp_body_indent private explicit_return_type "double"
	nparams 3
	  param in name "left" explicit_type "double"
	  param in name "right" explicit_type "double"
	  param in name "ignorefree" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " -------
 calculate the volume contribution of spheres within z-interval

 This internal method checks all structural ions and calculates
 the volume it occupies within an interval of the filter.  This
 includes calculating the part of the volume inside the interval
 for those spheres that overlap the interval boundaries."
      end

      extra_member 387503 "friend"
	
	cpp "
friend class boost::serialization::access;

" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1519151 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        ar & b1o4x5;
        ar & q7a0y5;
        ar & t8u5y5;
	ar & firun;
	ar & fuuid;
	ar & filcur;
    }
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " When the class Archive corresponds to an output archive, the
 & operator is defined similar to <<.  Likewise, when the class Archive
 is a type of input archive the & operator is defined similar to >>."
      end

      class 866351 "init_helper"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1088559 "counter"
	  class_attribute public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	operation 1519919 "init_helper"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end
      end

      operation 751279 "on_cmt"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " indicate that the change was accepted

-- NOTE: the move generator should set thi

 Internal routine for managing statistics."
      end

      operation 752303 "zeroav"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " -------------------------------------------------- 
 Reset the energy factor statistic accumulators"
      end

      operation 752431 "zerotr"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------------------
 reset the statistics counters"
      end

      attribute 1011375 "k_mobl"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  the constant used in the mobile ion localisation"
      end

      operation 1427247 "try__eq"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "  Attempt an MC/GC move in simulation of channel
  
  This is the routine for the main part of a GCMC simulation"
      end

      operation 1427119 "zeroav"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "  Reset the (internal) energy factor statistic accumulators"
      end

      operation 1429295 "__cergit"
	private explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " determine the particle-particle coulomb interaction

  ** checks that a particle does not overlap with any other particle **"
      end

      operation 1427759 "zerotr"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "  reset the statistics counters (called from accum)"
      end

      operation 1429679 "__moveeq"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1575599 "verify_invariants"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//
// Test that the object is in a consistent state
//

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Perform deep test of object to ensure validity."
      end

      operation 1572271 "displacement"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[4]${v0}, const ${t1} ${p1}[4]${v1}${)}${const}${volatile}${throw}${abstract} {
        double const x2 (sqr(a[0] - b[0]));
        double const y2 (sqr(a[1] - b[1]));
        double const z2 (sqr(a[2] - b[2]));
        return std::sqrt (x2 + y2 + z2);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Calculate (pythagorean) distance between two points"
      end

      operation 1572399 "displacement"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "particle_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[4]${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        double const x2 (sqr(a[0] - b.x));
        double const y2 (sqr(a[1] - b.y));
        double const z2 (sqr(a[2] - b.z));
        return std::sqrt (x2 + y2 + z2);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1572527 "displacement_i"
	const cpp_inline private explicit_return_type "double"
	nparams 2
	  param in name "ii" explicit_type "uint16_type"
	  param in name "jj" explicit_type "uint16_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        double const x2 (sqr(xyzr[ii].x - xyzr[jj].x));
        double const y2 (sqr(xyzr[ii].y - xyzr[jj].y));
        double const z2 (sqr(xyzr[ii].z - xyzr[jj].z));
        return std::sqrt (x2 + y2 + z2);        
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1572655 "displacement"
	class_operation cpp_inline private explicit_return_type "double"
	nparams 2
	  param in name "b" explicit_type "particle_type"
	  param in name "a" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} ${p1}[4]${v1}${)}${const}${volatile}${throw}${abstract} {
        return displacement (a, b);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1572783 "displacement"
	class_operation cpp_inline private explicit_return_type "double"
	nparams 2
	  param in name "b" explicit_type "particle_type"
	  param in name "a" explicit_type "particle_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        double const x2 (sqr(a.x - b.x));
        double const y2 (sqr(a.y - b.y));
        double const z2 (sqr(a.z - b.z));
        return std::sqrt (x2 + y2 + z2);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 714799 "reset_XXX"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Reset the conf data set

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 Reset the contents of the conf module.

 Perform a deep reset of the conf module data. It
 sets all 'conf' data to zero without changing the size
 of the allocated arrays."
      end

      operation 1573423 "energy_change"
	preserve_cpp_body_indent const private explicit_return_type "bool"
	nparams 4
	  param inout name "bufer_1" explicit_type "move_guard"
	  param in name "ispec" explicit_type "uint8_type"
	  param inout name "uii" explicit_type "double"
	  param inout name "uip" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//  This calculates the energy only when a particle moves.
//
// { subroutine ergi(ispec,i,rxi,ryi,rzi,r2i,dold,dnew,uii,uip,ovrlap) }

${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} & ${p2}, ${t3} & ${p3}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Energy change calculation when particle moves"
      end

      operation 1573551 "energy_change"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 5
	  param inout name "bufer_" explicit_type "add_guard"
	  param in name "a_salt" explicit_type "uint8_type"
	  param inout name "uii" explicit_type "double"
	  param inout name "uip" explicit_type "double"
	  param in name "is_create" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} & ${p2}${v2}, ${t3} & ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ergi_ 

${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Energy change calculation when particles created/destroyed"
      end

      operation 904751 "compute_metropolis"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Calculate whether the current trial is successful."
      end

      operation 749487 "compute_metropolis_"
	stereotype "template"
	private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}template< bool isbulk > ${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template< bool isbulk > ${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " UNIFIED MOVE
 
 This method is called after setting up the move using one
 of the 'selXXX' methods then 'chgXXX' methods.  This
 method then calculates the energy change and converts this
 into a acceptance probability.  If the move is accepted it
 returns true.  The caller is responsible for commiting the
 changes.

template parameter selects periodic boundary (bulk) or
simulation cell specific routines"
      end
    end

    class 177328 "cell_grid"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "  Adapt the standard tubular grid for use with a cell simulation. This simply
  inserts the zoffset space into the tubular grid's output.

"
      classrelation 197296 // <generalisation>
	relation 197040 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 197296 // <generalisation>
	  b parent class_ref 868783 // tubular_grid
      end

      attribute 206512 "zoffset_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The membrane half width."
      end

      operation 244912 "cell_grid"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 5
	  param in name "offset" explicit_type "double"
	  param in name "halflength" explicit_type "double"
	  param in name "radius" explicit_type "double"
	  param in name "npart" explicit_type "size_t"
	  param inout name "ranf" type class_ref 463407 // random_distribution
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} & ${p4}${v4}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} & ${p4}${)}${throw}
${body}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Create a cubic grid of points within a bisected tube of the given 
 half length, bisection offset and radius. 

 NOTES:

 * Grid z coordinate will be either +ve or -ve

 * Z coordinate range offset < |z| < halflength

 * XY coordinates in circle of given radius

 * Sequence of coordinates generated by next are in random
 a order.

"
      end

      operation 265008 "cell_grid"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 4
	  param in name "offset" explicit_type "double"
	  param in name "halflength" explicit_type "double"
	  param in name "radius" explicit_type "double"
	  param in name "npart" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throw}
${body}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Create a cubic grid of points within a bisected tube of the given 
 half length, bisection offset and radius. 

 NOTES:

 * Grid z coordinate will be either +ve or -ve

 * Z coordinate range offset < |z| < halflength

 * XY coordinates in circle of given radius

 * Sequence of coordinates generated by next are sequential
 in z.

"
      end

      operation 244784 "cell_grid"
	preserve_cpp_body_indent private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Default ctor (for serialize)"
      end

      operation 264880 "~cell_grid"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 244528 "next"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param inout name "pnt" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  const bool result{ this->tubular_grid::${name}( pnt ) };
  if (result) pnt.z += (pnt.z < 0.0 ? -this->zoffset_ : this->zoffset_);
  return result; 
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Get the next location from the grid.

 @require size > 0"
      end

      extra_member 164272 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 244144 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
   ar & boost::serialization::base_object< trial::tubular_grid >(*this);
    ar & zoffset_;
  }
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 183856 "cylinder"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 189872 // <dependency>
	relation 189616 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 189872 // <dependency>
	  b parent class_ref 912431 // access
      end

      attribute 213808 "radius_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Radius of the cylinder"
      end

      attribute 213936 "half_length_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 214448 "volume_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Cached volume"
      end

      extra_member 171056 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 251440 "cylinder"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 252464 "cylinder"
	public explicit_return_type ""
	nparams 2
	  param in name "rad" explicit_type "double"
	  param in name "len" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}
: radius_( ${p0} )
, half_length_( ${p1} )
, volume_()
{
  this->volume_ = ${class}::compute_volume( *this );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create new cylinder with the given dimensions"
      end

      operation 251568 "~cylinder"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 251696 "cylinder"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 183856 // cylinder
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 251952 "cylinder"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param out name "source" type class_ref 183856 // cylinder
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 251824 "operator="
	public return_type class_ref 183856 // cylinder
	nparams 1
	  param in name "source" type class_ref 183856 // cylinder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 252080 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 183856 // cylinder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap( radius_, ${p0}.radius_ );
  std::swap( half_length_, ${p0}.half_length_ );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 170800 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 252208 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
    ar & this->radius_;
    ar & this->half_length_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 170928 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 253104 "contains"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "pos" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Check if sphere at the given position and radius is completely
 contained within the cylinder"
      end

      operation 252336 "generate"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "pos" type class_ref 986799 // coordinate
	  param inout name "rgen" type class_ref 463407 // random_distribution
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  Calculate a random new position in the cylinder for a sphere of the give radius."
      end

      operation 252592 "radius"
	stereotype "get"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the radius"
      end

      operation 252720 "radius"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} set_${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
  this->volume_ = ${class}::compute_volume( *this );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the radius"
      end

      operation 252848 "half_length"
	stereotype "get"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the radius"
      end

      operation 252976 "half_length"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} set_${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->${name}_ = ${p0};
  this->volume_ = ${class}::compute_volume( *this );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the radius"
      end

      operation 254896 "volume"
	stereotype "get"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the radius"
      end

      operation 255024 "compute_volume"
	class_operation private explicit_return_type "double"
	nparams 1
	  param in name "source" type class_ref 183856 // cylinder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  return core::constants::pi() * ${p0}.radius_ * ${p0}.radius_ * ${p0}.half_length_ * 2;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end
    end
  end

  classview 128432 "choices"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 128432 "gc_choice_cell"
      visibility protected 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Single particle Grand canonical move generator, delegates
 move generation to add_choice/remove_choice children

 This version is for simulation in a periodic box."
      classrelation 128432 // <generalisation>
	relation 128432 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 128432 // <generalisation>
	  b parent class_ref 1026095 // base_choice
      end

      classrelation 128560 // <dependency>
	relation 128560 -_->
	  a package
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 128560 // <dependency>
	  b parent class_ref 134959 // ensemble
      end

      classrelation 129072 // adder_ (<directional composition>)
	relation 129072 *-->
	  stereotype "ptr_vector"
	  a role_name "adder_" multiplicity "*" private
	    comment "Set of adders by region."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 129072 // adder_ (<directional composition>)
	  b parent class_ref 128048 // add_choice_cell
      end

      classrelation 129328 // remover_ (<directional composition>)
	relation 129328 *-->
	  stereotype "ptr_vector"
	  a role_name "remover_" multiplicity "*" private
	    comment "Per-region removers."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 129328 // remover_ (<directional composition>)
	  b parent class_ref 128560 // remove_choice_cell
      end

      operation 142768 "add_success_rate"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 254768 "gc_choice_cell"
	public explicit_return_type ""
	nparams 3
	  param in name "ispec" explicit_type "size_t"
	  param in name "params" explicit_type "string"
	  param in name "geom" type class_ref 1129391 // channel_system
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, std::map< ${t1}, ${t1}> const& ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, std::map< ${t1}, ${t1}> const& ${p1}, const ${t2} & ${p2}${)}${throw}
${body}
"
	
	
	
	
      end

      operation 143152 "gc_choice_cell"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
	comment "For serialization"
      end

      operation 143280 "__init__"
	public explicit_return_type ""
	nparams 2
	  param in name "self" explicit_type ""
	  param in name "ispec" explicit_type "size_t"
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(} ${p0}${v0}, ${p1}${v1} ${)}:
${docstring}super( ${class}, ${p0} ).__init__( ${p1} )
${body}
"
	
	comment " Create add/remove change generator

"
      end

      operation 143408 "~gc_choice_cell"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
}
"
	
	
	
	
      end

      operation 143536 "generate"
	cpp_virtual public return_type class_ref 986543 // change_set
	nparams 1
	  param inout name "sys" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::unique_ptr< ${type} > ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}std::unique_ptr< ${type} > ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Create a particle addition/remove trial"
      end

      operation 143664 "get_adder"
	const public return_type class_ref 128048 // add_choice_cell
	nparams 1
	  param in name "ireg" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} const& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} const& ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  return this->adder_[ ${p0} ];
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 143792 "get_remover"
	const public return_type class_ref 128560 // remove_choice_cell
	nparams 1
	  param in name "ireg" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type}& ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  return this->remover_[ ${p0} ];
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 143920 "label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return \"GC Ind\";
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return \"GC Ind\"
"
	
      end

      operation 545712 "permitted"
	const cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "spec" type class_ref 134577 // specie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  return spec.is_solute();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Return true only if {spec} is a solute species."
      end

      operation 144048 "remove_success_rate"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 144176 "report"
	const public explicit_return_type "void"
	nparams 3
	  param in name "sim" type class_ref 1129135 // simulator
	  param inout name "out" explicit_type "ostream"
	  param in name "total" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}:
${docstring}super(${class},self).report(${p0}, ${p1}, ${p2})
self.adder_.report(${p0}, ${p1}, self.attempts())
self.remover_.report(${p0}, ${p1}, self.attempts())
"
	
	comment "Report Add/Remove statistics"
      end

      operation 144304 "do_reset"
	cpp_virtual private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}super(${class},self).reset()
self.adder_.reset()
self.remover_.reset()
"
	
	comment "Reset Add/Remove statistics"
      end

      extra_member 128304 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 144432 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & boost::serialization::base_object< base_choice >(*this);
    ar & this->adder_;
    ar & this->remover_;
  };
"
	
	
	
	
      end
    end

    class 128048 "add_choice_cell"
      visibility protected 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Add particle move generator for a single specie

 This version is for use in a cell/region."
      classrelation 128048 // <generalisation>
	relation 128048 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 128048 // <generalisation>
	  b parent class_ref 1026095 // base_choice
      end

      classrelation 190384 // region_ (<directional composition>)
	relation 190128 *-->
	  a role_name "region_" multiplicity "1" private
	    comment " Region for addition"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 190384 // region_ (<directional composition>)
	  b parent class_ref 183856 // cylinder
      end

      operation 141488 "add_choice_cell"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 3
	  param in name "ispec" explicit_type "size_t"
	  param inout name "parent" type class_ref 1026095 // base_choice
	  param in name "reg" type class_ref 183856 // cylinder
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${volatile}${throw}
: base_choice( ${p0}, &${p1} )
, region_( ${p2} )
{}
"
	
	
	
	
	comment " Add/remove given specie in a subregion of a cell

"
      end

      operation 141744 "add_choice_cell"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : base_choice ()
    {};
"
	
	
	
	
	comment " Default add/remove given specie (only for serialization)

"
      end

      operation 141872 "~add_choice_cell"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}
{
  ${body}
}
"
	
	
	
	
      end

      operation 142128 "generate"
	preserve_cpp_body_indent cpp_virtual public return_type class_ref 986543 // change_set
	nparams 1
	  param inout name "sys" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::unique_ptr< ${type} > ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}std::unique_ptr< ${type} > ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  return this->${name}(${p0}, ${p0}.get_random());
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Create a particle addition/remove trial

(C++ forwards to two argument method)"
      end

      operation 142256 "generate"
	preserve_cpp_body_indent public return_type class_ref 986543 // change_set
	nparams 2
	  param in name "sys" type class_ref 1129135 // simulator
	  param inout name "ranf" type class_ref 463407 // random_distribution
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::unique_ptr< ${type} > ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}std::unique_ptr< ${type} > ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment "Create a particle addition/remove trial using
an external random number source. This
version accepts a constant simulator object."
      end

      operation 142384 "label"
	preserve_cpp_body_indent const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return \"-- Add\";
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return \"-- Add\"
"
	
      end

      extra_member 135216 "friend"
	
	cpp "

  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 142512 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        ar & boost::serialization::base_object< base_choice >(*this);
        ar & region_;
      };
"
	
	
	
	
      end

      operation 141616 "__init__"
	public explicit_return_type ""
	nparams 3
	  param in name "self" explicit_type ""
	  param in name "ispec" explicit_type "size_t"
	  param in name "parent" type class_ref 1026095 // base_choice
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(} ${p0}${v0}, ${p1}${v1}, ${p2}${v2} ${)}:
${docstring}super( ${class}, ${p0} ).__init__( ${p1}, ${p2} )
${body}
"
	
	comment " Add/remove given specie

"
      end
    end

    class 128560 "remove_choice_cell"
      visibility protected 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Remove particle move generator for a single specie/region in channel simulation.

 The difficulty of this choice is that it must find a particle in its region!"
      classrelation 129200 // <generalisation>
	relation 129200 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 129200 // <generalisation>
	  b parent class_ref 1026095 // base_choice
      end

      classrelation 190512 // region_ (<directional composition>)
	relation 190256 *-->
	  a role_name "region_" multiplicity "1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 190512 // region_ (<directional composition>)
	  b parent class_ref 183856 // cylinder
      end

      operation 144688 "generate"
	cpp_virtual public return_type class_ref 986543 // change_set
	nparams 1
	  param inout name "sys" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::unique_ptr< ${type} > ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}std::unique_ptr< ${type} > ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Create a particle addition/remove trial"
      end

      operation 144816 "label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return \"-- Del\";
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return \"-- Del\"
"
	
      end

      operation 144944 "remove_choice_cell"
	public explicit_return_type ""
	nparams 3
	  param in name "ispec" explicit_type "size_t"
	  param inout name "parent" type class_ref 1026095 // base_choice
	  param in name "geom" type class_ref 183856 // cylinder
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${volatile}${throw}
: base_choice( ${p0}, &${p1} )
, region_( ${p2} )
{}
"
	
	
	
	
	comment " Add/remove given specie

"
      end

      operation 145072 "__init__"
	public explicit_return_type ""
	nparams 3
	  param in name "self" explicit_type ""
	  param in name "ispec" explicit_type "size_t"
	  param in name "parent" type class_ref 1026095 // base_choice
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}:
${docstring}super( ${class}, ${p0} ).__init__( ${p1}, ${p2} )
${body}
"
	
	comment " Add/remove given specie

"
      end

      operation 145200 "remove_choice_cell"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: base_choice ()
{}
"
	
	
	
	
	comment " Default add/remove given specie (only for serialization)

"
      end

      operation 145328 "~remove_choice_cell"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
}
"
	
	
	
	
      end

      extra_member 128432 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 145456 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & boost::serialization::base_object< base_choice >(*this);
    ar & region_;
  }
"
	
	
	
	
      end
    end

    class 128688 "jump_choice_cell"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Objects of this class define an MC move that involves a
jump anywhere within the simulation cell."
      classrelation 129456 // <generalisation>
	relation 129456 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 129456 // <generalisation>
	  b parent class_ref 1026095 // base_choice
      end

      classrelation 129584 // <dependency>
	relation 129584 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 129584 // <dependency>
	  b parent class_ref 134959 // ensemble
      end

      classrelation 190000 // region_ (<directional composition>)
	relation 189744 *-->
	  a role_name "region_" multiplicity "1" private
	    comment "  Region to operate on"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 190000 // region_ (<directional composition>)
	  b parent class_ref 183856 // cylinder
      end

      operation 145712 "jump_choice_cell"
	public explicit_return_type ""
	nparams 3
	  param in name "ispec" explicit_type "size_t"
	  param in name "params" explicit_type "string"
	  param in name "geom" type class_ref 1129391 // channel_system
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, std::map< ${t1}, ${t1}> const& ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, std::map< ${t1}, ${t1}> const& ${p1}, const ${t2} & ${p2}${)}${throw}
${body}
"
	
	
	
	
      end

      operation 146608 "jump_choice_cell"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
	comment "Default ctor for serialization."
      end

      operation 145840 "__init__"
	public explicit_return_type ""
	nparams 2
	  param inout name "self" explicit_type ""
	  param in name "ispec" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}super(${class}, ${p0}).__init__(${p1})
${body}
"
	
      end

      operation 145968 "~jump_choice_cell"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{}
"
	
	
	
	
      end

      operation 146096 "generate"
	public return_type class_ref 986543 // change_set
	nparams 1
	  param inout name "sys" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::unique_ptr< ${type} > ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}std::unique_ptr< ${type} > ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 146224 "label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return \"Jump\";
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return \"Jump\"
"
	
	comment "Name for this trial"
      end

      classrelation 129712 // <dependency>
	relation 129712 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 129712 // <dependency>
	  b parent class_ref 912431 // access
      end

      extra_member 128560 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 146352 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & boost::serialization::base_object< base_choice >(*this);
    ar & region_;
  };
"
	
	
	
	
      end
    end

    class 135216 "specie_region_bounds"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Information specific for a specie and subregion in the cell geometry."
      attribute 156848 "radius_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "  Radial dimension (pre-adjusted for specie radius)"
      end

      attribute 156976 "hlength_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Axial dimension (pre adjusted for specie radius)"
      end

      attribute 157104 "volume_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Cached volume of region including occluded volume (ie for GC move volume parameter)"
      end

      attribute 156592 "subregion_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Index of subregion within geometry"
      end

      attribute 156720 "ispec_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Index of specie used in this region"
      end

      operation 159664 "specie_region_bounds"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: readius_()
, hlength_()
, volume_()
, subregion_()
, ispec_()
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 160688 "specie_region_bounds"
	private explicit_return_type ""
	nparams 4
	  param in name "geom" type class_ref 1129391 // channel_system
	  param in name "ireg" explicit_type "size_t"
	  param in name "spec" type class_ref 134577 // specie
	  param in name "ispec" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} ${p3}${)}${throw} 
: radius_()
, hlength_()
, volume_()
, subregion_(${p1})
, ispec_(${p3})
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  Create a specie specific region bounds definition base on the cell geometry, subregion index
 and specie."
      end

      operation 159792 "~specie_region_bounds"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 159920 "specie_region_bounds"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 135216 // specie_region_bounds
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: radius_( ${p0}.radius_ )
, hlength_( ${p0}.hlength_ )
, volume_( ${p0}.volume_ )
, subregion_( ${p0}.subregion_ )
, ispec_( ${p0}.ispec_ )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 160048 "operator="
	public return_type class_ref 135216 // specie_region_bounds
	nparams 1
	  param in name "source" type class_ref 135216 // specie_region_bounds
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const {t0} & {p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 160560 "hlength"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
{
  return this->hlength_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 160432 "radius"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
{
  return this->radius_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 160176 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 135216 // specie_region_bounds
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap( this->radius_, ${p0}.radius_ );
  std::swap( this->hlength_, ${p0}.hlength_ );
  std::swap( this->volume_, ${p0}.volume_ );
  std::swap( this->subregion_, ${p0}.subregion_ );
  std::swap( this->ispec_, ${p0}.ispec_ );
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 160304 "volume"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
{
  return this->volume_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end
    end

    class 1009327 "region_swap"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Attempt to move a particle from one region to another.

 Randomly select a particle.  If it is in the channel then
 attempt to move it into the bulk. If it is in the bulk, then
 attempt to move it into the channel."
      attribute 1302703 "inner_region_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The second (inner) geometry"
      end

      extra_member 425391 "friend"
	
	cpp "  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1859887 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & boost::serialization::base_object< change_generator >(*this);
    ar & inner_region_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1860015 "region_swap"
	preserve_cpp_body_indent private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}
    : change_generator(), inner_region_()
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " For serialization"
      end

      operation 1860143 "region_swap"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 3
	  param in name "aspec" explicit_type "size_t"
	  param in name "outer" explicit_type "size_t"
	  param in name "inner" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}
    : change_generator (aspec, outer)
    , inner_region_ (inner)
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1860271 "~region_swap"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1860399 "do_generate"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 3
	  param in name "fm" type class_ref 1004207 // formation
	  param inout name "result" explicit_type ""
	  param inout name "rgen" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Generate a random change of this type (virtual component)

 @param rgen: random number generator
 @param result: Change set to add change to"
      end
    end
  end

  deploymentview 128176 "ion_channel"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 128432 "add_choice_cell"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"particle/ensemble.hpp\"
// -
${namespace_start}
${members}
${namespace_end}


#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_GUID(ion_channel::add_choice_cell, \"ion_channel::add_choice_cell\");"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 128048 // add_choice_cell
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 176176 "cell_simulator_meta"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manual incs
#include \"core/strngs.hpp\"
#include \"core/input_help.hpp\"
#include \"utility/utility.hpp\"
// -
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 177072 // cell_simulator_meta
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 169648 "cell_grid"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"core/constants.hpp\"
// -
${namespace_start}
${members}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_GUID(ion_channel::cell_grid, \"ion_channel::cell_grid\");"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 177328 // cell_grid
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 253617 "channel_system"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"cscchannel/cell_grid.hpp\"
#include \"cscchannel/gc_choice_cell.hpp\"
#include \"cscchannel/jump_choice_cell.hpp\"
#include \"cscchannel/cell_simulator_meta.hpp\"
//#include \"cscchannel/widom.hpp\"
#include \"core/constants.hpp\"
#include \"evaluator/evaluator_meta.hpp\"
#include \"evaluator/coulomb.hpp\"
#include \"evaluator/induced_charge.hpp\"
#include \"evaluator/localizer.hpp\"
#include \"observer/density_zaxis.hpp\"
#include \"observer/metropolis_sampler.hpp\"
#include \"observer/rdf_sampler.hpp\"
#include \"observer/sampler_meta.hpp\"
#include \"observer/specie_count.hpp\"
#include \"particle/specie_meta.hpp\"
#include \"particle/ensemble.hpp\"
#include \"trial/base_chooser.hpp\"
#include \"trial/choice_meta.hpp\"
#include \"trial/chooser.hpp\"
#include \"trial/chooser_by_simulator.hpp\"
#include \"trial/grid.hpp\"
#include \"trial/move_choice.hpp\"
#include \"utility/fuzzy_equals.hpp\"
// -
${namespace_start}
${members}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_GUID(ion_channel::channel_system, \"ion_channel::channel_system\");

// Template classes defined in build_reader
#include <boost/preprocessor/punctuation/comma.hpp>
BOOST_CLASS_EXPORT_GUID(trial::chooser< trial::move_choice >, \"trial::chooser< trial::move_choice >\");
BOOST_CLASS_EXPORT_KEY2(trial::chooser_by_simulator< ion_channel::gc_choice_cell BOOST_PP_COMMA() ion_channel::channel_system >, \"trial::chooser_by_simulator< ion_channel::gc_choice_cell, ion_channel::channel_system >\");
BOOST_CLASS_EXPORT_IMPLEMENT(trial::chooser_by_simulator< ion_channel::gc_choice_cell BOOST_PP_COMMA() ion_channel::channel_system >);
BOOST_CLASS_EXPORT_KEY2(trial::chooser_by_simulator< ion_channel::jump_choice_cell BOOST_PP_COMMA()  ion_channel::channel_system >, \"trial::chooser_by_simulator< ion_channel::jump_choice_cell, ion_channel::channel_system >\");
BOOST_CLASS_EXPORT_IMPLEMENT(trial::chooser_by_simulator< ion_channel::jump_choice_cell BOOST_PP_COMMA()  ion_channel::channel_system >);"
      associated_classes
	class_ref 1129391 // channel_system
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 169008 "cylinder"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manual includes
#include \"core/constants.hpp\"
// =
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 183856 // cylinder
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 274737 "geometry"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      python_src "${comment}
${definition}"
      associated_classes
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 128304 "gc_choice_cell"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manual includes
#include \"core/strngs.hpp\"
#include \"utility/mathutil.hpp\"

#include <boost/lexical_cast.hpp>
#include <boost/tokenizer.hpp>
// =
${namespace_start}
${members}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_GUID(ion_channel::gc_choice_cell, \"ion_channel::gc_choice_cell\");"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 128432 // gc_choice_cell
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 129072 "jump_choice_cell"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manual includes
#include \"core/strngs.hpp\"
// =
${namespace_start}
${members}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_GUID(ion_channel::jump_choice_cell, \"ion_channel::jump_choice_cell\");"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 128688 // jump_choice_cell
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 128688 "remove_choice_cell"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manual includes
#include \"particle/ensemble.hpp\"
// =-
${namespace_start}
${members}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_GUID(ion_channel::remove_choice_cell, \"ion_channel::remove_choice_cell\");"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 128560 // remove_choice_cell
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 135600 "specie_region_bounds"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 135216 // specie_region_bounds
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 169264 "cscmc_cell"
      stereotype "source"
      cpp_src "${comment}
// headers
#include \"cscchannel/channel_system.hpp\"
#include \"platform/application.hpp\"

#ifndef DEBUG
#define DEBUG 0
#endif

//END


int main (int argc, char** argv)
{
  // Output the program specific description.
  platform::application::simulator_.reset( new ion_channel::channel_system );

  if (not platform::application::main( argc, argv ) )
  {
     // Error in input or command line.
     return 1;
  }
  return 0;
}


"
      associated_classes
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 308784 "cscmc_cell_mpi"
      stereotype "source"
      cpp_src "${comment}
// headers
#include \"cscchannel/channel_system.hpp\"
#include \"platform/mpi_application.hpp\"
#include <iostream>

#ifndef DEBUG
#define DEBUG 0
#endif

int main (int argc, char** argv)
{
  // Output the program specific description.
  platform::mpi_application::simulator_.reset( new ion_channel::channel_system );

  if (not platform::mpi_application::main( argc, argv ) )
  {
     // Error in input or command line.
     return 1;
  }
  return 0;

}

//END
"
      associated_classes
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 169392 "csccell"
      stereotype "executable"
      associated_artifacts
	artifact_ref 215855 // filesystem
	artifact_ref 609327 // libionch_core
	artifact_ref 215983 // program_options
	artifact_ref 216623 // iostreams
	artifact_ref 769327 // libionch_platform
	artifact_ref 617391 // libionch_particle
	artifact_ref 694959 // libionch_trial
	artifact_ref 242608 // libionch_cell
	artifact_ref 216239 // date_time
	artifact_ref 281519 // system
	artifact_ref 169264 // cscmc_cell
	artifact_ref 651439 // random
	artifact_ref 332208 // libionch_gdbm_sink
	artifact_ref 216111 // regex
	artifact_ref 325552 // libionch_lapack
	artifact_ref 716335 // libionch_evaluator
	artifact_ref 334257 // uuid
	artifact_ref 185007 // serialization
	artifact_ref 222768 // clapack
	artifact_ref 207919 // libionch_utility
	artifact_ref 769583 // libionch_observer
      end
    end

    artifact 308912 "csccell_mpi"
      stereotype "executable"
      associated_artifacts
	artifact_ref 215855 // filesystem
	artifact_ref 609327 // libionch_core
	artifact_ref 215983 // program_options
	artifact_ref 216623 // iostreams
	artifact_ref 769327 // libionch_platform
	artifact_ref 617391 // libionch_particle
	artifact_ref 301872 // mpi
	artifact_ref 694959 // libionch_trial
	artifact_ref 242608 // libionch_cell
	artifact_ref 216239 // date_time
	artifact_ref 281519 // system
	artifact_ref 651439 // random
	artifact_ref 308784 // cscmc_cell_mpi
	artifact_ref 332208 // libionch_gdbm_sink
	artifact_ref 216111 // regex
	artifact_ref 325552 // libionch_lapack
	artifact_ref 716335 // libionch_evaluator
	artifact_ref 334257 // uuid
	artifact_ref 185007 // serialization
	artifact_ref 222768 // clapack
	artifact_ref 345264 // libionch_platform_mpi
	artifact_ref 207919 // libionch_utility
	artifact_ref 769583 // libionch_observer
      end
    end

    artifact 242608 "libionch_cell"
      stereotype "library"
      associated_artifacts
	artifact_ref 169648 // cell_grid
	artifact_ref 128688 // remove_choice_cell
	artifact_ref 169008 // cylinder
	artifact_ref 253617 // channel_system
	artifact_ref 128304 // gc_choice_cell
	artifact_ref 129072 // jump_choice_cell
	artifact_ref 176176 // cell_simulator_meta
	artifact_ref 128432 // add_choice_cell
      end
    end
  end
end
