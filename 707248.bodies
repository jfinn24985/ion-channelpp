class chemical_potential_update
!!!2098480.cpp!!!	prepare(inout sim : simulation) : void
this->chemical_potentials_.clear();
this->chemical_potentials_.resize( sim.particles().specie_count() );
this->do_prepare( sim );
!!!2098480.python!!!	prepare(inout sim : simulation) : void
# Set up chemex estimator
from estimater import estimater
self.chem_potential_ = []
for i in range( sim.specie_count() ):
  self.chem_potential_.append( estimater() )
!!!2099120.cpp!!!	update(inout sys : simulation, inout oslog : ostream) : void
// Save existing chemical potentials.
auto const& pman = sys.particles();
std::vector< double > old_cpx_list( pman.specie_count() );
std::vector< double > new_cpx_list( pman.specie_count() );
for(std::size_t ispec = 0; ispec != pman.specie_count(); ++ispec )
{
  old_cpx_list[ ispec ] = pman.get_specie( ispec ).excess_potential();
}

// Call derived class to update excess potentials
this->do_update( sys, oslog );

// update statistics
for(std::size_t ispec = 0; ispec != pman.specie_count(); ++ispec )
{
  new_cpx_list[ ispec ] = pman.get_specie( ispec ).excess_potential();
}
this->chemical_potentials_.append( new_cpx_list );

this->write_output( sys );

// Report chemical potentials
bool first = true;
boost::format fmt_head (" %3s %8s %8s %8s\n");
boost::format fmt_row (" %3s %8.4f %8.4f %8.4f\n");
for (std::size_t ispec = 0; ispec != pman.specie_count(); ++ispec)
{
  auto const& spcobj = pman.get_specie(ispec);
  // only solute species have interesting chemical potentials
  if (spcobj.is_solute())
  {
    if (first)
    {
      first = false;
      oslog << core::strngs::horizontal_bar() << "\n";
      oslog << " CHEMICAL POTENTIAL ESTIMATE \n";
      oslog << boost::format(fmt_head) % "SPC" % "CHEM EX" % "DLTA_CPX" % "<CPX>";
      oslog << core::strngs::horizontal_bar() << "\n";
    }
    oslog << boost::format(fmt_row) % spcobj.label() %  new_cpx_list[ispec]
        % (new_cpx_list[ispec] - old_cpx_list[ispec]) % this->chemical_potentials_.mean( ispec );
  }
}
// Output horizontal bar only if at least
// one chemical potential was changed.
if (not first)
{
  oslog << core::strngs::horizontal_bar() << "\n";
}
!!!2099120.python!!!	update(inout sys : simulation, inout oslog : ostream) : void
self.super_loop_count_ += 1
old_cpx_list = [ v.excess_potential() for v in sys.get_species() ]

self.do_on_super_loop(sys)

fmt_head = " %3s %8s %8s %8s"
print >>out, "CHEMICAL POTENTIAL ESTIMATE [", self.super_loop_count_, "]"
header = ("SPC","CHEM EX","DLTA_CPX","<CPX>")
print >>out, fmt_head % header
fmt_row  = " %3s %8.4f %8.4f %8.4f"
with open("chex.dat","a") as f:
  for old_cpx, mean, spc in zip( old_cpx_list,self.chem_potential_,sys.get_species() ):
    print >>out, fmt_row % (spc.label(),spc.excess_potential(),(spc.excess_potential()-old_cpx),mean.mean())
    print >>f, fmt_row % (spc.label(),spc.excess_potential(),(spc.excess_potential()-old_cpx),mean.mean()),
    mean.append(spc.excess_potential())
  print >>f,""
!!!2097584.cpp!!!	write_output(in sim : simulation) : void
const std::string filename { "igcmc.dat" };

const std::size_t loopindex { dynamic_cast< const imc_simulation& >( sim.manager() ).count() + 1 };

observable::output_series dset {};
dset.set_title( "Series of chemical potential estimates" );

dset.push_back_entry( observable::output_field( "INDEX", "ORDINAL", [loopindex](std::ostream& os, std::size_t)
{
   os << loopindex;
} ) );

const particle::particle_manager& pman = sim.particles();
for (std::size_t ispec = 0; ispec != this->chemical_potentials_.size(); ++ispec)
{
   const double mu_ex = pman.get_specie( ispec ).excess_potential();
   const std::string label = pman.get_specie( ispec ).label();
   const double mean = this->chemical_potentials_.mean( ispec );
   const double var = this->chemical_potentials_.variance( ispec );
   dset.push_back_entry( observable::output_field( label + "_CURRENT" , "COUNT", [mu_ex](std::ostream& os, std::size_t)
   {
      os << mu_ex;
   } ) );
   dset.push_back_entry( observable::output_field( label + "_MEAN" , "COUNT", [mean](std::ostream& os, std::size_t)
   {
      os << mean;
   } ) );
   dset.push_back_entry( observable::output_field( label + "_VAR" , "COUNT", [var](std::ostream& os, std::size_t)
   {
      os << var;
   } ) );
}

dset.write( filename, sim.report().get_sink(), 1 == loopindex );

!!!542897.cpp!!!	charge_correction_factor(in sim : simulation) : double
//namespace cc = core::constants;
//static const double csloth { ( 6*std::log( 2 + std::sqrt(3.0)) - cc::pi() )
//  / (16 * cc::pi() * cc::eps0() * cc.dsi() ) };
return 0.0;
// csloth * sim.beta() * std::cbrt(sim.volume());
//    chisp=-xz(ispec)*avchg*chcons
