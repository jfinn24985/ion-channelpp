class choice_meta
!!!826416.cpp!!!	add_trial_type(inout ctor : choice_definition) : void
UTILITY_REQUIRE( not this->has_trial_type( ctor->label() ), ("Attempt to add more than one chooser factory for type \"" + ctor->label() + "\".") );
this->type_to_object_.push_back( ctor.release() );


!!!2331312.cpp!!!	definition_key_list() : string
std::vector< std::string > result;
for( auto const& entry : this->type_to_object_ )
{
  result.push_back( entry.label() );
}
return result;
!!!826544.cpp!!!	has_trial_type(in trial_label : string) : bool
for( auto const& defn : this->type_to_object_ )
{
  if( defn.label() == trial_label )
  {
    return true;
  }
}
return false;

!!!833200.cpp!!!	publish_help(inout helper : input_help) : void
const std::string seclabel( core::strngs::fstry() );
// ----------------------------------------
// add section
// ----------------------------------------

//   Specie input section definition
helper.add_section( { seclabel,
    "Define which MC change trials are used in the simulation." } );
auto &sect = helper.get_section( seclabel );
// ----------------------------------------
// add parameters
// ----------------------------------------

//   rate : [required, number] trial rate
{
  const std::string description("Trial type relative rate (not necessarily normalized).");
  sect.add_entry( { core::strngs::rate_label(), "number", ">0", "required", description } );
}
//  specie : [optional] include/exclude list
{
  const std::string description("Space separated list of specie labels to include or exclude. Exclude species by preceding the label with '-' (e.g. -Aa). All species are included by default, but you may also include only selected species by putting their label in the list without '-' (optionally preceded by '+'). NOTE: This should only be used in special cases as most trials already restrict which specie types they are applied to. For example \"mobile\" type species are automatically excluded from \"jump\" or Grand Canonical trials. This list does not override these restrictions.");
  sect.add_entry( { core::strngs::fsspec(), "list", "specie labels", "optional", description } );
}
// Subtype parameter documentation.
for( auto iter = this->type_to_object_.begin(); iter != this->type_to_object_.end(); ++iter )
{
  iter->publish_help( helper, seclabel );
}

!!!204592.cpp!!!	do_read_entry(inout reader : input_base_reader) : bool
if( reader.name().find( core::strngs::rate_label() ) == 0 )
{
  // --------------------
  // Choice rate
  reader.duplicate_test( this->missing_required_tags_[ CHOICE_RATE ], this->section_label() );
  this->rate_ = reader.get_float( "Trial likelihood", this->section_label(), true, false );
  this->missing_required_tags_.reset( CHOICE_RATE );
}
else if( reader.name().find( core::strngs::fstype() ) == 0 )
{
  // --------------------
  // Trial type
  reader.duplicate_test( this->missing_required_tags_[ CHOICE_TYPE ], this->section_label() );
  std::vector< std::string > keys{ this->definition_key_list() };
  const std::size_t idx = reader.get_key( "Trial subtype ", this->section_label(), keys );
  this->type_ = keys.at( idx );
  this->missing_required_tags_.reset( CHOICE_TYPE );
}
else if( reader.name().find( core::strngs::fsspec() ) == 0 )
{
  // --------------------
  // Allowed/disallowed specie list
  reader.duplicate_test( this->specie_list_.empty(), this->section_label() );
  this->specie_list_ = reader.get_text( "Specie inclusion list", this->section_label() );
}
else
{
  // --------------------
  // Assume choice specific parameters
  reader.duplicate_test( 0 == this->parameter_set_.count( reader.name() ), this->section_label() );
  this->parameter_set_.insert( std::make_pair( reader.name(), reader.value() ) );
}
return true;

!!!204720.cpp!!!	do_read_end(in reader : input_base_reader) : void
if( this->missing_required_tags_.any() )
{
  // Not all required tags were present.
  UTILITY_INPUT( not this->missing_required_tags_[ CHOICE_RATE ], "Trial section requires \"" + core::strngs::rate_label() + "\" parameter.", this->section_label(), &reader );
  UTILITY_INPUT( not this->missing_required_tags_[ CHOICE_TYPE ], "Trial section requires \"" + core::strngs::fstype() + "\" parameter.", this->section_label(), &reader );
}
// find definition
std::size_t idx = 0;
for( idx = 0; idx != this->type_to_object_.size(); ++idx )
{
  if( this->type_to_object_[ idx ].label() == this->type_ )
  {
    break;
  }
}
UTILITY_CHECK( idx != this->type_to_object_.size(), "Check in do_read_entry should mean this is never true." );
auto const& defn = this->type_to_object_[ idx ];
// use definiton to check parameter names
if( not this->parameter_set_.empty() )
{
  for( auto const& entry : this->parameter_set_ )
  {
    UTILITY_INPUT( defn.has_definition( entry.first ) != 0, "Trial \"" + entry.first + "\" parameter with value (" + entry.second + ") is not understood by " + this->type_ + " " + this->section_label() + ".", this->section_label(), &reader );
  }
}

// Use generator to create the chooser object.
this->manager_->add_chooser( defn( this->parameter_set_, this->type_, this->specie_list_, this->rate_ ) );

!!!1171376.cpp!!!	do_reset() : void
this->missing_required_tags_.set();
this->parameter_set_.clear();
this->rate_ = 0.0;
this->specie_list_.clear();
this->type_.clear();

