class choice_meta
!!!826416.cpp!!!	add_trial_type(in trial_label : string, in ctor : choice_meta::choice_generator_fn) : void
UTILITY_REQUIRE( 0 == this->type_to_object_.count( trial_label ), ("Attempt to add more than one chooser factory for type \""+trial_label+"\"."), this->section_label() );
this->parameter_set_.insert( std::make_pair( trial_label, ctor ) );


!!!2164655.cpp!!!	choice_meta(inout man : choice_manager, inout help : input_help)
this->missing_required_tags_ = std::bitset< CHOICE_TAG_COUNT >( true );

const std::string seclabel( core::strngs::fstry() );
// ----------------------------------------
// add section
// ----------------------------------------

//   Specie input section definition
help_text.add_section( seclabel,
    "Trial input section definition.  In addition to the listed options, each individual"
    "trial subtypes may have its own specific options.");

// ----------------------------------------
// add parameters
// ----------------------------------------

//   rate : [required, number] trial rate
{
  const std::string description("[required, number] trial relative rate (not necessarily normalized).");
  help_text.add_option( seclabel, core::strngs::rate_label(), description );
}
//  type : [required] trial subtype
{
  const std::string description("[required, string] trial subtype (see documentation for valid subtypes).");
  help_text.add_option( seclabel, core::strngs::fstype(), description );
}
//  specie : [optional] include/exclude list
{
  const std::string description("[optional, list] Space separated list of specie labels to include or exclude. Exclude species by preceding the label with '-' (e.g. -Aa). All species are included by default, but you may also include species by putting their label in the list (optionally preceded by '+').");
  help_text.add_option( seclabel, core::strngs::fsspec(), description );
}
//  simulator : [optional] simulator subtype
{
  const std::string description("[optional, string] specific simulator subtype to add the evaluator to (see documentation for valid subtypes).");
  help_text.add_option( seclabel, core::strngs::simulator_label(), description );
}

!!!204592.cpp!!!	do_read_entry(inout reader : input_base_reader) : bool
if (reader.name().find(core::strngs::rate_label ()) == 0)
{
   // --------------------
   // Specie label
   UTILITY_INPUT(not reader.value().empty(), "Trial rate must have a value.", this->section_label());
   try
   {
      this->rate_ = boost::lexical_cast< double >(reader.value());
      UTILITY_INPUT(this->rate_ > 0.0, "Trial rate must be greater than zero.", this->section_label());
      missing_required_tags_.reset(CHOICE_RATE);
   }
   catch (boost::bad_lexical_cast const& err)
   {
      bool valid_value(false);
      UTILITY_INPUT(valid_value, "Trial "+core::strngs::rate_label ()+" could not be converted to a number :"+err.what(), this->section_label());
   }
}
else if (reader.name().find(core::strngs::fstype()) == 0)
{
   // --------------------
   // Specie type
   UTILITY_INPUT(not reader.value().empty(), "Trial type must have a value.", this->section_label());
   std::string val ( reader.dequote( reader.value() ) );
   UTILITY_INPUT(type_to_object_.count(val) != 0, "Trial type must be one of allowed values (see documentation).", this->section_label());
   this->type_ = val;
   missing_required_tags_.reset(CHOICE_TYPE);
}
else
{
   // --------------------
   // Assume choice specific parameters
   UTILITY_INPUT (0 == this->parameter_set_.count (reader.name()), ("keyword \""+reader.name()+"\" appears more than once in a single \""+core::strngs::fstry()+"\" section"), this->section_label());
   this->parameter_set_.insert (std::make_pair(reader.name(), reader.value()));
}
return true;
!!!204720.cpp!!!	do_read_end() : void
UTILITY_INPUT (not this->missing_required_tags_.any(), "Not all required tags were present.", this->section_label());

// Use generator to create the set of choice objects (ie
// one for each specie) corresponding to input data.
this->manager_.add_chooser( this->type_to_object_[ this->type_ ]( this->parameter_set_, this->type_, this->rate_ ) );

this->parameter_set_.clear();
this->missing_required_tags_ = std::bitset< CHOICE_TAG_COUNT >( true );
this->type_.clear();
this->rate_ = 0;

!!!826544.cpp!!!	has_trial_type(in trial_label : string) : bool
return 0 != this->type_to_object_.count( trial_label );
