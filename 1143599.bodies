class evaluator_meta
!!!842160.cpp!!!	add_documentation(inout helper : input_help) : void
const std::string seclabel( core::strngs::evaluator_label() );
// ----------------------------------------
// add section
// ----------------------------------------

//   Specie input section definition
core::input_help::exemplar().add_section( seclabel,
    "Evaluator input section definition.  In addition to the listed options, each individual"
    "evaluator subtype may have its own specific options.");

// ----------------------------------------
// add parameters
// ----------------------------------------

//  type : [required] trial subtype
{
  const std::string description( "[required, string] trial subtype (see documentation for valid subtypes)." );
  core::input_help::exemplar().add_option( seclabel, core::strngs::fstype(), description );
}
//  simulator : [optional] simulator subtype
{
  const std::string description("[optional, string] specific simulator subtype to add the evaluator to (see documentation for valid subtypes).");
  core::input_help::exemplar().add_option( seclabel, core::strngs::simulator_label(), description );
}

!!!842416.cpp!!!	add_evaluator_type(in eval_label : string, in ctor : evaluator_meta::evaluator_generator_fn) : void
UTILITY_REQUIRE( 0 == this->type_to_object_.count( eval_label ), ("Attempt to add more than one evaluator factory for type \""+eval_label+"\"."), this->section_label() );
this->type_to_object_.insert( std::make_pair( eval_label, ctor ) );


!!!203824.cpp!!!	do_read_entry(inout reader : input_base_reader) : bool
if (reader.name().find(core::strngs::fstype()) == 0)
{
   // --------------------
   // Evaluator type
   UTILITY_INPUT(not reader.value().empty(), "Evaluator type must have a value.", this->section_label());
   std::string val (reader.dequote(reader.value()));
   UTILITY_INPUT(type_to_object_.count(val) != 0, "Evaluator type must be one of allowed values for this program (see documentation).", this->section_label());
   this->type_ = val;
   missing_required_tags_.reset(EVALUATOR_TYPE);
}
else
{
   // --------------------
   // Choice specific parameters
   UTILITY_INPUT (0 == this->parameter_set_.count (reader.name()), ("keyword \""+reader.name()+"\" appears more than once in a single in specie section"), this->section_label());
   this->parameter_set_.insert (std::make_pair(reader.name(), reader.value()));
}
return true;
!!!203952.cpp!!!	do_read_end() : void
UTILITY_INPUT (not this->missing_required_tags_.any(), "Not all required tags were present.", this->section_label());
// Add to all simulator types!
//
// Give the generator functional the simulator type in
// in case the evaluator is not valid for a particular
// simulator type or there are different evaluator types
// for different simulators.
this->type_to_object_[ this->type_ ]( this->parameter_set_, *(this->manager_) );

// Reset the meta data
this->missing_required_tags_ = std::bitset< EVALUATOR_TAG_COUNT >( true );
this->parameter_set_.clear();
this->type_.clear();
!!!842288.cpp!!!	has_trial_type(in eval_label : string) : bool
return 0 != this->type_to_object_.count( eval_label );
