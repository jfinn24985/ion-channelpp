class evaluator_meta
!!!842416.cpp!!!	add_definition(inout defn : evaluator_definition) : void
UTILITY_REQUIRE( 0 == this->has_definition( defn->label() ), ( "Attempt to add more than one evaluator factory for type \"" + defn->label() + "\"." ) );
this->type_to_object_.push_back( defn.release() );
!!!1371952.cpp!!!	add_definition(inout defn : evaluator_definition) : void
UTILITY_REQUIRE( 0 == this->has_definition( defn->label() ), ( "Attempt to add more than one evaluator factory for type \"" + defn->label() + "\"." ) );
this->type_to_object_.push_back( defn.release() );
!!!2330672.cpp!!!	definition_key_list() : string
std::vector< std::string > result;
for( auto const& entry : this->type_to_object_ )
{
  result.push_back( entry.label() );
}
return result;
!!!1686320.cpp!!!	get_definition(in label : string) : evaluator_definition
for( auto const& defn : this->type_to_object_ )
{
  if( defn.label() == label )
  {
    return defn;
  }
}
constexpr bool label_found = false;
UTILITY_REQUIRE( label_found, "No definition with the given label" );
return this->type_to_object_.front();
!!!1362736.cpp!!!	has_definition(in label : string) : bool
for( auto const& defn : this->type_to_object_ )
{
  if( defn.label() == label )
  {
    return true;
  }
}
return false;
!!!842160.cpp!!!	publish_help(inout helper : input_help) : void
const std::string seclabel( core::strngs::evaluator_label() );
// ----------------------------------------
// add section
// ----------------------------------------

//   Evaluator input section definition
helper.add_section( { seclabel, "Evaluator input sections specify a potential energy functions and its parameters. The input file must include an evaluator section for each energy function to be used in the simulation." } );

// ----------------------------------------
// add parameters
// ----------------------------------------

// Subtype parameter documentation.
for( auto const& iter : this->type_to_object_ )
{
  iter.publish_help( helper, seclabel );
}
!!!203824.cpp!!!	do_read_entry(inout reader : input_base_reader) : bool
if( reader.name().find( core::strngs::fstype() ) == 0 )
{
  // --------------------
  // Evaluator type
  reader.duplicate_test( this->type_.empty(), this->section_label() );
  const std::vector< std::string > keys{ this->definition_key_list() };
  std::size_t idx = reader.get_key( "Evaluator selection", this->section_label(), keys );
  this->type_ = keys.at( idx );
}
else
{
  // --------------------
  // Evaluator specific parameters
  const std::string lname{ reader.name() };
  reader.duplicate_test( 0 == std::count_if( this->parameter_set_.begin(), this->parameter_set_.end(), [&lname](const core::input_parameter_memo& param){ return lname == param.name(); } ), this->section_label() );
  this->parameter_set_.push_back( { reader } );
}
return true;

!!!203952.cpp!!!	do_read_end(in reader : input_base_reader) : void
if( this->type_.empty() )
{
  reader.missing_parameters_error( "Energy function",  this->section_label(), core::strngs::fstype() );
}
// Call functor method to create evaluator
for( const auto& defn : this->type_to_object_ )
{
  if( defn.label() == this->type_ )
  { 
    // check parameters are in definition
    for( const auto& entry : this->parameter_set_ )
    {
      if( not defn.has_definition( entry.name() ) )
      {
        throw core::input_error::invalid_parameter_subtype_error( this->section_label(), this->type_, entry );
      }
    }
    // push "end" tag onto parameter set.
    this->parameter_set_.push_back( { reader } );
    this->manager_->add_evaluator( defn( this->parameter_set_ ) );
    return;
  }
}
// error to get here
UTILITY_CHECK( false, "should never reach this point in the code." );
!!!1362352.cpp!!!	do_reset() : void
// Reset meta data
this->parameter_set_.clear();
this->type_.clear();
