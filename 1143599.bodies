class evaluator_meta
!!!842416.cpp!!!	add_definition(inout defn : evaluator_definition) : void
UTILITY_REQUIRE( 0 == this->has_definition( defn->label() ), ( "Attempt to add more than one evaluator factory for type \"" + defn->label() + "\"." ) );
this->type_to_object_.push_back( defn.release() );
!!!1371952.cpp!!!	add_definition(inout defn : evaluator_definition) : void
UTILITY_REQUIRE( 0 == this->has_definition( defn->label() ), ( "Attempt to add more than one evaluator factory for type \"" + defn->label() + "\"." ) );
this->type_to_object_.push_back( defn.release() );
!!!1686320.cpp!!!	get_definition(in label : string) : evaluator_definition
for( auto const& defn : this->type_to_object_ )
{
  if( defn.label() == label )
  {
    return defn;
  }
}
constexpr bool label_found = false;
UTILITY_REQUIRE( label_found, "No definition with the given label" );
return this->type_to_object_.front();
!!!1362736.cpp!!!	has_definition(in label : string) : bool
for( auto const& defn : this->type_to_object_ )
{
  if( defn.label() == label )
  {
    return true;
  }
}
return false;
!!!842160.cpp!!!	publish_help(inout helper : input_help) : void
const std::string seclabel( core::strngs::evaluator_label() );
// ----------------------------------------
// add section
// ----------------------------------------

//   Specie input section definition
helper.add_section( seclabel, "Evaluator input section definition.");

// ----------------------------------------
// add parameters
// ----------------------------------------

//  type : [required] trial subtype
{
  const std::string description( "[required, string] trial subtype (see documentation for valid subtypes)." );
  helper.add_option( seclabel, core::strngs::fstype(), description );
}
// Subtype parameter documentation.
for( auto const& iter : this->type_to_object_ )
{
  iter.publish_help( helper, seclabel );
}
!!!203824.cpp!!!	do_read_entry(inout reader : input_base_reader) : bool
if( reader.name().find( core::strngs::fstype() ) == 0 )
{
  // --------------------
  // Evaluator type
  UTILITY_INPUT( this->missing_required_tags_[ EVALUATOR_TYPE ], str( core::input_error_messages::duplicate_parameter() % core::strngs::fstype() % this->section_label() ), this->section_label() );
  UTILITY_INPUT( not reader.value().empty(), str( core::input_error_messages::missing_value() % core::strngs::fstype() % this->section_label() ), this->section_label() );
  std::string val( reader.dequote( reader.value() ) );
  UTILITY_INPUT( this->has_definition( val ), str( core::input_error_messages::bad_subtype_value() % core::strngs::fstype() % val % this->section_label() ), this->section_label() );
  this->type_ = val;
  missing_required_tags_.reset( EVALUATOR_TYPE );
}
else
{
  // --------------------
  // Choice specific parameters
  UTILITY_INPUT( 0 == this->parameter_set_.count( reader.name() ), str( core::input_error_messages::duplicate_parameter() % reader.name() % this->section_label() ), this->section_label() );
  this->parameter_set_.insert( std::make_pair( reader.name(), reader.value() ) );
}
return true;

!!!203952.cpp!!!	do_read_end() : void
UTILITY_INPUT( not this->missing_required_tags_[ EVALUATOR_TYPE ], str( core::input_error_messages::missing_parameter() % core::strngs::fstype() % this->section_label() ), this->section_label() );
UTILITY_INPUT (not this->missing_required_tags_.any(), str( core::input_error_messages::missing_parameters() % this->section_label() ), this->section_label());

// Call functor method to create evaluator
for( const auto& defn : this->type_to_object_ )
{
  if( defn.label() == this->type_ )
  { 
    // check parameters are in definition
    for( const auto& entry : this->parameter_set_ )
    {
      UTILITY_INPUT( defn.has_definition( entry.first ), str( core::input_error_messages::invalid_parameter_subtype() % entry.first % this->section_label() % this->type_ ), this->section_label() );
    } 

    this->manager_->add_evaluator( defn( this->parameter_set_ ) );
    return;
  }
}
// error to get here
UTILITY_CHECK( false, "should never reach this point in the code." );
!!!1362352.cpp!!!	do_reset() : void
// Reset meta data
this->missing_required_tags_.set();
this->parameter_set_.clear();
this->type_.clear();
