class input_error
!!!2698160.cpp!!!	duplicate_parameter_error(in section : string, in param : base_input_parameter) : input_error
std::stringstream os;
os << "Parameter \"" << param.name() << "\" appears more than once in section \""
  << section << "\"";
if( not param.filename().empty() )
{
  os  << " at input file \""
      << param.filename() << "\" line " << param.line_number()
      << ".\n   >>" << param.line() << "<<\n";
}
else
{
  os << ".\n";
}
os << "** Parameter \"" << param.name() << "\" can only appear once per section. **\n";
return input_error( param.name(), section, os.str() );
!!!2698032.cpp!!!	duplicate_section_error(in name : string, in filename : string, in linenum : size_t) : input_error
std::stringstream os;
os << "Once-only section \"" << name << "\" appears more than once";
if( not filename.empty() )
{
  os  << ", second appearance at input file \""
      << filename << "\" line " << linenum;
}
os << ".\n** Section \"" << name << "\" can only appear once. **\n";
return input_error( "", name, os.str() );
!!!2697904.cpp!!!	invalid_parameter_error(in section : string, in param : base_input_parameter) : input_error
std::stringstream os;
os << "Unknown parameter \"" << param.name()
   << "\" in section \"" << section << "\"";
if( not param.filename().empty() )
{
  os << " at input file \"" << param.current_filename()
     << "\" line " << param.current_line_number()
     << ".\n   >>" << param.line() << "<<\n";
}
else
{
  os << ".\n";
}
os << "** Parameter \"" << param.name() << "\" is not expected in this section. **\n";
return input_error( "", section, os.str() );
!!!2697776.cpp!!!	invalid_parameter_subtype_error(in section : string, in subtype : string, in param : base_input_parameter) : input_error
std::stringstream os;
os << "Unknown parameter \"" << param.name() << "\" in section \""
  << section << "\" subtype \"" << subtype << "\"";
if( reader and not param.filename().empty() )
{
  os << " detected at input file \"" << param.filename()
       << "\" line " << param.line_number() << ".\n";
}
else
{
  os << ".\n";
}
os << "** Parameter \"" << param.name() << "\" is not expected in this section and type. **\n";
return input_error( "", section, os.str() );
!!!2697648.cpp!!!	invalid_section_error(in name : string, in filename : string, in linenum : size_t, in list : string) : input_error
std::stringstream os;
os << "Unknown section label \"" << name << "\"";
if( not filename.empty() )
{
  os << " at input file \"" << filename << "\" line " << linenum << ".\n";
}
else
{
  os << ".\n";
}
os << "** Section label must be one of : " << list << ". **\n";
return input_error( "", "", os.str() );
!!!2697520.cpp!!!	missing_parameters_error(in title : string, in section : string, in params : string, in filename : string, in linenum : size_t) : input_error
std::stringstream os;
os << title << " section \"" << section
  << "\" is missing some required parameters";
if( not filename.empty() )
{
  os << " at input file \"" << filename
     << "\" in section ending at line " << linenum << ".\n";
}
else
{
  os << ".\n";
}
os << "** Add the following parameters to the section: " << params << " **\n";
return input_error( "", section, os.str() );
!!!2697136.cpp!!!	missing_section_error(in list : string) : input_error
std::stringstream os;
os << "Missing required sections detected at end of input file.\n" 
   << "** The following sections must be present in the input : " << list << ". **\n";
return input_error( "", "", os.str() );
!!!2697392.cpp!!!	missing_value_error(in title : string, in section : string, in param : base_input_parameter) : input_error
std::stringstream os;
os << title << " parameter \"" << param.name() << "\"";
if( not section.empty() )
{
  os << " in section \"" << section << "\"";
}
if( not param.filename().empty() )
{ 
  os << " at input file \"" << param.filename() << "\" line "
       << param.line_number() << ".\n   >>" << param.line() << "<<\n";
}
else
{
  os << ".\n";
}
os << "** Expected a value. **\n";
return input_error( param.name(), section, os.str() );
!!!2697264.cpp!!!	parameter_value_error(in title : string, in section : string, in param : base_input_parameter, in msg : string) : input_error
std::stringstream os;
os << title << " parameter \"" << param.name() << "\" with value (" << param.value() << ")";
if( not section.empty() )
{
  os << " in section \"" << section << "\"";
}
if( not param.filename().empty() )
{
   os << " at input file \"" << param.filename() << "\" line "
       << param.line_number() << ".\n   >>" << param.line() << "<<\n";
}
else
{
  os << ".\n";
}
os << "** " << msg << " **\n";
return input_error( param.name(), section, os.str() );
!!!2316464.cpp!!!	duplicate_parameter_error(in section : string, in name : string, in reader : input_base_reader) : input_error
std::stringstream os;
os << "Parameter \"" << name << "\" appears more than once in section \""
  << section << "\"";
if( reader and not reader->current_filename().empty() )
{
  os  << " at input file \""
      << reader->current_filename() << "\" line " << reader->current_line_number()
      << ".\n   >>" << reader->line() << "<<\n";
}
else
{
  os << ".\n";
}
os << "** Parameter \"" << name << "\" can only appear once per section. **\n";
return input_error( "", section, os.str() );
!!!2378416.cpp!!!	duplicate_section_error(in name : string, in reader : input_base_reader) : input_error
std::stringstream os;
os << "Once-only section \"" << name << "\" appears more than once";
if( reader and not reader->current_filename().empty() )
{
  os  << ", second appearance at input file \""
      << reader->current_filename() << "\" line " << reader->current_line_number();
}
os << ".\n** Section \"" << name << "\" can only appear once. **\n";
return input_error( "", "", os.str() );
!!!1371440.cpp!!!	invalid_parameter_error(in section : string, in name : string, in reader : input_base_reader) : input_error
std::stringstream os;
os << "Unknown parameter \"" << name 
    << "\" in section \"" << section << "\"";
if( reader and not reader->current_filename().empty() )
{
  if( reader->name() == name )
  { 
    os << " at input file \"" << reader->current_filename()
       << "\" line " << reader->current_line_number()
       << ".\n   >>" << reader->line() << "<<\n";
  }
  else
  {
    os << " detected at input file \"" << reader->current_filename()
       << "\" line " << reader->current_line_number() << ".\n"; 
  }
}
else
{
  os << ".\n";
}
os << "** Parameter \"" << name << "\" is not expected in this section. **\n";
return input_error( "", section, os.str() );
!!!1372208.cpp!!!	invalid_parameter_subtype_error(in section : string, in subtype : string, in name : string, in reader : input_base_reader) : input_error
std::stringstream os;
os << "Unknown parameter \"" << name << "\" in section \""
  << section << "\" subtype \"" << subtype << "\"";
if( reader and not reader->current_filename().empty() )
{
  if( reader->name() == name )
  {
    os << " at input file \"" << reader->current_filename()
       << "\" line " << reader->current_line_number()
       << ".\n   >>" << reader->line() << "<<\n";
  }
  else
  {
    os << " detected at input file \"" << reader->current_filename()
       << "\" line " << reader->current_line_number() << ".\n";
  }
}
else
{
  os << ".\n";
}
os << "** Parameter \"" << name << "\" is not expected in this section and type. **\n";
return input_error( "", section, os.str() );
!!!2378160.cpp!!!	invalid_section_error(in name : string, in reader : input_base_reader, in list : string) : input_error
std::stringstream os;
os << "Unknown section label \"" << name << "\"";
if( reader and not reader->current_filename().empty() )
{
  if( reader->name() == name )
  { 
    os << " at input file \"" << reader->current_filename()
       << "\" line " << reader->current_line_number()
       << ".\n   >>" << reader->line() << "<<\n";
  }
  else
  {
    os << " detected at input file \"" << reader->current_filename()
       << "\" line " << reader->current_line_number() << ".\n"; 
  }
}
else
{
  os << ".\n";
}
os << "** Section label must be one of : " << list << ". **\n";
return input_error( "", "", os.str() );
!!!1371312.cpp!!!	missing_parameters_error(in title : string, in section : string, in params : string, in reader : input_base_reader) : input_error
std::stringstream os;
os << title << " section \"" << section
  << "\" is missing some required parameters";
if( reader and not reader->current_filename().empty() )
{
  os << " at input file \"" << reader->current_filename()
     << "\" in section ending at line " << reader->current_line_number() << ".\n";
}
else
{
  os << ".\n";
}
os << "** Add the following parameters to the section: " << params << " **\n";
return input_error( "", section, os.str() );
!!!2378288.cpp!!!	missing_section_error(in list : string) : input_error
std::stringstream os;
os << "Missing required sections detected at end of input file.\n" 
   << "** The following sections must be present in the input : " << list << ". **\n";
return input_error( "", "", os.str() );
!!!1371696.cpp!!!	missing_value_error(in title : string, in section : string, in name : string, in reader : input_base_reader) : input_error
std::stringstream os;
os << title << " parameter \"" << name << "\"";
if( not section.empty() )
{
  os << " in section \"" << section << "\"";
}
if( reader and not reader->current_filename().empty() )
{ 
  if( reader->name().find( name ) == 0 )
  {
    os << " at input file \"" << reader->current_filename() << "\" line "
       << reader->current_line_number() << ".\n   >>" << reader->line() << "<<\n";
  }
  else
  {
    os << " ending at input file \"" << reader->current_filename() << "\" line "
       << reader->current_line_number() << ".\n";
  }
}
else
{
  os << ".\n";
}
os << "** Expected a value. **\n";
return input_error( name, section, os.str() );
!!!2309168.cpp!!!	parameter_value_error(in title : string, in section : string, in name : string, in value : string, in reader : input_base_reader, in msg : string) : input_error
std::stringstream os;
os << title << " parameter \"" << name << "\" with value (" << value << ")";
if( not section.empty() )
{
  os << " in section \"" << section << "\"";
}
if( reader and not reader->current_filename().empty() )
{
  if( reader->name() == name )
  {
    os << " at input file \"" << reader->current_filename() << "\" line "
       << reader->current_line_number() << ".\n   >>" << reader->line() << "<<\n";
  }
  else
  {
    os << " ending at input file \"" << reader->current_filename() << "\" line "
       << reader->current_line_number() << ".\n";
  }
}
else
{
  os << ".\n";
}
os << "** " << msg << " **\n";
return input_error( name, section, os.str() );
!!!2323888.cpp!!!	input_file_error(in name : string, in reader : input_base_reader, in msg : string) : input_error
std::stringstream os;
os << "Problem including file \"" << name << "\" using keyword \""
   << core::strngs::fsincl() << "\"";
if( reader )
{
  os  << " at input file \""
      << reader->current_filename() << "\" line " << reader->current_line_number()
      << ".\n   >>" << reader->line() << "<<\n";
}
else
{
  os << ".\n";
}
os << "** " << msg << " **\n";
return input_error( core::strngs::fsincl(), "", os.str() );
!!!2324016.cpp!!!	input_logic_error(in title : string, in section : string, in msg : string) : input_error
std::stringstream os;
os << title << " in section \"" << section << "\".\n** " << msg << " **\n";
return input_error( "", section, os.str() );
