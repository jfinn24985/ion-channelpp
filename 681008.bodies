class standard_simulation
!!!1941168.cpp!!!	do_description(inout os : ostream) : void
os << " Simple Monte Carlo Simulation.\n"; 
os << " ------------------------------\n"; 

!!!1941168.python!!!	do_description(inout os : ostream) : void
from constants import constants
constants.description( os )
print >>os, "[simulation]"
print >>os, "        volume :", self.cell_region_.volume(-1), "Anstrom{3}"
print >>os, "  permittivity :", self.cell_region_.permittivity()
print >>os, " beta (1/k_BT) :", (1.0/(constants.boltzmann_constant()*self.temperature_kelvin_)), " J{-1}"
print >>os, "  temperature :", self.temperature_kelvin_, " K"
print >>os, " specie count :", self.specie_count()
print >>os, " - loop sizes"
print >>os, "       thermal :", self.equilibration_interval_
print >>os, "    production :", self.production_interval_
print >>os, "         inner :", self.inner_loop_size_
print >>os, " current index :", self.outer_loop_index_
print >>os, " - other parameters"
print >>os, " starting particle count :", self.target_number_of_particles()
print >>os, "          ionic strength :", self.ionic_strength()
print >>os, "             trial rates :", self.rates_
print >>os, "              move delta :", self.delta
for spc in self.species_:
  spc.description( os )
print >>os, "[choices] trial types and rates"
print >>os, " %6s %4s %7s" % ( "type", "spc.", "rate(%)" )
for choice in self.choices_:
  print >>os, " %6s %4s %7.2f" % ( choice.label(), self.species_[choice.specie_key()].label(), choice.probability()*100.0 )
for observable in self.observables_:
  observable.description( os )
for potl in self.evaluators_:
  potl.description( os )
self.ensemble_.description( os )

!!!1937200.cpp!!!	do_write_part_document(inout wr : input_document, in ix : size_t) : void
wr[ ix ].add_entry( core::strngs::fstype(), this->type_label() );
!!!1937712.cpp!!!	add_definition(inout meta : simulator_meta) : void
std::string desc( "Standard Monte Carlo simulation. This runs a single equilibration phase then a single production phase." );
std::unique_ptr< simulation_definition > result( new simulation_definition( type_label_(), desc, &standard_simulation::make_simulation_manager ) );
// no extra parameters
meta.add_type( result );
!!!1937584.cpp!!!	run(inout sim : simulation, inout oslog : ostream) : bool
// do thermalization
oslog << "\n -----------------------";
oslog << "\n Start of Thermalisation";
oslog << "\n -----------------------\n\n";
sim.prepare();
sim.run_loop( this->equilibration_interval() );
oslog << "\n ---------------------";
oslog << "\n End of Thermalisation";
oslog << "\n ---------------------\n\n";
// do main simulation
oslog << "\n -------------------";
oslog << "\n Start of Production";
oslog << "\n -------------------\n\n";
sim.prepare();
sim.run_loop( this->production_interval() );
oslog << "\n -----------------";
oslog << "\n End of Production";
oslog << "\n -----------------\n\n";
return true;

!!!1937584.python!!!	run(inout sim : simulation, inout oslog : ostream) : bool
# do thermalization
self.run_loop(self.equilibration_interval_, oslog)
print >>oslog, "\nEND OF THERMALISATION\n"
self.run_loop(self.production_interval_, oslog)
print >>oslog, "\nEND OF PRODUCTION\n"
!!!1939248.cpp!!!	make_simulation_manager(in params : string) : simulation_manager
UTILITY_CHECK( params.empty(), "Standard simulation manager requires no parameters." );
return std::unique_ptr< simulation_manager >{ new standard_simulation };
