class malasics_igcmc
!!!488241.cpp!!!	description(inout os : ostream) : void
os << " Update Method [" << this->type_label_() << "]\n";
os << " Estimate the excess chemical potential parameters required\n";
os << " to maintain the target concentrations of solute species.\n\n";
os << "   Attila Malasics, Dirk Gillespie and DezsoÂ¨ Boda \"Simulating\n";
os << "   prescribed particle densities in the grand canonical\n";
os << "   ensemble using iterative algorithms\", The Journal of Chemical\n";
os << "   Physics, 2008, 128, 124102\n\n";
!!!488241.python!!!	description(inout os : ostream) : void
print >>os, "[observable]",self.type_label()
print >>os, " Iteratively estimate the excess chemical potential"
print >>os, " of each specie in the cell."
print >>os, "   Attila Malasics, Dirk Gillespie and Dezso Boda 'Simulating"
print >>os, "   prescribed particle densities in the grand canonical"
print >>os, "   ensemble using iterative algorithms', The Journal of Chemical "
print >>os, "   Physics, 2008, 128, 124102"
super( malasics_igcmc, self ).description( os )
pass


!!!458801.cpp!!!	do_update(inout sys : simulation, inout oslog : ostream) : void
// Malasics
//   Update with  mu_ex = (mu_ideal - mu_ex) - log(<dens>)
//
// Get mean concentration from specie_count sampler.
//
// NOTE: we could use specie_count::type_label_()
particle::particle_manager& pman = sys.particles();

for (size_t ispec = 0; ispec != pman.specie_count(); ++ispec)
{
  particle::specie & spcobj = pman.get_specie(ispec);
  // only solute species have interesting chemical potentials
  if (spcobj.is_solute())
  {
    const std::size_t localidx{ this->counts().local_index( ispec ) };
    if( localidx != this->counts().size() )
    {
      // NOTE: localidx = this->counts().size() if specie not recorded.
      const double volume{ this->counts().volume( localidx ) };
      if ( volume != 0.0 )
      {
        const double bulk_density = this->counts().mean( localidx )/volume;
        if (not utility::feq(bulk_density,0.0))
        {
          spcobj.set_excess_potential(spcobj.chemical_potential() - std::log(bulk_density));
        }
      }
    }
  }
}
!!!458801.python!!!	do_update(inout sys : simulation, inout oslog : ostream) : void
import math
for ispec, (mean, spc) in enumerate(zip(self.bulk_count_,sys.get_species())):
  bulk_density = mean/sys.get_cell_region().volume(ispec)
  if bulk_density != 0.0:
    # ignore species with zero average density
    spc.set_excess_potential( spc.chemical_potential() - math.log(bulk_density) )

!!!457521.python!!!	do_prepare(inout sim : simulation) : void
super( malasics_igcmc, self ).prepare( sim )
# Set up signal/slot to set specie means list
if self.specie_count_conx_ == None or not self.specie_count_conx_.connected():
  sig = sim.get_signal("specie-count")
  self.specie_count_conx_ = sig.connect(lambda *args: self.on_specie_count_signal(*args))
pass
!!!217776.cpp!!!	do_write_part_document(inout wr : input_document, in ix : size_t) : void
wr[ ix ].add_entry( "update", this->type_label_() );
!!!2112688.cpp!!!	add_to_definition(inout defn : simulation_definition) : string
return type_label_();
!!!2112560.cpp!!!	make_updater(in params : string) : imc_update
if( not params.empty() )
{
  std::string unknown_param{};
  for (auto const& item : params)
  {
    unknown_param += ( unknown_param.empty() ? "" : " " ) + item.first;
  }
  if( not unknown_param.empty() )
  {
    throw core::input_error::invalid_parameter_subtype_error( core::strngs::simulator_label(), type_label_(), unknown_param, nullptr );
  }
}
return boost::shared_ptr< imc_update > { new malasics_igcmc };
