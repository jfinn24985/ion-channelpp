class choice_manager
!!!746544.cpp!!!	description(inout os : ostream) : void
//XXif ( not this->choosers_.empty() )
//XX{
//XX   os << core::strngs::horizontal_bar () << "\n";
//XX   os << "[choices] trial types and rates\n";
//XX   static const boost::format choice_header(" %6s %7s");
//XX   os << boost::format(choice_header) % "type" % "rate(%)" << "\n";
//XX   for (auto const& chsr : this->choosers_ )
//XX   {
//XX      chsr.description( os );
//XX   }
//XX   if ( not this->choices_.empty() )
//XX   {
//XX      static const boost::format choice_header(" %6s %4s %7s");
//XX      os << boost::format(choice_header) % "type" % "spc." % "rate(%)" << "\n";
//XX      static const boost::format choice_row(" %6s %4s %7.2f");
//XX      for (auto const& choice : this->choices_)
//XX      {
//XX         os << boost::format(choice_row) % choice.label() % this->species_[choice.specie_key()].label() % (choice.probability()*100.0) << "\n";
//XX      }
//XX   }
//XX}
//XX
!!!746800.cpp!!!	generate(in particles : particle_manager, in regions : geometry_manager, inout rgnr : random_distribution, in selector : double) : change_set
// select a move
std::unique_ptr< particle::change_set > trial;
for( auto & choice: this->choices_ )
{
  selector -= choice.probability();
  if (selector <= 0.0)
  {
    trial = choice.generate( particles, regions, rgnr );
    break;
  }
}
return trial;

!!!746928.cpp!!!	prepare(in species : specie, inout rgnr : random_distribution) : void
//XXUTILITY_REQUIRE( not this->choosers_.empty (), "Can not run simulation with no possible trials" );
//XX// Build choices
//XXthis->choices_.clear();
//XXfor (auto &chsr : this->choosers_)
//XX{
//XX  chsr.generate_choices( species, this->choices_ );
//XX}
//XXUTILITY_ENSURE( not this->choices_.empty (), "Can not run simulation with no trials" );
//XX// Ensure sum of probabilities is 1.0
//XXdouble sum_choice_rates { 0.0 };
//XX// reset choice objects
//XXfor( auto &choice : this->choices_)
//XX{
//XX  sum_choice_rates += choice.probability();
//XX}
//XXif( not utility::feq( sum_choice_rates, 1.0 ))
//XX{
//XX  for (auto &choice : this->choices_)
//XX  {
//XX    choice.set_probability( choice.probability() / sum_choice_rates );
//XX  }
//XX}
//XX// Randomize choice order
//XXsim.get_random().shuffle( this->choices_ );
//XX
!!!747312.cpp!!!	write_document(inout wr : input_document) : void
// Write choosers
for (auto const& choice : this->choosers_)
{
   choice.write_document( wr );
}
!!!1240368.cpp!!!	has_chooser(in label : string) : bool
for( std::size_t idx = 0; idx != this->choosers_.size(); ++idx )
{
  if( this->choosers_[ idx ].type() == label )
  {
    return true;
  }
}
return false;
