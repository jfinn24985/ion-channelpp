class choice_manager
!!!746544.cpp!!!	description(inout os : ostream) : void
//XXif ( not this->choosers_.empty() )
//XX{
//XX   os << core::strngs::horizontal_bar () << "\n";
//XX   os << "[choices] trial types and rates\n";
//XX   static const boost::format choice_header(" %6s %7s");
//XX   os << boost::format(choice_header) % "type" % "rate(%)" << "\n";
//XX   for (auto const& chsr : this->choosers_ )
//XX   {
//XX      chsr.description( os );
//XX   }
//XX   if ( not this->choices_.empty() )
//XX   {
//XX      static const boost::format choice_header(" %6s %4s %7s");
//XX      os << boost::format(choice_header) % "type" % "spc." % "rate(%)" << "\n";
//XX      static const boost::format choice_row(" %6s %4s %7.2f");
//XX      for (auto const& choice : this->choices_)
//XX      {
//XX         os << boost::format(choice_row) % choice.label() % this->species_[choice.specie_key()].label() % (choice.probability()*100.0) << "\n";
//XX      }
//XX   }
//XX}
//XX
!!!746800.cpp!!!	generate(in particles : particle_manager, in regions : geometry_manager, inout rgnr : random_distribution, in selector : double) : change_set
// select a move
std::unique_ptr< particle::change_set > trial;
for( auto & choice: this->choices_ )
{
  selector -= choice.probability();
  if (selector <= 0.0)
  {
    trial = choice.generate( particles, regions, rgnr );
    break;
  }
}
return trial;

!!!1240368.cpp!!!	has_chooser(in label : string) : bool
for( std::size_t idx = 0; idx != this->choosers_.size(); ++idx )
{
  if( this->choosers_[ idx ].type() == label )
  {
    return true;
  }
}
return false;
!!!746928.cpp!!!	prepare(in species : specie, in gman : geometry_manager, inout rgnr : random_distribution) : void
UTILITY_REQUIRE( not this->choosers_.empty (), "Can not run simulation with no possible trials" );
// Build choices
this->choices_.clear();
for (auto &chsr : this->choosers_)
{
  chsr.prepare_choices( species, gman, this->choices_ );
}
UTILITY_INPUT( not this->choices_.empty (), "No actual trials can be made using the input set of trial types and input ensemble ", core::strngs::fstry(), nullptr );
// Ensure sum of probabilities is 1.0
double sum_choice_rates { 0.0 };
// reset choice objects
for( auto &choice : this->choices_)
{
  UTILITY_CHECK( choice.probability() > 0.0, "No choice should have zero or negative probability." );
  UTILITY_CHECK( not utility::feq(  choice.probability(), 0.0 ), "No choice should have zero probability." );
  sum_choice_rates += choice.probability();
}
UTILITY_CHECK( sum_choice_rates > 0.0, "No set of choices should have zero or negative probability." );
UTILITY_CHECK( not utility::feq( sum_choice_rates, 0.0 ), "No set of choices should have zero probability." );
if( not utility::feq( sum_choice_rates, 1.0 ))
{
  for (auto &choice : this->choices_)
  {
    choice.set_probability( choice.probability() / sum_choice_rates );
  }
}
// Randomize choice order
rgnr.shuffle( this->choices_ );

!!!747312.cpp!!!	write_document(inout wr : input_document) : void
// Write choosers
for (auto const& choice : this->choosers_)
{
   choice.write_document( wr );
}
!!!1786160.cpp!!!	build_input_delegater(inout cman : choice_manager, inout delegate : input_delegater) : void
///////////////
// Choice types
boost::shared_ptr< trial::choice_meta > cmeta { new trial::choice_meta( cman ) };

// Small displacement in a sphere
trial::move_choice::add_definition( *cmeta );

// Jump anywhere in simulation
trial::jump_choice::add_definition( *cmeta );

// Jump into a region
trial::jump_in::add_definition( *cmeta );

// Jump out of a region
trial::jump_out::add_definition( *cmeta );

// Jump anywhere in a region
trial::jump_around::add_definition( *cmeta );

// Individual grand canonical
trial::add_specie::add_definition( *cmeta );

delegate.add_input_delegate( cmeta );
