class induced_charge
!!!537008.cpp!!!	induced_charge()
: amx_()
, c_()
, cnew_()
, grid_( new icc_surface_grid )
, h_()
, hnew_()
, rip_()
, ripnew_()
, a_matrix_filename_( "amx.dat" )
, patch_filename_( "patch.dat" )
, sample_conx_()
, alfa_()
, epsw_()
, old_potential_()
, new_potential_()
{}
!!!537264.cpp!!!	make_evaluator(in param_set : std::map< std::string, std::string >, inout sim : simulator) : void
// const ion_channel::channel_system *psim = nullptr;
// psim = dynamic_cast< const ion_channel::channel_system * >( &sim );
// UTILITY_INPUT( nullptr != psim, "Induced charge evaluator is not suitable for this simulator.", core::strngs::evaluator_label() );
std::unique_ptr< induced_charge > cc(new induced_charge);

std::string unknown_parameter;

for (auto nvpair : param_set)
{
   if ( nvpair.first.find( core::strngs::fsdxf() ) != std::string::npos )
   {
      try
      {
         cc->set_dxf( boost::lexical_cast< double >( nvpair.second ) );
      }
      catch(boost::bad_lexical_cast const& err)
      {
         bool good_cast_to_double = false;
         UTILITY_INPUT(good_cast_to_double, "Cannot convert \"" + nvpair.second
                       + "\" to a real number as argument of parameter \"" + nvpair.first + "\""
                       , core::strngs::evaluator_label() );
      }
   }
   else if ( nvpair.first.find( core::strngs::fsdxw() ) != std::string::npos )
   {
      try
      {
         cc->set_dxw( boost::lexical_cast< double >( nvpair.second ) );
      }
      catch(boost::bad_lexical_cast const& err)
      {
         bool good_cast_to_double = false;
         UTILITY_INPUT(good_cast_to_double, "Cannot convert \"" + nvpair.second
                       + "\" to a real number as argument of parameter \"" + nvpair.first + "\""
                       , core::strngs::evaluator_label() );
      }
   }
   else if ( nvpair.first.find( core::strngs::fsnsub() ) != std::string::npos )
   {
      try
      {
         cc->set_nsub0( boost::lexical_cast< std::size_t >( nvpair.second ) );
      }
      catch(boost::bad_lexical_cast const& err)
      {
         bool good_cast_to_integer = false;
         UTILITY_INPUT(good_cast_to_integer, "Cannot convert \"" + nvpair.second
                       + "\" to a positive integer as argument of parameter \"" + nvpair.first + "\""
                       , core::strngs::evaluator_label() );
      }
   }
   else
   {
      if ( unknown_parameter.empty() )
      {
         unknown_parameter = nvpair.first;
      }
      else
      {
         unknown_parameter += " " + nvpair.first;
      }
   }
}
UTILITY_INPUT( unknown_parameter.empty(),"Unknown parameter(s) [" + unknown_parameter + "] for induced charge evaluator.", core::strngs::evaluator_label());

sim.add_evaluator( cc.release() );

!!!352176.cpp!!!	do_description(inout os : ostream) : void
os << " Compute the induced charge on the dielectric boundary surface\n";
os << " and the resulting electrostatic potential on the particles.\n\n";
os << " Computing the induced charge is made reasonalbly efficient\n";
os << " by fixing the position of the boundary surface during the\n";
os << " simulation and dividing the surface. Using these surface\n";
os << " elements allows the generation of a set of simultaneous equations\n";
os << " that relate the external field on the surface elements to the \n";
os << " induced charge on the elements. These equations can be \n";
os << " presolved and the solution matrix stored. Then at each\n";
os << " simulation step the electric field at each surface element \n";
os << " is calculated. Back-substituion into the solved simultaneous\n";
os << " equations then gives the induced surface charges. These are\n";
os << " then used to calculate the screened Coulomb potential between\n";
os << " each surface element and each particle.\n\n";
os << " Parameters:\n";
os << "   dxf : The approximate tile width (in Angstrom) in the direction\n";
os << "         around the rotation axis.\n";
os << "   dxw : The approximate tile width (in Angstrom) in the direction\n";
os << "         parallel and radial to the rotation axis.\n";
os << "  nsub : Integration parameter indicating how many sub-tiles a\n";
os << "         surface element is divided into during integration.\n\n";
os << " References for induced charge:\n";
os << "  R. Allen and J.-P. Hansen and S. Melchionna \"Electrostatic potential\n";
os << "    inside ionic solutions confined by dielectrics: a variational approach\"\n";
os << "    Phys Chem Chem Physics, 2001, 3, 4177-4186\n";
os << " This implementation based on:\n";
os << "  Dezso Boda, Dirk Gillespie, Wolfgang Nonner, Douglas Henderson, \n";
os << "   and Bob Eisenberg \"Computing induced charges in inhomogeneous \n";
os << "   dielectric media: Application in a Monte Carlo simulation of \n";
os << "   complex ionic systems\" Physical Review E, 2004, 69, 046702\n";


!!!352048.cpp!!!	do_write_document(inout wr : input_document, in ix : size_t) : void
wr[ ix ].add_entry( core::strngs::fsdxf(), this->grid_->get_dxf() );
wr[ ix ].add_entry( core::strngs::fsdxw(), this->grid_->get_dxw() );
wr[ ix ].add_entry( core::strngs::fsnsub(), this->grid_->get_nsub0() );
!!!538416.cpp!!!	surface_charge(in idx : size_t) : double
return this->grid_->area( idx ) * this->h_[ idx ] / this->grid_->deps( idx ) / std::sqrt( core::constants::electron_charge() * this->alfa_ );

!!!351280.cpp!!!	type_label_() : string
  return core::strngs::fsptch();
!!!417200.cpp!!!	write_data(in sim : simulator, inout os_log : ostream) : void
// save patch data and amx
std::stringstream os_pch;
this->grid_->write_grid( os_pch );
sim.get_reporter().get_sink().write( this->patch_filename_, os_pch.str() );

std::stringstream os_amx;
this->amx_.write_a_matrix( os_amx );
sim.get_reporter().get_sink().write( this->a_matrix_filename_, os_amx.str() );
!!!538160.cpp!!!	compute_potential(in spcs : specie, in ens : ensemble, inout changes : change_set, in start_index : size_t) : void
//
// Calculate the electric field at each tile. This
//   should be the same as the previous field adjusted
//   for the changes. We also calculate ripnew
//   distance arrays for any changes with new positions
//
// O(changes.size() * icc.size())
std::copy( this->c_.begin(), this->c_.end(), this->cnew_.begin() );

// Check size of ripnew
if ( this->ripnew_.size() < changes.size() )
{
   this->ripnew_.resize( changes.size(), std::vector< double >( this->size() ) );
}

//
//   C = (1/4.pi.eps) SUM{ (q_i dot(r_ip,u_i) / ||r_ip||^3 ) }
//
for (std::size_t cursor = 0; cursor != changes.size(); ++cursor)
{
   auto const& atom = changes[ cursor ];
   const double valency = spcs[ atom.key ].valency();
   if ( atom.do_old )
   {
      // Subtract field from old position from cnew
      // (that actually means we add to cnew)
      std::array< std::size_t, 2 > idx;
      idx[ 0 ] = atom.index;
      for ( std::size_t ipch = 0; ipch != this->size(); ++ipch )
      {
         idx[ 1 ] = ipch;
         // vector is from tile to charge
         const double rxki = atom.old_position.x - this->grid_->x( ipch );
         const double ryki = atom.old_position.y - this->grid_->y( ipch );
         const double rzki = atom.old_position.z - this->grid_->z( ipch );
         const double rip  = this->rip_( idx );
         const double rki  = rxki * this->grid_->ux( ipch )
                             + ryki * this->grid_->uy( ipch )
                             + rzki * this->grid_->uz( ipch );
         const double delta_eps { this->grid_->eps_in( ipch ) - this->grid_->eps_out( ipch ) };
         this->cnew_[ ipch ] += valency * rki * delta_eps /
                                (4 * core::constants::pi() * atom.eps_old * std::pow( rip, 3 ) );
      }
   }
   if ( atom.do_new )
   {
      // Add field from new position to cnew
      // (that actually means we subtract from cnew)
      for (std::size_t ipch = 0; ipch != this->size(); ++ipch )
      {
         const double rxki = atom.new_position.x - this->grid_->x( ipch );
         const double ryki = atom.new_position.y - this->grid_->y( ipch );
         const double rzki = atom.new_position.z - this->grid_->z( ipch );
         const double rip  = std::sqrt( std::pow( rxki, 2 ) + std::pow( ryki, 2 ) + std::pow( rzki, 2 ) );
         const double rki  = rxki * this->grid_->ux( ipch )
                             + ryki * this->grid_->uy( ipch )
                             + rzki * this->grid_->uz( ipch );
         const double delta_eps { this->grid_->eps_in( ipch ) - this->grid_->eps_out( ipch ) };
         this->cnew_[ ipch ] -= valency * rki * delta_eps /
                                (4 * core::constants::pi() * atom.eps_new * std::pow( rip, 3 ) );
         // Calculate and store distances between patches and particle
         this->ripnew_[ cursor ][ ipch ] = rip;
      }
   }
}
#ifdef CHECK_CH
std::vector< double > cchk( this->size(), 0.0 );
for (std::size_t ii = 0; ii != ens.size(); ++ii)
{
   const std::size_t ispec = ens.key( ii );
   if (ispec == particle::ensemble::nkey)
   {
      continue;
   }
   bool skip_index( false );
   switch( changes.size() )
   {
   case 2ul:
      if (ii == changes[ 1 ].index) continue;
      // fall through
   case 1ul:
      if (ii == changes[ 0 ].index) continue;
      break;
   default:
      for (size_t cursor = 0; cursor != changes.size(); ++cursor)
      {
         if (ii == changes[ cursor ].index)
         {
            skip_index = true;
            break;
         }
      }
      break;
   }
   if (skip_index) continue;
   const double valency = spcs[ ispec ].valency();
   const particle::coordinate pos( ens.position( ii ) );
   const double eps_ii = ens.eps( ii );
   //
   //  calculate ( r_ij . n_i ) / | r_ij |^3
   //
   //  NOTE: direction of vector r_ij is important for the
   //  dot product. The vector goes from tile i to particle j.
   for (std::size_t ipch = 0; ipch != this->size(); ++ipch )
   {
      const double rxki = pos.x - this->grid_->x( ipch );
      const double ryki = pos.y - this->grid_->y( ipch );
      const double rzki = pos.z - this->grid_->z( ipch );
      const double rip  = std::sqrt( std::pow( rxki, 2 ) + std::pow( ryki, 2 ) + std::pow( rzki, 2 ) );
      const double rki  = rxki * this->grid_->ux( ipch )
                          + ryki * this->grid_->uy( ipch )
                          + rzki * this->grid_->uz( ipch );
      // Scale by change in eps over boundary.
      const double delta_eps { this->grid_->eps_in( ipch ) - this->grid_->eps_out( ipch ) };
      cchk[ ipch ] -= valency * delta_eps * rki / (eps_ii * 4 * core::constants::pi() * std::pow( rip, 3 ) );
   }
}
for (auto const& atom : changes )
{
   if (atom.do_new)
   {
      const double valency = spcs[ atom.key ].valency();
      const particle::coordinate pos( atom.new_position );
      const double eps_ii = atom.eps_new;
      //
      //  calculate ( r_ij . n_i ) / | r_ij |^3
      //
      //  NOTE: direction of vector r_ij is important for the
      //  dot product. The vector goes from tile i to particle j.
      for (std::size_t ipch = 0; ipch != this->size(); ++ipch )
      {
         const double rxki = pos.x - this->grid_->x( ipch );
         const double ryki = pos.y - this->grid_->y( ipch );
         const double rzki = pos.z - this->grid_->z( ipch );
         const double rip  = std::sqrt( std::pow( rxki, 2 ) + std::pow( ryki, 2 ) + std::pow( rzki, 2 ) );
         const double rki  = rxki * this->grid_->ux( ipch )
                             + ryki * this->grid_->uy( ipch )
                             + rzki * this->grid_->uz( ipch );
         // Scale by change in eps over boundary.
         const double delta_eps { this->grid_->eps_in( ipch ) - this->grid_->eps_out( ipch ) };
         cchk[ ipch ] -= valency * delta_eps * rki / (eps_ii * 4 * core::constants::pi() * std::pow( rip, 3 ) );
      }
   }
}
bool pass_cchk = true;
for (size_t index = 0; index != cchk.size(); ++index)
{
   if (not utility::feq(cchk[index], this->cnew_[index]))
   {
      std::cerr << "INDEX: " << index;
      switch( changes.size() )
      {
      case 2ul:
         std::cerr << " CHANGE[1].index: " << changes[1].index;
         // fall through
      case 1ul:
         std::cerr << " CHANGE[0].index: " << changes[0].index;
         break;
      default:
         for (size_t cursor = 0; cursor != changes.size(); ++cursor)
         {
            std::cerr << " CHANGE[" << cursor << "].index: " << changes[0].index;
         }
         break;
      }
      std::cerr << " C_OLD: " << this->c_[index];
      std::cerr << " C_NEW: " << this->cnew_[index];
      std::cerr << " C_CHK: " << cchk[index];
      std::cerr << " DELTA: " << (cchk[index]- this->cnew_[index]) << "\n";
      pass_cchk = false;
   }
}
#endif // CHECK_CH
//
// Calculate the new H
//
std::copy( this->cnew_.begin(), this->cnew_.end(), this->hnew_.begin() );

this->amx_.back_substitute( this->hnew_ );

#ifdef CHECK_CH
bool pass_hchk = true;
this->amx_.back_substitute( cchk );

for (size_t index = 0; index != cchk.size(); ++index)
{
   if (std::abs(cchk[index] - this->hnew_[index]) > 1E-20)
   {
      std::cerr << "INDEX: " << index;
      switch( changes.size() )
      {
      case 2ul:
         std::cerr << " CHANGE[1].index: " << changes[1].index;
         // fall through
      case 1ul:
         std::cerr << " CHANGE[0].index: " << changes[0].index;
         break;
      default:
         for (size_t cursor = 0; cursor != changes.size(); ++cursor)
         {
            std::cerr << " CHANGE[" << cursor << "].index: " << changes[0].index;
         }
         break;
      }
      std::cerr << " H_OLD: " << this->h_[index];
      std::cerr << " H_NEW: " << this->hnew_[index];
      std::cerr << " H_CHK: " << cchk[index];
      std::cerr << " DELTA: " << (cchk[index]- this->hnew_[index]) << "\n";
      pass_cchk = false;
   }
}
UTILITY_ALWAYS(pass_cchk and pass_hchk, "Error computing C_new at index ");
#endif // CHECK_CH

//
// Calculate new potential
//
//   U = (1/4.pi.eps) SUM{ z_i . h_p . area_p / 2 ||r_ip|| }
//
// O(ens.size() * icc.size())
//
double old_potential = 0.0;
#ifdef CHECK_OLD_POTENTIAL
// cache charge density * area calculation.
std::valarray< double > surface_field( this->size() );
#endif // CHECK_OLD_POTENTIAL
double new_potential = 0.0;
// cache charge density * area calculation.
std::valarray< double > surface_field_new( this->size() );
for ( std::size_t ipch = 0; ipch != this->size(); ++ipch )
{
#ifdef CHECK_OLD_POTENTIAL
   surface_field[ ipch ] = this->h_[ ipch ] * this->grid_->area( ipch );
#endif // CHECK_OLD_POTENTIAL
   surface_field_new[ ipch ] = this->hnew_[ ipch ] * this->grid_->area( ipch );
}

// POTENTIAL OPENMP LOOP
for (std::size_t ii = 0; ii != ens.size(); ++ii)
{
   const std::size_t ispec( ens.key( ii ) );
   if (ispec != particle::ensemble::nkey )
   {
      std::array< std::size_t, 2 > idx;
      idx[ 0 ] = ii;
      const particle::specie & spc = spcs[ ispec ];
      const double valency = spc.valency();
      for ( std::size_t ipch = 0; ipch != this->size(); ++ipch )
      {
         idx[ 1 ] = ipch;
#ifdef CHECK_OLD_POTENTIAL
         old_potential += valency * surface_field[ ipch ] / ( 2 * this->rip_( idx ) );
#endif // CHECK_OLD_POTENTIAL
         new_potential += valency * surface_field_new[ ipch ] / ( 2 * this->rip_( idx ) );
#ifdef CHECK_RIP
         const particle::coordinate pos( ens.position( ii ) );
         const double rxki = pos.x - this->grid_->x( ipch );
         const double ryki = pos.y - this->grid_->y( ipch );
         const double rzki = pos.z - this->grid_->z( ipch );
         const double rip  = std::sqrt( std::pow( rxki, 2 ) + std::pow( ryki, 2 ) + std::pow( rzki, 2 ) );
         if (this->rip_( idx ) != rip)
         {
            std::cerr << "RIP ERROR: PATCH: " << ipch << " INDEX: " << ii;
            std::cerr << "RIP(P,I): " << this->rip_( idx );
            std::cerr << "RIP: " << rip;
            std::cerr << "DELTA: " << (this->rip_( idx ) - rip) << "\n";
         }
#endif // CHECK_RIP
      }
   }
}
// Remove effect of changes from new_potential
for (std::size_t cursor = 0; cursor != changes.size(); ++cursor)
{
   auto const& atom = changes[ cursor ];
   const double valency = spcs[ atom.key ].valency();
   std::array< std::size_t, 2 > idx;
   if ( atom.do_old )
   {
      // Subtract potential from old position
      idx[ 0 ] = atom.index;
      for ( std::size_t ipch = 0; ipch != this->size(); ++ipch )
      {
         idx[ 1 ] = ipch;
         new_potential -= valency * surface_field_new[ ipch ] / (2 * this->rip_( idx ) );
      }
   }
   if ( atom.do_new )
   {
      // Add potential from new position
      for (std::size_t ipch = 0; ipch != this->size(); ++ipch )
      {
         new_potential += valency * surface_field_new[ ipch ] / (2 * this->ripnew_[ cursor ][ ipch ] );
      }
   }
}
// Scale energy to correct units (k_BT) + SI
new_potential *= this->alfa_;
#ifdef CHECK_OLD_POTENTIAL
old_potential *= this->alfa_;
if (std::abs(this->old_potential_ - old_potential) > 5E-16)
{
   std::cerr << "OLD POTENTIAL MISMATCH: CACHE: " << this->old_potential_;
   std::cerr << " CALC: " << old_potential;
   std::cerr << " DELTA: " << (this->old_potential_ - old_potential) << "\n";
}
#endif // CHECK_OLD_POTENTIAL
old_potential = this->old_potential_;
this->new_potential_ = new_potential;
// Set potential energy on first atom in change set
changes.begin()->energy_old += old_potential;
changes.begin()->energy_new += new_potential;
!!!539056.cpp!!!	compute_total_potential(in sim : simulator) : double
return this->old_potential_;
!!!538032.cpp!!!	compute_initial_c_h(in spcs : specie, in ens : ensemble) : void
//
// Calculate the electric field at each tile.
//
// O(ens.size() * icc.size())
//
// Convert energy units
// Check size of rip
if (this->rip_.shape()[0] < ens.max_size() or
      this->rip_.shape()[1] < this->size())
{
   this->rip_.resize( boost::extents[ens.max_size()][this->size()] );
}
if ( this->c_.size() < this->amx_.size() )
{
   this->c_.resize( this->amx_.size() );
}
if ( this->h_.size() < this->amx_.size() )
{
   this->h_.resize( this->amx_.size() );
}
if ( this->cnew_.size() < this->amx_.size() )
{
   this->cnew_.resize( this->amx_.size() );
}
if ( this->hnew_.size() < this->amx_.size() )
{
   this->hnew_.resize( this->amx_.size() );
}

std::fill( this->c_.begin(), this->c_.end(), 0.0 );
//
//   C = (1/4.pi.eps) SUM{ (q_i dot(r_ip,u_i) / ||r_ip||^3 ) }
//
for (std::size_t ii = 0; ii != ens.size(); ++ii)
{
   const std::size_t ispec = ens.key( ii );
   if (ispec == particle::ensemble::nkey)
   {
      continue;
   }
   const double valency = spcs[ ispec ].valency();
   const particle::coordinate pos( ens.position( ii ) );
   const double eps_ii = ens.eps( ii );
   std::array< std::size_t, 2 > idx;
   idx[ 0 ] = ii;
   //
   //  calculate ( r_ij . n_i ) / | r_ij |^3
   //
   //  NOTE: direction of vector r_ij is important for the
   //  dot product. The vector goes from tile i to particle j.
   for (std::size_t ipch = 0; ipch != this->size(); ++ipch )
   {
      idx[ 1 ] = ipch;
      const double rxki = pos.x - this->grid_->x( ipch );
      const double ryki = pos.y - this->grid_->y( ipch );
      const double rzki = pos.z - this->grid_->z( ipch );
      const double rip  = std::sqrt( std::pow( rxki, 2 ) + std::pow( ryki, 2 ) + std::pow( rzki, 2 ) );
      const double rki  = rxki * this->grid_->ux( ipch )
                          + ryki * this->grid_->uy( ipch )
                          + rzki * this->grid_->uz( ipch );
      // Scale by change in eps over boundary.
      const double delta_eps{ this->grid_->eps_in( ipch ) - this->grid_->eps_out( ipch ) };
      this->c_[ ipch ] -= valency * delta_eps * rki / (eps_ii * 4 * core::constants::pi() * std::pow( rip, 3 ) );
      // Calculate and store distances between patches and particle
      this->rip_( idx ) = rip;
   }
}

//
// Calculate the new H
//
std::copy( this->c_.begin(), this->c_.end(), this->h_.begin() );
this->amx_.back_substitute( this->h_ );

// cache charge density * area calculation.
std::valarray< double > surface_field( this->size() );
for ( std::size_t ipch = 0; ipch != this->size(); ++ipch )
{
   surface_field[ ipch ] = this->h_[ ipch ] * this->grid_->area( ipch );
}
this->old_potential_ = 0.0;
// POTENTIAL OPENMP LOOP
for (std::size_t ii = 0; ii != ens.size(); ++ii)
{
   const std::size_t ispec( ens.key( ii ) );
   if (ispec != particle::ensemble::nkey )
   {
      std::array< std::size_t, 2 > idx;
      idx[ 0 ] = ii;
      const particle::specie & spc = spcs[ ispec ];
      const double valency = spc.valency();
      for ( std::size_t ipch = 0; ipch != this->size(); ++ipch )
      {
         idx[ 1 ] = ipch;
         this->old_potential_ += valency * surface_field[ ipch ] / ( 2 * this->rip_( idx ) );
      }
   }
}
this->old_potential_ *= this->alfa_;
!!!537904.cpp!!!	compute_total_surface_charge(out charget : double, out areat : double) : void
areat = 0.0;
charget = 0.0;
for (std::size_t ipch = 0; ipch != this->size(); ++ipch)
{
  const double area =  this->grid_->area( ipch );
  areat += area;
  charget += area * this->h_[ipch];
}
!!!410416.cpp!!!	create_amx(in zl1 : double, in rl1 : double, in rl4 : double, in rlvest : double, in rlmemb : double, in epsw : double, in epspr : double, inout os_log : ostream) : void
UTILITY_CHECK( this->grid_->empty(), "Cannot define grid twice");

//       |theta1 = pi/2
// theta2|     theta0 = 0.0
//  ---- z ----- theta4 = 2pi
// = pi  |
//       | theta3 = 3/2 pi
// d_theta = pi/2
const double theta0( 0.0);
const double theta1( core::constants::pi() / 2);
const double theta2( core::constants::pi() );
const double theta3( core::constants::pi() * 3.0/2.0 );
const double theta4( 2 * core::constants::pi() );

// Get geometry data
const double geom_zl1( zl1 );
const double geom_rl1( rl1 );
const double geom_rl2( rl1 + rlvest );
const double geom_rlvest( rlvest );
const double geom_zl2( zl1 + rlvest );
const double geom_rl3( rl4 - rlmemb );
const double geom_zl3( zl1 + rlvest - rlmemb );
const double geom_rl4( rl4 );
const double geom_rlcurv( rlmemb );

// Delta permittivity in channel is used here in case
// future work adds code to put second permittivity
// zone inside the channel.
const double epsch{ epsw };

// Minimum number of tiles along a dimension
const int channel_min_z_tiles (10);
const int outer_min_z_tiles (4);
const int min_r_tiles (16);

// Channel pore cylinder
this->grid_->add_line( -geom_zl1, geom_zl1, geom_rl1, epsch, epsw, channel_min_z_tiles, min_r_tiles, true, os_log );

// Hi-z inner arc
this->grid_->add_arc( geom_zl1, geom_rl2, geom_rlvest, theta3, theta4, epsch, epsw, outer_min_z_tiles, min_r_tiles, true, os_log );

// hi-z wall
this->grid_->add_wall( geom_zl2, geom_rl2, geom_rl3, epspr, epsw, 0, 0, true, os_log );

// Hi-z outer arc
this->grid_->add_arc( geom_zl3, geom_rl3, geom_rlcurv, theta0, theta1, epspr, epsw, outer_min_z_tiles, min_r_tiles, true, os_log );

// Channel protein outer cylinder
this->grid_->add_line( -geom_zl3, geom_zl3, geom_rl4, epspr, epsw, outer_min_z_tiles, min_r_tiles, false, os_log );

// lo-z outer arc
this->grid_->add_arc( -geom_zl3, geom_rl3, geom_rlcurv, theta1, theta2, epspr, epsw, outer_min_z_tiles, min_r_tiles, true, os_log );

// lo-z wall
this->grid_->add_wall( -geom_zl2, geom_rl2, geom_rl3, epspr, epsw, 0, 0, false, os_log );

// lo-z inner arc
this->grid_->add_arc( -geom_zl1, geom_rl2, geom_rlvest, theta2, theta3, epsch, epsw, outer_min_z_tiles, min_r_tiles, true, os_log );

os_log << "Grid builder complete\n";

this->amx_.compute_amx( *this->grid_, os_log );
this->amx_.lu_decompose_amx( os_log );
!!!421040.cpp!!!	create_amx(inout grid : icc_surface_grid, inout os_log : ostream) : void
UTILITY_CHECK( this->grid_->empty(), "Cannot define grid twice");

std::swap( this->grid_, grid );

this->amx_.compute_amx( *this->grid_, os_log );
this->amx_.lu_decompose_amx( os_log );
!!!538544.cpp!!!	on_conclude_trial(in changes : change_set) : void
if (changes.accept())
{
   std::swap(this->h_, this->hnew_);
   std::swap(this->c_, this->cnew_);
   this->old_potential_ = this->new_potential_;
   for (std::size_t cursor = 0; cursor != changes.size(); ++cursor)
   {
      auto const& atom = changes[ cursor ];
      std::array< std::size_t, 2 > idx;
      idx[ 0 ] = atom.index;
      for (std::size_t ipch = 0; ipch != this->size(); ++ipch)
      {
         idx[ 1 ] = ipch;
         this->rip_( idx ) = this->ripnew_[ cursor ][ ipch ];
      }
   }
}
!!!537776.cpp!!!	prepare(in sim : simulator) : void
if (this->size() == 0)
{
   this->set_alfa( sim.get_temperature() );

   this->epsw_ = sim.get_permittivity();

   // Evaluator needs to be initialized
   //
   std::ostream& os_log( std::cout );

   // No patch/amx files or not for this sim
   if ( not this->read_data( sim, os_log ) )
   {
      os_log << "Unable to read patch data and A matrix from file.\n";

      const ion_channel::channel_system *psim = nullptr;
      psim = dynamic_cast< const ion_channel::channel_system * >( &sim );
      UTILITY_ALWAYS( nullptr != psim, "Simulator is not suitable for this evaluator" );
      const ion_channel::channel_system & cellsim( *psim );

      // create A matrix.  Need to down cast simulator to be
      // able to get protein geometry.
      this->create_amx( cellsim, os_log );

      this->write_data( sim, os_log );
   }
}
// (Re)Generate the initial rip, c and h vectors
this->compute_initial_c_h( sim.get_species(), sim.get_ensemble() );

!!!417328.cpp!!!	read_data(in sim : simulator, inout os_log : ostream) : bool
UTILITY_REQUIRE(this->size() == 0, "Attempt to overwrite existing A matrix data.");

// Check for available patch/amx files.
bool amx_read = false;
{
   auto & sink = sim.get_reporter().get_sink();
   std::string buffer;
   if ( sink.read( this->patch_filename_, buffer ) )
   {
      std::stringstream is_pch( buffer );
      if ( this->grid_->read_grid( is_pch ) )
      {
         os_log << "Read patch data file " << this->patch_filename_ << "\n";
         buffer.clear();
         if( sink.read( this->a_matrix_filename_, buffer ) )
         {
            std::stringstream is_amx( buffer );
            amx_read = this->amx_.read_a_matrix( is_amx );
            if (amx_read)
            {
               os_log << "Read A matrix file " << this->a_matrix_filename_ << "\n";
            }
            else
            {
               os_log << "Unable to process file \"" << this->a_matrix_filename_ << "\"\n";
            }
         }
         else
         {
            os_log << "File \"" << this->a_matrix_filename_ << "\" does not exist\n";
         }
      }
      else
      {
         os_log << "Unable to process file \"" << this->patch_filename_ << "\"\n";
      }
   }
   else
   {
      os_log << "File \"" << this->patch_filename_ << "\" does not exist\n";
   }
}
return amx_read;

!!!410544.cpp!!!	set_alfa(in temperature : double) : void
this->alfa_ = core::constants::electron_charge() / std::sqrt(4 * core::constants::pi() * core::constants::epsilon_0() * core::constants::boltzmann_constant() * temperature * core::constants::angstrom() );

!!!537648.cpp!!!	dump(in fname : string) : void
std::ofstream dos( fname );

dos << "# alfa : " << this->alfa_ << "\n";
dos << "# patch name : " << this->patch_filename_ << "\n";
dos << "# amx name : " << this->a_matrix_filename_ << "\n";
dos << "# connection : " << (this->sample_conx_.connected() ? " true" : "false" ) << "\n";
dos << "#  C  CNEW H HNEW RIPNEW\n";
for ( std::size_t ii = 0; ii != this->size(); ++ii )
{
   dos << c_[ ii ] << " " << cnew_[ ii ] << " " 
      << h_[ ii ] << " " << hnew_[ ii ] << " "
      << ripnew_[ 0 ][ ii ] << "\n";
}

dos << "# RIP\n";
std::array< std::size_t, 2 > idx;
for ( std::size_t ii = 0; ii != this->rip_.shape()[0]; ++ii)
{
   idx[ 0 ] = ii;
   for (std::size_t ipch = 0; ipch != this->size(); ++ipch)
   {
      idx[ 1 ] = ipch;
      dos << ii << " " << ipch << " " << this->rip_( idx ) << "\n";
   }
}
dos << "# A MATRIX\n";
this->amx_.write_a_matrix( dos );
dos << "# GRID\n";
this->grid_->write_grid( dos );

