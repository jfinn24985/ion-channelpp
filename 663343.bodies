class metropolis_sampler
!!!487601.cpp!!!	description(inout os : ostream) : void
os << "[sampler] " << this->type_label_() << "\n";
os << " Sample the metropolis factor of each trial\n";
!!!175025.cpp!!!	make_sampler(in param_set : string, inout sim : simulator) : void
UTILITY_INPUT(param_set.empty(),"The "+type_label_()+" sampler requires no parameters.",core::strngs::sampler_label());
boost::shared_ptr< base_sampler > smplr( new metropolis_sampler );
sim.get_reporter().share_inner_observer( smplr );
!!!1162543.cpp!!!	on_inner_loop(in a_trial : change_set) : void
if (not a_trial.fail())
{
  // Collect factor for all trials that reached Metropolis/Hastings acceptance
  // check.
  this->boltzmann_factor_.append(a_trial.metropolis_factor ());
  this->energy_change_.append(std::exp(-a_trial.energy ()));
}
else
{
  // For all trials that failed before Metropolis/Hastings acceptance
  // check we accept the previous trial again. The failures are due to 
  // things like particle-particle or cutoff distance overlap.
  this->boltzmann_factor_.append(0.0);
  // The difference in energy will be zero:
  this->energy_change_.append(1.0);
}
!!!174769.cpp!!!	on_report(in sys : simulator, inout log : ostream, inout reporter : report_manager) : void
log << this->type_label()
    << " : P_mean       = " << this->boltzmann_factor_.mean() << " var = "
    << this->boltzmann_factor_.variance() << "\n";
log << std::string(this->type_label().size(),' ')
    << " : -log(P_mean) = " << -std::log(this->energy_change_.mean()) << " var = "
    << std::log(this->energy_change_.variance()) << "\n";
log << core::strngs::horizontal_bar() << "\n";
!!!174641.cpp!!!	prepare(inout sim : simulator) : void
this->boltzmann_factor_.reset();
this->energy_change_.reset();
!!!217136.cpp!!!	do_write_document(inout wr : input_document, in ix : size_t) : void
wr[ ix ].add_entry( core::strngs::fstype(), this->type_label_() );
