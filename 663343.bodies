class metropolis_sampler
!!!1556016.cpp!!!	add_definition(inout meta : sampler_meta) : void
std::string desc( "Monitor the Metropolis factor generated for each trial. Failed trials have a factor of 0. This is used to monitor the simulation and is not an outcome of the simulation." );
std::unique_ptr< tracked_definition > result( new tracked_definition( type_label_(), desc, &metropolis_sampler::make_sampler ) );
// no extra parameters
meta.add_tracked_type( result );

!!!487601.cpp!!!	description(inout out : ostream) : void
out << " " << this->type_label_() << "\n";
out << " " << std::string( this->type_label_().size(), '-' ) << "\n";
out << "    Sample the metropolis factor of each trial\n";
!!!672688.cpp!!!	get_value() : boost::any
boost::any result = std::make_pair( this->boltzmann_factor_, this->energy_change_ );
return result;
!!!175025.cpp!!!	make_sampler(in param_set : string) : tracked_observable
UTILITY_REQUIRE( param_set.empty(), "This sampler requires no parameters." );
boost::shared_ptr< tracked_observable > smplr(new metropolis_sampler);
return smplr;
!!!1162543.cpp!!!	on_trial_end(in trial : change_set) : void
if( not this->energy_.is_sampling() )
{
  this->energy_.begin_sample();
}
if( not trial.fail() )
{
  // Collect factor for all trials that reached Metropolis/Hastings acceptance
  // check.
  this->boltzmann_factor_.append( trial.metropolis_factor() );
  const double tmp = std::exp( -trial.energy() );
  this->energy_change_.append( tmp );
  if( not this->energy_.auto_extendable() and not this->energy_.in_range( tmp ) )
  {
    // ignore values outside range if not extendable
    return;
  }
  this->energy_.sample_datum( tmp );
}
else
{
  // For all trials that failed before Metropolis/Hastings acceptance
  // check we accept the previous trial again. The failures are due to
  // things like particle-particle or cutoff distance overlap.
  this->boltzmann_factor_.append( 0.0 );
  // The difference in energy will be zero:
  this->energy_change_.append( 1.0 );
  this->energy_.sample_datum( 1.0 );
}

!!!1556144.cpp!!!	on_sample(in pman : particle_manager, in gman : geometry_manager, in eman : evaluator_manager) : void
this->energy_.end_sample();
!!!174769.cpp!!!	on_report(inout out : ostream, inout sink : base_sink) : void
out << this->get_label()
    << " : P_mean       = " << this->boltzmann_factor_.mean() << " var = "
    << this->boltzmann_factor_.variance() << "\n";
out << std::string(this->get_label().size(),' ')
    << " : -log(P_mean) = " << -std::log(this->energy_change_.mean()) << " var = "
    << std::log(this->energy_change_.variance()) << "\n";
out << core::strngs::horizontal_bar() << "\n";
// Write out energy histogram data
if( this->energy_.count() > 0 )
{
  std::string label( metropolis_sampler::type_label_() + ".dat" );
  // Lock histogram to present size
  if( this->energy_.auto_extendable() )
  {
    this->energy_.auto_extendable( false );
  }
  auto & data = this->energy_;
  if( not sink.has_dataset( label ) )
  {
    std::unique_ptr< observable::output_series >definition{ new observable::output_series( label, false ) };
    definition->set_title( "Energy distribution histogram" );
    {
      std::unique_ptr< observable::output_field > field( new observable::digitizer_output( "EMIN EMID EMAX", "e^-E e^-E e^-E", data.axis(), observable::digitizer_output::USE_ALL ) );
      definition->push_back_field( std::move( field ) );
    }
    {
      std::unique_ptr< observable::output_field > field( new observable::mean_variance_output( "P.mean P.var", "Rate Rate2" ) );
      definition->push_back_field( std::move( field ) );
    }
    sink.add_dataset( std::move( definition ) );
  }
  {
    std::unique_ptr< observable::output_series_datum > datum( new observable::output_series_datum{ 0ul, new utility::estimate_array( std::move( data.release_data() ) ) } );
    sink.receive_data( label, std::move( datum ) );
  }
}
!!!174641.cpp!!!	prepare(in pman : particle_manager, in gman : geometry_manager, in eman : evaluator_manager, in sman : report_manager) : void
this->boltzmann_factor_.reset();
this->energy_change_.reset();
this->energy_.reset();
!!!217136.cpp!!!	do_write_document(inout wr : input_document, in ix : size_t) : void
wr[ ix ].add_entry( core::strngs::fstype(), this->type_label_() );
