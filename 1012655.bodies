class input_delegater
!!!1917615.cpp!!!	read_input(inout reader : input_base_reader) : void
typedef std::map< std::string, boost::shared_ptr< input_base_meta > >::iterator iterator;
UTILITY_REQUIRE (not input_delegate_map_.empty(), "Attempt to read input file before creating delegate map");

// Assume current is max
this->file_version_ = max_version_;

// The labels of included sections recorded as they appear
// so we can check for missing sections at the end of reading
// the input file.
std::set< std::string > included_sections;

// work through input document.
try
{
   while (reader.next())
   {
      if (strngs::fsfver() == reader.name())
      {
         // Looking for top-level option names:
         //  'filever' input file version
         // check is not negative by looking at string
         UTILITY_INPUT( std::isdigit( reader.value()[0] )
                        , "Non-numeric or negative file version (" + reader.value() + ") is invalid"
                        , strngs::fschnl());
         
         file_version_ = boost::lexical_cast < size_t > (reader.value());
         UTILITY_INPUT( file_version_ <= max_version_
                        , "File version " + reader.value() + " is too recent for this program"
                        , strngs::fschnl());
      }
      else
      {
         // Looking for section names:
         iterator known_section = input_delegate_map_.find( reader.name () );
         UTILITY_INPUT( known_section != input_delegate_map_.end()
                        , "Name " + reader.name () + " is not a valid input section label"
                        , strngs::fschnl() );
         // Add to the section_list.
         UTILITY_INPUT( known_section->second->multiple() or 0 == included_sections.count (reader.name ())
                           , "Input file section " + reader.name() + " appears more than once"
                           , strngs::fschnl());
         included_sections.insert( reader.name () );

         // Get delegate to read its input section
         known_section->second->read_section( reader );

         // check reader is at 'end', the delegate should have thrown an error
         // otherwise.
         UTILITY_CHECK( reader.name() == strngs::fsend()
                        , "Reader delegate should have read to an 'end' label.");
      }
   }
}
catch (std::runtime_error const& err)
{
   std::stringstream ss;
   ss << "Error in input file " << reader.current_filename()
             << " at line " << reader.current_line_number() << "\n" << err.what();
   throw std::runtime_error( ss.str() );
}
// Check for required input sections
for (auto & itr : input_delegate_map_)
{
   if (itr.second->required ())
   {
      UTILITY_INPUT( 0 != included_sections.count (itr.first)
                     , "Missing input file section: " + itr.first
                     , strngs::fschnl());
   }
}
