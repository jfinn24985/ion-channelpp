class simple_storage_manager
!!!2126512.python!!!	do_description(inout os : ostream) : void
from constants import constants
constants.description( os )
print >>os, "[simulation]"
print >>os, "        volume :", self.cell_region_.volume(-1), "Anstrom{3}"
print >>os, "  permittivity :", self.cell_region_.permittivity()
print >>os, " beta (1/k_BT) :", (1.0/(constants.boltzmann_constant()*self.temperature_kelvin_)), " J{-1}"
print >>os, "  temperature :", self.temperature_kelvin_, " K"
print >>os, " specie count :", self.specie_count()
print >>os, " - loop sizes"
print >>os, "       thermal :", self.equilibration_interval_
print >>os, "    production :", self.production_interval_
print >>os, "         inner :", self.inner_loop_size_
print >>os, " current index :", self.outer_loop_index_
print >>os, " - other parameters"
print >>os, " starting particle count :", self.target_number_of_particles()
print >>os, "          ionic strength :", self.ionic_strength()
print >>os, "             trial rates :", self.rates_
print >>os, "              move delta :", self.delta
for spc in self.species_:
  spc.description( os )
print >>os, "[choices] trial types and rates"
print >>os, " %6s %4s %7s" % ( "type", "spc.", "rate(%)" )
for choice in self.choices_:
  print >>os, " %6s %4s %7.2f" % ( choice.label(), self.species_[choice.specie_key()].label(), choice.probability()*100.0 )
for observable in self.observables_:
  observable.description( os )
for potl in self.evaluators_:
  potl.description( os )
self.ensemble_.description( os )

!!!2126640.cpp!!!	do_write_document(inout wr : input_document, in ix : size_t) : void
wr[ ix ].add_entry( core::strngs::fstype(), this->type_label_() );
!!!2264112.cpp!!!	main(in argc : int, in argv : char, inout sim : simulation) : bool
// NOTE: The input decoders are not required to check that
// the final system is valid.
std::stringstream log;
try
{
  switch( this->process_command_line( argc, argv, log ) )
  {
  case 0:
    // Bad command line options.
    this->system_log() << log.rdbuf();
    return false;
  case 1:
    // Help message requested.
    this->system_log() << log.rdbuf();
    return true;
  case 2:
    // Read input file.
  {
    auto reader = this->open_input();
    log << core::strngs::horizontal_bar() << "\n"
        << "Reading input file \""
        << reader->current_filename() << "\"\n";
    sim.read_input( *reader );
    log << core::strngs::horizontal_bar() << "\n";
    // Now our log is well defined, so write temporary log out.
    this->get_log() << log.rdbuf();
    sim.set_random_seed( this->get_seed_value() );
    sim.generate_simulation();
    break;
  }
  case 3:
  // Restart from checkpoint
  {
    if( not sim.restart( log ) )
    {
      this->system_log() << log.rdbuf() << "\n";
      return false;
    }
    log << core::strngs::horizontal_bar() << "\n";
    // Now our log is well defined, so write temporary log out.
    this->get_log() << log.rdbuf();
    break;
  }
  default:
    // Logic error
    {
      UTILITY_CHECK( false, "Should never get here!" );
      break;
    }
  }
}
catch(const std::runtime_error &err)
{
  // Crashing...
  this->system_log() << log.rdbuf() << "\n" << err.what() << "\n";
  return false;
}
// Initialisation from input complete. (We should not get any
// input errors after this point.
return sim.main();
!!!2128304.cpp!!!	add_definition(inout meta : storage_meta) : void
std::string desc( "Test storage manager." );
std::unique_ptr< storage_definition > result( new storage_definition( type_label_(), desc ) );
// no extra parameters
meta.add_type( result );
