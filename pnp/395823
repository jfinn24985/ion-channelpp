format 75
"geometry (under development)" // geometry (under development)
  revision 8
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  stereotype "library"
  cpp_h_dir "geometry"
  cpp_src_dir "geometry"
  cpp_namespace "geometry"
  package_ref 288559 // Geometry

  package_ref 309167 // environment

  classview 461743 "geometry classes"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 868527 "Geom"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 940975 // geom (<directional composition>)
	relation 911663 *-->
	  a role_name "geom" class_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 940975 // geom (<directional composition>)
	  b parent class_ref 868527 // Geom
      end

      attribute 1089583 "rbulk"
	const_attribute public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1089711 "zbulk1"
	const_attribute public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1089839 "zbulk2"
	const_attribute public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1089967 "vbulk"
	const_attribute public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 1530415 "volblk"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1530543 "lenblk"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1530671 "gz_bin"
	const public explicit_return_type "size_t"
	nparams 1
	  param in name "zval" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1530799 "inregn"
	const public explicit_return_type "void"
	nparams 3
	  param in name "zval" explicit_type "double"
	  param in name "spec" explicit_type "size_t"
	  param inout name "ireg" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} & ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 876591 "geom"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Geometry factory

 Data from [ionch/geom] common block

 Coordinate 0,0,0 is centre of MC space, halfway along channel.
 Channel defined to lie along the z-axis.
 
 Assumptions:
 + protein z-axis extent === membrane z-axis extent

  + consequence: cylinder volumes in protein extent only consider
  volume from axis to protein, ignoring possibility of volume from
  protein to env edge that might not be within the membrane.  !EXTEND!
  Calculating this extra volume is a possible extension


 Parameters for geom defined in the main input file.
 
 rtargc   -- [t/f] whether to calculate bulk using ntrg/ctrg
 ntrg     -- The target number of ion particles (eg 300 [N])
 ctrg	  -- An approximation for the average concentration (eg. 0.1 [M])
 filename -- geom1.inp

 Geometry sets:
 - bulk      1 (global inclusion zone)
 - region    * (inclusion zones, may be overlapping)
 - membrane  1 (exclusion box sub-zone)
 - protein   1 (exclusion shaped sub-zone) (uses bounding box)

 geometry file format:

 [bulk|region|membrane|protein] # labels start subsection containing:
   point [0123] x y --> extension direction SEWN
   qarc [01] rad --> extension direction 0 = longer rad, 1 = shorter
                   rad, (angle == pi on 2)
   box [01] x1 y1 x2 y2 --> extension direction 0 = outside, 1 = inside
 end
 
 The 'protein' and 'region's are required elements.  'bulk' is
 required if rtargc was false.  'membrane' is completely optional
 at this point as it will be redefined to the z-extent of the protein
 and a radial that intersects the protein at the maximal extents.

"
      attribute 1116463 "volume"
	private explicit_type "double"
	multiplicity "[RegionSize]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Approximate volumes.

 bulk = bulk_total - membrane"
      end

      attribute 1116591 "left"
	private explicit_type "double"
	multiplicity "[RegionSize + 1]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " +1 for membrane "
      end

      attribute 1116719 "right"
	private explicit_type "double"
	multiplicity "[RegionSize + 1]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1116847 "radial"
	private explicit_type "double"
	multiplicity "[RegionSize]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      classrelation 952495 // protein_zone (<unidirectional association>)
	relation 923183 --->
	  a role_name "protein_zone" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    python "${comment}${self}${name} = ${value}
"
	    classrelation_ref 952495 // protein_zone (<unidirectional association>)
	  b parent class_ref 879407 // ion_ring
      end

      attribute 1116975 "filename"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1117103 "ctarget_bulk"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " If ctarget_bulk > 0 then use this for bulk dimensions instead of
 from file in defgeo.  Default is -1., but is set when targc is
 true in main input file"
      end

      classrelation 952751 // naked_ring (<directional composition>)
	relation 923439 *-->
	  stereotype "std::unique_ptr"
	  a role_name "naked_ring" private
	    comment " Object contains the native protein definition without modification
 for specie"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 952751 // naked_ring (<directional composition>)
	  b parent class_ref 879535 // patch_ring
      end

      operation 1578031 "geom"
	private explicit_return_type ""
	nparams 1
	  param in name "" explicit_type "geom"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1578159 "operator ="
	private explicit_return_type "geom"
	nparams 1
	  param inout name "" explicit_type "geom"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1578287 "geom"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "spec" explicit_type "ion_specie"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : volume ()
    , left ()
    , right ()
    , radial ()
    , protein_zone ()
    , spec_1 (spec)
    , filename ()
    , ctarget_bulk (-1.)
    , naked_ring (new patch_ring)
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1578415 "~geom"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1578543 "defgeo"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param in name "geomfilename" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
//<       subroutine defgeo >

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Read in the geometry"
      end

      operation 1578671 "cylinder_volume"
	preserve_cpp_body_indent const public explicit_return_type "double"
	nparams 3
	  param in name "a_spc" explicit_type "uint8_type"
	  param in name "z0" explicit_type "double"
	  param in name "z1" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Determine the volume between two z-axis positions. This
// method accounts for the volume excluded by protein and
// membrane.

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Determine the volume between two z-axis positions.  This method
 accounts for the volume excluded by protein and membrane."
      end

      operation 1578799 "do_readin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "scnr" explicit_type "reader"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// defgeo_ 

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Geom part of readin"
      end

      operation 1578927 "do_readin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1579055 "in_region"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 4
	  param in name "a_reg" explicit_type "uint8_type"
	  param in name "ispec" explicit_type "uint8_type"
	  param in name "z" explicit_type "double"
	  param in name "r" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Is particle of specie in a region?

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Is particle of specie in a region?
     
     This method only tests whether the particle is within the
     region bounds it does not test if the particle is in a valid
     position."
      end

      operation 1579183 "protein_shape"
	const cpp_inline public explicit_return_type "patch_ring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return *naked_ring;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Get object containing the unadjusted protein shape."
      end

      operation 1579311 "protein_left"
	preserve_cpp_body_indent const public explicit_return_type "double"
	nparams 1
	  param in name "ispec" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1579439 "protein_right"
	preserve_cpp_body_indent const public explicit_return_type "double"
	nparams 1
	  param in name "ispec" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//* End of region for a ion_specie.
//
// This is the highest z-value a ion_specie
// can have and be completely contained in the region.  

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1579567 "region_left"
	preserve_cpp_body_indent const public explicit_return_type "double"
	nparams 2
	  param in name "a_reg" explicit_type "uint8_type"
	  param in name "ispec" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//* Start of region for a ion_specie.
//
//This is the lowest z-value a ion_specie
//can have and be completely contained in the region.  

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Get object containing the protein shape adjusted for a specie.
     
    ion_ring const& protein_shape (uint8_type ispec) const
    {
        return *(protein_zone)[ispec];
    }
 Data from [ionch/bulk] common block 
* Distance from bulk left to channel end 
    double zbulk1 (uint8_type ispec) const
    {
        /* why 0.3 here? */
        /*<       zbulk1 = zl(2) + 0.3*(zl(4)-zl(2)) >*/
        const double l1 = protein_left (ispec);
        const double l2 = region_left (BulkRegion, ispec);
        return l1 + (l2 - l1) * .3;
    }
* Distance from 0 to end of bulk region 
    double zbulk2 (uint8_type ispec) const
    {
        /* why 0.3 here? */
        /*<       zbulk2 = zl(4) - 0.3*(zl(4)-zl(2)) >*/
        const double l1 = protein_left (ChannelRegion, ispec);
        const double l2 = region_left (BulkRegion, ispec);
        return l2 - (l2 - l1) * .3;
    }
* Radius of bulk region 
    double rbulk (uint8_type ispec) const
    {
        /* why 0.3 here? */
        /*<       rbulk  = 2.0*rl(5)/3.0 >*/
        return region_radial (BulkRegion, ispec) * 2. / 3.;
    }
 New accessor methods for region geometry 
* Start of region for a ion_specie.  
     
     This is the lowest z-value a ion_specie can have and be
     completely contained in the region.  "
      end

      operation 1579695 "region_left"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "a_reg" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        GRS400_REQUIRE (a_reg < RegionSize + 1, \"region index out of range.\");
        return left[a_reg];
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1579823 "region_right"
	preserve_cpp_body_indent const public explicit_return_type "double"
	nparams 2
	  param in name "a_reg" explicit_type "uint8_type"
	  param in name "ispec" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//* End of region for a ion_specie.
//
// This is the highest z-value a ion_specie
// can have and be completely contained in the region.  

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* End of region for a ion_specie.  
     
     This is the highest z-value a ion_specie can have and be
     completely contained in the region.  "
      end

      operation 1579951 "region_right"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "a_reg" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        GRS400_REQUIRE (a_reg < RegionSize + 1, \"region index out of range.\");
        return right[a_reg];
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1580079 "region_radial"
	preserve_cpp_body_indent const public explicit_return_type "double"
	nparams 2
	  param in name "a_reg" explicit_type "uint8_type"
	  param in name "ispec" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//* Radius of region for a ion_specie.
//
// This is the highest radial value a ion_specie
// can have and be completely contained in the region.  

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Radius of region for a ion_specie.  
     
     This is the highest radial value a ion_specie can have and be
     completely contained in the region.  "
      end

      operation 1580207 "region_radial"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "a_reg" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        GRS400_REQUIRE (a_reg < RegionSize, \"region index out of range.\");
        return radial[a_reg];
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1580335 "region_volume"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "a_reg" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        GRS400_REQUIRE (a_reg < RegionSize, \"region index out of range.\");
        return volume[a_reg];
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Volumes "
      end

      operation 1580463 "vbulk"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "ispec" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        /* why 0.3 here? */
        // V = pi*r^2*h, where h = 2*(l2-l1)
        /*<       vbulk  = rbulk**2*pi*(zbulk2-zbulk1)*2 >*/
        const double l1 = protein_left (ispec);
        const double l2 = region_left (BulkRegion, ispec);
        return sqr (region_radial(BulkRegion, ispec)) * constants::pi * (l2 - l1) * 4.;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Volume of bulk "
      end

      operation 1580591 "volume_ratio"
	preserve_cpp_body_indent const public explicit_return_type "double"
	nparams 1
	  param in name "ispec" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Ratio of the channel volume to bulk volume "
      end

      operation 1580719 "wall"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 4
	  param in name "a_spc" explicit_type "uint8_type"
	  param in name "a_z" explicit_type "double"
	  param in name "a_radial" explicit_type "double"
	  param in name "ignore_chonly" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
//<       subroutine wall(ispec,x,y,dist,ovrlap) >
// Returns true when no overlap occurs, false on overlap

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Test if a particle is within an allowed geometric zone."
      end
    end

    class 904751 "gz_geometry"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "* \\file Classes to manage the fixed geometry settings for the MC
 sampler's \"gz\" and \"gin\" histograms.

 The sampler class splits the MC geometry into smaller sections
 for its analysis.  This geometry is independent of the sample
 data and can be shared between samplers.

 Sampler geometry:

 The sampler splits the MC domain into many cylindrical cross-sections
 based on displacement along the z-axis. The boundaries for these
 sections are stored in zzreg. The sampler optionally splits these
 cylindrical sections into concentric square torii. (TODO: what stores
 the radial offsets?). The sampler needs the volume of these sections
 in its calculations so these must be calculated. (see vjin, vjz)

 Calculation of the volumes is straightforward in the bulk regions.
 In fortran ionch program the volumes in the membrane are estimated
 using MC integration.  The new geometry in this program allows the
 volume to be calculated directly using conical sections or
 arc-conical sections.

 Volume formula:
  cylinder = pi * r^2 * h
  conical section = pi * h / 3 * (r_0^2 + r_1^2 + r_1*r_0)
  square toroid = pi * h * (r_1^2 - r_0^2) { r_0 < r_1 }
    note for \"n\" equal volume torii, r_i = sqrt(i * r_n^2/n)

 The MC space has 3 natural sections:
 - left bulk (left boundary : left membrane boundary)
 - membrane (left membrane boundary : right membrane boundary)
 - right bulk (right membrane boundary : right boundary)

 The user may also want to split the membrane section into
 sub-sections, either explicitly or implicitly. The implicit
 regions are those defined by the regions of the MC geometry
 object.

 Note about sampler \"rdf\" histograms

 These sample inter-particle distances by regions as defined in
 classes 'geom'.  Therefore no extra geometry information
 is required.

 + Terminology +

 - region = user defined sub-section of MC space as defined in class
   geom.  Regions may overlap.

 - section = user defined sub-section of MC space (often based on
   region boundarys).  Sections may not overlap.

 - division = a slice of a section. As with sections, divisions do
   not overlap.

 
* Geometry class for sampler \"gz\" histogram

 This histogram divides up the z axis into left bulk, channel and
 right bulk sections plus optional sections in the channel. Each
 section is the then subdivided into ~nzgmx subsections. No radial
 division is made.

 - z index [gz[i] {z_start(i) < z < z_end(i)} (z_pt - z_start(i)) * factor]
           { factor = AccumulatorSize1/2*z_len(i) }

 - vjz(i_z) : division volume {boda ionch program uses MC integration for
                volumes in the channel regions}

 index_type index(z_p, spc_p, &gz) --> increment section and subsection
    position in gz

 double volume(z_p, spc_p) --> volume of subsection
"
      class 904879 "histogram_type"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1153327 "left"
	  public explicit_type "double"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Left edge of bin "
	end

	attribute 1153455 "length"
	  public explicit_type "double"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Length of bin "
	end

	attribute 1153583 "dzg"
	  public explicit_type "double"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Width of divisions in this bin "
	end

	attribute 1153711 "vjz"
	  public explicit_type " double "
	  stereotype "std::vector"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " volumes "
	end

	operation 1644591 "within"
	  const cpp_inline public explicit_return_type "bool"
	  nparams 1
	    param in name "a_z" explicit_type "double"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            return a_z >= left && (length >= (a_z - left));
        };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 1644719 "size"
	  const cpp_inline public explicit_return_type "uint16_type"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            return vjz.size ();
        };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment " Number of divisions in this bin "
	end

	operation 1644847 "index_of"
	  const cpp_inline public explicit_return_type "uint16_type"
	  nparams 1
	    param in name "a_z" explicit_type "double"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            return static_cast< uint16_type > ((a_z - left) / dzg);
        };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment " Find index for z-coord.
 result is undefined if not within (a_z)"
	end

	operation 1644975 "centre"
	  const cpp_inline public explicit_return_type "double"
	  nparams 1
	    param in name "a_div" explicit_type "uint16_type"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            return left + (a_div * dzg) - dzg / 2;
        };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment " Get centre-point for a division
 result is undefined if a_div > divisions ()"
	end

	operation 1645103 "volume"
	  const cpp_inline public explicit_return_type "double"
	  nparams 1
	    param in name "a_div" explicit_type "uint16_type"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            return vjz.at (a_div);
        };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment " Get volume for a division
 range_error exception if a_div >= divisions ()"
	end

	operation 1645231 "calculate_volumes"
	  preserve_cpp_body_indent private explicit_return_type "void"
	  nparams 2
	    param in name "a_spec" explicit_type "uint8_type"
	    param in name "geom_1" explicit_type "geom"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment " Calculate the division volumes"
	end

	operation 1645359 "histogram_type"
	  cpp_inline public explicit_return_type ""
	  nparams 5
	    param in name "a_dzgtarget" explicit_type "double"
	    param in name "a_left" explicit_type "double"
	    param in name "a_right" explicit_type "double"
	    param in name "a_spec" explicit_type "uint8_type"
	    param in name "a_geom" explicit_type "geom"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, const ${t4} & ${p4}${v4}${)}${volatile}${throw} : left (a_left)
            , length (a_right - a_left)
            , dzg (length / std::ceil (length / a_dzgtarget))
            , vjz (size_t (std::ceil (length / a_dzgtarget)), 0.)
        {
            calculate_volumes (a_spec, a_geom);
        };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment " We calculate number of bins in each section based on target z-axis
 delta \"dzgtarget\" then back calculate the actual dzg for region."
	end

	operation 1645487 "histogram_type"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "source" explicit_type "histogram_type"
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : left (source.left)
        , length (source.length)
        , dzg (source.dzg)
        , vjz (source.vjz)
        {};
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 1645615 "operator ="
	  cpp_inline public explicit_return_type "histogram_type"
	  nparams 1
	    param in name "source" explicit_type "histogram_type"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            swap (source);
            return *this;
        };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 1645743 "swap"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "source" explicit_type "histogram_type"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            if (this == &source) return;
            std::swap(left, source.left);   /* Left edge of bin */
            std::swap(length, source.length);   /* Length of bin */
            std::swap(dzg, source.dzg);      /* Width of divisions in this bin */
            std::swap(vjz, source.vjz); /* volumes */
        };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	extra_member 396079 "friend"
	  
	  cpp "
        friend class boost::serialization::access;" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	end

	operation 1645871 "serialize"
	  stereotype "template"
	  preserve_cpp_body_indent private explicit_return_type "void"
	  nparams 2
	    param inout name "ar" explicit_type "Archive"
	    param in name "version" explicit_type "unsigned int"
	  cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}template<class Archive>
${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 1645999 "histogram_type"
	  cpp_inline private explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : left (), length (), dzg (), vjz ()
        {};
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end
      end

      attribute 1153839 "hist"
	private explicit_type " histogram_type "
	multiplicity "[SpecieSize]"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Data from [ionch/profl] common block 
* Histogram bins "
      end

      attribute 1153967 "dzgtarget"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "* Targeted width of histogram bins

     (variable added to allow delay of geometry
     calculations)
     "
      end

      classrelation 988591 // geom_1 (<unidirectional association>)
	relation 958639 --->
	  a role_name "geom_1" const_relation private
	    comment " This depends only on geom and specie as they are also
 constants in the MC state data."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    python "${comment}${self}${name} = ${value}
"
	    classrelation_ref 988591 // geom_1 (<unidirectional association>)
	  b parent class_ref 876591 // geom
      end

      extra_member 396207 "friend"
	
	cpp "
    friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1646127 "serialize"
	stereotype "template"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<class Archive>
${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " When the class Archive corresponds to an output archive, the
 & operator is defined similar to <<.  Likewise, when the class Archive
 is a type of input archive the & operator is defined similar to >>."
      end

      attribute 1154095 "filename_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " filename of serialisation archive."
      end

      operation 1646255 "gz_geometry"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "a_env" explicit_type "geom"
	  param in name "a_spec" explicit_type "ion_specie"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}
    : hist ()
    , dzgtarget (0.)
    , nzireg ()
    , geom_1 (a_env)
    , spec_1 (a_spec)
    , filename_()
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " methods"
      end

      operation 1646383 "coord_axial"
	const cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "a_spc" explicit_type "uint8_type"
	  param in name "division" explicit_type "uint16_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        for (uint8_type sec_ = 0; sec_ < hist[a_spc].size (); ++sec_)
        {
            if (division < hist[a_spc][sec_].size ())
            {
                return hist[a_spc][sec_].centre (division);
            }

            division -= hist[a_spc][sec_].size ();
        }

        GRS400_CHECK_OPT (const bool inaccessible_code_ = false);
        GRS400_CHECK (inaccessible_code_, \"reached code that should be inaccessible\");
        return 0.;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The z value at the middle of a global division index"
      end

      operation 1646511 "count"
	const cpp_inline public explicit_return_type "uint16_type"
	nparams 1
	  param in name "a_spc" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        uint16_type nzgtot_ = 0;

        for (std::vector< histogram_type >::const_iterator sec_ = hist[a_spc].begin ()
             ; sec_ != hist[a_spc].end (); ++sec_)
        {
            nzgtot_ += sec_->size ();
        }

        return nzgtot_;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Total number of divisions for this specie
 == \"size\" of vjz uint16_type n_total (uint8_type i) const"
      end

      operation 1646639 "count"
	const cpp_inline public explicit_return_type "uint16_type"
	nparams 2
	  param in name "a_spc" explicit_type "uint8_type"
	  param in name "a_bin" explicit_type "uint16_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return hist[a_spc][a_bin].size ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Number of divisions for this specie and section"
      end

      operation 1646767 "division_of"
	const cpp_inline public explicit_return_type "uint16_type"
	nparams 2
	  param in name "a_spc" explicit_type "uint8_type"
	  param in name "a_z" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        GRS400_REQUIRE (within (a_spc, a_z), \"particle is not in the 'gz' observation window.\");
        uint16_type result = 0;

        for (uint8_type sec_ = 0; sec_ < hist[a_spc].size (); ++sec_)
        {
            if (hist[a_spc][sec_].within (a_z))
            {
                return result + hist[a_spc][sec_].index_of (a_z);
            }

            result += hist[a_spc][sec_].size ();
        }

        GRS400_CHECK_OPT (const bool inaccessible_code_ = false);
        GRS400_CHECK (inaccessible_code_, \"reached code that should be inaccessible\");
        return result;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Get division from z.

 undefined if a_z not in sampler region"
      end

      operation 1646895 "division_width"
	const cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "a_spc" explicit_type "uint8_type"
	  param in name "a_bin" explicit_type "uint16_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return hist[a_spc][a_bin].dzg;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Width of divisions within a section"
      end

      operation 1647023 "do_readin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
//<       includes part of subroutine calv >

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Calculate data from geometry

 Finalise the initialisation process by calculating
 divisions and volumes."
      end

      operation 1647151 "do_readin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "scnr" explicit_type "reader"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Read in initialisation parameters
"
      end

      operation 1647279 "within"
	const cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "a_spc" explicit_type "uint8_type"
	  param in name "a_z" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        const double left1_ =  hist[a_spc].front ().left;
        if (left1_ <= a_z)
        {
            const double left2_ =  hist[a_spc].back ().left;
            const double length_ =  hist[a_spc].back ().length;
            return a_z <= (left2_ + length_);
        }
        return false;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1647407 "section"
	const cpp_inline public explicit_return_type "uint8_type"
	nparams 2
	  param in name "a_spc" explicit_type "uint8_type"
	  param in name "a_idx" explicit_type "uint16_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        uint8_type sec_ = 0;

        for (; a_idx < hist[a_spc][sec_].size (); ++sec_)
        {
            a_idx -= hist[a_spc][sec_].size ();
        }

        return sec_;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Get section from index

 undefined if a_idx not less than count(a_spc)"
      end

      operation 1647535 "section"
	const cpp_inline public explicit_return_type "uint8_type"
	nparams 2
	  param in name "a_spc" explicit_type "uint8_type"
	  param in name "a_z" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        for (uint8_type sec_ = 0; sec_ < hist[a_spc].size (); ++sec_)
        {
            if (hist[a_spc][sec_].within (a_z))
            {
                return sec_;
            }
        }

        GRS400_CHECK_OPT (const bool inaccessible_code_ = false);
        GRS400_CHECK (inaccessible_code_, \"reached code that should be inaccessible\");
        return hist[a_spc].size ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The section this z value is in

 undefined if not within(a_spc, a_z)"
      end

      operation 1647663 "volume"
	const cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "a_spc" explicit_type "uint8_type"
	  param in name "division" explicit_type "uint16_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        for (uint8_type sec_ = 0; sec_ < hist[a_spc].size (); ++sec_)
        {
            if (division < hist[a_spc][sec_].size ())
            {
                return hist[a_spc][sec_].volume (division);
            }

            division -= hist[a_spc][sec_].size ();
        }

        GRS400_CHECK_OPT (const bool inaccessible_code_ = false);
        GRS400_CHECK (inaccessible_code_, \"reached code that should be inaccessible\");
        return 0.;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The volume at a global division index"
      end
    end

    class 904623 "gin_geometry"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Geometry class for sampler \"gin\" histogram

 This histogram is taken in a user defined cylinder from -z_gin
 to +z_gin with radius r_gin. This is linearly divided into ~nzgmx
 samples along the z axis and along the radial. ** note that the
 radial axis is linearly divided so the volume of each radial sample
 increases as square **

 - z index [(z_pt - z_gin) * factor] { factor = AccumulatorSize1/2*z_gin }
 - r index [r_pt * factor] { factor = AccumulatorSize1/r_gin }

 - vjin(i_r,i_z) : subsection volumes calculated geometrically. No
                 adjustment for coincidence with membrane or protein.
 (as vjin(i,j) can be calculated geometrically, volumes calculated on
  the fly)

 - drg : single factor, combination of z and r factors.

 void index(z_p, r_p, spc_p, &gin) --> increment section,
    z and r subsection position in gin

 double volume(z_p, r_p, spc_p) --> volume of subsection
"
      attribute 1152943 "cylinder"
	private explicit_type "double"
	multiplicity "[2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Data from [ionch/profl] common block 
* Description of the cylinder in which to sample gin

      [0] = left, [1] = radii, length = 2*abs(left)
     "
      end

      attribute 1153071 "drg"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "* Scale factor to map radii into 0-nrgr 
     an z-coord onto 0-nrgz "
      end

      attribute 1153199 "vjin"
	private explicit_type " double "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Volume for accu.gin, as we have radial symmetry
 this contain only nrgr elements"
      end

      operation 1642927 "gin_geometry"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}
    : cylinder ()
    , drg (0.)
    , vjin ()
    , nrgr (0)
    , nrgz (0)
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1643055 "step_size"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return drg;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The radial and axial step size"
      end

      operation 1643183 "count_radial"
	const cpp_inline public explicit_return_type "uint16_type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return nrgr;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Number of radial divisions"
      end

      operation 1643311 "count_axial"
	const cpp_inline public explicit_return_type "uint16_type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return nrgz;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Number of axial divisions"
      end

      operation 1643439 "coord_radial"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "division" explicit_type "uint16_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return division * drg + drg / 2;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The radius at the middle of a radial division index"
      end

      operation 1643567 "coord_axial"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "division" explicit_type "uint16_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return cylinder[0] + division * drg + drg / 2;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The z value at the middle of an axial division index"
      end

      operation 1643695 "do_readin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Calculate data from input

 Finalise the initialisation process by calculating
 divisions and volumes."
      end

      operation 1643823 "do_readin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "scnr" explicit_type "reader"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// calv_ 

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Read in initialisation parameters"
      end

      operation 1643951 "r_index_of"
	const cpp_inline public explicit_return_type "uint16_type"
	nparams 1
	  param in name "a_r" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        // a_r / drg
        return static_cast< uint16_type> (std::floor (a_r / drg));
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Get radial index from radial offset

 undefined if ! within(a_z,a_r)"
      end

      operation 1644079 "volume"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "a_r" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return vjin[r_index_of (a_r)];
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Get volume of ring by radial

 undefined if ! within(a_z,a_r)"
      end

      operation 1644207 "volume"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "a_ri" explicit_type "uint16_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return vjin[a_ri];
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Get volume of ring by index

 undefined if a_ri >= count_axial ()"
      end

      operation 1644335 "within"
	const cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "a_z" explicit_type "double"
	  param in name "a_r" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return (cylinder[0] < a_z
                && a_z < -cylinder[0]
                && a_r < cylinder[1]);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Test is point is in sample region

 Note that r=0 is always in region so
 z can be tested independently by givin a_r as zero"
      end

      operation 1644463 "z_index_of"
	const cpp_inline public explicit_return_type "uint16_type"
	nparams 1
	  param in name "a_z" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return static_cast < uint16_type > (std::floor ( (a_z - cylinder[0]) / drg));
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Get z index from z position

 undefined if !within(a_z,a_r)"
      end
    end

    class 879407 "ion_ring"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Geometric ring class for a particle specie

 This class represents extends the list of points that represent
 a closed polygon to also include bounding boxes for various
 regions.  The boxes and polygon are adjusted for the radius
 of the specie they represent.  This means that tests of just
 the particle center can be made against it's specie's object.

 Notes:
 - shapes (arcs and lines) can be added in any order.
 - arcs are represented internally as a series of short connected lines
 - ring can not close itself

 Geometry sets:
 - bulk      1 (global inclusion zone)
 - region    * (may be overlapping)
 - membrane  1 (exclusion box sub-zone)
 - protein   1 (exclusion shaped sub-zone) (uses bounding box)

 file format

 # [bulk|region|membrane|protein]
 #  point [0123] x y --> extension direction SEWN
 #  qarc [01] r --> extension direction 0 = longer rad, 1 = sharter rad, angle = pi/2
 #  box [01] x1 y1 x2 y2 --> extension direction 0 = outside, 1 = inside

"
      classrelation 955055 // <generalisation>
	relation 925743 ---|>
	  a private
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 955055 // <generalisation>
	  b parent class_ref 880175 // basic_ring
      end

      classrelation 955183 // bound_ (<directional composition>)
	relation 925871 *-->
	  a role_name "bound_" private
	    comment " bounding rectangle"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 955183 // bound_ (<directional composition>)
	  b parent class_ref 880047 // box
      end

      classrelation 955311 // membrane_ (<directional composition>)
	relation 925999 *-->
	  a role_name "membrane_" private
	    comment " membrane bounding box"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 955311 // membrane_ (<directional composition>)
	  b parent class_ref 880047 // box
      end

      classrelation 955439 // region_ (<directional composition>)
	relation 926127 *-->
	  a role_name "region_" multiplicity "[RegionSize]" private
	    comment " region bounding boxes"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 955439 // region_ (<directional composition>)
	  b parent class_ref 880047 // box
      end

      attribute 1120431 "vin_vout_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " ratio of (approx) channel volume to bulk volume"
      end

      class 880687 "size_type"
	visibility package stereotype "typedef" explicit_base_type "ring::size_type"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 1589423 "ion_ring"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "a_specie_fact" explicit_type "ion_specie"
	  param in name "a_spc" explicit_type "uint8_type"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw} : basic_ring ()
        , bound_ ()
        , membrane_ ()
        , region_ ()
        , specie_factory_ (a_specie_fact)
        , specie_index_ (a_spc)
        , vin_vout_ ()
    {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1589551 "set_box"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 6
	  param inout name "a_box" explicit_type "box"
	  param in name "direction" explicit_type "uint8_type"
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Adjust x1 to y2 using direction and specie radius then set a_box.

${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Set a_box using the given parameters and our specie"
      end

      operation 1589679 "~ion_ring"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1589807 "add_point"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 3
	  param in name "direction" explicit_type "uint8_type"
	  param in name "a_x" explicit_type "double"
	  param in name "a_y" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Add a point to form a line segment from last point to (a_x,a_y)
"
      end

      operation 1589935 "add_qarc"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "direction" explicit_type "uint8_type"
	  param in name "radius" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Add an arc to ring

     The centre point of the arc is on a line normal to the previous line at
     a distance \"radius\". The direction of the centre point depends on the sign of
     usign. Points are added along the circle until a semi-circle of angle
     \"arc\" is reached.

     \\pre size > 1
     \\pre usgin = 1 or -1"
      end

      operation 1590063 "begin"
	const cpp_inline public explicit_return_type "ring::const_iterator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return state_.begin ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1590191 "end"
	const cpp_inline public explicit_return_type "ring::const_iterator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return state_.end ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1590319 "close"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return basic_ring::close ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Close the ring

     - returns true if last element is fuzzy equal to first
       - in this case it will set last element to first.
       - otherwise it will append copy of first"
      end

      operation 1590447 "do_readin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// finalise object after setting public geometries 

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "    /** Is ring closed?

     - true if the each end point of every shape is the end point of one other shape
     - and path that follows from shape to shape passes through every shape (once).
     */
    bool closed () const;
* Generate the bounding envelope and vin_vout etc.

        This should be called before first call to wall

        \\pre closed"
      end

      operation 1590575 "in_region"
	preserve_cpp_body_indent const public explicit_return_type "uint8_type"
	nparams 2
	  param in name "a_x" explicit_type "double"
	  param in name "a_y" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Get index of first region point is within 

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Get index of first region point is within

     if within no defined regions then RegionSize is returned"
      end

      operation 1590703 "in_region"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 3
	  param in name "a_reg" explicit_type "uint8_type"
	  param in name "a_x" explicit_type "double"
	  param in name "a_y" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Is point in given region 

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Is point in given region
"
      end

      operation 1590831 "membrane_left"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return membrane_.min_corner().x();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* lowest z value a particle of our specie can have in a region "
      end

      operation 1590959 "membrane_right"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return membrane_.max_corner().x();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* highest z value a particle of our specie can have in a region "
      end

      operation 1591087 "protein_left"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return bound_.min_corner().x();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* lowest z value a particle of our specie can have in a region "
      end

      operation 1591215 "protein_right"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return bound_.max_corner().x();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* highest z value a particle of our specie can have in a region "
      end

      operation 1591343 "region_left"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "a_reg" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        GRS400_REQUIRE (a_reg < RegionSize, \"ionch can only handle 6 regions.\");
        return region_[a_reg].min_corner().x();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* lowest z value a particle of our specie can have in a region "
      end

      operation 1591471 "region_right"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "a_reg" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        GRS400_REQUIRE (a_reg < RegionSize, \"ionch can only handle 6 regions.\");
        return region_[a_reg].max_corner().x();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* highest z value a particle of our specie can have in a region "
      end

      operation 1591599 "region_radial"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "a_reg" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        GRS400_REQUIRE (a_reg < RegionSize, \"ionch can only handle 6 regions.\");
        return region_[a_reg].max_corner().y();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* highest radial value a particle of our specie can have in a region "
      end

      operation 1591727 "serialise"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// print out geometry values

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Write debugging version of content to a stream "
      end

      operation 1591855 "set_bulk"
	cpp_inline public explicit_return_type "void"
	nparams 4
	  param in name "direction" explicit_type "uint8_type"
	  param in name "x1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        set_box (region_[BulkRegion], direction, x1, 0., x2, y2);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Set the bulk region bounding box for our specie "
      end

      operation 1591983 "set_membrane"
	cpp_inline public explicit_return_type "void"
	nparams 5
	  param in name "direction" explicit_type "uint8_type"
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        set_box (membrane_, direction, x1, y1, x2, y2);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Set the membrane region bounding box for our specie "
      end

      operation 1592111 "set_region"
	cpp_inline public explicit_return_type "void"
	nparams 5
	  param in name "direction" explicit_type "uint8_type"
	  param in name "a_reg" explicit_type "uint8_type"
	  param in name "x1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        GRS400_REQUIRE (a_reg < RegionSize, \"region index is out of range\");
        set_box (region_[a_reg], direction, x1, 0., x2, y2);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Set the a region bounding box for our specie "
      end

      operation 1592239 "size"
	const cpp_inline public explicit_return_type "size_type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return state_.size ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* How many points does the main shape have defined? "
      end

      operation 1592367 "specie_index"
	const cpp_inline public explicit_return_type "uint8_type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return specie_index_;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Get the index of the specie this object represents "
      end

      operation 1592495 "volume_ratio"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return vin_vout_;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Ratio of the channel volume to bulk volume "
      end

      operation 1592623 "wall"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 3
	  param in name "a_x" explicit_type "double"
	  param in name "a_y" explicit_type "double"
	  param in name "ignore_chonly" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Return true if point a_x, a_y is in valid location for its specie type
//
// \\pre ring.closed

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Return true if point a_x, a_y is in an allowed part of geometry

        This assumes that the point refers to a particle of the specie
        this object is for.

        \\pre ring.closed
        \\pre previously called initialise"
      end
    end

    class 879535 "patch_ring"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Geometric ring class for calculating patch properties.

 In order to calculate the patchs and the A matrix requires a close
 knowldege of the geometry.  In particular the calculation of the
 A matrix is very dependent on the true surface.  In the patch class
 we map the patches themselves onto the linear segments of the
 ring.  However when calculating the A matrix it is important
 to account for the arc curvature as well as the surface of rotation
 curvature.

 This class helps achieve this by saving the arc information along
 with the line segments.  This allows details of the arc to be
 regained when calculating the A matric.
"
      classrelation 954927 // <generalisation>
	relation 925615 ---|>
	  a private
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 954927 // <generalisation>
	  b parent class_ref 880175 // basic_ring
      end

      attribute 1120303 "arcs_"
	private explicit_type " arc_type "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      class 880559 "const_iterator"
	visibility package stereotype "typedef" explicit_base_type "ring::const_iterator"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 1588271 "add_point"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "a_x" explicit_type "double"
	  param in name "a_y" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        basic_ring::add_point (a_x, a_y);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Add a point to form a line segment from last point to (a_x,a_y)
     "
      end

      operation 1588399 "add_qarc"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "direction" explicit_type "uint8_type"
	  param in name "radius" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Add an arc to ring
     
     The centre point of the arc is on a line normal to the previous
     line at a distance \"radius\".  The direction of the centre point
     depends on the sign of usign.  Points are added along the
     circle until a semi-circle of angle \"arc\" is reached.
     
     \\pre size > 1
     \\pre direction = 1 or -1"
      end

      operation 1588527 "begin"
	const cpp_inline public explicit_return_type "const_iterator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return basic_ring::begin ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1588655 "end"
	const cpp_inline public explicit_return_type "const_iterator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return basic_ring::end ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1588783 "arc_at"
	preserve_cpp_body_indent const public explicit_return_type "arc_type"
	nparams 2
	  param in name "piter0" explicit_type "const_iterator"
	  param in name "piter1" explicit_type "const_iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//* Find the arc for point at z,r coords.
//
// Search arcs_ for an arc that corresponds to the line segment
// between iterator i and i+1.  If there is no corresponding arc
// then nul is returned

${inline}const ${type} * ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Find the arc for point at z,r coords.
     
     Search arcs_ for an arc that corresponds to the line segment
     between iterator i and i+1.  If there is no corresponding arc
     then nul is returned     "
      end

      operation 1588911 "close"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return basic_ring::close ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Close the ring
     
     - returns true if last element is fuzzy equal to first
     - in this case it will set last element to first.
     - otherwise it will append copy of first"
      end

      operation 1589039 "closed"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Is ring closed?
     
     - true if the each end point of every shape is the end point
     of one other shape
     
     - and path that follows from shape to shape passes through
     every shape (once)."
      end

      operation 1589167 "serialise"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// print out geometry values

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1589295 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return basic_ring::size ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 879791 "point_xy"
      visibility package stereotype "typedef" explicit_base_type "boost::geometry::point_xy< double >"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 879919 "ring"
      visibility package stereotype "typedef" explicit_base_type "boost::geometry::linear_ring< boost::geometry::point_xy< double > >"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 880047 "box"
      visibility package stereotype "typedef" explicit_base_type "boost::geometry::box< boost::geometry::point_xy< double > >"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 880175 "basic_ring"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Geometric ring class

 This class represents a list of points that represent a closed polygon.

 Notes:

 - shapes (arcs and lines) must be added in order.

 - arcs are represented internally as a series of short connected
 lines

 - ring can not close itself
"
      class 880303 "arc_type"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1120047 "radius"
	  public explicit_type "double"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Arc centre point (z,r)
 Arc radius"
	end

	attribute 1120175 "clear"
	  public explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Is this object active."
	end
      end

      class 880431 "const_iterator"
	visibility package stereotype "typedef" explicit_base_type "ring::const_iterator"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 954671 // state_ (<directional composition>)
	relation 925359 *-->
	  a role_name "state_" public
	    comment " list of points"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 954671 // state_ (<directional composition>)
	  b parent class_ref 879919 // ring
      end

      classrelation 954799 // last_arc_ (<directional composition>)
	relation 925487 *-->
	  a role_name "last_arc_" public
	    comment " list of points"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 954799 // last_arc_ (<directional composition>)
	  b parent class_ref 880303 // arc_type
      end

      operation 1587375 "add_point"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "a_x" explicit_type "double"
	  param in name "a_y" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Add a point to form a line segment from last point to (a_x,a_y)
"
      end

      operation 1587503 "add_qarc"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "direction" explicit_type "uint8_type"
	  param in name "radius" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Add an arc to ring
//
//Arc is approximated by a series of points
//
//The centre point of the arc is on a line normal to the previous line at
//a distance \"radius\". The direction of the centre point depends on the sign of
//the \"radius\". Points are added along the circle until a semi-circle of angle
//\"arc\" is reached. Direction of arc depends on direction, 0 = ccw, 1 = cw
//
//Want points on circle to be >~ 0.5 in same units as radius

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Add an arc to ring

     The centre point of the arc is on a line normal to the previous
     line at a distance \"radius\".  The direction of the centre point
     depends on the sign of usign.  Points are added along the
     circle until a semi-circle of angle \"arc\" is reached.

     \\pre size > 1
     \\pre usgin = 1 or -1"
      end

      operation 1587631 "begin"
	const cpp_inline public explicit_return_type "const_iterator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return state_.begin ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1587759 "end"
	const cpp_inline public explicit_return_type "const_iterator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return state_.end ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1587887 "close"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//  Close the ring
//
//- returns true if last element is fuzzy equal to first
//- in this case it will set last element to first.
//- otherwise it will append copy of first   

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Close the ring

     - returns true if last element is fuzzy equal to first
     - in this case it will set last element to first.
     - otherwise it will append copy of first"
      end

      operation 1588015 "closed"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//* Is ring closed?
//
//- true if the each end point of every shape is the end point of one other shape
//- and path that follows from shape to shape passes through every shape (once).

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Is ring closed?

     - true if the each end point of every shape is the end point
     of one other shape

     - and path that follows from shape to shape passes through
     every shape (once)."
      end

      operation 1588143 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return state_.size ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end
  end

  deploymentview 335279 "geom deployment"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 578351 "geom"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 868527 // Geom
      end
    end
  end
end
