class input_delegater
!!!1917615.cpp!!!	read_input(inout reader : input_base_reader) : void
typedef std::map< std::string, boost::shared_ptr< input_base_meta > >::iterator iterator;
UTILITY_REQUIRE( not this->input_delegate_map_.empty(), "Attempt to read input file before creating delegate map" );

// Assume current is max
this->file_version_ = max_version_;

// The labels of included sections recorded as they appear
// so we can check for missing sections at the end of reading
// the input file.
std::set< std::string > included_sections;

// work through input document.
try
{
  while( reader.next() )
  {
    if (strngs::fsfver() == reader.name())
    {
      // Looking for top-level option names:
      //  'filever' input file version
      this->file_version_ = reader.get_ordinal( "Input file version", std::string{} );
      if( this->file_version_ > max_version_ )
      {
        reader.parameter_value_error( "Input file version", std::string{}, "File version is too recent for this program" );
      }
    }
    else
    {
      // Looking for section names:
      iterator known_section = this->input_delegate_map_.find( reader.name () );
      // Section label not known
      if( known_section == this->input_delegate_map_.end() )
      {
        std::stringstream kss;
        for( auto const& entry : this->input_delegate_map_ )
        {
          kss << entry.first << " ";
        }
        std::string keys( kss.str() );
        keys.erase( keys.size() - 1, 1 );
        throw input_error::invalid_section_error( reader.name(), &reader, keys );
      }
      // Only sections with multiple tag can appear twice.
      if( not known_section->second->multiple() and 0 != included_sections.count( reader.name () ) )
      {
        throw input_error::duplicate_section_error( reader.name(), &reader );
      }
      // Add to the section_list.

      included_sections.insert( reader.name () );

      // Get delegate to read its input section
      known_section->second->read_section( reader );

      // check reader is at 'end', the delegate should have thrown an error
      // otherwise.
      UTILITY_CHECK( reader.name() == strngs::fsend()
                     , "Reader delegate should have read to an 'end' label.");
    }
  }
}
catch( core::input_error const& err )
{
  throw err;
}
catch (std::runtime_error const& err)
{
  std::stringstream ss;
  ss << "Error in input file " << reader.current_filename()
     << " at line " << reader.current_line_number() << "\n" << err.what();
  throw std::runtime_error( ss.str() );
}
// Check for required input sections
std::stringstream ss;
for (auto & itr : input_delegate_map_)
{
  if( itr.second->required() and 0 == included_sections.count( itr.first ) )
  {
    ss << itr.first << " ";
  }
}
std::string missing( ss.str() );
if( not missing.empty() )
{
  missing.erase( missing.size() - 1, 1 );
  throw input_error::missing_section_error( missing );
}
