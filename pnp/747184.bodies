class mpi_storage
!!!2209328.python!!!	do_description(inout os : ostream) : void
from constants import constants
constants.description( os )
print >>os, "[simulation]"
print >>os, "        volume :", self.cell_region_.volume(-1), "Anstrom{3}"
print >>os, "  permittivity :", self.cell_region_.permittivity()
print >>os, " beta (1/k_BT) :", (1.0/(constants.boltzmann_constant()*self.temperature_kelvin_)), " J{-1}"
print >>os, "  temperature :", self.temperature_kelvin_, " K"
print >>os, " specie count :", self.specie_count()
print >>os, " - loop sizes"
print >>os, "       thermal :", self.equilibration_interval_
print >>os, "    production :", self.production_interval_
print >>os, "         inner :", self.inner_loop_size_
print >>os, " current index :", self.outer_loop_index_
print >>os, " - other parameters"
print >>os, " starting particle count :", self.target_number_of_particles()
print >>os, "          ionic strength :", self.ionic_strength()
print >>os, "             trial rates :", self.rates_
print >>os, "              move delta :", self.delta
for spc in self.species_:
  spc.description( os )
print >>os, "[choices] trial types and rates"
print >>os, " %6s %4s %7s" % ( "type", "spc.", "rate(%)" )
for choice in self.choices_:
  print >>os, " %6s %4s %7.2f" % ( choice.label(), self.species_[choice.specie_key()].label(), choice.probability()*100.0 )
for observable in self.observables_:
  observable.description( os )
for potl in self.evaluators_:
  potl.description( os )
self.ensemble_.description( os )

!!!2209456.cpp!!!	do_write_document(inout wr : input_document, in ix : size_t) : void
wr[ ix ].add_entry( core::strngs::fstype(), this->type_label_() );
!!!2209712.cpp!!!	compute_output_dir() : string
boost::format res( this->output_dir_fmt() + "/\%2$03d" );
// Ignore error of too many arguments.
res.exceptions( boost::io::all_error_bits ^ boost::io::too_many_args_bit );
res % this->run_number() % this->rank_;
return res.str();
!!!2250544.cpp!!!	main(in argc : int, in argv : char, inout sim : simulation) : bool
// NOTE: The input decoders are not required to check that
// the final system is valid.
namespace mpi = boost::mpi;
// HACK TO TEST FOR OPENMPI SERVER
if( std::getenv( "OMPI_COMM_WORLD_SIZE" ) )
{
  const bool abort_on_exception{ true };
  this->env_.reset( new mpi::environment( argc, argv, abort_on_exception ) );
  this->world_.reset( new mpi::communicator );
  this->rank_ = this->world_->rank();
  this->sibling_count_ = this->world_->size();
}
try
{
  switch( this->process_command_line( argc, argv ) )
  {
  case 0:
    // Bad command line options.
    this->system_log() << this->get_log().rdbuf();
    this->world_->abort( 1 );
    return false;
  case 1:
  {
    // Help message requested.
    const std::string nul_string{};
    this->system_log() << this->get_log().rdbuf();
    sim.generate_help( nul_string, nul_string, this->system_log() );
    this->world_->abort( 0 );
    return true;
  }
  case 2:
  {
    // Read input file.
    {
      auto reader = this->open_input();
      this->get_log() << core::strngs::horizontal_bar() << "\n"
          << "Reading input file \""
          << reader->current_filename() << "\"\n";
      sim.read_input( *reader );
    }
    // Now our log is well defined, so write temporary log out.
    this->cutover_log();
    this->get_log() << core::strngs::horizontal_bar() << "\n";
    sim.set_random_seed( this->get_seed_value() );
    sim.generate_simulation();

    break;
  }
  case 3:
  {
    // Restart from checkpoint
    if( not sim.restart() )
    {
      this->system_log() << this->get_log().rdbuf() << "\n";
      this->world_->abort( 1 );
      return false;
    }
    // Now our log is well defined, so write temporary log out.
    this->cutover_log();
    this->get_log() << core::strngs::horizontal_bar() << "\n";
    break;
  }
  default:
  {
    // Logic error
    UTILITY_CHECK( false, "Should never get here!" );
    break;
  }
  }
  // Initialisation from input complete. (We could still get some
  // input errors after this point during call to 'prepare'.)
  return sim.main();
}
catch(const core::input_error &err)
{
  if( not this->is_cutover() )
  {
    this->system_log() << this->get_log().rdbuf() << "\n";
  }
  this->system_log() << err.what() << "\n";
  sim.generate_help( err.section(), err.parameter(), this->system_log() );
  this->world_->abort( 1 );
  return false;
}
catch(const std::runtime_error &err)
{
  // Crashing...
  if( not this->is_cutover() )
  {
    this->system_log() << this->get_log().rdbuf() << "\n";
  }
  this->system_log() << err.what() << "\n";
  this->world_->abort( 1 );
  return false;
}
!!!2210224.cpp!!!	open_output() : base_sink
this->ensure_output_dir();
const std::string fn( this->output_path() );
{
  // attempt to open file in 
  std::ofstream test( fn );
  UTILITY_ALWAYS( test, "Problem openning output file "+fn );
}
return this->open_sink_by_extension( fn, "dbm" );
!!!2210352.cpp!!!	open_input() : input_base_reader
boost::shared_ptr< core::input_base_reader > reader;
if( this->rank_ == 0 )
{
  const std::string inputfn = this->find_input_filename();
  reader.reset( new core::input_preprocess );
  reader->add_include( inputfn );
}
if( this->sibling_count_ > 1 )
{
  // Only broadcast input file if we have siblings.
  namespace mpi = boost::mpi;
  std::string buf;
  if( this->rank_ == 0 )
  {
    std::stringstream store;
    // write class instance to archive
    boost::archive::text_oarchive oa( store );
    oa << reader;
    buf.assign( std::move( store.str() ) );
  }
  mpi::broadcast( *this->world_, buf, 0 );

  if (this->rank_ != 0)
  {
    std::stringstream store( buf );
    // read class instance from archive
    boost::archive::text_iarchive ia( store );
    ia >> reader;
  }
}
return reader;
!!!2210480.cpp!!!	open_checkpoint() : ostream
this->ensure_output_dir();
const std::string fn( this->checkpoint_path() );
boost::shared_ptr< std::ostream > result( new std::ofstream( fn ) );
UTILITY_ALWAYS( *(result), "Problem openning checkpoint file "+fn );
return result;
!!!2210608.cpp!!!	open_log() : ostream
this->ensure_output_dir();
std::string fn { this->compute_output_dir() + "/log" };
boost::shared_ptr< std::ostream > result( new std::ofstream( fn.c_str(), std::ios_base::ate ) );
return result;
!!!2210736.cpp!!!	add_definition(inout meta : storage_meta) : void
std::string desc( "Use local storage for MPI parallel execution." );
std::unique_ptr< storage_definition > result( new storage_definition( type_label_(), desc ) );
// no extra parameters
meta.add_type( result );
!!!2210864.cpp!!!	type_label_() : string
const std::string result( "mpi" );
return result;
