format 75
"formation test suite" // particle::formation test suite
  revision 4
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  stereotype "EXAMPLE"
  cpp_h_dir "../src/parallel/formation/"
  cpp_src_dir "../src/parallel/formation/"
  classview 504495 "formation"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 1020591 "conf_test_suite"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1113519 // <generalisation>
	relation 1076399 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1113519 // <generalisation>
	  b parent class_ref 1020719 // typedef7
      end

      operation 1938607 "test_conf_ctor"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " NOTE Test suite for conf.hpp SVN 627; conf.cpp SVN 627"
      end

      operation 1938735 "test_conf_add_particles"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1938863 "test_conf_release_index"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1938991 "test_conf_allocate_index"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1939119 "test_conf_set_position"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1939247 "test_conf_serialise"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1939375 "test_conf_index_from_specie"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1020719 "typedef7"
      visibility package stereotype "typedef" explicit_base_type "CxxTest::TestSuite"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1020847 "formation_test_suite"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "#include <vector>"
      classrelation 1113647 // <generalisation>
	relation 1076527 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1113647 // <generalisation>
	  b parent class_ref 1020719 // typedef7
      end

      operation 1939503 "test_formation_help"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      class 1020975 "FORM_STATE"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name}
 {
${items}
};
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1317935 "DEFAULT_CTOR"
	  public type class_ref 1020975 // FORM_STATE
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1318063 "BASIC_GEOM_SET"
	  public type class_ref 1020975 // FORM_STATE
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1318191 "BASIC_SPECIE_SET"
	  public type class_ref 1020975 // FORM_STATE
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1318319 "BASIC_SALT_SET"
	  public type class_ref 1020975 // FORM_STATE
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1318447 "BASIC_CONF_SET"
	  public type class_ref 1020975 // FORM_STATE
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end
      end

      operation 1939631 "canonical_geom_input"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Implementation of the formation test suite

${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1939759 "canonical_salt_input"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Implementation of the formation test suite

${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1939887 "canonical_specie_input"
	class_operation preserve_cpp_body_indent public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Implementation of the formation test suite

${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1940015 "make_formation"
	class_operation preserve_cpp_body_indent public return_type class_ref 1004207 // formation
	nparams 1
	  param in name "state" type class_ref 1020975 // FORM_STATE
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// A method to construct a working set of formation library objects
// suitable for performing test of external objects.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1940143 "test_ctor"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    {
      ionch::formation exemplar (make_formation (DEFAULT_CTOR));
      TS_ASSERT (not exemplar.is_bulk ());
      TS_ASSERT_EQUALS (exemplar.number_of_regions (), 0);
      TS_ASSERT_THROWS (exemplar.get_region(0), std::runtime_error&);
      TS_ASSERT_THROWS (exemplar.region_count (0), std::runtime_error&);
      TS_ASSERT_THROWS (exemplar.region_count (0, 0), std::runtime_error&);
      TS_ASSERT_EQUALS (exemplar.target_particle_number (), 0);
      TS_ASSERT_EQUALS (exemplar.specie_set().size (), 0ul);
      TS_ASSERT_EQUALS (exemplar.specie_set().nsalt (), 0ul);
      TS_ASSERT_EQUALS (exemplar.geometry().bulk_geometry().length(), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().bulk_geometry().volume(), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(1), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(2), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(3), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(4), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(1), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(2), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(3), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(4), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(5), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rlvest(), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rlcurv(), 0.0);
      TS_ASSERT_EQUALS (exemplar.conformation().active_size(), 0);
      TS_ASSERT_EQUALS (exemplar.conformation().size(), 0);
      TS_ASSERT_EQUALS (exemplar.conformation().size(0), 0);
      TS_ASSERT_THROWS (exemplar.beta(), std::runtime_error&);
      TS_ASSERT_THROWS (exemplar.temperature(), std::runtime_error&);
      TS_ASSERT_THROWS (exemplar.qstar(), std::runtime_error&);
    }
    {
      ionch::formation exemplar (make_formation (BASIC_GEOM_SET));
      TS_ASSERT (not exemplar.is_bulk ());
      TS_ASSERT_EQUALS (exemplar.number_of_regions (), 0);
      TS_ASSERT_THROWS (exemplar.get_region(0), std::runtime_error&);
      TS_ASSERT_THROWS (exemplar.region_count (0), std::runtime_error&);
      TS_ASSERT_THROWS (exemplar.region_count (0, 0), std::runtime_error&);
      TS_ASSERT_EQUALS (exemplar.target_particle_number (), 500);
      TS_ASSERT_EQUALS (exemplar.specie_set().size (), 0ul);
      TS_ASSERT_EQUALS (exemplar.specie_set().nsalt (), 0ul);
      TS_ASSERT_EQUALS (exemplar.geometry().bulk_geometry().length(), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().bulk_geometry().volume(), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(1), 5.3);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(2), 15.3);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(3), 10.3);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(4), 152.2);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(1), 8.8);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(2), 18.8);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(3), 25.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(4), 30.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(5), 68.5);
      TS_ASSERT_EQUALS (exemplar.geometry().rlvest(), 10.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rlcurv(), 5.0);
      TS_ASSERT_EQUALS (exemplar.conformation().active_size(), 0);
      TS_ASSERT_EQUALS (exemplar.conformation().size(), 0);
      TS_ASSERT_EQUALS (exemplar.conformation().size(0), 0);
      TS_ASSERT_DELTA (exemplar.beta(), 241440919407021129728.0, 1.0);
      TS_ASSERT_DELTA (exemplar.temperature(), 300.0, 0.0001);
      TS_ASSERT_DELTA (exemplar.qstar(), 23.6015, 0.0001);
    }
    {
      ionch::formation exemplar (make_formation (BASIC_SPECIE_SET));
      TS_ASSERT (not exemplar.is_bulk ());
      TS_ASSERT_EQUALS (exemplar.number_of_regions (), 0);
      TS_ASSERT_THROWS (exemplar.get_region(0), std::runtime_error&);
      TS_ASSERT_THROWS (exemplar.region_count (0), std::runtime_error&);
      TS_ASSERT_THROWS (exemplar.region_count (0, 0), std::runtime_error&);
      TS_ASSERT_EQUALS (exemplar.target_particle_number (), 500);
      TS_ASSERT_EQUALS (exemplar.specie_set().size (), 6ul);
      TS_ASSERT_EQUALS (exemplar.specie_set().nsalt (), 0ul);
      TS_ASSERT_EQUALS (exemplar.geometry().bulk_geometry().length(), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().bulk_geometry().volume(), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(1), 5.3);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(2), 15.3);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(3), 10.3);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(4), 152.2);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(1), 8.8);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(2), 18.8);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(3), 25.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(4), 30.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(5), 68.5);
      TS_ASSERT_EQUALS (exemplar.geometry().rlvest(), 10.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rlcurv(), 5.0);
      TS_ASSERT_EQUALS (exemplar.conformation().active_size(), 0);
      TS_ASSERT_EQUALS (exemplar.conformation().size(), 0);
      TS_ASSERT_EQUALS (exemplar.conformation().size(0), 0);
      TS_ASSERT_DELTA (exemplar.beta(), 241440919407021129728.0, 1.0);
      TS_ASSERT_DELTA (exemplar.temperature(), 300.0, 0.0001);
      TS_ASSERT_DELTA (exemplar.qstar(), 23.6015, 0.0001);
    }
    {
      ionch::formation exemplar (make_formation (BASIC_SALT_SET));
      TS_ASSERT (not exemplar.is_bulk ());
      TS_ASSERT_EQUALS (exemplar.number_of_regions (), 0);
      TS_ASSERT_THROWS (exemplar.get_region(0), std::runtime_error&);
      TS_ASSERT_THROWS (exemplar.region_count (0), std::runtime_error&);
      TS_ASSERT_THROWS (exemplar.region_count (0, 0), std::runtime_error&);
      TS_ASSERT_EQUALS (exemplar.target_particle_number (), 500);
      TS_ASSERT_EQUALS (exemplar.specie_set().size (), 6ul);
      TS_ASSERT_EQUALS (exemplar.specie_set().nsalt (), 1ul);
      TS_ASSERT_EQUALS (exemplar.geometry().bulk_geometry().length(), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().bulk_geometry().volume(), 0.0);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(1), 5.3);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(2), 15.3);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(3), 10.3);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(4), 152.2);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(1), 8.8);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(2), 18.8);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(3), 25.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(4), 30.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(5), 68.5);
      TS_ASSERT_EQUALS (exemplar.geometry().rlvest(), 10.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rlcurv(), 5.0);
      TS_ASSERT_EQUALS (exemplar.conformation().active_size(), 0);
      TS_ASSERT_EQUALS (exemplar.conformation().size(), 0);
      TS_ASSERT_EQUALS (exemplar.conformation().size(0), 0);
      TS_ASSERT_DELTA (exemplar.beta(), 241440919407021129728.0, 1.0);
      TS_ASSERT_DELTA (exemplar.temperature(), 300.0, 0.0001);
      TS_ASSERT_DELTA (exemplar.qstar(), 23.6015, 0.0001);
    }
    {
      ionch::formation exemplar (make_formation (BASIC_CONF_SET));
      TS_ASSERT (not exemplar.is_bulk ());
      TS_ASSERT_EQUALS (exemplar.number_of_regions (), 4);
      TS_ASSERT_DELTA (exemplar.get_region(0).zlimit(), exemplar.geometry().zl(1), 0.001);
      TS_ASSERT_DELTA (exemplar.get_region(1).zlimit(), exemplar.geometry().zl(1), 0.001);
      TS_ASSERT_DELTA (exemplar.get_region(2).zlimit(), exemplar.geometry().zl(2), 0.001);
      TS_ASSERT_DELTA (exemplar.get_region(3).zlimit(), exemplar.geometry().zl(4), 0.001);
      TS_ASSERT_DELTA (exemplar.get_region(0).rlimit(), exemplar.geometry().rl(1), 0.001);
      TS_ASSERT_DELTA (exemplar.get_region(1).rlimit(), exemplar.geometry().rl(1), 0.001);
      TS_ASSERT_DELTA (exemplar.get_region(2).rlimit(), exemplar.geometry().rl(2), 0.001);
      TS_ASSERT_DELTA (exemplar.get_region(3).rlimit(), exemplar.geometry().rl(5), 0.001);
      TS_ASSERT_EQUALS (exemplar.get_region(0).code_name(), \"zlim\");
      TS_ASSERT_EQUALS (exemplar.get_region(1).code_name(), \"filt\");
      TS_ASSERT_EQUALS (exemplar.get_region(2).code_name(), \"chan\");
      TS_ASSERT_EQUALS (exemplar.get_region(3).code_name(), \"bulk\");
      TS_ASSERT_EQUALS (exemplar.region_count (0), 16);
      TS_ASSERT_EQUALS (exemplar.region_count (1), 16);
      TS_ASSERT_EQUALS (exemplar.region_count (2), 16);
      TS_ASSERT_EQUALS (exemplar.region_count (3), 16);
      TS_ASSERT_THROWS (exemplar.region_count (4), std::runtime_error&);
      TS_ASSERT_EQUALS (exemplar.region_count (0, 3), 4);
      TS_ASSERT_EQUALS (exemplar.region_count (1, 3), 4);
      TS_ASSERT_EQUALS (exemplar.region_count (2, 3), 4);
      TS_ASSERT_EQUALS (exemplar.region_count (3, 3), 4);
      TS_ASSERT_EQUALS (exemplar.region_count (4, 3), 0);
      TS_ASSERT_EQUALS (exemplar.region_count (5, 3), 0);
      TS_ASSERT_THROWS (exemplar.region_count (6, 3), std::runtime_error&);
      TS_ASSERT_EQUALS (exemplar.target_particle_number (), 500);
      TS_ASSERT_EQUALS (exemplar.specie_set().size (), 6ul);
      TS_ASSERT_EQUALS (exemplar.specie_set().nsalt (), 1ul);
      // Bulk volume = particles * to_SI / ionic strength
      {
        using namespace std;
        const double vol ((exemplar.target_particle_number() * ionch::constants::to_SI()) / exemplar.specie_set().ionic_strength());
        TS_ASSERT_DELTA (exemplar.geometry().bulk_geometry().length(), cbrt(vol), 0.0001);
        TS_ASSERT_DELTA (exemplar.geometry().bulk_geometry().volume(), vol, 0.1);
      }
      TS_ASSERT_EQUALS (exemplar.geometry().zl(1), 5.3);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(2), 15.3);
      TS_ASSERT_EQUALS (exemplar.geometry().zl(3), 10.3);
      TS_ASSERT_DELTA (exemplar.geometry().zl(4), 99.5263, 0.0001);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(1), 8.8);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(2), 18.8);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(3), 25.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rl(4), 30.0);
      TS_ASSERT_DELTA (exemplar.geometry().rl(5), 84.2263, 0.0001);
      TS_ASSERT_EQUALS (exemplar.geometry().rlvest(), 10.0);
      TS_ASSERT_EQUALS (exemplar.geometry().rlcurv(), 5.0);
      TS_ASSERT_EQUALS (exemplar.conformation().active_size(), 16);
      TS_ASSERT_EQUALS (exemplar.conformation().size(), 16);
      TS_ASSERT_EQUALS (exemplar.conformation().size(0), 4);
      TS_ASSERT_DELTA (exemplar.beta(), 241440919407021129728.0, 1.0);
      TS_ASSERT_DELTA (exemplar.temperature(), 300.0, 0.0001);
      TS_ASSERT_DELTA (exemplar.qstar(), 23.6015, 0.0001);
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1940271 "test_serialize"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    double atemperature, abeta, aqstar;

    std::stringstream store;
    {
      ionch::formation fm (make_formation (BASIC_CONF_SET));
      atemperature = fm.temperature();
      abeta = fm.beta();
      aqstar = fm.qstar();
      boost::archive::text_oarchive oa(store);
      // write class instance to archive
      oa << fm;
    }
    {
      ionch::formation fm2;
      boost::archive::text_iarchive ia(store);
      // write class instance to archive
      ia >> fm2;
      TS_ASSERT (not fm2.is_bulk ());
      TS_ASSERT_EQUALS (fm2.number_of_regions (), 4);
      TS_ASSERT_DELTA (fm2.get_region(0).zlimit(), fm2.geometry().zl(1), 0.001);
      TS_ASSERT_DELTA (fm2.get_region(1).zlimit(), fm2.geometry().zl(1), 0.001);
      TS_ASSERT_DELTA (fm2.get_region(2).zlimit(), fm2.geometry().zl(2), 0.001);
      TS_ASSERT_DELTA (fm2.get_region(3).zlimit(), fm2.geometry().zl(4), 0.001);
      TS_ASSERT_DELTA (fm2.get_region(0).rlimit(), fm2.geometry().rl(1), 0.001);
      TS_ASSERT_DELTA (fm2.get_region(1).rlimit(), fm2.geometry().rl(1), 0.001);
      TS_ASSERT_DELTA (fm2.get_region(2).rlimit(), fm2.geometry().rl(2), 0.001);
      TS_ASSERT_DELTA (fm2.get_region(3).rlimit(), fm2.geometry().rl(5), 0.001);
      TS_ASSERT_EQUALS (fm2.get_region(0).code_name(), \"zlim\");
      TS_ASSERT_EQUALS (fm2.get_region(1).code_name(), \"filt\");
      TS_ASSERT_EQUALS (fm2.get_region(2).code_name(), \"chan\");
      TS_ASSERT_EQUALS (fm2.get_region(3).code_name(), \"bulk\");
      TS_ASSERT_EQUALS (fm2.region_count (0), 16);
      TS_ASSERT_EQUALS (fm2.region_count (1), 16);
      TS_ASSERT_EQUALS (fm2.region_count (2), 16);
      TS_ASSERT_EQUALS (fm2.region_count (3), 16);
      TS_ASSERT_THROWS (fm2.region_count (4), std::runtime_error&);
      TS_ASSERT_EQUALS (fm2.region_count (0, 3), 4);
      TS_ASSERT_EQUALS (fm2.region_count (1, 3), 4);
      TS_ASSERT_EQUALS (fm2.region_count (2, 3), 4);
      TS_ASSERT_EQUALS (fm2.region_count (3, 3), 4);
      TS_ASSERT_EQUALS (fm2.region_count (4, 3), 0);
      TS_ASSERT_EQUALS (fm2.region_count (5, 3), 0);
      TS_ASSERT_THROWS (fm2.region_count (6, 3), std::runtime_error&);
      TS_ASSERT_EQUALS (fm2.target_particle_number (), 500);
      TS_ASSERT_EQUALS (fm2.specie_set().size (), 6ul);
      TS_ASSERT_EQUALS (fm2.specie_set().nsalt (), 1ul);
      // Bulk volume = particles * to_SI / ionic strength
      {
        using namespace std;
        const double vol ((fm2.target_particle_number() * ionch::constants::to_SI()) / fm2.specie_set().ionic_strength());
        TS_ASSERT_DELTA (fm2.geometry().bulk_geometry().length(), cbrt(vol), 0.0001);
        TS_ASSERT_DELTA (fm2.geometry().bulk_geometry().volume(), vol, 0.1);
      }
      TS_ASSERT_EQUALS (fm2.geometry().zl(1), 5.3);
      TS_ASSERT_EQUALS (fm2.geometry().zl(2), 15.3);
      TS_ASSERT_EQUALS (fm2.geometry().zl(3), 10.3);
      TS_ASSERT_DELTA (fm2.geometry().zl(4), 99.5263, 0.0001);
      TS_ASSERT_EQUALS (fm2.geometry().rl(1), 8.8);
      TS_ASSERT_EQUALS (fm2.geometry().rl(2), 18.8);
      TS_ASSERT_EQUALS (fm2.geometry().rl(3), 25.0);
      TS_ASSERT_EQUALS (fm2.geometry().rl(4), 30.0);
      TS_ASSERT_DELTA (fm2.geometry().rl(5), 84.2263, 0.0001);
      TS_ASSERT_EQUALS (fm2.geometry().rlvest(), 10.0);
      TS_ASSERT_EQUALS (fm2.geometry().rlcurv(), 5.0);
      TS_ASSERT_EQUALS (fm2.conformation().active_size(), 16);
      TS_ASSERT_EQUALS (fm2.conformation().size(), 16);
      TS_ASSERT_EQUALS (fm2.conformation().size(0), 4);
      TS_ASSERT_DELTA (fm2.beta(), abeta, 1.0);
      TS_ASSERT_DELTA (fm2.temperature(), atemperature, 0.0001);
      TS_ASSERT_DELTA (fm2.qstar(), aqstar, 0.0001);
    }

  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1021103 "geom_test_suite"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1113775 // <generalisation>
	relation 1076655 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1113775 // <generalisation>
	  b parent class_ref 1020719 // typedef7
      end

      attribute 1318575 "canon_input"
	const_attribute private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 1940399 "geom_test_suite"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}
    : canon_input (\"geom\\nzl1 5.0\\nzl4 100\\nrl1 3.3\\nrlvest 5.0\\nrlcurv 2\\nrl4 15\\nrl5 50\\nend\\n\")
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1940527 "test_geom_help"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1940655 "test_cube_geom_ctr"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1940783 "test_cell_geom_base_ctr"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1940911 "test_cell_geom_read"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    ionch::cell_geom var1;
    {
      boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fsgeom())
        {
          TS_ASSERT_THROWS_NOTHING(var1.read_input (irdr));
        }
      }
    }
    TS_ASSERT_EQUALS (var1.bulk_geometry().length(), 0.0);
    TS_ASSERT_EQUALS (var1.bulk_geometry().volume(), 0.0);
    TS_ASSERT_EQUALS (var1.zl(1), 5.0);
    TS_ASSERT_EQUALS (var1.zl(2), 10.0);
    TS_ASSERT_EQUALS (var1.zl(3), 8.0);
    TS_ASSERT_EQUALS (var1.zl(4), 100.0);
    TS_ASSERT_EQUALS (var1.rl(1), 3.3);
    TS_ASSERT_EQUALS (var1.rl(2), 8.3);
    TS_ASSERT_EQUALS (var1.rl(3), 13.0);
    TS_ASSERT_EQUALS (var1.rl(4), 15.0);
    TS_ASSERT_EQUALS (var1.rl(5), 50.0);
    TS_ASSERT_EQUALS (var1.rlvest(), 5.0);
    TS_ASSERT_EQUALS (var1.rlcurv(), 2.0);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1941039 "test_cell_geom_read_bad_input"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    ionch::cell_geom var1;
    //extra_label ()
    {
      std::string bad_input (\"geom\\nzl1 5.0\\nzl4 100\\nntarg 300\\nrl1 3.3\\nrlvest 5.0\\nrlcurv 2\\nrl4 15\\nrl5 50\\nend\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fsgeom())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    // bad_value
    {
      std::string bad_input (\"geom\\nzl1 zl4\\nzl4 100\\nrl1 3.3\\nrlvest 5.0\\nrlcurv 2\\nrl4 15\\nrl5 50\\nend\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fsgeom())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    // missing values
    {
      std::string bad_input (\"geom\\nzl4 100\\nrl1 3.3\\nrlvest 5.0\\nrlcurv 2\\nrl4 15\\nrl5 50\\nend\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fsgeom())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    {
      std::string bad_input (\"geom\\nzl1 5.0\\nrlvest 5.0\\nrlcurv 2\\nrl4 15\\nrl5 50\\nend\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fsgeom())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    {
      std::string bad_input (\"geom\\nzl1 5.0\\nrl1 3.3\\nrlcurv 2\\nrl4 15\\nrl5 50\\nend\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fsgeom())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    {
      std::string bad_input (\"geom\\nzl1 5.0\\nrl1 3.3\\nrlvest 5.0\\nrl4 15\\nrl5 50\\nend\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fsgeom())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    {
      std::string bad_input (\"geom\\nzl1 5.0\\nrl1 3.3\\nrlvest 5.0\\nrlcurv 2\\nrl5 50\\nend\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fsgeom())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    // Check missing values are allowed for zl4 and rl5
    {
      std::string bad_input (\"geom\\nzl1 5.0\\nrl1 3.3\\nrlvest 5.0\\nrlcurv 2\\nrl4 15\\nrl5 50\\nend\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fsgeom())
        {
          TS_ASSERT_THROWS_NOTHING(var1.read_input (irdr));
        }
      }
    }
    {
      std::string bad_input (\"geom\\nzl1 5.0\\nrl1 3.3\\nrlvest 5.0\\nrlcurv 2\\nrl4 15\\nend\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fsgeom())
        {
          TS_ASSERT_THROWS_NOTHING(var1.read_input (irdr));
        }
      }
    }
    {
      std::string bad_input (\"geom\\nzl1 5.0\\nrl1 3.3\\nrlvest 5.0\\nrlcurv 2\\nrl4 15\\nzl4 50\\nend\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fsgeom())
        {
          TS_ASSERT_THROWS_NOTHING(var1.read_input (irdr));
        }
      }
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1941167 "test_cell_geom_in_geometry"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1941295 "test_cell_geom_read_finalise"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1941423 "test_cell_geom_read_finalise1"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1941551 "test_cell_geom_serialise"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1021231 "permittivity_map_test_suite"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1113903 // <generalisation>
	relation 1076783 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1113903 // <generalisation>
	  b parent class_ref 1020719 // typedef7
      end

      operation 1941679 "test_conf_ctor"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " NOTE Test suite for permittivity_map.hpp SVN 627; permittivity_map.cpp SVN 627"
      end

      operation 1941807 "test_conf_serialise"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1021359 "region_test_suite"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "#include <iomanip>
#include <cmath>
#include <vector>"
      classrelation 1114031 // <generalisation>
	relation 1076911 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1114031 // <generalisation>
	  b parent class_ref 1020719 // typedef7
      end

      operation 1941935 "test_region_ctor"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1942063 "test_region_copy_ctor"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1942191 "test_region_copy_operator"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1942319 "test_region_serialize"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1942447 "test_split_region_ctor1"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1942575 "test_split_region_ctor2"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1942703 "test_split_region_copy_ctor"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1942831 "test_split_region_copy_operator"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1942959 "test_split_region_serialize"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1943087 "test_split_region_cross_serialize"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    const std::string name (\"bulk\");
    const double z1 = 10;
    const double z2 = 7;
    const double r = 5;

    ionch::region var0 (name, z2, r);
    ionch::split_region var1 (r, z2, z1);
    TS_ASSERT_EQUALS(var1.zlimit(), z2);
    TS_ASSERT_EQUALS(var1.inner_limit(), r);
    TS_ASSERT_EQUALS(var1.rlimit(), z1);

    {
      std::stringstream store;
      {
        boost::archive::text_oarchive oa(store);
        // write class instance to archive
        oa << var0;
      }
      {
        boost::archive::text_iarchive ia(store);
        // get class instance from archive
        TS_ASSERT_THROWS_ANYTHING(ia >> var1);
      }
    }
    {
      std::stringstream store;
      {
        boost::archive::text_oarchive oa(store);
        // write class instance to archive
        oa << var1;
      }
      {
        boost::archive::text_iarchive ia(store);
        // get class instance from archive
        TS_ASSERT_THROWS_ANYTHING(ia >> var0);
      }
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1943215 "test_split_generate"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1021487 "salt_test_suite"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1114159 // <generalisation>
	relation 1077039 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1114159 // <generalisation>
	  b parent class_ref 1020719 // typedef7
      end

      operation 1943343 "test_salt_help"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1943471 "test_salt_ctor"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1943599 "test_salt_echo_input"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1943727 "test_salt_read_input"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1943855 "test_salt_copy_ctor"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1943983 "test_salt_copy_operator"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1944111 "test_salt_serialization"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1944239 "test_salt_invalid_input"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    ionch::salt var1;

    // Negative ratgr rate
    {
      std::string canon_input(\"salt\\nname NaCl\\nratgr -0.1\\nctarg 0.05\\nend\\n\\n\");
      {
        boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
        ionch::input_reader irdr (\"dummy\", is);
        while (irdr.next ())
        {
          if (irdr.name() == ionch::constants::fssalt())
          {
            TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
          }
        }
      }
    }
    // Negative target concentration
    {
      std::string canon_input(\"salt\\nname NaCl\\nratgr 0.1\\nctarg -0.05\\nend\\n\\n\");
      {
        boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
        ionch::input_reader irdr (\"dummy\", is);
        while (irdr.next ())
        {
          if (irdr.name() == ionch::constants::fssalt())
          {
            TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
          }
        }
      }
    }
    // Unknown tag
    {
      std::string canon_input(\"salt\\nname NaCl\\nratgr 0.1\\nctarg 0.05\\nntarg 100\\nend\\n\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fssalt())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    // Non-number
    {
      std::string canon_input(\"salt\\nname NaCl\\nratgr 0.1\\nctarg ntarg\\nend\\n\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fssalt())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    // Invalid label (too short)
    {
      std::string canon_input(\"salt\\nname NCl\\nratgr 0.1\\nctarg 0.1\\nend\\n\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fssalt())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    // Invalid label (too long)
    {
      std::string canon_input(\"salt\\nname NaaCl\\nratgr 0.1\\nctarg 0.1\\nend\\n\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fssalt())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    // Invalid label (too long)
    {
      std::string canon_input(\"salt\\ncation NaCl\\nratgr 0.1\\nctarg 0.1\\nend\\n\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fssalt())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    // Invalid label (too short)
    {
      std::string canon_input(\"salt\\ncation N\\nratgr 0.1\\nctarg 0.1\\nend\\n\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fssalt())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Invalid inputs"
      end
    end

    class 1021615 "spec_test_suite"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1114287 // <generalisation>
	relation 1077167 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1114287 // <generalisation>
	  b parent class_ref 1020719 // typedef7
      end

      attribute 1318703 "canon_full_input"
	const_attribute private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 1944367 "spec_test_suite"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "// -------------------------------------------------------------
// Simple compliance test for spec module.
// -------------------------------------------------------------

${inline}${class}::${name}${(}${)}
: canon_full_input(
    \"specie\\nname \\\"Cl\\\"\\nz -1\\nd 2.1\\ntype free\"
    \"\\nratspc 1\\nchex 0.792\\nratexc 1\\nratgr 3\"
    \"\\nratreg 0.3 0.3 0.3 0.1\\nratmov 1\\nend\\n\\n\"
    \"specie\\nname \\\"Ca\\\"\\nz 2\\nd 1.1\\ntype free\"
    \"\\nratspc 1\\nchex 0.792\\nratexc 1\\nratgr 3\"
    \"\\nratreg 0.3 0.3 0.3 0.1\\nratmov 1\\nend\\n\\n\"
    \"specie\\nname \\\"C1\\\"\\nz 2\\nd 0.9\\ntype free\"
    \"\\nratspc 1\\nchex 0.792\\nratexc 1\\nratgr 3\"
    \"\\nratreg 0.3 0.3 0.3 0.1\\nratmov 1\\nend\\n\\n\"
    \"salt\\nname \\\"CaCl\\\"\\nratgr 0.1\\nctarg 0.05\\nend\\n\\n\"
    \"subspecie\\nname \\\"Ca\\\"\\nratswap 1\"
    \"\\nsubname \\\"Ca\\\"\\nenthalpy 0\\nentropy 0\\nratswap 0.5\\nend\"
    \"\\nsubname \\\"C1\\\"\\nenthalpy 32\\nentropy 103\\nratswap 0.5\\nend\\nend\\n\\n\")
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1944495 "test_spec_ctor"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    ionch::spec var1;
    TS_ASSERT_EQUALS (var1.size (), 0ul);
    TS_ASSERT_EQUALS (var1.nsalt (), 0ul);
    TS_ASSERT_THROWS (var1.get_specie (0), std::runtime_error&);
    TS_ASSERT_THROWS (var1.dd_get (0,1), std::runtime_error&);
    std::stringstream os;
    ionch::conf cf;
    var1.echo_input(cf, os);
    TS_ASSERT (os.str ().empty());
    TS_ASSERT_EQUALS (var1.ionic_strength (), 0.0);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1944623 "test_spec_read_input"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    ionch::spec var1;
    {
      boost::shared_ptr< std::istream > is (new std::stringstream (canon_full_input));
      ionch::input_reader irdr (\"dummy\", is);
      size_t counter = 0;
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fsspec())
        {
          TS_ASSERT_THROWS_NOTHING(var1.read_specie (irdr));
          ++counter;
        }
        else if (irdr.name() == ionch::constants::fssalt())
        {
          TS_ASSERT_THROWS_NOTHING(var1.read_salt (irdr));
          ++counter;
        }
        if (irdr.name() == ionch::constants::fssubs())
        {
          TS_ASSERT_THROWS_NOTHING(var1.read_subspecie (irdr));
          ++counter;
        }
      }
      TS_ASSERT_EQUALS (counter, 5ul);
    }
    TS_ASSERT_EQUALS (var1.size (), 3ul);
    TS_ASSERT_EQUALS (var1.nsalt (), 1ul);
    TS_ASSERT_THROWS_NOTHING(var1.get_specie (0));

    {
      std::stringstream os;
      ionch::conf cf;
      var1.echo_input(cf, os);
      const std::string actual_input(os.str());
      std::pair < std::string::const_iterator, std::string::const_iterator > result = std::mismatch(canon_full_input.begin(), canon_full_input.end(), actual_input.begin());
//      std::cout << \"ACT[\" << actual_input << \"]\\n\";
//      std::cout << \"CAN[\" << canon_full_input << \"]\\n\";
      TS_ASSERT_EQUALS (std::size_t(result.first - canon_full_input.begin()), canon_full_input.size());
      TS_ASSERT_EQUALS (canon_full_input, actual_input);
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1944751 "test_spec_serialisation"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// const std::string alt_input(\"specie\\nname Ca\\nz 2\\nd 1.1\\ntype free\\nratspc 1\\nchex 0.792\\nratexc 1\\nratgr 3\\nratreg 0.3 0.3 0.3 0.1\\nratmov 1\\nend\\n\\n\");

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1021743 "specie_test_suite"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "#include <vector>"
      classrelation 1114415 // <generalisation>
	relation 1077295 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1114415 // <generalisation>
	  b parent class_ref 1020719 // typedef7
      end

      attribute 1318831 "canon_input"
	const_attribute private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 1944879 "specie_test_suite"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "//#include <iostream>
//#include <iomanip>
//#include <cmath>
//#include \"formation/conf.hpp\"
//
//#include <vector>

${inline}${class}::${name}${(}${)}
: canon_input(\"specie\\nname \\\"Ca\\\"\\nz 2\\nd 1.1\\ntype free\"
    \"\\nratspc 1\\nchex 0.792\\nratexc 1\\nratgr 3\"
    \"\\nratreg 0.3 0.3 0.3 0.1\\nratmov 1\\nend\\n\\n\")
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1945007 "test_specie_help"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1945135 "test_specie_ctor"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    ionch::specie var1;
    TS_ASSERT (not var1.is_valid ());
    TS_ASSERT (not var1.is_localized ());
    TS_ASSERT (not var1.is_flexible ());
    TS_ASSERT (not var1.is_solute ());
    TS_ASSERT (not var1.is_channel_only ());

    TS_ASSERT_EQUALS (var1.chemical_potential (), 0.0);
    TS_ASSERT_EQUALS (var1.chemical_excess (), 0.0);
    TS_ASSERT (var1.code_name ().empty ());
    TS_ASSERT_EQUALS (var1.radius (), 0.0);
    TS_ASSERT_EQUALS (var1.reduced_charge (), 0.0);
    TS_ASSERT_EQUALS (var1.valency (), 0.0);
    if (var1.is_solute ())
    {
      TS_ASSERT_EQUALS (var1.concentration (), 0.0);
    }
    else
    {
      TS_ASSERT_THROWS (var1.concentration (), std::runtime_error&);
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1945263 "test_specie_read_input"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    ionch::specie var1;
    {
      boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fsspec())
        {
          TS_ASSERT_THROWS_NOTHING(var1.read_input (irdr));
        }
      }
    }
    {
      std::stringstream os;
      ionch::conf cf;
      var1.echo_input (0, cf, os);
      std::string actual_input(os.str());
      std::pair < std::string::const_iterator, std::string::const_iterator > result = std::mismatch(canon_input.begin(), canon_input.end(), actual_input.begin());
      TS_ASSERT_EQUALS (std::size_t(result.first - canon_input.begin()), canon_input.size());
      TS_ASSERT_EQUALS (canon_input, actual_input);
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1945391 "test_specie_set_chem_potential"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Test setting the chemical potential and concentration"
      end

      operation 1945519 "test_specie_normalise"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Test normalising the rate_specie and rate_change"
      end

      operation 1945647 "test_specie_copy_ctor"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1945775 "test_specie_copy_operator"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1945903 "test_specie_serialization"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1946031 "test_specie_invalid_input"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    ionch::specie var1;
    {
      // Invalid label in specie section
      std::string bad_input(\"specie\\nname \\\"Ca\\\"\\nntarg 10\\nratspc 1.0\\nratmov 1.0\\nratexc 1.0\\nratgr 3.0\\nratreg 0.3 0.3 0.3 0.1\\nz 2.0\\nd 1.1\\nchex 0.792\\ntype free\\nend\\n\\n\");
      {
        boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
        ionch::input_reader irdr (\"dummy\", is);
        while (irdr.next ())
        {
          if (irdr.name() == ionch::constants::fsspec())
          {
            TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
          }
        }
      }
    }

    // Value for n without any following definitions
    {
      std::string bad_input(\"specie\\nname \\\"Ca\\\"\\nratspc 1.0\\nratmov 1.0\\nratexc 1.0\\nratgr 3.0\\nn 10\\nratreg 0.3 0.3 0.3 0.1\\nz 2.0\\nd 1.1\\nchex 0.792\\ntype free\\nend\\n\\n\");
      {
        boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
        ionch::input_reader irdr (\"dummy\", is);
        while (irdr.next ())
        {
          if (irdr.name() == ionch::constants::fsspec())
          {
            TS_ASSERT_THROWS (var1.read_input (irdr), std::runtime_error&);
          }
        }
      }
    }

    // Value for n without any following definitions
    {
      std::string bad_input(\"specie\\nname \\\"Ca\\\"\\nn 0\\nratspc 1.0\\nratmov 1.0\\nratexc 1.0\\nratgr 3.0\\nratreg 0.3 0.3 0.3 0.1\\nz 2.0\\nd 1.1\\nchex 0.792\\ntype free\\nend\\n\\n\");
      {
        boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
        ionch::input_reader irdr (\"dummy\", is);
        while (irdr.next ())
        {
          if (irdr.name() == ionch::constants::fsspec())
          {
            TS_ASSERT_THROWS_NOTHING(var1.read_input (irdr)); //, std::runtime_error&);
          }
        }
      }
    }

    // Negative ratspc rate
    {
      std::string bad_input(\"specie\\nname \\\"Ca\\\"\\nratspc -1.0\\nratmov 1.0\\nratexc 1.0\\nratgr 3.0\\nratreg 0.3 0.3 0.3 0.1\\nz 2.0\\nd 1.1\\nchex 0.792\\ntype free\\nend\\n\\n\");
      {
        boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
        ionch::input_reader irdr (\"dummy\", is);
        while (irdr.next ())
        {
          if (irdr.name() == ionch::constants::fsspec())
          {
            TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
          }
        }
      }
    }

    // Negative ratmov rate
    {
      std::string bad_input(\"specie\\nname \\\"Ca\\\"\\nratspc 1.0\\nratmov -1.0\\nratexc 1.0\\nratgr 3.0\\nratreg 0.3 0.3 0.3 0.1\\nz 2.0\\nd 1.1\\nchex 0.792\\ntype free\\nend\\n\\n\");
      {
        boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
        ionch::input_reader irdr (\"dummy\", is);
        while (irdr.next ())
        {
          if (irdr.name() == ionch::constants::fsspec())
          {
            TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
          }
        }
      }
    }

    // Greater than 1 ratexc rate
    {
      std::string bad_input(\"specie\\nname \\\"Ca\\\"\\nratspc 1.0\\nratmov 1.0\\nratexc 2.0\\nratgr 3.0\\nratreg 0.3 0.3 0.3 0.1\\nz 2.0\\nd 1.1\\nchex 0.792\\ntype free\\nend\\n\\n\");
      {
        boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
        ionch::input_reader irdr (\"dummy\", is);
        while (irdr.next ())
        {
          if (irdr.name() == ionch::constants::fsspec())
          {
            TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
          }
        }
      }
    }

    // Negative ratgr rate
    {
      std::string bad_input(\"specie\\nname \\\"Ca\\\"\\nratspc 1.0\\nratmov 1.0\\nratexc 1.0\\nratgr -3.0\\nratreg 0.3 0.3 0.3 0.1\\nz 2.0\\nd 1.1\\nchex 0.792\\ntype free\\nend\\n\\n\");
      {
        boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
        ionch::input_reader irdr (\"dummy\", is);
        while (irdr.next ())
        {
          if (irdr.name() == ionch::constants::fsspec())
          {
            TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
          }
        }
      }
    }

    // Negative ratreg rate
    {
      std::string bad_input(\"specie\\nname \\\"Ca\\\"\\nratspc 1.0\\nratmov 1.0\\nratexc 1.0\\nratgr 3.0\\nratreg 0.3 -0.3 0.3 0.1\\nz 2.0\\nd 1.1\\nchex 0.792\\ntype free\\nend\\n\\n\");
      {
        boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
        ionch::input_reader irdr (\"dummy\", is);
        while (irdr.next ())
        {
          if (irdr.name() == ionch::constants::fsspec())
          {
            TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
          }
        }
      }
    }

    // Negative diameter
    {
      std::string bad_input(\"specie\\nname \\\"Ca\\\"\\nratspc 1.0\\nratmov 1.0\\nratexc 1.0\\nratgr 3.0\\nratreg 0.3 -0.3 0.3 0.1\\nz 2.0\\nd -1.1\\nchex 0.792\\ntype free\\nend\\n\\n\");
      {
        boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
        ionch::input_reader irdr (\"dummy\", is);
        while (irdr.next ())
        {
          if (irdr.name() == ionch::constants::fsspec())
          {
            TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
          }
        }
      }
    }

    // Invalid type 1
    {
      std::string bad_input(\"specie\\nname \\\"Ca\\\"\\nratspc 1.0\\nratmov 1.0\\nratexc 1.0\\nratgr 3.0\\nratreg 0.3 -0.3 0.3 0.1\\nz 2.0\\nd 1.1\\nchex 0.792\\ntype freeze\\nend\\n\\n\");
      {
        boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
        ionch::input_reader irdr (\"dummy\", is);
        while (irdr.next ())
        {
          if (irdr.name() == ionch::constants::fsspec())
          {
            TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
          }
        }
      }
    }

    // Invalid type 2
    {
      std::string bad_input(\"specie freeze\\nname \\\"Ca\\\"\\nratspc 1.0\\nratmov 1.0\\nratexc 1.0\\nratgr 3.0\\nratreg 0.3 -0.3 0.3 0.1\\nz 2.0\\nd 1.1\\nchex 0.792\\nend\\n\\n\");
      {
        boost::shared_ptr< std::istream > is (new std::stringstream (bad_input));
        ionch::input_reader irdr (\"dummy\", is);
        while (irdr.next ())
        {
          if (irdr.name() == ionch::constants::fsspec())
          {
            TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
          }
        }
      }
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1021871 "subspecie_test_suite"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1114543 // <generalisation>
	relation 1077423 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1114543 // <generalisation>
	  b parent class_ref 1020719 // typedef7
      end

      attribute 1318959 "canon_input"
	const_attribute private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1319087 "alt_input"
	const_attribute private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 1946159 "subspecie_test_suite"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}
: canon_input(\"subspecie\\nname \\\"Ca\\\"\\nratswap 1.0\\nsubname \\\"Ca\\\"\\nend\\nsubname \\\"C1\\\"\\nenthalpy 32.0\\nentropy 103.0\\nend\\nend\\n\\n\")
, alt_input(\"subspecie\\nname \\\"Ca\\\"\\nratswap 1\\nsubname \\\"Ca\\\"\\nenthalpy 0\\nentropy 0\\nratswap 0.5\\nend\\nsubname \\\"C1\\\"\\nenthalpy 32\\nentropy 103\\nratswap 0.5\\nend\\nend\\n\\n\")
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1946287 "test_subspecie_help"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1946415 "test_subspecie_ctor"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1946543 "test_subspecie_echo_input"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1946671 "test_subspecie_read_input"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    ionch::subspecie var1;
    {
      boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fssubs())
        {
          TS_ASSERT_THROWS_NOTHING(var1.read_input (irdr));
        }
      }
    }
    {
      std::stringstream os;
      var1.echo_input (os);
      std::string actual_input(os.str());
      std::pair < std::string::const_iterator, std::string::const_iterator > result = std::mismatch(canon_input.begin(), canon_input.end(), actual_input.begin());
      if (result.first != canon_input.end())
      {
        std::pair < std::string::const_iterator, std::string::const_iterator > result = std::mismatch(alt_input.begin(), alt_input.end(), actual_input.begin());
        TS_ASSERT_EQUALS (std::size_t(result.first - alt_input.begin()), alt_input.size());
        TS_ASSERT_EQUALS (alt_input, actual_input);
      }
      else
      {
        TS_ASSERT_EQUALS (std::size_t(result.first - canon_input.begin()), canon_input.size());
        TS_ASSERT_EQUALS (canon_input, actual_input);
      }
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1946799 "test_subspecie_copy_ctor"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1946927 "test_subspecie_copy_operator"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1947055 "test_subspecie_serialization"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1947183 "test_subspecie_invalid_input"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    ionch::subspecie var1;
    {
      // Negative ratswap for subspecie rate
      const std::string canon_input(\"subspecie\\nname \\\"Ca\\\"\\nratswap -1.0\\nsubname \\\"Ca\\\"\\nend\\nsubname \\\"C1\\\"\\nenthalpy 32.0\\nentropy 103.0\\nend\\nend\\n\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fssubs())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    {
      // Negative ratswap for sub-subspecie rate
      const std::string canon_input(\"subspecie\\nname \\\"Ca\\\"\\nratswap 1.0\\nsubname \\\"Ca\\\"\\nend\\nsubname \\\"C1\\\"\\nenthalpy 32.0\\nentropy 103.0\\nratswap -1.0\\nend\\nend\\n\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fssubs())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    {
      // Invalid ratswap value
      const std::string canon_input(\"subspecie\\nname \\\"Ca\\\"\\nratswap 1X\\nsubname \\\"Ca\\\"\\nend\\nsubname \\\"C1\\\"\\nenthalpy 32.0\\nentropy 103.0\\nratswap -1.0\\nend\\nend\\n\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fssubs())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    {
      // Invalid subspecie label value (too long)
      const std::string canon_input(\"subspecie\\nname \\\"Ca1\\\"\\nratswap 1\\nsubname \\\"Ca\\\"\\nend\\nsubname \\\"C1\\\"\\nenthalpy 32.0\\nentropy 103.0\\nratswap -1.0\\nend\\nend\\n\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fssubs())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    {
      // Invalid subspecie label value (too short)
      const std::string canon_input(\"subspecie\\nname \\\"C\\\"\\nratswap 1\\nsubname \\\"Ca\\\"\\nend\\nsubname \\\"C1\\\"\\nenthalpy 32.0\\nentropy 103.0\\nratswap -1.0\\nend\\nend\\n\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fssubs())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    {
      // Invalid sub-subspecie label value (too short)
      const std::string canon_input(\"subspecie\\nname \\\"Ca\\\"\\nratswap 1\\nsubname \\\"C\\\"\\nend\\nsubname \\\"C1\\\"\\nenthalpy 32.0\\nentropy 103.0\\nratswap -1.0\\nend\\nend\\n\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fssubs())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
    {
      // Invalid sub-subspecie label value (too long)
      const std::string canon_input(\"subspecie\\nname \\\"Ca\\\"\\nratswap 1\\nsubname \\\"Ca\\\"\\nend\\nsubname \\\"C10\\\"\\nenthalpy 32.0\\nentropy 103.0\\nratswap -1.0\\nend\\nend\\n\\n\");
      boost::shared_ptr< std::istream > is (new std::stringstream (canon_input));
      ionch::input_reader irdr (\"dummy\", is);
      while (irdr.next ())
      {
        if (irdr.name() == ionch::constants::fssubs())
        {
          TS_ASSERT_THROWS(var1.read_input (irdr), std::runtime_error&);
        }
      }
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end
  end
end
