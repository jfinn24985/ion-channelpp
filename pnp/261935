format 75
"implementation" // observable::Sample collection::implementation
  revision 45
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "CC/implementation"
  cpp_src_dir "CC/implementation"
  cpp_namespace "ionch::implementation"
  classview 248751 "Sample observables"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 236079 // impl
    comment "Observables are a set of classes for creating mean results from repeated
measurements or observations.

 The file contains a series of classes for the collection of data
 samples for which the mean and variance is required.

 These classes are split into two main categories: count observables
 and sample observables. For sample observables each sample
 iteration generates a single value the is inserted into the
 observable.

 Several aggregate types exist (1D histograms and 2+D matrices).
 Whether to use these aggregates or simple aggregates of the basic
 observable class depends on the type of observable. In general the
 aggregates should be used when they logically represent multiple
 samples from a single distribution.
"
    classdiagram 372399 "samplers"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 662575 "sampler"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "  This class manages a reference to a sampler sub-type object.  This
  class provides safe value-type access semantics to the encapsulated
  sampler.  It can thus be safely used in a STL containers without
  risk of slicing the encapsulated object.  The encapsulated object
  is maintained as a weak pointer so the call to on_conclusion will
  be a no-op if the encapsulated object has been deleted.
"
      operation 1162287 "on_conclusion"
	cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "a_is_success" explicit_type "bool"
	  param in name "a_set" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  This method is to be called at the end of a single MC step."
      end

      extra_member 301103 "OBSERVATIONS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      attribute 539183 "aocc_"
	private explicit_type "std::size_t"
	multiplicity "[3][8]"
	cpp_decl ""
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " co-occupancy matrix - record what sets of particles
 are in the filter region at the same time

 Dimensions are: 1 region, [ occ ]

 where occ is an 8 bit pattern consisting of  anion[76] cation1 [543] cation2 [210] occupancies"
      end

      attribute 539311 "anin_"
	private explicit_type "ionch::observable < double >, 2"
	init_value "(boost::extents[constants::nspcmx][constants::nrgnmx])"
	stereotype "boost::multi_array"
	cpp_decl ""
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Sum of particles in each region. Note that all paticles of a
 specie will be in the ibulk region.

 NOTE: merged fortran an into this as anin[...][ibulk]

 NOTE: Only free species are stored

 [constants::nspcmx][constants::nrgnmx];"
      end

      attribute 539567 "acharge_"
	private explicit_type "double"
	stereotype "ionch::observable"
	cpp_decl ""
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Current charge of system"
      end

      attribute 539055 "ah_"
	private explicit_type "double"
	stereotype "ionch::observable_histogram"
	cpp_decl ""
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Sum of h vector from patch module"
      end

      attribute 538543 "amobile_"
	private explicit_type "point"
	multiplicity "*"
	stereotype "ionch::observable_histogram"
	cpp_decl ""
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Statistics relating to each mobile structural ions"
      end

      operation 707503 "initialise_observables"
	stereotype "initialize"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  Initialise data arrays and calculate dimensions/regions for
  statistics collection

  Key functions:

  - allocate the arrays that are needed

  - on 'calgin' initialise the 'gin' distribution and geometry
  parameters.

  - initialise the 'gz' distribution (call geometry def.  in
  trial.mod)

  - on 'calrdf' initialise the 'rdf' distribution

  - echo interpreted content of input file

"
      end

      operation 747439 "record_energy"
	private explicit_return_type "void"
	nparams 1
	  param in name "bfcr" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  (is_displacement() ? ameng_[ispcnw[0]] : is_add_gcmc() ?  aceng_[ispcnw[0]] : adeng_[ispcnw[0]]) << bfcr;
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Save energy data

 Update the internal data sets that monitor the energy
 changes (printed in 'avergi')"
      end

      operation 747055 "report_energy_means"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "a_os" explicit_type "ostream"
	  param in name "ispec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Calculate statistics for the energy factors used to determine
 acceptance for addition, move and creation steps.

 The information output here can be used to investigate the
 energetics of add/deletion of particles, something that may
 give an indication of problems with the chemical potentials."
      end

      operation 1426991 "accget"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "  Get log of ratio try_create/try_destroy
  
  Get the ratio of create/destroy attempts for free
  species.
  
  One of the equilibration methods limits the create/destroy
  attempts by repeating only create or only destroy attempts
  when a GCMC move is selected until the attempt succeeds, at
  which time the reverse operation is repeated.  This ensures
  that the number of particles of each specie will remain close
  to the starting value.  If the chemical potential is exactly
  correct then the number of attempts to create a particle should
  be equal to the attempts to destroy one.  Thus the value
  returned here can be used to self-consistently adjust the
  chemical potentials."
      end

      operation 1426735 "accrat"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "  Write out acceptance ratios
  
  The information output by this method can be used to evaluate
  the performance of the parameters and methods used in the GCMC step."
      end

      operation 1426863 "avgget"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "  Get ratio (destroy-create)/(create+destroy)
  
  Get create/destroy ratio for free species"
      end

      operation 1426607 "savewd"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "  write results of the widom calculation"
      end

      operation 706479 "accumulate"
	stereotype "sample"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  Accumulate statistics after each trial move.

  During main simulation phase this routine collects filter occupancy
  data.  Collect particle counts, the 'h' vector and charge.

  During the thermalisation phase this routine collects data for
  chemical potential adjustment.  This involves counting the number
  of particles in the bulk sampling region.

  fortran equiv accum::accmlt and accum::acceql
"
      end

      operation 706991 "compute_accumulate"
	stereotype "sample"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  Accumulate statistics over steps_mix interval

  Care should be taked to make this method as fast as possible as
  it is the most often called method that must calculate its
  statistices from the entire ensemble.

  Collection of the z-axial distribution (gz) always occurs.  It
  uses gz_bin to get the axial bin number.

  The 'calmob' set of statistics are related to the positions of
  the mobile structural ions.  These ions are new in version 17 and
  this method is to quantify how well the code is behaving with
  respect to movement around the centre-point.

  The 'calgin' set of statistics is a 2D distribution around the
  z-axis and r-radial.  Unlike the gz distribution, the data is
  only collected here in a subregion of the simulation space.  It
  determines the histogram bins by dividing the z and r dimensions
  by drg.

  The 'calrdf' set of statistics is the inter-particle radial
  distribution around particles in region 1 or 2.  The bin number
  is determined from the radial distance divided by 'drdf'.  (Note:
  The maximum number of bins is < 15/drdf.)

  fortran accum::hist"
      end

      operation 707887 "chemical_potentials"
	stereotype "report"
	preserve_cpp_body_indent const private explicit_return_type "void"
	nparams 1
	  param inout name "strbuf" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// -----------------------------------------------------------------
// Write comparison of current chemical potentials to target
// potentials.

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Write comparison of current chemical potentials to target
potentials.
"
      end

      operation 708143 "mobile_particle_motion"
	stereotype "report"
	preserve_cpp_body_indent const private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "write mobile ion statistics"
      end

      operation 708015 "particle_counts"
	stereotype "report"
	preserve_cpp_body_indent const private explicit_return_type "void"
	nparams 1
	  param inout name "strbuf" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Write current particle counts by region."
      end

      operation 708271 "particle_count_distribution"
	stereotype "report"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "write mean particle count data to file. The bulk output from this
method is for 'bulk-sampling' region

writes to files a[region]-[specie].000
"
      end

      operation 1161775 "sampler"
	public explicit_return_type ""
	nparams 1
	  param inout name "letter" explicit_type "sampler_letter"
	cpp_decl "    ${comment}${inline}${name}${(}bal::shared_ptr< ${t0} >::Type & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}bal::shared_ptr< ${t0} >::Type & ${p0}${)}${throw}
: letter_ (${p0}) 
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 1161903 "~sampler"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 1162031 "sampler"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 662575 // sampler
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} 
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 1162159 "operator="
	public return_type class_ref 662575 // sampler
	nparams 1
	  param in name "source" type class_ref 662575 // sampler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 1659055 "sample"
	public explicit_return_type "void"
	nparams 1
	  param in name "runner" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 872239 "Trials"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 943535 // trials (<directional composition>)
	relation 914223 *-->
	  a role_name "trials" class_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 943535 // trials (<directional composition>)
	  b parent class_ref 872239 // Trials
      end

      attribute 1097263 "calwid"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1097391 "nwdtry"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 1551023 "zeroav"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1551151 "accget"
	public explicit_return_type "double"
	nparams 1
	  param in name "ispec" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1551279 "avergi"
	public explicit_return_type "void"
	nparams 1
	  param in name "ispec" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1551407 "avergeng"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1551535 "accrat"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 444591 "reporter"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "// -------------------------------------------------------------
// Statistics Module
//
// -------------------------------------------------------------
// Methods:
// accmlt
//    accumulate statistical data that requires no calculation.
// hist
//    process MC system data into histogram bins.
// rdaccu
//    read 'accum' input file section
// rfaccu
//    finalise initialisation after reading the input file
// saves
//    output a digest of the statistics
// zeroac
//    reset the statistic counters
// -------------------------------------------------------------
// Constants
// nzgmx,nrgmx : histrogram bins in z and r directions"
      attribute 539823 "drg_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "2D 'GIN' DISTRIBUTION PARAMETERS:
Width of bins (both axial and radial) in 2D 'gin' distribution
'gin'."
      end

      attribute 539951 "zinlft_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The axial outer-most point of the 2D 'gin' distribution"
      end

      attribute 540079 "rinup_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The radial outer-most point of the 2D 'gin' distribution"
      end

      attribute 540207 "vjin_factor_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Volume for the 2D 'gin' histogram bins"
      end

      attribute 540335 "nrgr_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of radial bins in 2D 'gin' distribution"
      end

      attribute 540463 "nrgz_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of axial bins in 2D 'gin' distribution"
      end

      attribute 540591 "gin_"
	private explicit_type "ionch::count_matrix< double, 2 >"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The 2D 'gin' distribution"
      end

      attribute 540719 "chgdist_"
	private explicit_type "double, 2, int64_t"
	stereotype "ionch::count_matrix"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Charge distribution that was formerly gin_(nspec,..). As we allow half charges
 we multiply all charges by 2 so we get integer charge changes.
 
 Note use of signed int as counter so we can include negative charge counts."
      end

      attribute 540847 "rdf_zlim_"
	private explicit_type "ionch::count_histogram< double >, 2"
	stereotype "boost::multi_array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "INTER-PARTICLE DISTRIBUTION PARAMETERS:
The inter-particle radial distributions for particles in the channel.

NOTE: Changed rdf to record two distributions. One for particles
in region izlim and one for particles in region ichan that are
not also in region izlim.

NOTE: ardf made redundant by using count_histogram"
      end

      attribute 540975 "rdf_chan_"
	private explicit_type "ionch::count_histogram< double >, 2"
	stereotype "boost::multi_array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 541103 "drdf_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Width of histogram bins in the inter-particle radial distribution"
      end

      attribute 541231 "nrdf_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of active bins in the inter-particle radial distribution"
      end

      attribute 541359 "gz_"
	private explicit_type "ionch::count_histogram< double >"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The z-axial 'gz' distribution data"
      end

      attribute 541487 "nrg_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of in-use bins in the 'gz' distribution"
      end

      attribute 541743 "isave_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [INPUT] How often the statistic data is saved."
      end

      operation 769071 "reporter"
	public explicit_return_type ""
	nparams 1
	  param inout name "a_parent" type class_ref 448943 // channel_simulator
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}${)}${volatile}${throw} 
${body}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 707247 "save_interval"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->isave_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 706351 "vjin"
	const cpp_inline private explicit_return_type "double"
	nparams 1
	  param in name "radial_idx" explicit_type "int"
	cpp_decl "${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return vjin_factor_ * (2 * radial_idx + 1);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

    end

    classdiagram 267567 "Observables"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 670511 "basic_observable"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      operation 1172271 "mean"
	abstract cpp_virtual public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  The mean observation"
      end

      operation 1172399 "variance"
	abstract cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " The variance of the observation"
      end
    end

    class 471599 "base_observable"
      visibility package 
      nformals 2
      formal name "Float_Type" type "class" explicit_default_value ""
        explicit_extends ""
      formal name "Counter_Type" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      class 471855 "counter_type"
	visibility package stereotype "typedef" explicit_base_type ""
	cpp_decl "${comment}typedef Counter_Type ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 471727 "mean_type"
	visibility package stereotype "typedef" explicit_base_type ""
	cpp_decl "${comment}typedef Float_Type ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      attribute 607919 "mean_"
	public type class_ref 471727 // mean_type
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 607791 "vars_"
	public type class_ref 471727 // mean_type
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 795823 "insert"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "count" type class_ref 471855 // counter_type
	  param in name "next" type class_ref 471727 // mean_type
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  if (1 != count)
  {
    const Float_Type old_m_ (this->mean_);
    this->mean_ += (next - old_m_) / Float_Type(count);
    this->vars_ += (next - old_m_) * (next - this->mean_);
  }
  else
  {
    // first value
    this->mean_ = next;
    this->vars_ = next;
  }
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 796207 "mean"
	const cpp_inline public return_type class_ref 471727 // mean_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return mean_; 
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " The average value of the sampled distribution"
      end

      operation 796079 "variance"
	const cpp_inline public return_type class_ref 471727 // mean_type
	nparams 1
	  param in name "count" type class_ref 471855 // counter_type
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
    return (${p0} > 1 ? (vars_/mean_type(${p0} - 1)) : mean_type(0));
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " The sample variance of the sampled distribution"
      end

      operation 795951 "stddev"
	const cpp_inline public return_type class_ref 471727 // mean_type
	nparams 1
	  param in name "count" type class_ref 471855 // counter_type
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
    return (${p0} > 1 ? std::sqrt(this->variance(${p0})) : ${type}(0));
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "The standard deviation of the sampled distribution"
      end

      operation 796335 "base_observable"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
  : mean_ ()
  , vars_ ()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 796975 "base_observable"
	public explicit_return_type ""
	nparams 1
	  param in name "next" type class_ref 471727 // mean_type
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${)}${volatile}${throw}
  : mean_ (${p0})
  , vars_ (${p0})
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 796463 "~base_observable"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 796591 "base_observable"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 471599 // base_observable
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
  : mean_(${p0}.mean_)
  , vars_(${p0}.vars_)
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 796719 "operator="
	public return_type class_ref 471599 // base_observable
	nparams 1
	  param in name "source" type class_ref 471599 // base_observable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap (${p0});
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 796847 "swap"
	public explicit_return_type "void"
	nparams 1
	  param in name "source" type class_ref 471599 // base_observable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap (mean_, ${p0}.mean_);
  std::swap (vars_, ${p0}.vars_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end
    end

    class 444719 "observable"
      visibility package 
      nformals 2
      formal name "Float_Type" type "class" explicit_default_value ""
        explicit_extends ""
      formal name "Counter_Type" type "class" explicit_default_value "size_t"
        explicit_extends ""
      nactuals 2
      actual class class_ref 471599 // base_observable
        rank 0 explicit_value "Float_Type"
      actual class class_ref 471599 // base_observable
        rank 1 explicit_value "Counter_Type"
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Class: observable

 Manage a value that is derived from the average of repeated
 observations.

 This class uses a successive addition algorithm to calculate the
 mean and variance of a sample value. This is reported to be
 numerically more stable than the traditional sum and sum of
 squares methods.

 The default Counter_Type is size_t.  Generally this should be an
 unsigned integer of approximately the same size as the Float_Type"
      classrelation 521263 // <realization>
	relation 515119 -_-|>
	  a protected
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 521263 // <realization>
	  b parent class_ref 471599 // base_observable
      end

      class 471983 "base_class"
	visibility package stereotype "typedef" base_type class_ref 471599 // base_observable
	cpp_decl "${comment}typedef ${type}< Float_Type, Counter_Type > ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 470703 "mean_type"
	visibility package stereotype "typedef" explicit_base_type "typename base_class::"
	cpp_decl "${comment}typedef ${type}${name} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 470831 "counter_type"
	visibility package stereotype "typedef" explicit_base_type "typename base_class"
	cpp_decl "${comment}typedef ${type}::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      classrelation 519983 // count_ (<directional composition>)
	relation 513839 *-->
	  a role_name "count_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 519983 // count_ (<directional composition>)
	  b parent class_ref 470831 // counter_type
      end

      classrelation 519855 // max_ (<directional composition>)
	relation 513711 *-->
	  a role_name "max_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 519855 // max_ (<directional composition>)
	  b parent class_ref 470703 // mean_type
      end

      classrelation 519727 // min_ (<directional composition>)
	relation 513583 *-->
	  a role_name "min_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 519727 // min_ (<directional composition>)
	  b parent class_ref 470703 // mean_type
      end

      operation 726575 "observable"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${name}${(}${)}${volatile}${throw}
  : base_class ()
  , count_ (0)
  , max_ ()
  , min_ ()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 726703 "observable"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 444719 // observable
	cpp_decl "    ${comment}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}
  : base_class (other)
  , count_ (other.count_)
  , max_  (other.max_)
  , min_  (other.min_)
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 726831 "observable"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "first" type class_ref 470703 // mean_type
	cpp_decl "    ${comment}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}
  : base_class (${p0})
  , count_ (1)
  , max_ (first)
  , min_ (first)
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 726959 "~observable"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${virtual}${name}${(}${)}${volatile}${throw}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 727087 "swap"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 444719 // observable
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->base_class::swap (other);
  std::swap (count_, other.count_);
  std::swap (max_, other.max_);
  std::swap (min_, other.min_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 727215 "operator ="
	cpp_inline public return_type class_ref 444719 // observable
	nparams 1
	  param in name "other" type class_ref 444719 // observable
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap(other);
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 727343 "operator<<"
	cpp_inline public return_type class_ref 444719 // observable
	nparams 1
	  param in name "next" type class_ref 470703 // mean_type
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  // Increment counter here as we need the total count when
  // calculating the average.
  ++count_;
  base_class::insert (count_, ${p0});
  if (1 != count_)
  {
    min_ = std::min(${p0}, min_);
    max_ = std::max(${p0}, max_);
  }
  else
  {
    // first value
    min_ = ${p0};
    max_ = ${p0};
  }
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 727471 "size"
	const cpp_inline public return_type class_ref 470831 // counter_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return count_;
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 727599 "mean"
	const cpp_inline public return_type class_ref 470703 // mean_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return base_class::mean ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 727727 "minimum"
	const cpp_inline public return_type class_ref 470703 // mean_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return min_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 727855 "maximum"
	const cpp_inline public return_type class_ref 470703 // mean_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return max_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 727983 "variance"
	const cpp_inline public return_type class_ref 470703 // mean_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return base_class::variance(count_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 728111 "stddev"
	const cpp_inline public return_type class_ref 470703 // mean_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return base_class::${name} (count_ );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 728239 "reset"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  *this = observable();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end
    end

    class 444847 "observable_histogram"
      visibility package 
      nformals 2
      formal name "Float_Type" type "class" explicit_default_value ""
        explicit_extends ""
      formal name "Counter_Type" type "class" explicit_default_value "size_t"
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Class: observable_histogram

 Manage a value that is derived from the repeated counting of
 observations.

 This class uses a successive addition algorithm to calculate the
 mean and variance of a sample value. This is reported to be
 numerically more stable than the traditional sum and sum of
 squares methods.

 The default Counter_Type is size_t.  Generally this should be an
 unsigned integer of approximately the same size as the Float_Type"
      class 471343 "mean_type"
	visibility package stereotype "typedef" explicit_base_type ""
	cpp_decl "${comment}typedef Float_Type ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 471471 "counter_type"
	visibility package stereotype "typedef" explicit_base_type ""
	cpp_decl "${comment}typedef Counter_Type ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 447151 "bin_type"
	visibility package stereotype "typedef" base_type class_ref 471599 // base_observable
	cpp_decl "${comment}typedef ${type}< Float_Type, Counter_Type > ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      attribute 553903 "count_"
	private type class_ref 471471 // counter_type
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Number of samples"
      end

      classrelation 497455 // histogram_ (<directional composition>)
	relation 491439 *-->
	  stereotype "std::vector"
	  a role_name "histogram_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};"
	    python "    ${comment}${self}${name} = ${type}()
"
	    classrelation_ref 497455 // histogram_ (<directional composition>)
	  b parent class_ref 447151 // bin_type
      end

      operation 728495 "observable_histogram"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${name}${(}${)}${volatile}${throw}
  : count_ (0)
  , histogram_ ()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 728623 "observable_histogram"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "bincount" explicit_type "size_t"
	cpp_decl "    ${comment}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}
  : count_ (0)
  , histogram_ (bincount)
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 728751 "observable_histogram"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 444847 // observable_histogram
	cpp_decl "    ${comment}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}
  : count_ (other.count_)
  , histogram_ (other.histogram_)
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 728879 "~observable_histogram"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${virtual}${name}${(}${)}${volatile}${throw}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 729007 "swap"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 444847 // observable_histogram
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap (this->count_, other.count_);
  std::swap (this->histogram_, histogram_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 729135 "operator ="
	cpp_inline public return_type class_ref 444847 // observable_histogram
	nparams 1
	  param in name "other" type class_ref 444847 // observable_histogram
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap(other);
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 729263 "insert"
	stereotype "template"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "begin" explicit_type "FwdIter"
	  param in name "end" explicit_type "FwdIter"
	cpp_decl "    ${comment}template<class ${t0}>
${friend}${static}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  // Increment counter here as we need the total count when calculating the average.
  if (begin != end)
  {
    ++count_;
    for (typename std::vector < observable_histogram< Float_Type, Counter_Type >::bin_type >::iterator iter= histogram_.begin ();
           iter != histogram_.end () and begin != end;
           ++begin, ++iter)
    {
      iter->insert (count_, *begin);
    }
  }
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " set each histogram bin during a sampling run by
 value from iterators."
      end

      operation 729391 "size"
	const cpp_inline public return_type class_ref 471471 // counter_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->count_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " The number of samples taken"
      end

      operation 729519 "bin_count"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->histogram_.size ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " The number of histogram bins"
      end

      operation 729647 "mean"
	const cpp_inline public return_type class_ref 471343 // mean_type
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->histogram_[idx].mean ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " The average value of the sampled distribution"
      end

      operation 729775 "variance"
	const cpp_inline public return_type class_ref 471343 // mean_type
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
    return histogram_[idx].${name} (count_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " The sample variance of the sampled distribution"
      end

      operation 729903 "stddev"
	const cpp_inline public return_type class_ref 471343 // mean_type
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
    return histogram_[${p0}].${name}(count_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " The standard deviation of the sampled distribution"
      end

      operation 730031 "reset"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
    *this = observable_histogram(histogram_.size ());
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Reset all the histogram bins

 @ensure pre(bin_count) == post(bin_count)"
      end

      operation 730159 "resize"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "newsize" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
    this->histogram_.resize (newsize);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Change ths size of the bins

 @ensure newsize == bin_count"
      end
    end

    class 470959 "binomial_observable"
      visibility protected 
      nformals 2
      formal name "Float_Type" type "class" explicit_default_value ""
        explicit_extends ""
      formal name "Counter_Type" type "class" explicit_default_value "size_t"
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Manage a value that is derived from repeated binary (pass/fail) 
observations.

This class uses a successive addition algorithm to calculate the
mean and variance of a sample value. This is reported to be
numerically more stable than the traditional sum and sum of
squares methods.

The default Counter_Type is size_t.  Generally this should be an
unsigned integer of approximately the same size as the Float_Type"
      class 471087 "mean_type"
	visibility package stereotype "typedef" explicit_base_type ""
	cpp_decl "${comment}typedef Float_Type ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 471215 "counter_type"
	visibility package stereotype "typedef" explicit_base_type ""
	cpp_decl "${comment}typedef Counter_Type ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      classrelation 521007 // count_ (<directional composition>)
	relation 514863 *-->
	  a role_name "count_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 521007 // count_ (<directional composition>)
	  b parent class_ref 471215 // counter_type
      end

      classrelation 520751 // mean_ (<directional composition>)
	relation 514607 *-->
	  a role_name "mean_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 520751 // mean_ (<directional composition>)
	  b parent class_ref 471087 // mean_type
      end

      classrelation 521135 // pass_ (<directional composition>)
	relation 514991 *-->
	  a role_name "pass_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 521135 // pass_ (<directional composition>)
	  b parent class_ref 471215 // counter_type
      end

      classrelation 520879 // vars_ (<directional composition>)
	relation 514735 *-->
	  a role_name "vars_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 520879 // vars_ (<directional composition>)
	  b parent class_ref 471087 // mean_type
      end

      operation 793519 "binomial_observable"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "  ${comment}${inline}${name}${(}${)}${volatile}${throw}
  : count_ (0)
  , pass_ ()
  , vars_ ()
  {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 793647 "binomial_observable"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 470959 // binomial_observable
	cpp_decl "  ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}
  : count_ (other.count_)
  , pass_ (other.pass_)
  , vars_ (other.vars_)
  {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 793903 "~binomial_observable"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 794031 "swap"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 470959 // binomial_observable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap (count_, other.count_);
  std::swap (pass_, other.pass_);
  std::swap (vars_, other.vars_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 794159 "operator ="
	cpp_inline public return_type class_ref 470959 // binomial_observable
	nparams 1
	  param in name "other" type class_ref 470959 // binomial_observable
	cpp_decl "  ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap(other);
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 795439 "fail"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "  ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} 
{
  // Increment counter here as we need the total count when calculating the average.
  ++count_;
  if (1 != count_)
  {
    vars_ += mean_type(pass_*pass_)/mean_type(count_*count_ - count_);
  }
  // else first value == zero
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 794415 "pass"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "  ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} 
{
  // Increment counter here as we need the total count when
  // calculating the average.
  ++count_;
  ++pass_;
  if (1 != count_)
  {
    vars_ += mean_type((count_-pass_)*(count_-pass_))/mean_type(count_*count_ - count_);
  }
  else
  {
    vars_ = mean_type(pass_);
  }
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 797103 "operator<<"
	cpp_inline public return_type class_ref 470959 // binomial_observable
	nparams 1
	  param in name "passed" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  ${p0} ? pass() : fail ();
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 794671 "mean"
	const cpp_inline public return_type class_ref 471087 // mean_type
	nparams 0
	cpp_decl "  ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return (pass_ == 0 ? mean_type(0) : mean_type(pass_)/mean_type(count_));
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 795055 "variance"
	const cpp_inline public return_type class_ref 471087 // mean_type
	nparams 0
	cpp_decl "  ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return (count_ > 1 ? vars_/(mean_type(count_ - 1)) : mean_type(0)); 
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 794543 "size"
	const cpp_inline public return_type class_ref 471215 // counter_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return count_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 795183 "stddev"
	const cpp_inline public return_type class_ref 471087 // mean_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return (count_ > 1 ? std::sqrt(variance()) : ${type}(0));
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 795311 "reset"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "  ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  *this = binomial_observable();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 795567 "pass_count"
	const public return_type class_ref 471215 // counter_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return pass_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Number of passed attempts"
      end

      operation 795695 "fail_count"
	const public return_type class_ref 471215 // counter_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return count_ - pass_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Number of failed attempts"
      end
    end
  end

  classview 262191 "Count observables"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    comment "Counting observables are a set of classes for creating mean results from 
repeated measurements or observations, where the measurement is
performed by counting of some type.

 These classes are split into two main categories: count observables
 and sample observables. Count observables are repeatedly
 incremented during a sampling period and the new mean only
 calculated at the end of the period.  The sampling period starts
 when the counting object is inserted into a count_scope object,
 (see class count_scope) and ends when this object goes out of
 scope.

 Several aggregate types exist (1D histograms and 2+D matrices).
 Whether to use these aggregates or simple aggregates of the basic
 observable class depends on the type of observable. In general the
 aggregates should be used when they logically represent multiple
 samples from a single distribution.
"
    class 447535 "typedef1"
      visibility package stereotype "typedef" explicit_base_type "boost::noncopyable"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 447407 "count_scope"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 497711 // <generalisation>
	relation 491695 ---|>
	  a private
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 497711 // <generalisation>
	  b parent class_ref 447535 // typedef1
      end

      classrelation 497839 // in_scope_ (<unidirectional association>)
	relation 491823 --->
	  stereotype "std::vector"
	  a role_name "in_scope_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};"
	    python "${comment}${self}${name} = ${value}
"
	    classrelation_ref 497839 // in_scope_ (<unidirectional association>)
	  b parent class_ref 447279 // count_observable_base
      end

      operation 731567 "count_scope"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : in_scope_()
    {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 731695 "operator <<"
	cpp_inline public return_type class_ref 447407 // count_scope
	nparams 1
	  param inout name "b" type class_ref 447279 // count_observable_base
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
      b.start_scope ();
      in_scope_.push_back (&b);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 731823 "~count_scope"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
      while (not in_scope_.empty ())
	{
	  in_scope_.back ()->end_scope ();
	  in_scope_.pop_back ();
	}
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end
    end

    class 447279 "count_observable_base"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      attribute 554031 "is_counting_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      classrelation 497583 // <dependency>
	relation 491567 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 497583 // <dependency>
	  b parent class_ref 447407 // count_scope
      end

      operation 730287 "start_scope"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      is_counting_ = true;
      start_scope_virt ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 730415 "end_scope"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      is_counting_ = false;
      end_scope_virt ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 730543 "start_scope_virt"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 730671 "end_scope_virt"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 730799 "in_count_scope"
	cpp_inline protected explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return is_counting_; };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 730927 "count_observable_base"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : is_counting_(false) {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 731055 "~count_observable_base"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 731183 "count_observable_base"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 447279 // count_observable_base
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : is_counting_(other.is_counting_)
    {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 731311 "swap"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 447279 // count_observable_base
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
      std::swap (is_counting_, other.is_counting_);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 731439 "operator ="
	cpp_inline public return_type class_ref 447279 // count_observable_base
	nparams 1
	  param in name "other" type class_ref 447279 // count_observable_base
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
      this->swap (other);
      return *this;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end
    end

    class 445231 "count_histogram"
      visibility package 
      nformals 2
      formal name "Float_Type" type "class" explicit_default_value ""
        explicit_extends ""
      formal name "Counter_Type" type "class" explicit_default_value "size_t"
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Class: count_histogram

 Manage a value that is derived from the repeated counting of
 observations.

 This class uses a successive addition algorithm to calculate the
 mean and variance of a sample value. This is reported to be
 numerically more stable than the traditional sum and sum of
 squares methods.

 The default Counter_Type is size_t.  Generally this should be an
 unsigned integer of approximately the same size as the Float_Type"
      classrelation 498095 // <generalisation>
	relation 492079 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 498095 // <generalisation>
	  b parent class_ref 447279 // count_observable_base
      end

      class 447663 "bin_type"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	attribute 554671 "mean_"
	  public explicit_type "Float_Type"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 554799 "vars_"
	  public explicit_type "Float_Type"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 554927 "subcount_"
	  public explicit_type "Counter_Type"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Number of increments during count scope"
	end
      end

      attribute 555055 "count_"
	private explicit_type "Counter_Type"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Number of samples"
      end

      classrelation 498223 // histogram_ (<directional composition>)
	relation 492207 *-->
	  stereotype "std::vector"
	  a role_name "histogram_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 498223 // histogram_ (<directional composition>)
	  b parent class_ref 447663 // bin_type
      end

      operation 733615 "count_histogram"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : count_observable_base ()
    , count_ (0)
    , histogram_ ()
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 733743 "count_histogram"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "bincount" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} : count_observable_base ()
    , count_ (0)
    , histogram_ (bincount)
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 733871 "count_histogram"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 445231 // count_histogram
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : count_observable_base (other)
    , count_ (other.count_)
    , histogram_ (other.histogram_)
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 733999 "~count_histogram"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 734127 "swap"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 445231 // count_histogram
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    count_observable_base::swap (other);
    std::swap (this->count_, other.count_);
    std::swap (this->histogram_, histogram_);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 734255 "operator ="
	cpp_inline public return_type class_ref 445231 // count_histogram
	nparams 1
	  param in name "other" type class_ref 445231 // count_histogram
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    this->swap(other);
    return *this;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 734383 "end_scope_virt"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    // Increment counter here as we need the total count when
    // calculating the average.
    ++count_;
    for (typename std::vector < count_histogram< Float_Type, Counter_Type >::bin_type >::iterator iter = this->histogram_.begin ();
	 iter != this->histogram_.end ();
	 ++iter)
      {
	Float_Type next (iter->subcount_);
	iter->subcount_ = 0; // reset subcount
	if (1 != count_)
	  {
	    const Float_Type old_m_ (iter->mean_);
	    iter->mean_ += (next - old_m_) / Float_Type(this->count_);
	    iter->vars_ += (next - old_m_) * (next - iter->mean_);
	  }
	else
	  {
	    // first value
	    iter->mean_ = next;
	    iter->vars_ = next;
	  }
      }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 734511 "increment"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    if (this->in_count_scope ())
      {
	++this->histogram_[idx].subcount_;
      }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 Increment the sub-counter during a sampling run."
      end

      operation 734639 "increment"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "idx" explicit_type "int"
	  param in name "inc" explicit_type "Counter_Type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    if (this->in_count_scope ())
      {
	this->histogram_[idx].subcount_ += inc;
      }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 Increment the sub-counter during a sampling run by
 an inc value."
      end

      operation 734767 "size"
	const cpp_inline public explicit_return_type "Counter_Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this->count_; };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 The number of samples taken"
      end

      operation 734895 "bin_count"
	const cpp_inline public explicit_return_type "Counter_Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this->histogram_.size (); };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 The number of histogram bins"
      end

      operation 735023 "mean"
	const cpp_inline public explicit_return_type "Float_Type"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return this->histogram_[idx].mean_; };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 The average value of the sampled distribution"
      end

      operation 735151 "variance"
	const cpp_inline public explicit_return_type "Float_Type"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return (this->count_ > 1 ? this->histogram_[idx].vars_/(Float_Type(this->count_) - 1) : 0.0);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 The sample variance of the sampled distribution"
      end

      operation 735279 "stddev"
	const cpp_inline public explicit_return_type "Float_Type"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return (this->count_ > 1 ? std::sqrt(this->variance(idx)) : 0.0);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 The standard deviation of the sampled distribution"
      end

      operation 735407 "reset"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    *this = count_histogram(this->histogram_.size ());
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 Reset all the histogram bins

 @ensure pre(bin_count) == post(bin_count)"
      end

      operation 735535 "resize"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "newsize" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    this->histogram_.resize (newsize);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 Reset all the histogram bins

 @ensure newsize == bin_count"
      end
    end

    class 445103 "count_matrix"
      visibility package 
      nformals 3
      formal name "Float_Type" type "class" explicit_default_value ""
        explicit_extends ""
      formal name " size_t Dim" type "" explicit_default_value ""
        explicit_extends ""
      formal name "Counter_Type" type "class" explicit_default_value "size_t"
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " --------------------------------------------------
 Class: count_matrix

 Manage a matrix of values that are derived from the repeated
 counting of observations.

 This class uses a successive addition algorithm to calculate the
 mean and variance of a sample value. This is reported to be
 numerically more stable than the traditional sum and sum of
 squares methods.

 The default Counter_Type is size_t.  Generally this should be an
 unsigned integer of approximately the same size as the Float_Type"
      classrelation 498351 // <generalisation>
	relation 492335 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 498351 // <generalisation>
	  b parent class_ref 447279 // count_observable_base
      end

      class 447791 "bin_type"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	attribute 555183 "mean_"
	  public explicit_type "Float_Type"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 555311 "vars_"
	  public explicit_type "Float_Type"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 555439 "subcount_"
	  public explicit_type "Counter_Type"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Number of increments during count scope"
	end
      end

      attribute 555567 "count_"
	private explicit_type "Counter_Type"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Number of samples"
      end

      class 447919 "matrix_type"
	visibility package stereotype "typedef" base_type class_ref 447791 // bin_type
	cpp_decl "${comment}typedef boost::multi_array<${type},Dim> ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 498479 // <dependency>
	  relation 492463 -_->
	    a default
	      cpp default "#include in source"
	      python "${type}"
	      classrelation_ref 498479 // <dependency>
	    b parent class_ref 447791 // bin_type
	end
      end

      class 448047 "iterator"
	visibility package stereotype "typedef" explicit_base_type "matrix_type::iterator"
	cpp_decl "${comment}typedef  typename ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 498607 // matrix_ (<directional composition>)
	relation 492591 *-->
	  a role_name "matrix_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 498607 // matrix_ (<directional composition>)
	  b parent class_ref 447919 // matrix_type
      end

      operation 735663 "count_matrix"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : count_observable_base ()
    , count_ (0)
    , matrix_ ()
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 735791 "count_matrix"
	stereotype "template"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "extents" explicit_type "Extents"
	cpp_decl "    ${comment}template<class Extents>
  ${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : count_observable_base ()
    , count_ (0)
    , matrix_ (extents)
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 735919 "count_matrix"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 445103 // count_matrix
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : count_observable_base (other)
    , count_ (other.count_)
    , matrix_ (other.matrix_)
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 736047 "~count_matrix"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 736175 "swap"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 445103 // count_matrix
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    count_observable_base::swap (other);
    std::swap (this->count_, other.count_);
    std::swap (this->matrix_, matrix_);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 736303 "operator ="
	cpp_inline public return_type class_ref 445103 // count_matrix
	nparams 1
	  param in name "other" type class_ref 445103 // count_matrix
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    this->swap(other);
    return *this;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 736431 "end_scope_virt"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    // Increment counter here as we need the total count when
    // calculating the average.
    ++count_;
    if (1 != count_)
      {
	for (int idx = 0; idx != this->matrix_.size (); ++idx)
	  {
	    Float_Type next (this->matrix_.data()[idx].subcount_);
	    this->matrix_.data()[idx].subcount_ = 0; // reset subcount
	    const Float_Type old_m_ (this->matrix_.data()[idx].mean_);
	    this->matrix_.data()[idx].mean_ += (next - old_m_) / Float_Type(this->count_);
	    this->matrix_.data()[idx].vars_ += (next - old_m_) * (next - this->matrix_.data()[idx].mean_);
	  }
      }
    else
      {
	// first value
	for (int idx = 0; idx != this->matrix_.size (); ++idx)
	  {
	    Float_Type next (this->matrix_.data()[idx].subcount_);
	    this->matrix_.data()[idx].subcount_ = 0; // reset subcount
	    this->matrix_.data()[idx].mean_ = next;
	    this->matrix_.data()[idx].vars_ = next;
	  }
      }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 736559 "increment"
	stereotype "template"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "idx" explicit_type "Index_List"
	cpp_decl "    ${comment}template<class Index_List>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    if (this->in_count_scope ())
      {
	++this->matrix_( idx ).subcount_;
      }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 Increment the sub-counter during a sampling run."
      end

      operation 736687 "increment"
	stereotype "template"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "idx" explicit_type "Index_List"
	  param in name "inc" explicit_type "Counter_Type"
	cpp_decl "    ${comment}template<class Index_List>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    if (this->in_count_scope ())
      {
	this->matrix_( idx ).subcount_ += inc;
      }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 Increment the sub-counter during a sampling run by
 an inc value."
      end

      operation 736815 "size"
	const cpp_inline public explicit_return_type "Counter_Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this->count_; };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 The number of samples taken"
      end

      operation 736943 "bin_count"
	const cpp_inline public explicit_return_type "Counter_Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this->matrix_.size (); };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 The number of matrix bins"
      end

      operation 737071 "mean"
	stereotype "template"
	const cpp_inline public explicit_return_type "Float_Type"
	nparams 1
	  param in name "idx" explicit_type "Index_List"
	cpp_decl "    ${comment}template<class Index_List>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return this->matrix_(idx).mean_; };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 The average value of the sampled distribution"
      end

      operation 737199 "variance"
	stereotype "template"
	const cpp_inline public explicit_return_type "Float_Type"
	nparams 1
	  param in name "idx" explicit_type "Index_List"
	cpp_decl "    ${comment}template<class Index_List>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return (this->count_ > 1 ? this->matrix_[idx].vars_/(Float_Type(this->count_) - 1) : 0.0);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 The sample variance of the sampled distribution"
      end

      operation 737327 "stddev"
	stereotype "template"
	const cpp_inline public explicit_return_type "Float_Type"
	nparams 1
	  param in name "idx" explicit_type "Index_List"
	cpp_decl "    ${comment}template<class Index_List>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return (this->count_ > 1 ? std::sqrt(this->variance(idx)) : 0.0);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 The standard deviation of the sampled distribution"
      end

      operation 737455 "reset"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    *this = count_matrix(std::vector< size_t >(this->matrix_.shape (), this->matrix_.shape () + Dim));
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 Reset all the matrix bins

 @ensure pre(bin_count) == post(bin_count)"
      end

      operation 737583 "resize"
	stereotype "template"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "newsize" explicit_type "Extents"
	cpp_decl "    ${comment}template<class Extents>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    this->matrix_.resize (newsize);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 Reset all the matrix bins

 @ensure newsize == bin_count"
      end
    end

    class 444975 "count_observable"
      visibility package 
      nformals 2
      formal name "Float_Type" type "class" explicit_default_value ""
        explicit_extends ""
      formal name "Counter_Type" type "class" explicit_default_value "size_t"
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " --------------------------------------------------
 Class: count_observable

 Manage a value that is derived from the repeated counting of
 observations.

 This class uses a successive addition algorithm to calculate the
 mean and variance of a sample value. This is reported to be
 numerically more stable than the traditional sum and sum of
 squares methods.

 The default Counter_Type is size_t.  Generally this should be an
 unsigned integer of approximately the same size as the Float_Type"
      classrelation 497967 // <generalisation>
	relation 491951 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 497967 // <generalisation>
	  b parent class_ref 447279 // count_observable_base
      end

      attribute 554159 "mean_"
	private explicit_type "Float_Type"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 554287 "vars_"
	private explicit_type "Float_Type"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 554415 "count_"
	private explicit_type "Counter_Type"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Number of samples"
      end

      attribute 554543 "subcount_"
	private explicit_type "Counter_Type"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Number of increments during count scope"
      end

      operation 731951 "count_observable"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : count_observable_base ()
    , mean_ ()
    , vars_ ()
    , count_ (0)
    , subcount_ (0)
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 732079 "count_observable"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 444975 // count_observable
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : count_observable_base (other)
    , mean_ (other.mean_)
    , vars_ (other.vars_)
    , count_ (other.count_)
    , subcount_ (0)
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 732207 "~count_observable"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 732335 "swap"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 444975 // count_observable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    count_observable_base::swap (other);
    std::swap (mean_, other.mean_);
    std::swap (vars_, other.vars_);
    std::swap (count_, other.count_);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 732463 "operator ="
	cpp_inline public return_type class_ref 444975 // count_observable
	nparams 1
	  param in name "other" type class_ref 444975 // count_observable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    this->swap(other);
    return *this;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 732591 "end_scope_virt"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    // Increment counter here as we need the total count when
    // calculating the average.
    ++count_;
    Float_Type next (subcount_);
    subcount_ = 0;
    if (1 != count_)
      {
	const Float_Type old_m_ (mean_);
	mean_ += (next - old_m_) / Float_Type(count_);
	vars_ += (next - old_m_) * (next - mean_);
      }
    else
      {
	// first value
	mean_ = next;
	vars_ = next;
      }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 732719 "operator ++"
	cpp_inline public return_type class_ref 444975 // count_observable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    // SHOULD BE \"REQUIRE(in_count_scope, ...)\" or
    // if (scope) ... else operator<<()
    if (this->in_count_scope ())
      {
	++this->subcount_;
      }
    return *this;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 Increment the sub-counter during a sampling run."
      end

      operation 732847 "operator <<"
	cpp_inline public return_type class_ref 444975 // count_observable
	nparams 1
	  param in name "a_count" explicit_type "Counter_Type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    // SHOULD BE \"REQUIRE(not in_count_scope, ...)\" OR
    // have if (scope) subcount += a_count else ...

    // Increment counter here as we need the total count when
    // calculating the average.
    ++count_;
    const Float_Type next (a_count);
    if (1 != count_)
      {
	const Float_Type old_m_ (mean_);
	mean_ += (next - old_m_) / Float_Type(count_);
	vars_ += (next - old_m_) * (next - mean_);
      }
    else
      {
	// first value
	mean_ = next;
	vars_ = next;
      }
    return *this;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 732975 "size"
	const cpp_inline public explicit_return_type "Counter_Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this->count_; };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 The number of samples taken"
      end

      operation 733103 "mean"
	const cpp_inline public explicit_return_type "Float_Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this->mean_; };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 The average value of the sampled distribution"
      end

      operation 733231 "variance"
	const cpp_inline public explicit_return_type "Float_Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return (this->count_ > 1 ? this->vars_/(Float_Type(this->count_) - 1) : 0.0);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 The sample variance of the sampled distribution"
      end

      operation 733359 "stddev"
	const cpp_inline public explicit_return_type "Float_Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return (this->count_ > 1 ? std::sqrt(this->variance()) : 0.0);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------
 The standard deviation of the sampled distribution"
      end

      operation 733487 "reset"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    *this = count_observable();
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end
    end
  end

  deploymentview 236079 "impl"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 335407 "observable"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_H
#define @{PROJECT}${NAMESPACE}_${NAME}_H

${comment}
${includes}
// manual includes
#include <cmath>
#include <algorithm>
// manual includes
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 471599 // base_observable
	class_ref 444719 // observable
	class_ref 444847 // observable_histogram
	class_ref 470959 // binomial_observable
      end
      comment "Observables are a set of classes for creating mean results from repeated
measurements or observations.

 The file contains a series of classes for the collection of data
 samples for which the mean and variance is required.

 These classes are split into two main categories: count observables
 and sample observables. For sample observables each sample
 iteration generates a single value the is inserted into the
 observable.  By contrast, count observables are repeatedly
 incremented during a sampling period and the new mean only
 calculated at the end of the period.  The sampling period starts
 when the counting object is inserted into a count_scope object,
 (see class count_scope) and ends when this object goes out of
 scope.

 Several aggregate types exist (1D histograms and 2+D matrices).
 Whether to use these aggregates or simple aggregates of the basic
 observable class depends on the type of observable. In general the
 aggregates should be used when they logically represent multiple
 samples from a single distribution.
"
    end

    artifact 335279 "iccgrid"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_H
#define @{PROJECT}${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 447023 // Integrator
      end
    end

    artifact 351535 "patch_reference"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_H
#define @{PROJECT}${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
      end
    end
  end
end
