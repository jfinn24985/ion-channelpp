class machine_env
!!!273711.cpp!!!	create() : machine_env
class helper_
{
public:
  static std::string file_to_string (std::string dirname, const char* fname)
  {
    std::string result;
    dirname.append ("/");
    dirname.append (fname);
    std::ifstream ifs_(dirname.c_str ());
    if (ifs_) std::getline (ifs_, result);
    return result;
  }
  static int file_to_number (std::string dirname, const char* fname)
  {
    int result = -1;
    std::string s_;
    dirname.append ("/");
    dirname.append (fname);
    std::ifstream ifs_(dirname.c_str ());
    if (ifs_)
    {
      ifs_ >> result;
      if (ifs_)
      {
        ifs_ >> s_;
        if (not s_.empty ())
        {
          if ('K' == s_[0] or 'k' == s_[0]) result *= 1024;
          else if ('M' == s_[0] or 'm' == s_[0]) result *= 1024*1024;
        }
      }
    }
    return result;
  }
};
utsname uname_;
uname (&uname_);
int cache_max = 0;
const char num_to_char[] = { "0123456789" };
int cache_sz[3] = { 0, 0, 0 };
int cache_lnsz[3] = { 0, 0, 0  };
for (int index = 0; index < 10; ++index)
{
  std::string dirname ("/sys/devices/system/cpu/cpu0/cache/index_");
  dirname[dirname.size () - 1] = num_to_char[index];
  // std::cerr << "Checking directory \"" << dirname << "\"\n";
  struct stat st;
  if(stat (dirname.c_str (),&st) != 0)
  {
    // std::cerr << "Stat failed\n";
    break;
  }
  const std::string tmp_ (helper_::file_to_string (dirname, "type"));
  // std::cerr << "Got type \"" << tmp_ << "\"\n";
  if (std::string::npos != tmp_.find ("ata")
      or std::string::npos != tmp_.find ("nified"))
  {
    // Have data cache
    int level = helper_::file_to_number (dirname, "level") - 1;
    // std::cerr << "Found level \"" << level << "\"\n";
    if (0 <= level and level > 2) break; // Can`t handle more than three cache levels
    cache_max = std::max (cache_max, level);
    cache_lnsz[level] = helper_::file_to_number (dirname, "coherency_line_size");
    cache_sz[level] = helper_::file_to_number (dirname, "size");
    // std::cerr << "Found cache line \"" << cache_lnsz[level] << "\"\n";
    // std::cerr << "Found cache size \"" << cache_sz[level] << "\"\n";
  }
}
return std::unique_ptr< machine_env > (new machine_env (uname_.nodename
  , uname_.machine, uname_.sysname, uname_.version, uname_.release
  , cache_max
  , cache_lnsz[0], cache_sz[0]
  , cache_lnsz[1], cache_sz[1]
  , cache_lnsz[2], cache_sz[2]));
!!!807473.cpp!!!	description(inout a_os : ostream) : void
// host and environment information

const boost::format row_format("%1$20s : %2$6d");
a_os << "\n Program Information.\n";
a_os << " --------------------\n";

a_os << boost::format(row_format) % "program" % this->compilation_program_ << "\n";
a_os << boost::format(row_format) % "compiled version" % this->compilation_version_ << "\n";
a_os << boost::format(row_format) % "compiled date" % this->compilation_date_ << "\n";

// run date information
a_os << boost::format(row_format) % "run date" % boost::gregorian::to_simple_string(boost::gregorian::day_clock::local_day()) << "\n\n";

// program compilation information
a_os << " Compiler Information.\n";
a_os << " ---------------------\n";
a_os << boost::format(row_format) % "cpp compiler" % this->compiler_name_ << "\n";
a_os << boost::format(row_format) % "cpp target" % this->compiler_clg_ << "\n";
a_os << boost::format(row_format) % "cpp flags" % this->compiler_flags_ << "\n\n";

// host and environment information
a_os << " Host information.\n";
a_os << " -----------------\n";
// Print some machine information
a_os << " Host machine\n";
a_os << boost::format (row_format) % "name" % this->hostname << "\n";
a_os << " Operating system.\n";
a_os << boost::format (row_format) % "name" % this->os_name << "\n";
a_os << boost::format (row_format) % "version" % this->os_version << "\n";
a_os << boost::format (row_format) % "release" % this->os_release << "\n";
a_os << " Processor\n";
a_os << boost::format (row_format) % "type" % this->family << "\n";

if (0 != this->cache_depth)
{
  static const boost::format labelfmt ("L\%1\% cache");
  for (std::size_t lvl = 0; lvl != this->cache_depth; ++lvl)
  {
    const std::string label ( (boost::format(labelfmt) % (lvl + 1)).str () );
    if (cache_size[lvl] != -1)
    {
      a_os << boost::format (row_format) % (label + " size") % this->cache_size[lvl] << "\n";
      a_os << boost::format (row_format) % (label + " line size") % this->cache_line_size[lvl] << "\n";
    }
    else
    {
      a_os << boost::format (row_format) % label % "unknown or not present\n";
    }
  }
}
else
{
  a_os << boost::format (row_format) % "cache" % "unknown or not present\n";
}
a_os << boost::format (row_format) % "machine integer size" % (sizeof(int)*8) << "\n\n";
a_os << " Floating point numbers.\n";
a_os << " -----------------------\n";
a_os << boost::format (row_format) % "epsilon" % std::numeric_limits<double>::epsilon() << "\n";
a_os << boost::format (row_format) % "huge" % std::numeric_limits<double>::max() << "\n";
a_os << boost::format (row_format) % "denorm" % std::numeric_limits<double>::denorm_min() << "\n";
a_os << boost::format (row_format) % "IEC559/IEEE754" % (std::numeric_limits<double>::is_iec559 ? "true" : "false") << "\n";
utility::fp_env::env_.report (a_os);
