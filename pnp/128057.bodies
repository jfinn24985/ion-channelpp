class lamperski_igcmc
!!!128057.cpp!!!	description(inout os : ostream) : void
os << " Update Method [" << this->type_label_() << "]\n";
os << " Estimate the excess chemical potential parameters required\n";
os << " to maintain the target concentrations of solute species.\n\n";
os << "   S. Lamperski, Mol. Simul. 33, 1193, 2007\n\n";
!!!128185.cpp!!!	do_update(inout sys : simulation, inout oslog : ostream) : void
// Lamperski:
//  Add or subtract "delta" depending on whether average
// density is greater or less than desired
//
// Use mean concentration from specie_count sampler.
//
// NOTE: we could use specie_count::type_label_()
auto & pman = sys.particles();

for (size_t ispec = 0; ispec != pman.specie_count(); ++ispec)
{
  particle::specie & spcobj = pman.get_specie(ispec);
  // only look at solute species
  if (spcobj.is_solute())
  {
    const std::size_t localidx{ this->counts().local_index( ispec ) };
    if( localidx != this->counts().size() )
    {
      // NOTE: localidx = this->counts().size() if specie not recorded.
      const double volume{ this->counts().volume( localidx ) };
      if ( volume != 0.0 )
      {
        double actual_concentration = this->counts().mean( localidx )*core::constants::to_SI()/volume;
        if (not utility::feq(actual_concentration,0.0))
        {
          const double change = (this->use_random_ ? this->delta_ * sys.get_random().uniform(): this->delta_ );
          const double chempi = spcobj.excess_potential() + (spcobj.concentration() > actual_concentration? change : -change);
          spcobj.set_excess_potential( chempi );
        }
      }
    }
  }
}
!!!218160.cpp!!!	do_write_part_document(inout wr : input_document, in ix : size_t) : void
wr[ ix ].add_entry( "delta", this->delta_ );
wr[ ix ].add_entry( "use-random", this->use_random_ );
!!!2113072.cpp!!!	add_to_definition(inout defn : simulation_definition) : string
defn.add_definition( { "delta", "number", ">0", "0.1", "(lamperski update) The magnitude of the change in chemical potential to use in updates." } );
defn.add_definition( { "use-random", "boolean", "", "false", "(lamperski update) Scale the magnitude of the change in chemical potential by a random factor during updates.." } );
return type_label_();
!!!2113200.cpp!!!	make_updater(in params : input_parameter_memo) : imc_update
std::unique_ptr< lamperski_igcmc > smplr(new lamperski_igcmc);
// Check parameters for usable values
for (auto const& item : params)
{
  if( item.name() == "delta" )
  {
    smplr->delta_ = item.get_float( "Lamperski IMC", core::strngs::simulator_label(), true, false );
  }
  else if (item.name() == "use-random")
  {
    smplr->use_random_ = item.get_bool( "Lamperski IMC", core::strngs::simulator_label(), true, false );
  }
  else if( core::strngs::fsend() != item.name() )
  {
    throw core::input_error::invalid_parameter_subtype_error( core::strngs::simulator_label(), type_label_(), item );
  }
}
return boost::shared_ptr< imc_update >( smplr.release() );
