class open_cylinder_region
!!!1094576.cpp!!!	do_change_volume(in vol : double, in rad : double) : void
// Maintain halflength/radius ratio
//
//  vol = 2 * HL * pi * (R - r) * (R - r)
//
//  if C = HL/R then HL = C.R
//
//  vol = 2 * pi * CR * (R - r) * (R - r)
//
//  To make tractable CR --> C(R - r)
//
//  vol = 2C * pi * (R - r)**3
const double ratio { this->half_length() / this->radius() };

const double newradius { std::cbrt( vol / (2 * ratio * core::constants::pi() ) ) };

this->set_radius( newradius + rad );

this->set_half_length( vol / ( 2 * core::constants::pi() * std::pow( newradius, 2 ) ) );
!!!995888.cpp!!!	do_fits(in radius : double) : bool
return this->radius() >= radius;
!!!996016.cpp!!!	do_is_inside(in pos : coordinate, in radius : double) : bool
if( this->radius() < radius )
{
  // sphere can not fit in cylinder
  return false;
}
if( ( this->half_length() ) < std::abs( pos.z ) )
{
  // sphere centre outside end
  return false;
}
if( std::pow( this->radius() - radius, 2 ) < ( pos.x * pos.x + pos.y * pos.y ) )
{
  // sphere too close to wall
  return false;
}
return true;

!!!996144.cpp!!!	do_new_position(inout rgnr : random_distribution, in radius : double) : coordinate
// A random position within cylinder
geometry::coordinate pos( 0.0, 0.0, 0.0 );
if( radius < this->radius() )
{
  // volume is linear in square of radius
  const double r( std::sqrt(rgnr.uniform( std::pow( this->radius() - radius, 2 ) ) ) );
  const double phi( rgnr.uniform( 0.0, core::constants::pi() * 2 ) );
  pos.x = r * std::cos( phi );
  pos.y = r * std::sin( phi );
}
// else x = 0, y = 0

{
  pos.z = rgnr.uniform( -this->half_length(), this->half_length() );
}
return pos;

!!!1310384.cpp!!!	do_write_document(inout wr : input_document, in ix : size_t) : void
const std::string half_length_label { "half-length" };
const std::string radius_label { "radius" };
wr[ix].add_entry( core::strngs::fstype(), type_label() );
wr[ix].add_entry( half_length_label, this->half_length() );
wr[ix].add_entry( radius_label, this->radius() );

!!!1093552.cpp!!!	region_factory(in label : string, in params : input_parameter_memo) : base_region
// needed information
// label : from label arg
// radius : from param arg
// half_length : from param arg
double half_length {};
double radius {};
size_t mask{ 0ul };

const std::string half_length_label { "half-length" };
const std::string radius_label { "radius" };
for( auto const& param : params )
{
  if( param.name() == half_length_label )
  {
    half_length = param.get_float( "Open cylinder size", core::strngs::fsregn(), true, false );
    mask |= 1ul;
  }
  else if( param.name() == radius_label )
  {
    radius = param.get_float( "Open cylinder size", core::strngs::fsregn(), true, false );
    mask |= 2ul;
  }
}
{
  std::string missing_params;
  // check for required parameters.
  if( ( mask & 1ul ) == 0ul ) missing_params = half_length_label;
  if( ( mask & 2ul ) == 0ul ) missing_params += (missing_params.empty() ? "": " ") + radius_label;
  if( not missing_params.empty() )
  {
    UTILITY_CHECK( params.back().name() == core::strngs::fsend(), "Missing guard entry in vector." );
    throw core::input_error::missing_parameters_error( "Open cylinder", core::strngs::fsregn(), missing_params, params.back().filename(), params.back().line_number() );
  }
}

// build region object.
boost::shared_ptr< geometry::base_region > current;
current.reset( new open_cylinder_region( label, radius, half_length ) );
return current;
!!!1093424.cpp!!!	add_definition(inout meta : region_meta) : void
std::string desc( "A cylindrical region centred on the origin with linear axis in z direction. The curved wall is considered a hard wall but the cylinder ends are not when considering valid positions." );
std::unique_ptr< region_definition > cylinder_defn( new region_definition( type_label(), desc, &open_cylinder_region::region_factory ) );
cylinder_defn->add_definition( { "radius", "distance in Angstrom", ">0", "required", "The radius of the cylinder in the XY plane." } );
cylinder_defn->add_definition( { "half-length", "distance in Angstrom", ">0", "required", "Half the length of the cylinder. The cylinder is centred on the origin so |z| <= half-length." } );
meta.add_definition( cylinder_defn );
