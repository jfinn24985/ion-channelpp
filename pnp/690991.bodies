class CylinderRegion
!!!1274415.python!!!	hypot_sq(in self : , in p0 : double, in p1 : double) : double
# Minimum image means d[u] is <= 1/2 dim[u] if per[u]

return sum(map(lambda d,p,r0,r1: pow((p and abs(r0-r1) > d/2) and d - abs(r0-r1) or (r0-r1), 2), self.dimensions[0:2], self.periodic[0:2], p0[0:2], p1[0:2]))
!!!987055.cpp!!!	generate_position(inout a_gen : mersenne_twister_19937)
switch (index_)
{
case constants::ipblk:
{
  // Somewhere in periodic system
  a_pt.set_z(a_gen() * zhigh_);
  a_pt.set_xy(a_gen() * zhigh_, a_gen() * zhigh_);
}
break;

case constants::ismpl:
{
  // ERROR: cannot generate position in sampling-only region
  const bool invalid_region = false;
  IONCH_CHECK(invalid_region, "Cannot generate positions in a sampling-only region");
}
break;

default:
{
  // Somewhere in a cylinder
  a_pt.set_z((2 * a_gen() - 1.0) * zhigh_);
  a_pt.set_r(a_gen() * radius_, a_gen() * 2 * constants::pi);
}
break;
}
!!!987055.python!!!	generate_position(inout a_gen : mersenne_twister_19937)
# Somewhere in a cylinder
Result = Particle ()
Result.z = a_gen(-1 * self.half_length, self.half_length)
Result.set_r (a_gen(self.radius), a_gen(2 * constants.Constants.pi));

if self.valid_position (Result):
  return Result
return None
!!!722095.cpp!!!	in_region(in apt : ) : bool
return a_r <= radius_ and std::abs(a_z) <= zhigh_;

!!!1203247.python!!!	__init__(in a_idx : size_t, in a_radius : double, in a_high : double)
self.volume = constants.Constants.pi * self.radius * self.radius * 2.0 * self.half_length
