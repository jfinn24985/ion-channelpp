class estimate_array
!!!1341104.cpp!!!	append(in arr : double) : void
UTILITY_REQUIRE( arr.size() == this->size(), "Input data size does not match and array size" );
++this->count_;
for( std::size_t idx = 0; idx != this->size(); ++idx )
{
  mean_algorithm::append( this->means_[ idx ], this->vars_[ idx ], arr[ idx ], this->count_ );
}

!!!1340976.cpp!!!	merge(in other : estimate_array) : void
UTILITY_CHECK( this->size() == other.size(), "Can not merge estimate arrays of different size." );
std::size_t lhcount = 0;
for( std::size_t idx = 0; idx != this->size(); ++idx )
{
  lhcount = this->count_;
  mean_algorithm::merge( this->means_[ idx ], this->vars_[ idx ], lhcount, other.means_[ idx ], other.vars_[ idx ], other.count_ );
}
other.reset();
this->count_ = lhcount;
!!!1602608.cpp!!!	merge(inout other : estimate_array) : void
UTILITY_CHECK( this->size() == other.size(), "Can not merge estimate arrays of different size." );
std::size_t lhcount = 0;
for( std::size_t idx = 0; idx != this->size(); ++idx )
{
  lhcount = this->count_;
  mean_algorithm::merge( this->means_[ idx ], this->vars_[ idx ], lhcount, other.means_[ idx ], other.vars_[ idx ], other.count_ );
}
this->count_ = lhcount;
!!!1433264.cpp!!!	reindex(in extend : size_t, in zero : size_t) : void
const std::size_t add = extend + zero;
UTILITY_REQUIRE( 0 != add, "Can not reindex with extend + zero == 0" );
const std::size_t oldsize = this->means_.size();
this->means_.resize( oldsize + add );
this->vars_.resize( oldsize + add );
if( 0 != zero and 0 != oldsize )
{
  {
    auto first = this->means_.begin();
    auto last = first;
    auto result = first;
    std::advance( last, oldsize );
    std::advance( result, oldsize + zero );
    std::copy_backward( first, last, result );
    last = first;
    std::advance( last, zero );
    std::fill( first, last, 0.0 );
  }
  {
    auto first = this->vars_.begin();
    auto last = first;
    auto result = first;
    std::advance( last, oldsize );
    std::advance( result, oldsize + zero );
    std::copy_backward( first, last, result );
    last = first;
    std::advance( last, zero );
    std::fill( first, last, 0.0 );
  }
}

!!!1433392.cpp!!!	remove(in zero : size_t) : void
UTILITY_REQUIRE( 0 != zero, "Can not remove with zero == 0" );
const std::size_t oldsize = this->means_.size();
UTILITY_REQUIRE( oldsize > zero, "Can not remove with zero =< size" );
{
  auto result = this->means_.begin();
  auto first = result;
  auto last = this->means_.end();
  std::advance( first, zero );
  std::copy( first, last, result );
}
{
  auto result = this->vars_.begin();
  auto first = result;
  auto last = this->vars_.end();
  std::advance( first, zero );
  std::copy( first, last, result );
}
this->means_.resize( oldsize - zero );
this->vars_.resize( oldsize - zero );
!!!317745.cpp!!!	reset() : void
std::fill( this->means_.begin(), this->means_.end(), 0.0 );
std::fill( this->vars_.begin(), this->vars_.end(), 0.0 );
this->count_ = 0;
