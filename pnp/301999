format 75
"Induced Charge Computation" // evaluator::ICC evaluator::Induced Charge Computation
  revision 16
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "CC"
  cpp_src_dir "CC"
  python_dir "grs/icc"
  python_package "grs.icc"
  deploymentview 335151 "icc deployment"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 584367 "integrator"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 881839 // integrator
      end
    end

    artifact 584495 "wall_integrator"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 881967 // wall_integrator
      end
    end

    artifact 584623 "line_integrator"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 882095 // line_integrator
      end
    end

    artifact 584751 "arcs_integrator"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 882223 // arcs_integrator
      end
    end
  end

  classview 461871 "ICC patches"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 875695 "evaluator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "* MC driver class
 
 = Notes =

 + The 'readin' procedure is reserved for initialising the environment
 and will be called only once.

 ++ should set up geometry, species, salts and patches completely

 ++ should set MC parameters on conf and accu objects

 + The 'conf::initialise' procedure is used to generate the starting
 point of a simulation, and it is called at the start of each
 simulation.  It is responsible for setting up the variable parts
 of the simulation.
"
      operation 1568687 "evaluator"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}
    : niter (1)
    , iter (0)
    , nstep (0)
    , naver (0)
    , isave (0)
    , title_()
    , patch_1 (new patch (*this))
    , spec_1 (new ion_specie ())
    , conf_1 (new conf (*this))
    , geom_1 (new geom (*spec_1.get ()))
    , sampler_1 (new accu (*this))
    , salt_1 (new salt (*this))
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1568815 "~evaluator"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1568943 "get_environment"
	cpp_inline public explicit_return_type "geom"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return *geom_1.get ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1569071 "get_particles"
	cpp_inline public explicit_return_type "conf"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return *conf_1.get ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1569199 "get_patch"
	cpp_inline public explicit_return_type "patch"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return *patch_1.get();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1569327 "get_sampler"
	cpp_inline public explicit_return_type "accu"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return *sampler_1.get ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1569455 "get_specie"
	cpp_inline public explicit_return_type "ion_specie"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return *spec_1.get ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1569583 "get_salt"
	cpp_inline public explicit_return_type "salt"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return *salt_1.get ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1569711 "readin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "filename" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// MAIN_ 
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
//<       subroutine readin     >
// Subroutine 

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Initialisation process using main file 'filename'

     Notes: Due to cross depenencies the initialisation process
     is performed in two stages.  The first stage is handled by
     methods of the form 'do_readin(reader&)' which is when
     objects acquire configuration data from the main file. As the
     order in which this method is called is dependent on the input
     file, objects can not assume they will be called in any order.
     However, objects can perform any initialisation that has no
     external dependencies. Note also that do_readin(reader) may
     be called several times for an object.

     The second phase is performed using methods of the form
     'do_readin()'. These methods are called in a specific order
     to meet dependencies. The known dependences are shown below
     (1st means do_readin(reader&) and 2 nd means do_readin() must have
     completed).  In the second phase each method should only be
     called once.

     specie[1st]
      +- geom[2nd]
         +- (salt, conf, accu.gz)[2nd]
                  +- specie[2nd]

     independent objects:
      - patch
      - accu.gin
      - (accu)

     Objects that have dependencies must verify their state before
     completion of the listed stage."
      end

      operation 1569839 "main"
	preserve_cpp_body_indent public explicit_return_type "int"
	nparams 2
	  param in name "argc" explicit_type "int"
	  param inout name "argv" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//<       program ionch    >
// Main program 

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * * ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1569967 "tryit"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//void dead_code ()
//{
//    bool targc;  // Input choice parameter
//    bool readit; // Input choice parameter
//    uint32_type ntrg; // Region definition parameter
//    double ctrg; // = rtrg * tosi; Region definition parameter
//    double rl50; // Region definition parameter
//    double zl40; // Region defn parameter
//    // rxi, ryi, rzi;
//    double dzgtrg;  // Parameter used to calculate accu_1.nzg
//
//    uint16_type n_target[SpecieSize]; // Read-in initial n[spec]
//
//    std::string line_; // Dummy line
//    /*<       write(*,*)\" tosi = \",tosi >*/
//    std::cout << \" tosi = \" << constants::tosi << \"\\n\";
//
//    /*< UNUSED      tstar=4*pi*eps0*dsi/(beta*echg**2) >*/
//    //  UNUSED tstar = (constants::pi * 4 * constants::eps0 * constants::Angstrom /
//    //  UNUSED       (constants::beta * (constants::e0 * constants::e0) ) );
//
//    /* ____ READIN PARAMETERS _____________________ */
//    /* ____ CHECK FOR SIZES OF ARRAYS _________________ */
//    /*<       call readi(mag,fgz,fgin,fc,fout,fnaca,fh,fdata,focc,frdf) >*/
//    //readi_ (&constants::mag, names_1.fgz, names_1.fgin, names_1.fc, names_1.fout,
//    //            names_1.fnaca, names_1.fh, names_1.fdata, names_1.focc,
//    //            names_1.frdf, (ftnlen) 11, (ftnlen) 11, (ftnlen) 11, (ftnlen) 11, (
//    //                ftnlen) 11, (ftnlen) 11, (ftnlen) 11, (ftnlen) 11, (ftnlen) 15);
//
//    {
//        /*<       open(2,file=\"in.dat\") >*/
//        std::ifstream is2_ (\"in.dat\");
//
//        /* ---read in first AND geometry--- */
//
//        /*<       do i=1,9 >*/
//        for (uint8_type i_ = 0; i_ < 9; ++i_)
//        {
//            /*<         read(2,*)  >*/
//            std::getline (is2_, line_);
//        }
//
//        // REGION DEFINITION IN GEOM
//        /*<       read(2,*)targc,ntrg,ctrg >*/
//        is2_ >> line_ >> ntrg >> ctrg;
//        targc = (std::string::npos != line_.find_first_of (\"tT\") );
//        std::getline (is2_, line_);
//        std::cout << (targc ? \"true\" : \"false\") << \" \" << ntrg << \" \" << ctrg << \"\\n\";
//        /*<       read(2,*)zl40 >*/
//        is2_ >> zl40;  // region geom parameter
//        std::getline (is2_, line_);
//        /*<       read(2,*)rl50 >*/
//        is2_ >> rl50;  // region geom parameter
//        std::getline (is2_, line_);
//
//        // PATCH
//        /*<       read(2,*)epsw,epspr >*/
//        double epsw_, epspr_;
//        is2_ >> epsw_ >> epspr_;
//        get_patch().set_eps (epsw_, epspr_);
//        std::getline (is2_, line_);
//        /*<       read(2,*)  >*/
//        std::getline (is2_, line_);
//        /*<       read(2,*)  >*/
//        std::getline (is2_, line_);
//        if (DEBUG) { std::cout << line_ << \"\\n\"; }
//        /* ---simulation parameters-- */
//
//        // GEOMETRY
//        /*<       read(2,*)drmax(1),drmax(2) >*/
//        double drmax0_, drmax1_;
//        is2_ >> drmax0_ >> drmax1_;
//        get_environment().set_move_rmax (drmax0_, drmax1_);
//        std::getline (is2_, line_);
//
//        // SAMPLER
//        /*<       read(2,*)drg,dzgtrg   >*/
//        double drg_;
//        is2_ >> drg_ >> dzgtrg; // dzgrtg >> accu_1.nzg
//        std::getline (is2_, line_);
//        get_sampler().set_drg (drg_);
//        /*<       read(2,*)readit >*/
//        is2_ >> line_;
//        readit = (std::string::npos != line_.find_first_of (\"tT\") );
//        std::getline (is2_, line_);
//
//        // CHANNEL
//        /*<       read(2,*)nstep0 >*/
//        is2_ >> nstep;
//        std::getline (is2_, line_);
//        /*<       read(2,*)naver  >*/
//        is2_ >> naver;
//        std::getline (is2_, line_);
//        /*<       read(2,*)isave >*/
//        is2_ >> isave;
//        std::getline (is2_, line_);
//
//        // SAMPLER
//        /*<       read(2,*)calgin >*/
//        is2_ >> line_;
//        const bool calgin_ = (std::string::npos != line_.find_first_of (\"tT\") );
//        std::getline (is2_, line_);
//        /*<       read(2,*)calrdf >*/
//        is2_ >> line_;
//        const bool calrdf_ = (std::string::npos != line_.find_first_of (\"tT\") );
//        std::getline (is2_, line_);
//        get_sampler().set_options (calgin_, calrdf_);
//        /*<       read(2,*) >*/
//        std::getline (is2_, line_);
//        /*<       read(2,*) >*/
//        std::getline (is2_, line_);
//        if (DEBUG) { std::cout << line_ << \"\\n\"; }
//
//        // SPECIES
//        get_specie().do_readin (is2_, &n_target[0]);
//
//        /*<       read(2,*) >*/
//        std::getline (is2_, line_);
//        /*<       read(2,*) >*/
//        std::getline (is2_, line_);
//
//        // SALTS
//        get_salt().do_readin (is2_);
//
//        /*<       read(2,*) >*/
//        std::getline (is2_, line_);
//
//        /*<       close(2) >*/
//    }
//    /* ---read in geometry--- */
//    /* read evertyhing from geometry.dat */
//    /*<       call defgeo >*/
//    get_environment().defgeo (\"geom1.dat\");
//
//    /* Do patch update part of readin */
//    get_patch().do_readin();
//
//    /* read in the region data */
//    get_environment().do_readin (targc, ctrg, ntrg, zl40, rl50);
//
//    /* ____ CALCULATE REDUCED CHARGES _________________ */
//    /* ____ CHECK FOR ELECTRONEUTRALITY ________________ */
//    /*<       charge = 0.0 >*/
//    double charge = 0.;
//    const ion_specie &spec_1->= get_specie();
//    const conf &conf_1 = get_particles();
//    /*<       write(*,'(\" q* = \",f10.5)')qstar  >*/
//    std::cout << \" q* = \" << spec_1->get_qstar() << \"\\nCharge for free ions:\\n\";
//    // Finalise specie initialisation.
//    get_specie().do_init ();
//    /*<       do i=1,nspec >*/
//    const uint8_type nspec_ = spec_1->count ();
//    for (uint8_type i_ = spec_1->first_general_specie(); i_ < nspec_; ++i_)
//    {
//        /*<             charge=charge+z(i)*n(i) >*/
//        charge += spec_1->valency (i_) * n_target[i_];
//        /*<             write(*,*)charge,z(i),n(i) >*/
//        std::cout << \"Specie \" << int (i_) << \"\\t\" << spec_1->valency (i_) << \" x \" << n_target[i_] << \"\\n\";
//        /*<       enddo >*/
//    }
//    /*<       do i=1,nchg >*/
//    const uint8_type nchg_ = spec_1->count_structural_particles ();
//    if (nchg_ > 0)
//    {
//        double schg_ = 0.;
//        for (uint8_type i_ = 0; i_ < nchg_; ++i_)
//        {
//            /* qpr here has been multiple by qstar */
//            /*<         charge = charge + qpr(i)/qstar >*/
//            schg_ += spec_1->structural_charge_factor (i_) / spec_1->get_qstar ();
//        }
//        /*<         write(*,*),i,charge,qpr(i),nchg >*/
//        std::cout << \"Structural ion charge \" << schg_ << \"\\t(number of charges \" << int (nchg_) << \")\\n\";
//        charge += schg_;
//    }
//    std::cout << constants::output_divider << \"\\nTotal charge: \" << charge << \" ~= 0.0\\n\"  << constants::output_divider << \"\\n\";
//
//    /*<       if (abs(charge).gt.0.001) stop \"Cell is no neutral\" >*/
//    GRS400_ALWAYS (std::abs (charge) < .001, \"Cell is not neutral\");
//
//    /* ____ WRITE PARAMETERS ______________________ */
//    /*<       write(*,*) >*/
//    /*<       write(*,*) \" SIMULATION PARAMETERS IN SI UNITS\" >*/
//    /*<       write(*,*) >*/
//    std::cout << \"\\n SIMULATION PARAMETERS IN SI UNITS\\n\\n\";
//    /*<       write(*,'(\" T [K]       = \",f10.5)')tsi   >*/
//    /*<       write(*,*)              >*/
//    std::cout << \" T [K]       = \" << constants::temperature << \"\\n\\n\";
//    /*<       write(*,'(72(\"_\"))') >*/
//    std::cout << constants::output_divider << \"\\n\";
//    /*<       write(*,*)\"  vestibule outer radius rl(2) = \", rl(2) >*/
//    const geom &geom_1 = get_environment();
//    std::cout << \"  vestibule outer radius rl(2) = \" << geom_1.radius (ChannelRegion) << \"\\n\";
//    /*<       write(*,*)\"    cell cylinder radius rl(5) = \", rl(5) >*/
//    std::cout << \"    cell cylinder radius rl(5) = \" << geom_1.radius (BulkRegion) << \"\\n\";
//    /*<       write(*,'(72(\"_\"))') >*/
//    std::cout << constants::output_divider << \"\\n\";
//    /*<       write(*,*)\"          channel length zl(2) = \", zl(2) >*/
//    std::cout << \"          channel length zl(2) = \" << geom_1.length (ChannelRegion) << \"\\n\";
//    /*<       write(*,*)\"             cell length zl(4) = \", zl(4) >*/
//    std::cout << \"             cell length zl(4) = \" << geom_1.length (BulkRegion) << \"\\n\";
//    /*<       write(*,'(72(\"_\"))') >*/
//    std::cout << constants::output_divider << \"\\n\";
//    /*<       write(*,*)\"    eps solvent = \", epsw >*/
//    const patch &patch_1 = get_patch();
//    std::cout << \"    eps solvent = \" << patch_1->water_eps () << \"\\n\";
//    /*<       write(*,*)\"    eps protein = \", epspr >*/
//    std::cout << \"    eps protein = \" << patch_1->protein_eps () << \"\\n\";
//    /*<       write(*,'(72(\"_\"))') >*/
//    /*<       write(*,*)       >*/
//    std::cout << constants::output_divider << \"\\n\\n\";
//    /*<       write(*,*)\" Number of structural ion species = \", istr >*/
//    std::cout << \" Number of structural ion species = \" << int (spec_1->first_general_specie () ) << \"\\n\";
//    /*<       write(*,'(12x,\"   N   \",\"  q [e]  \",\"  d [A]  \")') >*/
//    std::cout << \"               N     q [e]    d [A]  \\n\";
//    /*<       do i=1,nspec >*/
//    for (uint8_type i_ = 0; i_ < nspec_; ++i_)
//    {
//        /*<     write(*,'(\"  ion   \",i1,1x,i7,2x,f5.2,2x,2x,f8.4)')
//         :      i,n(i),z(i),d(i)
//         >*/
//        std::cout <<  \"  ion   \" << int (i_) << \" \" << std::setw (7) << int (n_target[i_]) << \"  \"
//                  << std::setw (5) << spec_1->valency (i_) << \"    \" << spec_1->diameter (i_) << \"\\n\";
//    }
//    /*<       write(*,*) >*/
//    std::cout << \"\\n\";
//    /*<       if (readit) then >*/
//    if (readit)
//    {
//        /* ____ READIN CONFIGURATION ____________________ */
//        /* ____ FILL UP INDEX ARRAYS AND LOOKUP TABLES ___________ */
//        /*<             open (3,file=\"c0\") >*/
//        std::ifstream is3_ (\"c0\");
//        /*<             read(3,*)nspec >*/
//        int newspec_t_;
//        is3_ >> newspec_t_;
//        uint8_type newspec_ =uint8_type (newspec_t_);
//        std::getline (is3_, line_);
//        /*<             read(3,*) >*/
//        std::getline (is3_, line_);
//        /*<          s   read(3,*) >*/
//        std::getline (is3_, line_);
//        /*<             read(3,*) >*/
//        std::getline (is3_, line_);
//        /*<             read(3,*) >*/
//        std::getline (is3_, line_);
//        /*<             read(3,*) >*/
//        std::getline (is3_, line_);
//        conf &conf_rw = get_particles();
//        /*<             do ispec=1,nspec >*/
//        for (uint8_type ispec = 0; ispec < newspec_; ++ispec)
//        {
//            /*<                   read(3,*)n(ispec),d(ispec) >*/
//            double diameter_;
//            int target_t_;
//            is3_ >> target_t_ >> diameter_;
//            n_target[ispec] = target_t_;
//            std::getline (is3_, line_);
//            /*<                   read(3,*) >*/
//            std::getline (is3_, line_);
//            /*<                   read(3,*) >*/
//            std::getline (is3_, line_);
//            conf_rw.set_count (ispec, n_target[ispec]);
//            /*<                   do i=1,n(ispec) >*/
//            for (uint16_type i_ = 0; i_ < n_target[ispec]; ++i_)
//            {
//                /*<                         read(3,*)rxi,ryi,rzi >*/
//                /*<                         rx(ii)=rxi >*/
//                /*<                         ry(ii)=ryi >*/
//                /*<                         rz(ii)=rzi >*/
//                double xyzr_[4];
//                is3_ >> xyzr_[0] >> xyzr_[1] >> xyzr_[2];
//                std::getline (is3_, line_);
//                /*<                         r2(ii)=dsqrt(rx(ii)**2+ry(ii)**2) >*/
//                xyzr_[3] = std::sqrt (sqr (xyzr_[0]) + sqr (xyzr_[1]) );
//                /*<                         indspc(ispec,i)=ii >*/
//                /*<                         ispcbk(ii)=i >*/
//                conf_rw.add_particle (ispec, &xyzr_[0], NULL);
//                /*<                         ii=(ispec-1)*IonSize+i >*/
//            }
//            /*<             read(3,*) >*/
//            std::getline (is3_, line_);
//        }
//        /*<             close(3) >*/
//    }
//    else
//    {
//        /* ____ MAKE CONFIGURATION _____________________ */
//        /*<             call initc >*/
//        get_particles().initc (&n_target[0]);
//        /*<       endif >*/
//    }
//    // Recheck charge after defining all particles
//    std::cout << \"After particle initialisation charge for free ions:\\n\";
//    /*<       do i=1,nspec >*/
//    for (uint8_type i_ = spec_1->first_general_specie(); i_ < nspec_; ++i_)
//    {
//        /*<             charge=charge+z(i)*n(i) >*/
//        charge += spec_1->valency (i_) * conf_1->count (i_);
//        /*<             write(*,*)charge,z(i),n(i) >*/
//        std::cout << \"Specie \" << int (i_) << \"\\t\" << spec_1->valency (i_) << \" x \" << int (conf_1->count (i_) ) << \"\\n\";
//        /*<       enddo >*/
//    }
//    /*<       do i=1,nchg >*/
//    if (nchg_ > 0)
//    {
//        double schg_ = 0.;
//        for (uint8_type i_ = 0; i_ < nchg_; ++i_)
//        {
//            /* qpr here has been multiple by qstar */
//            /*<         charge = charge + qpr(i)/qstar >*/
//            schg_ += spec_1->structural_charge_factor (i_) / spec_1->get_qstar ();
//        }
//        /*<         write(*,*),i,charge,qpr(i),nchg >*/
//        std::cout << \"Structural ion charge \" << schg_ << \"\\t(number of charges \" << int (nchg_) << \")\\n\";
//        charge += schg_;
//    }
//    std::cout << constants::output_divider << \"\\nTotal charge: \" << charge << \" ~= 0.0\\n\"  << constants::output_divider << \"\\n\";
//
//    /*<       if (abs(charge).gt.0.001) stop \"Cell is no neutral\" >*/
//    GRS400_ALWAYS (std::abs (charge) < .001, \"Cell is not neutral\");
//    /*<       call lookup >*/
//    if (get_patch ().in_use () ) { get_patch().lookup (); }
//    get_sampler().initialise (dzgtrg);
//
//    get_environment().initialise();
//
//    if (get_patch ().in_use () ) { get_patch().initialise (); }
//    do_sum_rates ();
//} /* readin_ */
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
//<       subroutine tryit >
// Subroutine 

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1570095 "wrcf"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param in name "istep" explicit_type "uint32_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// tryit_ 
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
// Open file and delegate to ion_specie.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "extern doublereal tht_(doublereal *x, doublereal *y);
* Write out the current configuration.

     This method calls ion_specie::wrcf to perform actual
     process after opening the output file.

     throw error if unable to open file."
      end

      operation 1570223 "jobnumber"
	const cpp_inline public explicit_return_type "uint16_type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return iter;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1570351 "job_suffix"
	const cpp_inline public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        const char num_[] = \"0123456789\";
        uint16_type suf_ = iter;
        std::string result (\".000\");
        for (uint8_type i = 3; suf_ != 0 && i > 0; --i)
        {
            result[i] = num_[suf_ % 10];
            suf_ /= 10;
        }
        return result;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Get job number as a filename suffix string

     Convert job number to a three digit string with
     '.' and leading 0s."
      end

      operation 1570479 "do_readin"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param inout name "scnr" explicit_type "reader"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " readin in parameters for channel"
      end

      attribute 1109935 "title_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Extra data"
      end

      classrelation 950063 // patch_1 (<directional composition>)
	relation 920751 *-->
	  stereotype "std::unique_ptr"
	  a role_name "patch_1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 950063 // patch_1 (<directional composition>)
	  b parent class_ref 877615 // patch_ALT
      end

      classrelation 950447 // geom_1 (<directional composition>)
	relation 921135 *-->
	  stereotype "std::unique_ptr"
	  a role_name "geom_1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 950447 // geom_1 (<directional composition>)
	  b parent class_ref 876591 // geom
      end

      classrelation 950575 // sampler_1 (<directional composition>)
	relation 921263 *-->
	  stereotype "std::unique_ptr"
	  a role_name "sampler_1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 950575 // sampler_1 (<directional composition>)
	  b parent class_ref 874543 // accu
      end
    end

    class 874031 "patch"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "  -------------------------------------------------------------
  ICC data

  @begin docfileformat
   input file sections: Patch

    patch
    dxw [REAL] # approximate patch delta width
    dxf [REAL] # approximate patch delta angle
    nsub [INT] # integration grid array size parameter
    epsw
    epspr
    } // 

  @} //  docfileformat

  baksub
     convert 'c' vector to 'h' vector by back-substituting
     from the decomposed 'A' matrix
  matrix
     build the initial 'A' matrix and decompose it.
  rdptch
     read patch section of input file
  rfptch
     initialise the patch system after reading the input file

  Subroutine contained methods of note for patch class maintainers {

  readam/writam
     read or write the inverted 'A' matrix
  intwll,intarc,intlin
     surface integration for creation of 'A' matrix"
      operation 1555119 "totalarea"
	cpp_inline private explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    implicit none
    
    totalarea = sum(parea(1:npatch))
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "  gaussbox {"
      end
    end

    class 871343 "Patch"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 942767 // patch (<directional composition>)
	relation 913455 *-->
	  a role_name "patch" class_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 942767 // patch (<directional composition>)
	  b parent class_ref 871343 // Patch
      end

      attribute 1093295 "homog"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 1544751 "npatch"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1544879 "epsw"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 877615 "patch_ALT"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "* PNP diffusion front data

 [ionch/patch]"
      extra_member 389551 "friend"
	
	cpp "
    friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      class 879663 "patch_type"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	operation 1580847 "serialize"
	  stereotype "template"
	  preserve_cpp_body_indent public explicit_return_type "void"
	  nparams 2
	    param inout name "ar" explicit_type "Archive"
	    param in name "version" explicit_type "unsigned int"
	  cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "// end namespace

template<class Archive>
${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 1580975 "dump"
	  stereotype "template"
	  const cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "a_os" explicit_type "Ostream"
	  cpp_decl "    ${comment}template<class Ostream>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            a_os << this->px << \"\\t\";
            a_os << this->py << \"\\t\";
            a_os << this->pz << \"\\t\";
            a_os << this->pr << \"\\t\";
            a_os << this->ux << \"\\t\";
            a_os << this->uy << \"\\t\";
            a_os << this->uz << \"\\t\";
            a_os << this->area << \"\\n\";
        };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end
      end

      classrelation 953007 // pu_xyz (<directional composition>)
	relation 923695 *-->
	  a role_name "pu_xyz" multiplicity "[PatchSize]" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 953007 // pu_xyz (<directional composition>)
	  b parent class_ref 879663 // patch_type
      end

      attribute 1117231 "patch_factor"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "* Set target number of patches

     The number of patches is not directly controlled, instead we
     set a target patch area.  The patch generator then tries to
     split the surface into patches of about this size.  However,
     the generator limits the minimum number of patches that may
     occur in certain places to 16.  This has the affect that there
     will be smaller patches close to the channel and there is a
     minimum number of patches that you can not go below.

     PatchArea_target = (TotalArea / min(patch_factor,PatchSize)).

     The default value is 'PatchSize'
     "
      end

      attribute 1117359 "amx"
	private explicit_type " double "
	stereotype "std::valarray"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "* LHS of PNP matrix [ionch/patch/amx] 
 [PatchSize][PatchSize];"
      end

      attribute 1117487 "indx"
	private explicit_type "int"
	multiplicity "[PatchSize]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "* PNP LU pivot matrix (?) [ionch/patch/indx] "
      end

      attribute 1117615 "deps"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "* Dielectric factor [2 * delta{eps}/sum{eps}]  [ionch/patch/deps]"
      end

      attribute 1117743 "epsw"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Data from [ionch/geom] common block "
      end

      attribute 1117871 "epspr"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Data from [ionch/geom] common block "
      end

      classrelation 953263 // parent_ (<unidirectional association>)
	relation 923951 --->
	  a role_name "parent_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    python "${comment}${self}${name} = ${value}
"
	    classrelation_ref 953263 // parent_ (<unidirectional association>)
	  b parent class_ref 875695 // evaluator
      end

      attribute 1117999 "filename_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 1581103 "serialize"
	stereotype "template"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<class Archive>
${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Here we only save the data that is independent of particles."
      end

      operation 1581231 "displacement"
	class_operation cpp_inline private explicit_return_type "double"
	nparams 2
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "patch_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[4]${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        double const x2 (sqr(a[0] - b.px));
        double const y2 (sqr(a[1] - b.py));
        double const z2 (sqr(a[2] - b.pz));
        return std::sqrt (x2 + y2 + z2);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1581359 "area"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "a_patch" explicit_type "uint16_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        GRS400_REQUIRE (a_patch < npatch, \"Patch index out of range\");
        return pu_xyz[a_patch].area;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Get area of a patch "
      end

      operation 1581487 "count"
	const cpp_inline public explicit_return_type "uint16_type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return npatch;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* The number of patches "
      end

      operation 1581615 "do_readin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "scnr" explicit_type "reader"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1581743 "do_readin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1581871 "dump"
	stereotype "template"
	const cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "Ostream"
	cpp_decl "    ${comment}template<class Ostream>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        for (uint16_type i_; i_ < npatch; ++i_) { pu_xyz[i_].dump (a_os); }
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Writes out the current patch data"
      end

      operation 1581999 "get_patch"
	const cpp_inline public explicit_return_type "patch_type"
	nparams 1
	  param in name "pidx" explicit_type "uint16_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return pu_xyz[pidx];
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Get reference to patch"
      end

      operation 1582127 "in_use"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return (deps < 0. ? -1e-5 > deps : deps > 1e-5);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Is this object begin used

     dabs(deps).gt.1.d-5"
      end

      operation 1582255 "initialise_buffer"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "bufer_1" explicit_type "guard_letter"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// part of [ionch/lookup] 

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Compute initial profiles for c and h.

     \\pre in_use"
      end

      operation 1582383 "make_patches"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param in name "br" explicit_type "patch_ring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Construct the patch data set from the given polygon

     This constructs the patch set by adding patches onto the surface
     of rotation of the given polygon.  It attempts to create PatchSize
     patches of approximately equal area.  Once it has defined the
     patches it runs over the geometry again computing the a matrix
     (amx).
"
      end

      operation 1582511 "partial_h"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 3
	  param inout name "bufer_1" explicit_type "add_guard"
	  param in name "a_salt" explicit_type "uint8_type"
	  param in name "is_create" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Calculate H when adding or removing a salt

${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Calculate H when adding or removing a salt"
      end

      operation 1582639 "partial_h"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 2
	  param inout name "bufer_1" explicit_type "move_guard"
	  param in name "a_spec" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ################################################################### 
//* Calculate H when moving a particle

${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Calculate H when moving a particle"
      end

      operation 1582767 "patch_ALT"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param inout name "a_parent" explicit_type "evaluator"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}${)}
    : pu_xyz ()
    , patch_factor (PatchSize)
    , amx (0., PatchSize * PatchSize)
    , indx ()
    , deps (0)
    , npatch (0)
    , epsw (0.)
    , epspr (0.)
    , parent_ (a_parent)
    , filename_ ()
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1582895 "protein_eps"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return epspr;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Data from [ionch/geom] common block "
      end

      operation 1583023 "water_eps"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return epsw;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Data from [ionch/geom] common block "
      end
    end

    class 881839 "integrator"
      abstract visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "(from bodacea)"
      attribute 1129519 "phi0"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " revolution start angle"
      end

      attribute 1129647 "phi1"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " revolution end angle"
      end

      operation 1597103 "integrator"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "j" explicit_type "int"
	  param in name "a0" explicit_type "double"
	  param in name "a1" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw} : phi0 (a0), phi1 (a1), jj (j), cosphij_(), sinphij_()
    {
        GRS400_REQUIRE (! feq (phi0, phi1), \"rotation angles phi0 and phi1 must not be equal\");
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Cache tables of cosine and sine values"
      end

      operation 1597231 "operator ()"
	abstract const cpp_virtual public explicit_return_type "double"
	nparams 2
	  param in name "ii" explicit_type "uint16_type"
	  param in name "ptch" explicit_type "patch_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1597359 "build_table"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        this->cosphij_.resize (NSubIJ);
        this->sinphij_.resize (NSubIJ);
        const double dphi = (this->phi1 - this->phi0) / double (NSubIJ);

        for (int j_ = 0; j_ < NSubIJ; ++j_)
        {
            const double phij = this->phi0 + (double (j_) + .5) * dphi;
            this->cosphij_[j_] = std::cos (phij);
            this->sinphij_[j_] = std::sin (phij);
        }
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1597487 "clear_table"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        this->cosphij_.resize (0, 0.);
        this->sinphij_.resize (0, 0.);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1597615 "patch_integral"
	const cpp_inline public explicit_return_type "void"
	nparams 8
	  param in name "arel" explicit_type "double"
	  param in name "r" explicit_type "double"
	  param in name "z" explicit_type "double"
	  param in name "sinphij" explicit_type "std::valarray< double >"
	  param in name "cosphij" explicit_type "std::valarray< double >"
	  param in name "nsub" explicit_type "int"
	  param inout name "result" explicit_type "double"
	  param in name "ptch" explicit_type "patch_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} & ${p6}${v6}, const ${t7} & ${p7}${v7}${)}${const}${volatile}${throw}${abstract} {
            for (int j_ = 0; j_ < nsub; ++j_)
            {
                const double pxj = r * cosphij[j_];
                const double pyj = r * sinphij[j_];
                const double pxij = ptch.px - pxj;
                const double pyij = ptch.py - pyj;
                const double pzij = ptch.pz - z;
                const double rijsq = sqr (pxij) + sqr (pyij) + sqr (pzij);
                const double rij3 = rijsq * std::sqrt (rijsq);
                const double rk = (pxij * ptch.ux + pyij * ptch.uy + pzij * ptch.uz) / rij3;
                result = ::fma(rk, arel, result);
            }
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 881967 "wall_integrator"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "(from bodacea)"
      classrelation 956847 // <generalisation>
	relation 927535 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 956847 // <generalisation>
	  b parent class_ref 881839 // integrator
      end

      attribute 1129775 "z"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " z-coord"
      end

      attribute 1129903 "r0"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " inner r"
      end

      attribute 1130031 "r1"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " outer r"
      end

      operation 1597743 "wall_integrator"
	cpp_inline public explicit_return_type ""
	nparams 6
	  param in name "j" explicit_type "int"
	  param in name "a" explicit_type "double"
	  param in name "b0" explicit_type "double"
	  param in name "b1" explicit_type "double"
	  param in name "c0" explicit_type "double"
	  param in name "c1" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${volatile}${throw} : integrator (j, c0, c1), z (a), r0 (b0), r1 (b1)
    {
        GRS400_REQUIRE (! feq (r1, r0), \"radial coordinates r0 and r1 must not be equal\");
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1597871 "operator ()"
	const cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "ii" explicit_type "uint16_type"
	  param in name "ptch" explicit_type "patch_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        double result = 0.;
        const int nsub_ (jj == ii ? NSubII : NSubIJ);
        const double dr = (r1 - r0) / double (nsub_);
        const double dphi = (phi1 - phi0) / double (nsub_);

        std::valarray< double > cosphij (nsub_);
        std::valarray< double > sinphij (nsub_);

        if (nsub_ == NSubIJ)
        {
            if (this->cosphij_.size () == 0)
            {
                const_cast< wall_integrator & > (*this).build_table ();
            }

            cosphij = this->cosphij_;
            sinphij = this->sinphij_;
        }
        else
        {
            for (int j_ = 0; j_ < nsub_; ++j_)
            {
                const double phij = phi0 + (double (j_) + .5) * dphi;
                cosphij[j_] = std::cos (phij);
                sinphij[j_] = std::sin (phij);
            }
        }

        // double loop over subtiles, over r and over theta angle so each
        // patch is going to have nsub*nsub tiny patches
        for (int i_ = 0; i_ < nsub_; ++i_)
        {
            const double rr0 = r0 + i_ * dr;
            const double rr1 = rr0 + dr;

            const double ar = 0.5 * (sqr (rr1) - sqr (rr0));
            const double szaml = (sqr (rr1) * rr1 - sqr (rr0) * rr0) / 3.;
            const double rc = szaml / ar;
            // loop over phi angle
            patch_integral (rc * dr * dphi, rc, z, cosphij, sinphij, nsub_, result, ptch);
       }

        return result;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 882095 "line_integrator"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "(from bodacea)"
      classrelation 956975 // <generalisation>
	relation 927663 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 956975 // <generalisation>
	  b parent class_ref 881839 // integrator
      end

      attribute 1130159 "z0"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " start z-coord"
      end

      attribute 1130287 "z1"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " end z-coord"
      end

      attribute 1130415 "r0"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " radial"
      end

      operation 1597999 "line_integrator"
	cpp_inline public explicit_return_type ""
	nparams 6
	  param in name "j" explicit_type "int"
	  param in name "a0" explicit_type "double"
	  param in name "a1" explicit_type "double"
	  param in name "b0" explicit_type "double"
	  param in name "c0" explicit_type "double"
	  param in name "c1" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${volatile}${throw} : integrator (j, c0, c1), z0 (a0), z1 (a1), r0 (b0)
    {
        GRS400_REQUIRE (! feq (r0, 0.), \"The radial coordinate must not equal zero\");
        GRS400_REQUIRE (! feq (z0, z1), \"The two z-coordinates must not be equal\");
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1598127 "operator ()"
	const cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "ii" explicit_type "uint16_type"
	  param in name "ptch" explicit_type "patch_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        double result = 0.;
        const int nsub_ (jj == ii ? NSubII : NSubIJ);
        // z2 and z1 are end and begin of this particular ring so split up
        // each ring into pieces and also around the phi angle
        const double dz = (z1 - z0) / double (nsub_);
        const double dphi = (phi1 - phi0) / double (nsub_);

        // JJF: talfa is the tangent of the slope of the line so === 0 as
        // here lines are parallel to z-axis

        std::valarray< double > cosphij (nsub_);
        std::valarray< double > sinphij (nsub_);

        if (nsub_ == NSubIJ)
        {
            if (cosphij_.size () != NSubIJ)
            {
                const_cast< line_integrator & > (*this).build_table ();
            }

            cosphij = cosphij_;
            sinphij = sinphij_;
        }
        else
        {
            for (int j_ = 0; j_ < nsub_; ++j_)
            {
                const double phij = phi0 + (double (j_) + .5) * dphi;
                cosphij[j_] = std::cos (phij);
                sinphij[j_] = std::sin (phij);
            }
        }

        // double loop over subtiles, over z and over theta angle so each
        // patch is going to have nsub*nsub tiny patches
        for (int i_ = 0; i_ < nsub_; ++i_)
        {
            const double zz0 = z0 + i_ * dz;
            const double zz1 = zz0 + dz;
            // JEF: get the centroid in this weird way i can't figure out
            // r0 is radius if line at beginning (left) side
            // z0 beginning (left) of line
            // talfa is tangent of the slope of the line
            // dzsub is spacing between each tiny patch
            // zz2 is right side of tinypatch
            // zz1 is left side of tinypatch
            const double ar = r0 * dz;
            const double szaml = 0.5 * r0 * (sqr (zz1) - sqr (zz0));

            // loop over phi angle
            patch_integral (r0 * dz * dphi, r0, szaml / ar, cosphij, sinphij, nsub_, result, ptch);
        }

        return result;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 882223 "arcs_integrator"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "(from bodacea)"
      classrelation 957103 // <generalisation>
	relation 927791 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 957103 // <generalisation>
	  b parent class_ref 881839 // integrator
      end

      attribute 1130543 "z0"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " centre z-coord"
      end

      attribute 1130671 "r0"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " centre r-coord"
      end

      attribute 1130799 "radius"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " arc radius"
      end

      attribute 1130927 "theta0"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " arc start angle"
      end

      attribute 1131055 "theta1"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " arc end angle"
      end

      operation 1598255 "arcs_integrator"
	cpp_inline public explicit_return_type ""
	nparams 8
	  param in name "j" explicit_type "int"
	  param in name "a0" explicit_type "double"
	  param in name "a1" explicit_type "double"
	  param in name "b" explicit_type "double"
	  param in name "c0" explicit_type "double"
	  param in name "c1" explicit_type "double"
	  param in name "d0" explicit_type "double"
	  param in name "d1" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${volatile}${throw} : integrator (j, d0, d1),  z0 (a0), r0 (a1), radius (b), theta0 (c0), theta1 (c1)
    {
        if (DEBUG) { std::clog << \"Arc = (\" << a0 << \", \" << a1 << \": \" << b << \"), Theta (\" << c0 << \", \" << c1 << \") at \" << __LINE__ << \"\\n\"; }

        GRS400_REQUIRE (! feq (radius, 0.), \"The arc radius must not equal zero\");
        GRS400_REQUIRE (! feq (theta0, theta1), \"The arc start and end angles must not be equal\");
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1598383 "operator ()"
	const cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "ii" explicit_type "uint16_type"
	  param in name "ptch" explicit_type "patch_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        double result = 0.;
        const int nsub_ (jj == ii ? NSubII : NSubIJ);
        const double dtheta = (theta1 - theta0) / double (nsub_);
        const double dphi = (phi1 - phi0) / double (nsub_);
        std::valarray< double > cosphij (nsub_);
        std::valarray< double > sinphij (nsub_);

        if (nsub_ == NSubIJ)
        {
            if (cosphij_.size () != NSubIJ)
            {
                const_cast< arcs_integrator & > (*this).build_table ();
            }

            cosphij = cosphij_;
            sinphij = sinphij_;
        }
        else
        {
            for (int j_ = 0; j_ < nsub_; ++j_)
            {
                const double phij = phi0 + (double (j_) + .5) * dphi;
                cosphij[j_] = std::cos (phij);
                sinphij[j_] = std::sin (phij);
            }
        }

        for (int i_ = 0; i_ < nsub_; ++i_)
        {
            const double tt0 = theta0 + i_ * dtheta;
            const double tt1 = tt0 + dtheta;
            const double costt0 = std::cos (tt0);
            const double costt1 = std::cos (tt1);
            const double ar = r0 * dtheta - radius * (costt0 - costt1);
            const double szaml = 0.5 * r0 * (sqr (tt0) + sqr (tt1)) - radius * (tt1 * costt1 - tt0 * costt0 + std::sin (tt1) - std::sin (tt0));
            const double ttc = szaml / ar;
            patch_integral (radius * ar * dphi, r0 + radius * std::sin (ttc),  z0 + radius * std::cos (ttc), cosphij, sinphij, nsub_, result, ptch);
        }

        return result;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " [02-intarc]"
      end
    end
  end

  classview 433839 "modules"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    sequencediagram 445487 "overlap tests"
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
      overlapping_bars size A4
    end

    classdiagram 445359 "modules"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 826031 "conf_f90"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 826287 "geom_f90"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      operation 1430063 "__wall"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "check the object is in a valid position with respect to the static geometry"
      end
    end

    class 826159 "spec_f90"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      operation 1429935 "__mobchk"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1429807 "__mobpen"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1430191 "radius"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 905007 "overlap"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Return True if the overlap test passes, False if the particles are too close.

 In the simple case of hard spheres this checks that the square of the cartesian
 distance between the two points is more than the square of the sum of the
 particle radii.

 Species that require more advanced checking need only define a method
 called \"do_check_overlap\" to have that method called in place of this one.
 Note that this works if the specie object if either particle has such a method
 defined."
    end
  end

  package_ref 433199 // patch_2

  classview 348079 "OVERVIEW"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    classdiagram 399279 "OVERVIEW"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 697775 "PatchIntegrator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Association between a ICC surface tile and the integrator required
to do the integration.

"
      classrelation 801711 // target (<directional aggregation>)
	relation 786351 o-->
	  a role_name "target" private
	    comment "The patch to integrate"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    python "${comment}${self}${name} = ${value}
"
	    classrelation_ref 801711 // target (<directional aggregation>)
	  b parent class_ref 512943 // PatchReference
      end

      classrelation 801839 // integrator (<directional aggregation>)
	relation 786479 o-->
	  a role_name "integrator" private
	    comment "The integrator to use on the patch"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    python "${comment}${self}${name} = ${value}
"
	    classrelation_ref 801839 // integrator (<directional aggregation>)
	  b parent class_ref 447023 // Integrator
      end

      operation 1217199 "__call__"
	public explicit_return_type "void"
	nparams 2
	  param in name "self" type class_ref 697775 // PatchIntegrator
	  param in name "ptchset" type class_ref 448175 // PatchSet
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}self.integrator (target, ptchset)
"
	
	comment "Integrate patch into the patchset ICC matrix"
      end
    end
  end

  classview 348207 "Surface geometry"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 697647 "SurfaceShapeBuilder"
      abstract visibility package stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Interface to objects that generate surface grids of particular
geometric shapes.
"
      classrelation 802095 // shape_integrator (<directional composition>)
	relation 786735 *-->
	  stereotype "list"
	  a role_name "shape_integrator" multiplicity "*" private
	    comment "The integrator object to use to integrate this shape"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 802095 // shape_integrator (<directional composition>)
	  b multiplicity "*" parent class_ref 447023 // Integrator
      end

      operation 1216943 "__call__"
	public explicit_return_type "void"
	nparams 2
	  param in name "self" type class_ref 697647 // SurfaceShapeBuilder
	  param in name "ptchset" type class_ref 448175 // PatchSet
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Virtual function to convert the geometric shape to surface grid
tiles.
"
      end
    end
  end

  classview 268719 "trial"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 236079 // impl
    comment "Classes used during the potential energy evaluation"
    class 512943 "PatchReference"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Interface to a single patch/tile that is a part of the ICC surface
elements.

* Requirements *

+ Changes made to the tile centrepoint, normal, area and permittivity
delta are reflected in the ICC patch set and vice versa

+ Other data is is local to the PatchReference object.
"
      classrelation 556975 // data_set (<directional aggregation>)
	relation 550703 o-->
	  a role_name "data_set" multiplicity "1" init_value "dataset" private
	    comment "The PatchSet object this is a reference for."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}_${value};
"
	    python "${comment}${self}${name} = ${value}
"
	    classrelation_ref 556975 // data_set (<directional aggregation>)
	  b parent class_ref 448175 // PatchSet
      end

      attribute 655535 "index"
	private explicit_type "size_t"
	init_value "idx"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}_${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Tile index"
      end

      operation 865583 "deps"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return data_set_->deps (index_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}self.data_set.${name} (self.index)
"
	
      end

      operation 865711 "x"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return data_set_->pr${name} (index_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}self.data_set.${name} (self.index)
"
	
      end

      operation 865839 "y"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return data_set_->pr${name} (index_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}self.data_set.${name} (self.index)
"
	
      end

      operation 865967 "z"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return data_set_->pr${name} (index_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}self.data_set.${name} (self.index)"
	
      end

      operation 866095 "ux"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return data_set_->p${name} (index_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}self.data_set.${name} (self.index)"
	
      end

      operation 866223 "uy"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return data_set_->p${name} (index_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}self.data_set.${name} (self.index)"
	
      end

      operation 867119 "uz"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return data_set_->p${name} (index_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}self.data_set.${name} (self.index)"
	
      end

      operation 867375 "area"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return data_set_->p${name} (index_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}self.data_set.${name} (self.index)"
	
      end

      operation 1224367 "__init__"
	public explicit_return_type ""
	nparams 3
	  param inout name "self" explicit_type ""
	  param in name "dataset" type class_ref 448175 // PatchSet
	  param in name "idx" explicit_type "size_t"
	    defaultvalue "0"
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}self${)}:
${docstring}${body}
"
	
      end
    end

    class 447023 "Integrator"
      abstract visibility package stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl "${comment}interface ${name} {
${members}}
"
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl "${comment}${abstract}${local}interface ${name}${inherit} {
${members}};
"
      explicit_switch_type ""
      
      comment "Base class for ICC surface integrators.

* Requirement *

+ Provide piecewise ICC matrix elements for surface patches.

"
      operation 1217071 "__call__"
	public explicit_return_type "void"
	nparams 3
	  param in name "self" type class_ref 447023 // Integrator
	  param in name "patch" type class_ref 512943 // PatchReference
	  param in name "ptchset" type class_ref 448175 // PatchSet
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}raise RuntimeError(\"Iterator call method must be overridden in derived classes\")
"
	
	comment "Function that integrates 'patch' into 'ptchset'"
      end
    end
  end

  classview 327983 "Change independent"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 697519 "PatchEnvironment"
      visibility package 
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Describe the environment in which the ICC surfaces exist.

* Requirements *

+ Maintain data that is independent of a particular patch set such
as solvent permittivity.

+ Act as a factory for PatchSet objects.
"
      attribute 555695 "default_matrix_filename"
	class_attribute const_attribute private explicit_type "string"
	init_value "\"amx.%s.dat\""
	cpp_decl ""
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Python format string for generating a filename in which to save the ICC matrix"
      end

      attribute 557615 "eps_solvent"
	private explicit_type "double"
	init_value "80.0"
	cpp_decl ""
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " water relative permittivity"
      end

      attribute 557743 "eps_protein"
	private explicit_type "double"
	init_value "10.0"
	cpp_decl ""
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " protein relative permittivity
//INPUT//"
      end

      classrelation 809007 // <composition>
	relation_ref 786863 // <composition>
      end

      attribute 558127 "patch_radial_factor"
	private explicit_type "double"
	init_value "1.6"
	constraint "_channel"
	cpp_decl ""
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " patch size factor for setting tile dimensions around the axis
//INPUT////"
      end

      attribute 558255 "patch_axial_factor"
	private explicit_type "double"
	init_value "1.6"
	cpp_decl ""
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "patch size factor for setting tile dimensions along the axis
//INPUT////"
      end

      attribute 558383 "patch_subtile_factor"
	private explicit_type "int"
	init_value "10"
	cpp_decl ""
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "patch size factor for the number of subtiles per tile to use during 
the integration.
//INPUT////"
      end

      attribute 558639 "homogeneous"
	private explicit_type "bool"
	init_value "False"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Is the calculation using homogeneous permittivity? When true the ICC electrostatic
 contribution is zero. 

  \\post result = (eps_solvent == eps_protein)"
      end

      classrelation 801455 // surface (<composition>)
	relation 786223 *---
	  a role_name "surface" multiplicity "1" private
	    comment "The surfaces within the environment this object describes"
	    python "${comment}${self}${name} = ${type}(self)
"
	    classrelation_ref 801455 // surface (<composition>)
	  b role_name "environment" multiplicity "1" init_value "env" private
	    comment "The environment in which the surface elements exist"
	    python "${comment}${self}${name} = ${value}
"
	    classrelation_ref 801583 // environment (<composition>)
      end

      extra_member 280751 "new in progress"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 737711 "define_grid"
	private explicit_return_type "void"
	nparams 2
	  param in name "a_geom" type class_ref 446639 // geometry_factory
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Define the patch grid

 Use the input geometry to define the information that the
 'patch' module will use to generate a set of 'patches' that
 cover the protein surface.

 fortran equiv patch::defgrd + patch::matrix
  see ionch::iccgrid::add_XXXX for patch::goXXXX
  see ionch::XXXX_integrator types for patch::intXXXX (in iccgrid.cpp)


TODO : accesses zl1, zl2 etc that are no longer available. (present in cell_validator)"
      end

      extra_member 280879 "converted"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 740655 "write_input"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Echo the input

 Write the parameters that may be set in the input file in
 the same format as the input file.  Optional input will
 be written here as the default value."
      end

      operation 740399 "read_input"
	public explicit_return_type "void"
	nparams 3
	  param inout name "fid" explicit_type "istream"
	  param in name "sname" explicit_type "string"
	  param in name "svalue" explicit_type "string"
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Read the 'patch' parameters from the input file"
      end

      operation 740527 "interpret_input"
	public explicit_return_type "void"
	nparams 0
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Finalise reading of the input file by:

 * initialising the patch system
 * IFF not homogeneous:
 ** generate the surface grid
 **- reading the inverted ICC Matrix or,
 **- integrating the surface grid, inverting the matrix and saving it. "
      end
    end

    class 448175 "PatchSet"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "The set of ICC surface tiles/patches that will have an induced
surface charge.

* Requirements *

+ A PatchSet object maintains data that is independent of the rest
of the system (e.g.  tile to particle data, which is maintained in
a PatchEvaluator object.)

+ A PatchSet object only represents a single surface configuration.
"
      classrelation 801583 // environment (<composition>)
	relation_ref 786223 // <composition>
      end

      attribute 556207 "tile_x"
	private explicit_type "double"
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " X coordinate of a patch centre"
      end

      attribute 556335 "tile_y"
	private explicit_type "double"
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Y coordinate of a patch centre"
      end

      attribute 556463 "tile_z"
	private explicit_type "double"
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Z coordinate of a patch centre"
      end

      attribute 556591 "tile_area"
	private explicit_type "double"
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Surface area of a patch"
      end

      attribute 556719 "tile_ux"
	private explicit_type "double"
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " X dimension of normal vector to centre of patch"
      end

      attribute 556847 "tile_uy"
	private explicit_type "double"
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Y dimension of normal vector to centre of patch"
      end

      attribute 556975 "tile_uz"
	private explicit_type "double"
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Z dimension of normal vector to centre of patch"
      end

      attribute 557103 "tile_deps"
	private explicit_type "double"
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " The effective permitivity change between the inside and outside of the
surface.  This may directly or indirectly refer to the values in the 'environment'
attribute."
      end

      attribute 555951 "icc_matrix"
	private explicit_type "double, 2"
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " 'A' matrix"
      end

      attribute 557487 "icc_index"
	private explicit_type "int"
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " back substitution index vector"
      end

      attribute 558895 "is_row_major"
	private explicit_type "bool"
	init_value "False"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Is the ICC matrix in row or column major storage form?"
      end

      operation 1223983 "__init__"
	public explicit_return_type ""
	nparams 2
	  param inout name "self" explicit_type ""
	  param in name "env" type class_ref 697519 // PatchEnvironment
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}self${)}:
${docstring}${body}
"
	
      end

      operation 1224239 "__len__"
	public explicit_return_type "size_t"
	nparams 1
	  param in name "self" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 740271 "genrch"
	public explicit_return_type "void"
	nparams 2
	  param in name "aconf" explicit_type ""
	  param in name "atrial" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Generate the initial h and c vectors
"
      end

      operation 739887 "back_substitution"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "hmat" explicit_type "std::vector< double >"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Calculate the induced charge per unit area of a patch using
 the ICC protocol

 The initialisation phase of the ICC protocol generate a solution
 matrix for the set of simultaneous equations representing the
 patches.  To generate the induced charges on all the patches
 we perform a back substitution on the solution matrix using
 'hmat'.  This process is performed by an external Lapack
 routine."
      end

      extra_member 280623 "done"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 741039 "grid_write"
	public explicit_return_type "void"
	nparams 0
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Write the tile definitions to disk.

 fortran equiv patch::rfptch::A42878"
      end

      operation 1223855 "readam"
	private explicit_return_type "bool"
	nparams 1
	  param in name "self" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Read solved matrix information

 The ICC matrix file format contains a digest of the input parameters
 critical to defining the matrix.  These are the protein geometry
 parameters, the patch integration grid parameters and the permittivity
 constants.  If these parameters do not match when reading in a
 file 'imatch' is set to false and the matrix is not read in.  If
 the matrix is successfully read in then 'imatch' is set to true
 (as well as the 'irdmax' internal flag).

 \\return : False if the matrix on disk was not generated with the
     current parameters
"
      end

      operation 1223727 "writam"
	private explicit_return_type "void"
	nparams 1
	  param in name "self" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " save icc_matrix and icc_index

 This is the counterpoint method to 'readam'.  It saves a digest
 of of the input parameters critical to defining the matrix.
 These are the protein geometry parameters, the patch integration
 grid parameters and the permittivity constants. Then saves the
 'amx' matrix itself."
      end

      operation 1224111 "compute_matrix"
	public explicit_return_type ""
	nparams 2
	  param in name "self" explicit_type ""
	  param in name "matbuilder" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment "Read in or compute the ICC matrix then invert it."
      end

      extra_member 374447 "accessors"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1225391 "deps"
	const cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "self" explicit_type ""
	  param in name "idx" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}self.tile_${name} (${p1})
"
	
      end

      operation 1225263 "x"
	const cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "self" explicit_type ""
	  param in name "idx" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}self.tile_${name} (${p1})
"
	
      end

      operation 1225135 "y"
	const cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "self" explicit_type ""
	  param in name "idx" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}self.tile_${name} (${p1})
"
	
      end

      operation 1225007 "z"
	const cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "self" explicit_type ""
	  param in name "idx" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}self.tile_${name} (${p1})
"
	
      end

      operation 1224879 "ux"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}self.data_set.${name} (self.index)"
	
      end

      operation 1224751 "uy"
	const cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "self" explicit_type ""
	  param in name "idx" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}self.tile_${name} (${p1})
"
	
      end

      operation 1224623 "uz"
	const cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "self" explicit_type ""
	  param in name "idx" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}self.tile_${name} (${p1})
"
	
      end

      operation 1224495 "area"
	const cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "self" explicit_type ""
	  param in name "idx" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}self.tile_${name} (${p1})
"
	
      end
    end
  end

  classview 347951 "ICC classes"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 655791 "PatchEvaluator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "  Evaluate the ICC energy change."
      classrelation 764847 // <directional composition>
	relation 749999 *-->
	  a role_name "" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 764847 // <directional composition>
	  b parent class_ref 448175 // PatchSet
      end

      extra_member 354735 "Per step data"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      attribute 555823 "rip"
	private explicit_type "double, 2"
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Particle-patch distance matrix"
      end

      attribute 557231 "h"
	private explicit_type "double"
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " H vector"
      end

      attribute 557359 "c_"
	private explicit_type "double"
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " c vector"
      end

      attribute 572591 "h_trial"
	private explicit_type "double"
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " The current trial 'h' vector used in ICC calculation"
      end

      attribute 572719 "delta_h"
	private explicit_type "double"
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment "The change in the h matrix"
      end

      attribute 572847 "c_trial_delta"
	private explicit_type "double"
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " A delta between the main 'c' vector and the trial
 'c' vector used in ICC calculation (NOTE: The trial
 'c' vector is never actually stored directly)"
      end

      operation 749743 "__call__"
	stereotype "TODO"
	private explicit_return_type "void"
	nparams 2
	  param in name "self" type class_ref 655791 // PatchEvaluator
	  param inout name "a_set" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
      end

      operation 749871 "compute_h"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end
    end
  end

end
