class output_series
!!!2575152.cpp!!!	do_array_body(inout os : ostream) : void
UTILITY_REQUIRE( not this->empty(), "Can not write output with no fields defined." );
UTILITY_REQUIRE( this->data_.size() == 1, "Can only write array data with one data array defined." );
// series is an array
//
// standard output format is:
//
// # COUNT sample_count
// <key0> a0.mean a0.var
// <key1> a1.mean a1.var
// <key2> a1.mean a1.var
auto const& arr = this->data_.front();
os << core::strngs::comment_begin() << " SAMPLE COUNT: ";
os << arr.count();
os << core::strngs::comment_end() << "\n";
for( std::size_t idx = 0; idx != arr.size(); ++idx )
{
  for( auto const& field : *this )
  {
    field.write( os, arr, idx, 0 );
    os << " ";
  }
  os << "\n";
}
!!!2575280.cpp!!!	do_series_body(inout os : ostream) : void
UTILITY_REQUIRE( not this->empty(), "Can not write output with no fields defined." );
UTILITY_REQUIRE( not this->data_.empty(), "Can not write output with no data defined." );
// Each element in "data_" is a data set in a series.
//
// standard output
// index0 sample_count0 a0.mean a0.var a1.mean a1.var ...
// index1 sample_count1 a0.mean a0.var a1.mean a1.var ...
for( std::size_t rank = 0; rank != this->data_.size(); ++rank )
{
  auto const& arr = this->data_[ rank ];
  for( std::size_t idx{ 0 }, fld{ 0 }; idx != arr.size();  )
  {
    this->entries_[ fld ].write( os, arr, idx, rank );
    if( this->entries_[ fld ].consume_value() )
    {
      ++idx;
    }
    else
    {
      UTILITY_REQUIRE( fld != this->entries_.size(), "Last field must consume values" );
    }
    if( fld != this->entries_.size() - 1 )
    {
      ++fld;
    }
    os << " ";
  }
  os << "\n";
}
!!!470064.cpp!!!	do_header(inout os : ostream) : void
UTILITY_REQUIRE( not this->empty(), "Can not write output with no fields defined." );
if ( not this->title().empty() )
{
   os << core::strngs::comment_begin() << " TITLE: \"" << this->title() << "\" " << core::strngs::comment_end() << "\n";
}
os << core::strngs::comment_begin() << " FIELDS: ";
for ( auto const& field : *this )
{
   os << field.label() << " ";
}
os << core::strngs::comment_end() << "\n";
os << core::strngs::comment_begin() << " UNITS: ";
for ( auto const& field : *this )
{
   os << field.unit() << " ";
}
os << core::strngs::comment_end() << "\n";
!!!476848.cpp!!!	write(inout sink : base_sink) : void
UTILITY_REQUIRE( not this->empty(), "Can not write output with no fields defined." );
std::stringstream os;
sink.header( os );
this->do_header( os );
if( this->is_serial_ )
{
  // If series.size > 1, then each element is a different measure
  //
  // standard output
  // <key0> sample_count0 a0.mean a0.var a1.mean a1.var ...
  // <key1> sample_count1 a0.mean a0.var a1.mean a1.var ...
  this->do_series_body( os );
}
else
{
  // series is an array
  //
  // standard output
  // # COUNT sample_count
  // <key0> a0.mean a0.var
  // <key1> a1.mean a1.var
  // <key2> a1.mean a1.var
  this->do_array_body( os );
}
sink.write( this->label(), os.str() );
!!!2575024.cpp!!!	receive_data(in count : size_t, in arr : estimate_array) : void
UTILITY_REQUIRE( arr, "Can not receive a nul pointer." );
if( count < this->data_.size() )
{
  auto & vec = this->data_[ count ];
  if( vec.size() == 0 )
  {
    this->data_.replace( count, arr.release() );
  }
  else
  {
    UTILITY_REQUIRE( vec.size() == arr->size(), "Attempt to merge different sized vectors" );
    vec.merge( *arr );
  }
}
else if( count == this->data_.size() )
{
  this->data_.push_back( arr.release() );
}
else 
{
  // assert count = this->data_.size() ??
  this->data_.resize( count );
  this->data_.replace( count, arr.release() );
}
