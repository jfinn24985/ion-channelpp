format 75
"New ICC evaluator (incomplete)" // evaluator::New ICC evaluator (incomplete)
  revision 41
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  stereotype "module"
  cpp_h_dir "evaluator"
  cpp_src_dir "evaluator"
  cpp_namespace "evaluator"
  classview 134577 "induced charge evaluator"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    classdiagram 644783 "CC Patch overview"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 1006511 "patch"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Fortran module -> C++ static class"
      classrelation 1103023 // <dependency>
	relation 1065903 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1103023 // <dependency>
	  b parent class_ref 1006639 // trial
      end

      attribute 1290415 "fnamx_"
	class_attribute const_attribute private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " filename"
      end

      attribute 1290543 "rip_"
	class_attribute private explicit_type " double, 2 "
	stereotype "boost::multi_array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Particle-patch distance matrix"
      end

      attribute 1290671 "amx_"
	class_attribute private explicit_type " double, 2 "
	stereotype "boost::multi_array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " 'A' matrix"
      end

      attribute 1290799 "npchsz_"
	class_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " the allocated width of amx (next-higher power of 2 from npatch)"
      end

      attribute 1290927 "prx_"
	class_attribute private explicit_type " double "
	stereotype "std::valarray"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Patch x,y,z,area,ux,uy,uz,deps date [8 dbls] coords
 X coordinate of a patch"
      end

      attribute 1291055 "pry_"
	class_attribute private explicit_type " double "
	stereotype "std::valarray"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Y coordinate of a patch"
      end

      attribute 1291183 "prz_"
	class_attribute private explicit_type " double "
	stereotype "std::valarray"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Z coordinate of a patch"
      end

      attribute 1291311 "parea_"
	class_attribute private explicit_type " double "
	stereotype "std::valarray"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Surface area of a patch"
      end

      attribute 1291439 "pux_"
	class_attribute private explicit_type " double "
	stereotype "std::valarray"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " X dimension of normal vector to centre of patch"
      end

      attribute 1291567 "puy_"
	class_attribute private explicit_type " double "
	stereotype "std::valarray"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Y dimension of normal vector to centre of patch"
      end

      attribute 1291695 "puz_"
	class_attribute private explicit_type " double "
	stereotype "std::valarray"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Z dimension of normal vector to centre of patch"
      end

      attribute 1291823 "deps_"
	class_attribute private explicit_type " double "
	stereotype "std::valarray"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The effective dielectric constant on the outside of a patch"
      end

      attribute 1291951 "h_"
	class_attribute private explicit_type " double "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " H vector"
      end

      attribute 1292079 "c_"
	class_attribute private explicit_type " double "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " c vector"
      end

      attribute 1292207 "indx_"
	class_attribute private explicit_type " int "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " back substitution index vector"
      end

      attribute 1292335 "epsw_"
	class_attribute private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " water relative permittivity
//INPUT////"
      end

      attribute 1292463 "epspr_"
	class_attribute private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " protein relative permittivity
//INPUT////"
      end

      attribute 1292591 "epsch_"
	class_attribute private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " water/channel relative permittivity
//INPUT (opt)////"
      end

      attribute 1292719 "npatch_"
	class_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " number of patches"
      end

      attribute 1292847 "dxf_"
	class_attribute private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " patch size factors
//INPUT////"
      end

      attribute 1292975 "dxw_"
	class_attribute private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "//INPUT////"
      end

      attribute 1293103 "nsub0_"
	class_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " patch integration factor
//INPUT////"
      end

      attribute 1293231 "irdamx_"
	class_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Has the inverted 'A' matrix been read or created?"
      end

      attribute 1293359 "homog_"
	class_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " is the calculation using homogeneous permittivity?"
      end

      attribute 1293487 "homogeneous_solvent_"
	class_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " is the calculation using homogeneous perm. in channel and solvent"
      end

      attribute 1293615 "is_row_major_"
	class_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Is the AMX matrix in row or column major storage form?"
      end

      operation 1838383 "define_grid"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 Define the patch grid

 Use the input geometry to define the information that the
 'patch' module will use to generate a set of 'patches' that
 cover the protein surface.

 fortran equiv patch::defgrd + patch::matrix
  see ionch::iccgrid::add_XXXX for patch::goXXXX
  see ionch::XXXX_integrator types for patch::intXXXX (in iccgrid.cpp)"
      end

      operation 1838511 "prx"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    IONCH_INDEX(idx, npatch_, \"patch index out-of-range\");
    return prx_[idx];
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Access functions
 ------------------------------------------------------------------
 Inverse average permittivity constant between two particles

 (Get the inverse of solvent permittivity constant)

 NOTE: While rieps and ieps give the same result they are not
 syntatically the same.  rieps is used with two particles and
 ieps is used when considering a particle and patch.  This
 distinction may be important later if variation in the solvent
 permittivity is ever considered.
  static double rieps()
 {
    return rieps__;
  }
 ------------------------------------------------------------------
 permittivity constant at a particle

 (Get the inverse of solvent permittivity constant)

 NOTE: While rieps and ieps give the same result they are not
 syntatically the same.  rieps is used with two particles and
 ieps is used when considering a particle and patch.  This
 distinction may be important later if variation in the solvent
 permittivity is ever considered.
  static double ieps()
  {
    return rieps__;
  }
 ------------------------------------------------------------------
 X coordinate of a patch"
      end

      operation 1838639 "pry"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    IONCH_INDEX(idx, npatch_, \"patch index out-of-range\");
    return pry_[idx];
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 Y coordinate of a patch"
      end

      operation 1838767 "prz"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    IONCH_INDEX(idx, npatch_, \"patch index out-of-range\");
    return prz_[idx];
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 Z coordinate of a patch"
      end

      operation 1838895 "parea"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    IONCH_INDEX(idx, npatch_, \"patch index out-of-range\");
    return parea_[idx];
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 Surface area of a patch"
      end

      operation 1839023 "pux"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    IONCH_INDEX(idx, npatch_, \"patch index out-of-range\");
    return pux_[idx];
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 X dimension of normal vector to centre of patch "
      end

      operation 1839151 "puy"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    IONCH_INDEX(idx, npatch_, \"patch index out-of-range\");
    return puy_[idx];
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 Y dimension of normal vector to centre of patch"
      end

      operation 1839279 "puz"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    IONCH_INDEX(idx, npatch_, \"patch index out-of-range\");
    return puz_[idx];
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 Z dimension of normal vector to centre of patch"
      end

      operation 1839407 "deps"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    IONCH_INDEX(idx, npatch_, \"patch index out-of-range\");
    return deps_[idx];
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 The effective dielectric constant on the outside of a patch"
      end

      operation 1839535 "epsw"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return epsw_; };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1839663 "epspr"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return epspr_; };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1839791 "epsch"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return epsch_; };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1839919 "npatch"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return npatch_; };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1840047 "homog"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return homog_; };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1840175 "h"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return h_[idx]; };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1840303 "c"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return c_[idx]; };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1840431 "get_h"
	class_operation cpp_inline public explicit_return_type "std::vector< double >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return h_; };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Access constant version of 'h' vector."
      end

      operation 1840559 "baksub"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "hmat" explicit_type "std::vector< double >"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 Calculate the induced charge per unit area of a patch using
 the ICC protocol

 The initialisation phase of the ICC protocol generate a solution
 matrix for the set of simultaneous equations representing the
 patches.  To generate the induced charges on all the patches
 we perform a back substitution on the solution matrix using
 'hmat'.  This process is performed by an external Lapack
 routine."
      end

      operation 1840687 "caleps"
	class_operation public explicit_return_type "void"
	nparams 4
	  param in name "rzi" explicit_type "double"
	  param in name "r2i" explicit_type "double"
	  param in name "ispec" explicit_type "int"
	  param inout name "epsi" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} & ${p3}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 Calculate effective eps"
      end

      operation 1840815 "resize"
	class_operation private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Resize internal arrays to match current 'npatch'

 All existing matrix data becomes invalid."
      end

      operation 1840943 "genrch"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "------------------------------------------------------

 Generate the initial h and c vectors"
      end

      operation 1841071 "rdptch"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "fid" explicit_type "istream"
	  param in name "sname" explicit_type "string"
	  param in name "svalue" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------
 'patch' parameters from input file"
      end

      operation 1841199 "rfptch"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "----------------------------------------------------------------------
 Initialise the patch system

 Allocate storage for the patch arrays iff not homog"
      end

      operation 1841327 "ecptch"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------------------
 Echo the input

 Write the parameters that may be set in the input file in
 the same format as the input file.  Optional input will
 be written here as the default value."
      end

      operation 1841455 "readam"
	class_operation private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " -----------------------------------------------------
 Read solved matrix information (called by readin)

 The AMX file format contains a digest of the input parameters
 critical to defining the matrix. These are the protein geometry
 parameters, the patch integration grid parameters and the
 permittivity constants. If these parameters do not match when
 reading in a file 'imatch' is set to false and the matrix is
 not read in. If the matrix is successfully read in then 'imatch'
 is set to true (as well as the 'irdmax' internal flag).

 @return : set to false if the matrix on disk
     was not generated with the current parameters"
      end

      operation 1841583 "writam"
	class_operation private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "----------------------------------------------------------------------
 save amx and indx

 This is the counterpoint method to 'readam'.  It saves a digest
 of of the input parameters critical to defining the matrix.
 These are the protein geometry parameters, the patch integration
 grid parameters and the permittivity constants. Then saves the
 'amx' matrix itself."
      end

      operation 1841711 "grid_write"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write the tile definitions to disk.

 fortran equiv patch::rfptch::A42878"
      end
    end

    class 1175471 "surface"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "The set of surface elements on the dielectric boundary."
      operation 2215727 "generate"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Build the surface element set on the dielecric boundary"
      end
    end
  end

  package_ref 439983 // New Patch Builder

  package_ref 301999 // Induced Charge Computation

  package_ref 433327 // test

  classview 502191 "bodacea patch"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 999471 "patch"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "* PNP diffusion front data

 [ionch/patch]"
      extra_member 423343 "friend"
	
	cpp "
    friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      class 1002031 "patch_type"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	operation 1810991 "serialize"
	  stereotype "template"
	  preserve_cpp_body_indent public explicit_return_type "void"
	  nparams 2
	    param inout name "ar" explicit_type "Archive"
	    param in name "version" explicit_type "unsigned int"
	  cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "// end namespace

template<class Archive>
${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 1811119 "dump"
	  stereotype "template"
	  const cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "a_os" explicit_type "Ostream"
	  cpp_decl "    ${comment}template<class Ostream>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            a_os << this->px << \"\\t\";
            a_os << this->py << \"\\t\";
            a_os << this->pz << \"\\t\";
            a_os << this->pr << \"\\t\";
            a_os << this->ux << \"\\t\";
            a_os << this->uy << \"\\t\";
            a_os << this->uz << \"\\t\";
            a_os << this->area << \"\\n\";
        };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end
      end

      classrelation 1098031 // pu_xyz (<directional composition>)
	relation 1060911 *-->
	  a role_name "pu_xyz" multiplicity "[PatchSize]" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 1098031 // pu_xyz (<directional composition>)
	  b parent class_ref 1002031 // patch_type
      end

      attribute 1268527 "patch_factor"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "* Set target number of patches

     The number of patches is not directly controlled, instead we
     set a target patch area.  The patch generator then tries to
     split the surface into patches of about this size.  However,
     the generator limits the minimum number of patches that may
     occur in certain places to 16.  This has the affect that there
     will be smaller patches close to the channel and there is a
     minimum number of patches that you can not go below.

     PatchArea_target = (TotalArea / min(patch_factor,PatchSize)).

     The default value is 'PatchSize'
     "
      end

      attribute 1268655 "amx"
	private explicit_type " double "
	stereotype "std::valarray"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "* LHS of PNP matrix [ionch/patch/amx] 
 [PatchSize][PatchSize];"
      end

      attribute 1268783 "indx"
	private explicit_type "int"
	multiplicity "[PatchSize]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "* PNP LU pivot matrix (?) [ionch/patch/indx] "
      end

      attribute 1268911 "deps"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "* Dielectric factor [2 * delta{eps}/sum{eps}]  [ionch/patch/deps]"
      end

      attribute 1269039 "epsw"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Data from [ionch/geom] common block "
      end

      attribute 1269167 "epspr"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Data from [ionch/geom] common block "
      end

      attribute 1269295 "filename_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 1811247 "serialize"
	stereotype "template"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<class Archive>
${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Here we only save the data that is independent of particles."
      end

      operation 1811375 "displacement"
	class_operation cpp_inline private explicit_return_type "double"
	nparams 2
	  param in name "a" explicit_type "double"
	  param in name "b" type class_ref 1002031 // patch_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[4]${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        double const x2 (sqr(a[0] - b.px));
        double const y2 (sqr(a[1] - b.py));
        double const z2 (sqr(a[2] - b.pz));
        return std::sqrt (x2 + y2 + z2);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1811503 "area"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "a_patch" explicit_type "uint16_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        GRS400_REQUIRE (a_patch < npatch, \"Patch index out of range\");
        return pu_xyz[a_patch].area;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Get area of a patch "
      end

      operation 1811631 "count"
	const cpp_inline public explicit_return_type "uint16_type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return npatch;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* The number of patches "
      end

      operation 1811759 "do_readin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "scnr" explicit_type "reader"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1811887 "do_readin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1812015 "dump"
	stereotype "template"
	const cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "Ostream"
	cpp_decl "    ${comment}template<class Ostream>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        for (uint16_type i_; i_ < npatch; ++i_) { pu_xyz[i_].dump (a_os); }
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Writes out the current patch data"
      end

      operation 1812143 "get_patch"
	const cpp_inline public return_type class_ref 1002031 // patch_type
	nparams 1
	  param in name "pidx" explicit_type "uint16_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return pu_xyz[pidx];
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Get reference to patch"
      end

      operation 1812271 "in_use"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return (deps < 0. ? -1e-5 > deps : deps > 1e-5);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Is this object begin used

     dabs(deps).gt.1.d-5"
      end

      operation 1812399 "initialise_buffer"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "bufer_1" explicit_type "guard_letter"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// part of [ionch/lookup] 

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Compute initial profiles for c and h.

     \\pre in_use"
      end

      operation 1812527 "make_patches"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param in name "br" type class_ref 1001391 // patch_ring
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Construct the patch data set from the given polygon

     This constructs the patch set by adding patches onto the surface
     of rotation of the given polygon.  It attempts to create PatchSize
     patches of approximately equal area.  Once it has defined the
     patches it runs over the geometry again computing the a matrix
     (amx).
"
      end

      operation 1812655 "partial_h"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 3
	  param inout name "bufer_1" explicit_type "add_guard"
	  param in name "a_salt" explicit_type "uint8_type"
	  param in name "is_create" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Calculate H when adding or removing a salt

${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Calculate H when adding or removing a salt"
      end

      operation 1812783 "partial_h"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 2
	  param inout name "bufer_1" explicit_type "move_guard"
	  param in name "a_spec" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ################################################################### 
//* Calculate H when moving a particle

${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Calculate H when moving a particle"
      end

      operation 1812911 "patch"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param inout name "a_parent" explicit_type "evaluator"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}${)}
    : pu_xyz ()
    , patch_factor (PatchSize)
    , amx (0., PatchSize * PatchSize)
    , indx ()
    , deps (0)
    , npatch (0)
    , epsw (0.)
    , epspr (0.)
    , parent_ (a_parent)
    , filename_ ()
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1813039 "protein_eps"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return epspr;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Data from [ionch/geom] common block "
      end

      operation 1813167 "water_eps"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return epsw;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Data from [ionch/geom] common block "
      end
    end

    class 1001263 "ion_ring"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Geometric ring class for a particle specie

 This class represents extends the list of points that represent
 a closed polygon to also include bounding boxes for various
 regions.  The boxes and polygon are adjusted for the radius
 of the specie they represent.  This means that tests of just
 the particle center can be made against it's specie's object.

 Notes:
 - shapes (arcs and lines) can be added in any order.
 - arcs are represented internally as a series of short connected lines
 - ring can not close itself

 Geometry sets:
 - bulk      1 (global inclusion zone)
 - region    * (may be overlapping)
 - membrane  1 (exclusion box sub-zone)
 - protein   1 (exclusion shaped sub-zone) (uses bounding box)

 file format

 # [bulk|region|membrane|protein]
 #  point [0123] x y --> extension direction SEWN
 #  qarc [01] r --> extension direction 0 = longer rad, 1 = sharter rad, angle = pi/2
 #  box [01] x1 y1 x2 y2 --> extension direction 0 = outside, 1 = inside

"
      classrelation 1100079 // <generalisation>
	relation 1062959 ---|>
	  a private
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1100079 // <generalisation>
	  b parent class_ref 1002671 // basic_ring
      end

      classrelation 1100207 // bound_ (<directional composition>)
	relation 1063087 *-->
	  a role_name "bound_" private
	    comment " bounding rectangle"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 1100207 // bound_ (<directional composition>)
	  b parent class_ref 1002543 // box
      end

      classrelation 1100335 // membrane_ (<directional composition>)
	relation 1063215 *-->
	  a role_name "membrane_" private
	    comment " membrane bounding box"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 1100335 // membrane_ (<directional composition>)
	  b parent class_ref 1002543 // box
      end

      classrelation 1100463 // region_ (<directional composition>)
	relation 1063343 *-->
	  a role_name "region_" multiplicity "[RegionSize]" private
	    comment " region bounding boxes"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 1100463 // region_ (<directional composition>)
	  b parent class_ref 1002543 // box
      end

      attribute 1271727 "vin_vout_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " ratio of (approx) channel volume to bulk volume"
      end

      class 1003183 "size_type"
	visibility package stereotype "typedef" explicit_base_type "ring::size_type"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 1819695 "ion_ring"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "a_specie_fact" explicit_type "ion_specie"
	  param in name "a_spc" explicit_type "uint8_type"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw} : basic_ring ()
        , bound_ ()
        , membrane_ ()
        , region_ ()
        , specie_factory_ (a_specie_fact)
        , specie_index_ (a_spc)
        , vin_vout_ ()
    {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1819823 "set_box"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 6
	  param inout name "a_box" type class_ref 1002543 // box
	  param in name "direction" explicit_type "uint8_type"
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Adjust x1 to y2 using direction and specie radius then set a_box.

${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Set a_box using the given parameters and our specie"
      end

      operation 1819951 "~ion_ring"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1820079 "add_point"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 3
	  param in name "direction" explicit_type "uint8_type"
	  param in name "a_x" explicit_type "double"
	  param in name "a_y" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Add a point to form a line segment from last point to (a_x,a_y)
"
      end

      operation 1820207 "add_qarc"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "direction" explicit_type "uint8_type"
	  param in name "radius" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Add an arc to ring

     The centre point of the arc is on a line normal to the previous line at
     a distance \"radius\". The direction of the centre point depends on the sign of
     usign. Points are added along the circle until a semi-circle of angle
     \"arc\" is reached.

     \\pre size > 1
     \\pre usgin = 1 or -1"
      end

      operation 1820335 "begin"
	const cpp_inline public explicit_return_type "ring::const_iterator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return state_.begin ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1820463 "end"
	const cpp_inline public explicit_return_type "ring::const_iterator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return state_.end ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1820591 "close"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return basic_ring::close ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Close the ring

     - returns true if last element is fuzzy equal to first
       - in this case it will set last element to first.
       - otherwise it will append copy of first"
      end

      operation 1820719 "do_readin"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// finalise object after setting public geometries 

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "    /** Is ring closed?

     - true if the each end point of every shape is the end point of one other shape
     - and path that follows from shape to shape passes through every shape (once).
     */
    bool closed () const;
* Generate the bounding envelope and vin_vout etc.

        This should be called before first call to wall

        \\pre closed"
      end

      operation 1820847 "in_region"
	preserve_cpp_body_indent const public explicit_return_type "uint8_type"
	nparams 2
	  param in name "a_x" explicit_type "double"
	  param in name "a_y" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Get index of first region point is within 

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Get index of first region point is within

     if within no defined regions then RegionSize is returned"
      end

      operation 1820975 "in_region"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 3
	  param in name "a_reg" explicit_type "uint8_type"
	  param in name "a_x" explicit_type "double"
	  param in name "a_y" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Is point in given region 

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Is point in given region
"
      end

      operation 1821103 "membrane_left"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return membrane_.min_corner().x();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* lowest z value a particle of our specie can have in a region "
      end

      operation 1821231 "membrane_right"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return membrane_.max_corner().x();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* highest z value a particle of our specie can have in a region "
      end

      operation 1821359 "protein_left"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return bound_.min_corner().x();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* lowest z value a particle of our specie can have in a region "
      end

      operation 1821487 "protein_right"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return bound_.max_corner().x();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* highest z value a particle of our specie can have in a region "
      end

      operation 1821615 "region_left"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "a_reg" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        GRS400_REQUIRE (a_reg < RegionSize, \"ionch can only handle 6 regions.\");
        return region_[a_reg].min_corner().x();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* lowest z value a particle of our specie can have in a region "
      end

      operation 1821743 "region_right"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "a_reg" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        GRS400_REQUIRE (a_reg < RegionSize, \"ionch can only handle 6 regions.\");
        return region_[a_reg].max_corner().x();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* highest z value a particle of our specie can have in a region "
      end

      operation 1821871 "region_radial"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "a_reg" explicit_type "uint8_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        GRS400_REQUIRE (a_reg < RegionSize, \"ionch can only handle 6 regions.\");
        return region_[a_reg].max_corner().y();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* highest radial value a particle of our specie can have in a region "
      end

      operation 1821999 "serialise"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// print out geometry values

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Write debugging version of content to a stream "
      end

      operation 1822127 "set_bulk"
	cpp_inline public explicit_return_type "void"
	nparams 4
	  param in name "direction" explicit_type "uint8_type"
	  param in name "x1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        set_box (region_[BulkRegion], direction, x1, 0., x2, y2);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Set the bulk region bounding box for our specie "
      end

      operation 1822255 "set_membrane"
	cpp_inline public explicit_return_type "void"
	nparams 5
	  param in name "direction" explicit_type "uint8_type"
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        set_box (membrane_, direction, x1, y1, x2, y2);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Set the membrane region bounding box for our specie "
      end

      operation 1822383 "set_region"
	cpp_inline public explicit_return_type "void"
	nparams 5
	  param in name "direction" explicit_type "uint8_type"
	  param in name "a_reg" explicit_type "uint8_type"
	  param in name "x1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        GRS400_REQUIRE (a_reg < RegionSize, \"region index is out of range\");
        set_box (region_[a_reg], direction, x1, 0., x2, y2);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Set the a region bounding box for our specie "
      end

      operation 1822511 "size"
	const cpp_inline public return_type class_ref 1003183 // size_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return state_.size ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* How many points does the main shape have defined? "
      end

      operation 1822639 "specie_index"
	const cpp_inline public explicit_return_type "uint8_type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return specie_index_;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Get the index of the specie this object represents "
      end

      operation 1822767 "volume_ratio"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return vin_vout_;
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Ratio of the channel volume to bulk volume "
      end

      operation 1822895 "wall"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 3
	  param in name "a_x" explicit_type "double"
	  param in name "a_y" explicit_type "double"
	  param in name "ignore_chonly" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Return true if point a_x, a_y is in valid location for its specie type
//
// \\pre ring.closed

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Return true if point a_x, a_y is in an allowed part of geometry

        This assumes that the point refers to a particle of the specie
        this object is for.

        \\pre ring.closed
        \\pre previously called initialise"
      end
    end

    class 1001391 "patch_ring"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Geometric ring class for calculating patch properties.

 In order to calculate the patchs and the A matrix requires a close
 knowldege of the geometry.  In particular the calculation of the
 A matrix is very dependent on the true surface.  In the patch class
 we map the patches themselves onto the linear segments of the
 ring.  However when calculating the A matrix it is important
 to account for the arc curvature as well as the surface of rotation
 curvature.

 This class helps achieve this by saving the arc information along
 with the line segments.  This allows details of the arc to be
 regained when calculating the A matric.
"
      classrelation 1099951 // <generalisation>
	relation 1062831 ---|>
	  a private
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1099951 // <generalisation>
	  b parent class_ref 1002671 // basic_ring
      end

      attribute 1271599 "arcs_"
	private explicit_type " arc_type "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      class 1003055 "const_iterator"
	visibility package stereotype "typedef" explicit_base_type "ring::const_iterator"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 1818543 "add_point"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "a_x" explicit_type "double"
	  param in name "a_y" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        basic_ring::add_point (a_x, a_y);
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Add a point to form a line segment from last point to (a_x,a_y)
     "
      end

      operation 1818671 "add_qarc"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "direction" explicit_type "uint8_type"
	  param in name "radius" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Add an arc to ring
     
     The centre point of the arc is on a line normal to the previous
     line at a distance \"radius\".  The direction of the centre point
     depends on the sign of usign.  Points are added along the
     circle until a semi-circle of angle \"arc\" is reached.
     
     \\pre size > 1
     \\pre direction = 1 or -1"
      end

      operation 1818799 "begin"
	const cpp_inline public return_type class_ref 1003055 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return basic_ring::begin ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1818927 "end"
	const cpp_inline public return_type class_ref 1003055 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return basic_ring::end ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1819055 "arc_at"
	preserve_cpp_body_indent const public explicit_return_type "arc_type"
	nparams 2
	  param in name "piter0" type class_ref 1003055 // const_iterator
	  param in name "piter1" type class_ref 1003055 // const_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//* Find the arc for point at z,r coords.
//
// Search arcs_ for an arc that corresponds to the line segment
// between iterator i and i+1.  If there is no corresponding arc
// then nul is returned

${inline}const ${type} * ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Find the arc for point at z,r coords.
     
     Search arcs_ for an arc that corresponds to the line segment
     between iterator i and i+1.  If there is no corresponding arc
     then nul is returned     "
      end

      operation 1819183 "close"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return basic_ring::close ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Close the ring
     
     - returns true if last element is fuzzy equal to first
     - in this case it will set last element to first.
     - otherwise it will append copy of first"
      end

      operation 1819311 "closed"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Is ring closed?
     
     - true if the each end point of every shape is the end point
     of one other shape
     
     - and path that follows from shape to shape passes through
     every shape (once)."
      end

      operation 1819439 "serialise"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// print out geometry values

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1819567 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return basic_ring::size ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1002287 "point_xy"
      visibility package stereotype "typedef" explicit_base_type "boost::geometry::point_xy< double >"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1002415 "ring"
      visibility package stereotype "typedef" explicit_base_type "boost::geometry::linear_ring< boost::geometry::point_xy< double > >"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1002543 "box"
      visibility package stereotype "typedef" explicit_base_type "boost::geometry::box< boost::geometry::point_xy< double > >"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1002671 "basic_ring"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Geometric ring class

 This class represents a list of points that represent a closed polygon.

 Notes:

 - shapes (arcs and lines) must be added in order.

 - arcs are represented internally as a series of short connected
 lines

 - ring can not close itself
"
      class 1002799 "arc_type"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1271343 "radius"
	  public explicit_type "double"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Arc centre point (z,r)
 Arc radius"
	end

	attribute 1271471 "clear"
	  public explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Is this object active."
	end
      end

      class 1002927 "const_iterator"
	visibility package stereotype "typedef" explicit_base_type "ring::const_iterator"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 1099695 // state_ (<directional composition>)
	relation 1062575 *-->
	  a role_name "state_" public
	    comment " list of points"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 1099695 // state_ (<directional composition>)
	  b parent class_ref 1002415 // ring
      end

      classrelation 1099823 // last_arc_ (<directional composition>)
	relation 1062703 *-->
	  a role_name "last_arc_" public
	    comment " list of points"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 1099823 // last_arc_ (<directional composition>)
	  b parent class_ref 1002799 // arc_type
      end

      operation 1817647 "add_point"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "a_x" explicit_type "double"
	  param in name "a_y" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Add a point to form a line segment from last point to (a_x,a_y)
"
      end

      operation 1817775 "add_qarc"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "direction" explicit_type "uint8_type"
	  param in name "radius" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Add an arc to ring
//
//Arc is approximated by a series of points
//
//The centre point of the arc is on a line normal to the previous line at
//a distance \"radius\". The direction of the centre point depends on the sign of
//the \"radius\". Points are added along the circle until a semi-circle of angle
//\"arc\" is reached. Direction of arc depends on direction, 0 = ccw, 1 = cw
//
//Want points on circle to be >~ 0.5 in same units as radius

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Add an arc to ring

     The centre point of the arc is on a line normal to the previous
     line at a distance \"radius\".  The direction of the centre point
     depends on the sign of usign.  Points are added along the
     circle until a semi-circle of angle \"arc\" is reached.

     \\pre size > 1
     \\pre usgin = 1 or -1"
      end

      operation 1817903 "begin"
	const cpp_inline public return_type class_ref 1002927 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return state_.begin ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1818031 "end"
	const cpp_inline public return_type class_ref 1002927 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return state_.end ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1818159 "close"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//  Close the ring
//
//- returns true if last element is fuzzy equal to first
//- in this case it will set last element to first.
//- otherwise it will append copy of first   

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Close the ring

     - returns true if last element is fuzzy equal to first
     - in this case it will set last element to first.
     - otherwise it will append copy of first"
      end

      operation 1818287 "closed"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//* Is ring closed?
//
//- true if the each end point of every shape is the end point of one other shape
//- and path that follows from shape to shape passes through every shape (once).

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "* Is ring closed?

     - true if the each end point of every shape is the end point
     of one other shape

     - and path that follows from shape to shape passes through
     every shape (once)."
      end

      operation 1818415 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return state_.size ();
    };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end
  end

  classview 420783 "C++/Python helpers"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 792239 "vector_ref"
      visibility package 
      nformals 1
      formal name "Type" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Provide a simplified, typesafe interface to use and create 1D numpy arrays"
      attribute 968495 "_data"
	private explicit_type "Type"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The data pointer"
      end

      attribute 968623 "_size"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The number of a array points"
      end

      attribute 968751 "_arr"
	private type class_ref 772399 // array
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The array we reference"
      end

      operation 1369775 "begin"
	public explicit_return_type "Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}* ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return _data;
}
"
	
	
	
	
      end

      operation 1369903 "begin"
	stereotype "const"
	const public explicit_return_type "Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} const* ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return _data;
}
"
	
	
	
	
      end

      operation 1370031 "end"
	public explicit_return_type "Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}* ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return _data + _size;
}
"
	
	
	
	
      end

      operation 1370159 "end"
	stereotype "const"
	const public explicit_return_type "Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}* ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return _data + _size;
}
"
	
	
	
	
      end

      operation 1370287 "empty"
	stereotype "const"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return 0 == _size;
}
"
	
	
	
	
      end

      operation 1370415 "size"
	stereotype "const"
	const public explicit_return_type "Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}* ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return _size;
}
"
	
	
	
	
      end

      operation 1370543 "operator[]"
	stereotype "const"
	const public explicit_return_type "Type"
	nparams 1
	  param in name "i" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  return *(_data + i);
}
"
	
	
	
	
      end

      operation 1370671 "operator[]"
	public explicit_return_type "Type"
	nparams 1
	  param in name "i" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  return *(_data + i);
}
"
	
	
	
	
      end

      operation 1377199 "to_python"
	public return_type class_ref 772399 // array
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return _arr;
}
"
	
	
	
	
	comment "Get a reference to the Numpy array"
      end

      operation 1377327 "operator boost::python::numeric::array"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return _arr;
}
"
	
	
	
	
	comment "Get a reference to the python array"
      end

      operation 1377455 "_build_arr"
	class_operation private return_type class_ref 772399 // array
	nparams 1
	  param in name "n" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
    npy_intp dims[] = { n };
    return boost::python::numeric::array (boost::python::handle<>(PyArray_SimpleNew(1, &dims[0], numpy_type_traits< Type >::TYPEID)));
}
"
	
	
	
	
	comment "Static member to generate a Numpy array of the given size"
      end

      operation 1377583 "vector_ref"
	public explicit_return_type ""
	nparams 1
	  param in name "n" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}
: _data()
, _size(n)
, _arr (_build_arr(n))
{
  _data = static_cast< Type* >(PyArray_DATA(_arr.ptr()));
}
"
	
	
	
	
      end

      operation 1377711 "vector_ref"
	public explicit_return_type ""
	nparams 2
	  param in name "n" explicit_type "size_t"
	  param in name "data" explicit_type "Type"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${)}${volatile}${throw}
: _data()
, _size(n)
, _arr (_build_arr(n))
{
  _data = static_cast< Type* >(PyArray_DATA(_arr.ptr()));
  std::copy(data, data + n, _data);
}
"
	
	
	
	
      end

      operation 1377839 "vector_ref"
	public explicit_return_type ""
	nparams 2
	  param in name "begin" explicit_type "FwdIter"
	  param in name "end" explicit_type "FwdIter"
	cpp_decl "    ${comment}template< class ${t0} > ${inline}${name}${(}${t0} ${p0}${v0}, ${t0} ${p1}${)}${volatile}${throw}
: _data()
, _size(std::distance(begin, end))
, _arr (_build_arr(_size))
{
  _data = static_cast< Type* >(PyArray_DATA(_arr.ptr()));
  std::copy(begin, end, _data);
}
"
	
	
	
	
      end

      operation 1377967 "vector_ref"
	public explicit_return_type ""
	nparams 1
	  param in name "arr" type class_ref 772271 // object
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}
: _data()
, _size()
, _arr (arr)
{
  if (!arr.ptr())
  {
    throw std::runtime_error(\"Array is a nul object.\");
  }
  PyObject *_dataobj = PyArray_FROM_OTF(arr.ptr(), numpy_type_traits< Type >::TYPEID,  NPY_IN_ARRAY);
  if (!_dataobj)
  {
    throw std::runtime_error(\"Array is not of the correct type.\");
  }
  // check that m is a vector
  const int k = PyArray_NDIM(_dataobj);
  if (k != 1)
  {
    throw std::runtime_error(\"Array is not of the correct shape.\");
  }
  _size = PyArray_SIZE(_dataobj); // number of elements in array
  _data = static_cast< Type* >(PyArray_DATA(_dataobj));
}
"
	
	
	
	
      end
    end

    class 798767 "matrix_ref"
      visibility package 
      nformals 2
      formal name "Type" type "class" explicit_default_value ""
        explicit_extends ""
      formal name "N" type "std::size_t" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Provide a simplified, typesafe interface to use and create 2D numpy arrays. "
      class 798895 "TypeN"
	visibility package stereotype "typedef" explicit_base_type "Type"
	cpp_decl "${comment}typedef ${type} ${name}[N];
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      attribute 975279 "_data"
	private type class_ref 798895 // TypeN
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The data pointer"
      end

      attribute 975407 "_size"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The number of a array points"
      end

      attribute 975535 "_arr"
	private type class_ref 772399 // array
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The array we reference"
      end

      operation 1384495 "begin"
	public explicit_return_type "Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}* ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return _data;
}
"
	
	
	
	
      end

      operation 1384623 "begin"
	stereotype "const"
	const public explicit_return_type "Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} const* ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return _data;
}
"
	
	
	
	
      end

      operation 1384751 "end"
	public explicit_return_type "Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}* ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return _data + _size * N;
}
"
	
	
	
	
      end

      operation 1384879 "end"
	stereotype "const"
	const public explicit_return_type "Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}* ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return _data + _size * N;
}
"
	
	
	
	
      end

      operation 1385007 "empty"
	stereotype "const"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return 0 == _size;
}
"
	
	
	
	
      end

      operation 1385135 "size"
	stereotype "const"
	const public explicit_return_type "Type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}* ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return _size;
}
"
	
	
	
	
      end

      operation 1385263 "operator()"
	stereotype "const"
	const public explicit_return_type "Type"
	nparams 2
	  param in name "i" explicit_type "size_t"
	  param in name "j" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract}
{
  return _data[i][j];
}
"
	
	
	
	
      end

      operation 1385391 "operator()"
	public explicit_return_type "Type"
	nparams 2
	  param in name "i" explicit_type "size_t"
	  param in name "j" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract}
{
  return _data[i][j];
}
"
	
	
	
	
      end

      operation 1385519 "to_python"
	public return_type class_ref 772399 // array
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return _arr;
}
"
	
	
	
	
	comment "Get a reference to the Numpy array"
      end

      operation 1385647 "operator boost::python::numeric::array"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return _arr;
}
"
	
	
	
	
	comment "Get a reference to the python array"
      end

      operation 1385775 "_build_arr"
	class_operation private return_type class_ref 772399 // array
	nparams 1
	  param in name "n" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
    npy_intp dims[] = { n, N };
    return boost::python::numeric::array (boost::python::handle<>(PyArray_SimpleNew(2, &dims[0], numpy_type_traits< Type >::TYPEID)));
}
"
	
	
	
	
	comment "Static member to generate a Numpy array of the given size"
      end

      operation 1385903 "matrix_ref"
	public explicit_return_type ""
	nparams 1
	  param in name "n" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}
: _data()
, _size(n)
, _arr (_build_arr(n))
{
  _data = static_cast< TypeN* >(PyArray_DATA(_arr.ptr()));
}
"
	
	
	
	
      end

      operation 1386031 "matrix_ref"
	public explicit_return_type ""
	nparams 2
	  param in name "n" explicit_type "size_t"
	  param in name "data" explicit_type "Type"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${)}${volatile}${throw}
: _data()
, _size(n)
, _arr (_build_arr(n))
{
  _data = static_cast< TypeN* >(PyArray_DATA(_arr.ptr()));
  std::copy(data, data + n*N, _data);
}
"
	
	
	
	
      end

      operation 1386159 "matrix_ref"
	public explicit_return_type ""
	nparams 2
	  param in name "begin" explicit_type "FwdIter"
	  param in name "end" explicit_type "FwdIter"
	cpp_decl "    ${comment}template< class ${t0} > ${inline}${name}${(}${t0} ${p0}${v0}, ${t0} ${p1}${)}${volatile}${throw}
: _data()
, _size(std::distance(begin, end)/N)
, _arr (_build_arr(_size))
{
  _data = static_cast< TypeN* >(PyArray_DATA(_arr.ptr()));
  std::copy(begin, end, _data);
}
"
	
	
	
	
      end

      operation 1386287 "matrix_ref"
	public explicit_return_type ""
	nparams 1
	  param in name "arr" type class_ref 772271 // object
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}
: _data()
, _size()
, _arr (arr)
{
  if (!arr.ptr())
  {
    throw std::runtime_error(\"Array is a nul object.\");
  }
  PyObject *_dataobj = PyArray_FROM_OTF(arr.ptr(), numpy_type_traits< Type >::TYPEID,  NPY_IN_ARRAY);
  if (!_dataobj)
  {
    throw std::runtime_error(\"Array is not of the correct type.\");
  }
  // check that m is a vector
  const int k = PyArray_NDIM(_dataobj);
  if (k != 2)
  {
    throw std::runtime_error(\"Array is not of the correct shape.\");
  }
  const int n = PyArray_DIMS(_dataobj)[1];
  if (n != N)
  {
    throw std::runtime_error(\"Array is not of the correct shape.\");
  }
  _size = PyArray_SIZE(_dataobj); // number of elements in array
  _data = static_cast< TypeN* >(PyArray_DATA(_dataobj));
}
"
	
	
	
	
      end
    end
  end
end
