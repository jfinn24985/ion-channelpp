class displace_particle
!!!1859759.cpp!!!	do_generate(in fm : formation, inout result : trial_move, inout rgen : mersenne_twister_19937) : void
  if (not result.is_fail())
  {
    const size_t ni (fm.conformation().size(this->specie_index()));
    if (ni == 0)
    {
      result.set_fail ();
    }
    else
    {
      const size_t lidx (rgen(ni));
      trial_step t;
      t.specie_id = this->specie_index();
      // get global index from specie index
      t.particle_id = fm.conformation().index_from_specie(t.specie_id, lidx);
      t.z = fm.conformation().rz(t.particle_id);
      t.r = fm.conformation().r2(t.particle_id);
      const double rad (fm.specie_set().get_specie(this->specie_index()).radius());
      // Discover region
      t.region_id = 0;
      for (size_t ireg = fm.number_of_regions(); ireg != 0; ++ireg)
      {
        if (not fm.get_region(ireg - 1).in_region(t.z, t.r, rad))
        {
          t.region_id = ireg; // set to previous region
          break; // exit on first failure
        }
      }
      IONCH_CHECK(t.region_id < fm.number_of_regions(), "Particle is in no region");
      // Displace by small amount
      const double disp_max (fm.get_region(t.region_id).displacement_maximum());
      t.x += (2 * rgen() - 1) * disp_max;
      t.y += (2 * rgen() - 1) * disp_max;
      t.z += (2 * rgen() - 1) * disp_max;
      t.r = std::sqrt(t.x*t.x + t.y*t.y);

      if (not fm.valid_position(t.particle_id, t.specie_id, t.x, t.y, t.z, t.r))
      {
        result.set_fail ();
      }
      result.add_step (t, 0, trial_move::SPHERICAL_MOVE);
      // No change to chemical potential or probability factor
    }
  }
