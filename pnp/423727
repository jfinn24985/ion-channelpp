format 75
"parallel formation" // particle::parallel formation
  revision 8
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  stereotype "EXAMPLE"
  cpp_h_dir "p_formation/"
  cpp_src_dir "../src/p_formation/"
  cpp_namespace "ionch"
  classview 502575 "formation"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 1004207 "formation"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      attribute 1303599 "byiter_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Set to true to append iteration number to end of
 filename in writcf.  This will make each save
 unique. (Currently this is compile only option)"
      end

      attribute 1303727 "use_grid_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Optionally use a grid builder to generate initial
 configuration."
      end

      classrelation 1107375 // regions_ (<directional composition>)
	relation 1070255 *-->
	  stereotype "vector"
	  a role_name "regions_" multiplicity "*" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1107375 // regions_ (<directional composition>)
	  b parent class_ref 1012399 // region
      end

      classrelation 1107631 // spec_ (<directional composition>)
	relation 1070511 *-->
	  stereotype "shared_ptr"
	  a role_name "spec_" multiplicity "0..1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1107631 // spec_ (<directional composition>)
	  b parent class_ref 1012527 // spec
      end

      classrelation 1107759 // geom_ (<directional composition>)
	relation 1070639 *-->
	  stereotype "shared_ptr"
	  a role_name "geom_" multiplicity "0..1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1107759 // geom_ (<directional composition>)
	  b parent class_ref 1007023 // cell_geom
      end

      attribute 1303855 "nreg_"
	private explicit_type "size_t"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Total number of particles in a particular region"
      end

      attribute 1303983 "nin_"
	private explicit_type "size_t, 2"
	multiplicity "*"
	stereotype "multi_array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " number of particles of a given specie in a particular region"
      end

      attribute 1304111 "indreg_"
	private explicit_type "std::vector< size_t >"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Map of particle indices to regions (used by indreg function)"
      end

      attribute 1304239 "target_particle_number_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " target number of particles for given ionstr and volume

 When set in the input file this number is combined with the
 target ionic strength to define the final cell volume.
 Conversely, when not set this number is determined from the
 specified volume and ionic strength.
 fortran equiv geom::ntrg"
      end

      attribute 1304367 "region_desc_"
	private explicit_type "string"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Textual representation of the regions."
      end

      attribute 1304495 "beta_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " 1 / kT for temperature of 300K (access using 'beta()')
 2.41440919407021130D20 (/J)"
      end

      attribute 1304623 "qstar_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Charge factor (access using 'qstar()')"
      end

      attribute 1304751 "temperature_kelvin_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Temperature in Kelvin (no external access) ~300.0D0 (260,380)"
      end

      attribute 1303215 "ni_"
	private explicit_type "size_t"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " ni -> number of particles in a specie"
      end

      operation 1872815 "formation"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}
    : byiter_ (false)
    , use_grid_(false)
    , regions_ ()
    , conf_ (std::unique_ptr< conf >(new conf))
    , spec_ (std::unique_ptr< spec >(new spec))
    , geom_ (std::unique_ptr< cell_geom >(new cell_geom))
    , nreg_ ()
    , nin_ ()
    , indreg_ ()
    , target_particle_number_()
    , region_desc_()
    , beta_()
    , qstar_()
    , temperature_kelvin_()
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1872943 "specie_set"
	const cpp_inline public return_type class_ref 1012527 // spec
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return *spec_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 448943 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 2035631 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & byiter_;
    ar & use_grid_;
    ar & regions_;
    ar & conf_;
    ar & spec_;
    ar & geom_;
    ar & nreg_;
    ar & nin_;
    ar & indreg_;
    ar & target_particle_number_;
    ar & region_desc_;
    ar & beta_;
    ar & qstar_;
    ar & temperature_kelvin_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1873071 "geometry"
	const cpp_inline public return_type class_ref 1007023 // cell_geom
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return *geom_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1873199 "conformation"
	const cpp_inline public explicit_return_type "conf"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return *conf_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1873327 "help_information"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "exemplar" type class_ref 1004335 // input_help
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// expose formation::input_help as a plain method

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Add short description of options in the formation input
 file section to the global help message."
      end

      operation 1873455 "is_bulk"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return false;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " TODO Simulation is currently of bulk or cell?"
      end

      operation 1873583 "read_input"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "parser" explicit_type "input_reader"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------
 Read the 'formation' section of input file

 The formation section of the input file is something like:

 NOTE: The first region defined is used to restrict the
 movement of channel_only and mobile particles.

 <pre>
 formation
 region (name) (number|zl1|zl5) (number|rl1|rl4|rl5)
 region ...
 usegrid (true|false)
 ntarg (number)
 end
 </pre>"
      end

      operation 1873711 "echo_input"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "logger" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------
 Write 'formation' section of input file"
      end

      operation 1873839 "read_finalise"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "logger" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// --------------------------
// Finalise the read process for formation module and its subobjects.
// ------------------------------------------------------------------
// FINALISE INITIALISATION
//
// This method is called to finalise the process of initialising
// the formation module when an input file is being read.  This method
// is one of the input finalisation method that is called in a
// particular order in 'channel%readin' method.  To ensure correct
// initialisation the order these methods are called is critical.
//
// No consideration is given to the possibility this method is
// called more than once in a program run.
//
// The key activities are:
//   - copy particle position information present in input file from
//        the 'spec' module.

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------
 Finalise reading for subobjects and self"
      end

      operation 1873967 "target_particle_number"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return target_particle_number_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
/ Target number of particles"
      end

      operation 1874095 "number_of_regions"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return regions_.size();
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
/ Number of regions"
      end

      operation 1874223 "get_region"
	const cpp_inline public return_type class_ref 1012399 // region
	nparams 1
	  param in name "ireg" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    IONCH_INDEX(ireg, regions_.size(), \"Region index out of range\");
    return regions_[ireg];
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
/ Get a particular region"
      end

      operation 1874351 "region_count"
	const cpp_inline public explicit_return_type "size_t"
	nparams 1
	  param in name "ireg" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    IONCH_INDEX(ireg, regions_.size(), \"Region index out of range\");
    return nreg_[ireg];
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
/ Total number of particles in a particular region"
      end

      operation 1874479 "region_count"
	const cpp_inline public explicit_return_type "size_t"
	nparams 2
	  param in name "ispec" explicit_type "size_t"
	  param in name "ireg" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    IONCH_INDEX(ispec, spec_->size (), \"Specie index out of range\");
    IONCH_INDEX(ireg, regions_.size(), \"Region index out of range\");
    return nin_[ispec][ireg];
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
/ Total number of a specie in a particular region"
      end

      operation 1874607 "register_input_readers"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "meta" type class_ref 1012655 // input_delegater
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
/ Register the input reader functions for all the objects this
/ object manages."
      end

      operation 1874735 "valid_position"
	const cpp_inline public explicit_return_type "bool"
	nparams 6
	  param in name "ii" explicit_type "size_t"
	  param in name "ispec" explicit_type "size_t"
	  param in name "xnew" explicit_type "double"
	  param in name "ynew" explicit_type "double"
	  param in name "znew" explicit_type "double"
	  param in name "rnew" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
    specie const& sp (spec_->get_specie(ispec));
    if (not geom_->in_geometry(sp.radius(), znew, rnew))
    {
      return false;
    }
    if (ii != ~0ul) // Not a new particle.
    {
      if (sp.is_channel_only() or sp.is_mobile())
      {
        if (not regions_[0].in_region(znew, rnew, sp.radius()))
        {
          return false;
        }
      }
      if (sp.is_flexible() or sp.is_mobile())
      {
        return mobchk (ii, xnew, ynew, znew);
      }
    }
    return true;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
/ Test if a particle position is valid
/
/ The test is for validity of the position in terms of the
/ initial geometry constraints in the absence of any other
/ particles.  It checks that the particles are with the
/ cell boundaries and do not overlap the membrane or channel.
/ For structural ions it checks if they are within their
/ allowed regions and localisation constraints."
      end

      operation 1874863 "on_commit"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "trial" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " -------------------------------------------------------------
 Commit changes after a MCGC move has been accepted

 This method updates the trial move by setting the
 indices for added particles.

 @param trial : details of the move"
      end

      operation 1874991 "mobchk"
	const cpp_inline private explicit_return_type "bool"
	nparams 4
	  param in name "ii" explicit_type "size_t"
	  param in name "xnew" explicit_type "double"
	  param in name "ynew" explicit_type "double"
	  param in name "znew" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
    IONCH_CHECK (ii < conf_->active_size(), \"Error: particle index out of range\");
    IONCH_CHECK (spec_->get_specie(conf_->specie_index(ii)).is_mobile (), \"particle is not a mobile ion\");
    return ((utility::sqr(xnew - conf_->rsx(ii))
             + utility::sqr(ynew - conf_->rsy(ii))
             + utility::sqr(znew - conf_->rsz(ii))) <= 4 * conf_->rsr(ii));
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------
 Check if mobile particle is within particle specific constraint"
      end

      operation 1875119 "addreg_private"
	preserve_cpp_body_indent cpp_inline private explicit_return_type "void"
	nparams 3
	  param in name "ireg" explicit_type "size_t"
	  param in name "ispec" explicit_type "size_t"
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ------------------------------------------------------------------
// Private subroutine to actually add elements to a region

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 Private subroutine to actually add elements to a region

 @param ireg : region
 @param ispec : specie
 @param ii : global index"
      end

      operation 1875247 "delreg_private"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 3
	  param in name "ireg" explicit_type "size_t"
	  param in name "ispec" explicit_type "size_t"
	  param in name "ii" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 Private subroutine to actually delete elements from a region

 @param ireg : region
 @param ispec : specie
 @param ii : global index"
      end

      operation 1875375 "index_in_region"
	preserve_cpp_body_indent const public explicit_return_type "size_t"
	nparams 3
	  param in name "ispec" explicit_type "size_t"
	  param in name "ireg" explicit_type "size_t"
	  param in name "lindx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 Get the global index of a particle given a per-specie index,
 region and specie

 This module uses array 'indreg_' to map particles of any specie
 into a region.  Thus to find the nth particle of a specie in
 a region it looks for the nth entry in 'indreg_' with the desired
 specie type in 'ispcbk'. DO NOT USE THIS METHOD TO LOOP THROUGH
 ALL PARTICLES OF A SPECIE IN A REGION, if that is required use
 something like:

 do ii=1,nactv
   if (ispcbk(ii).eq.ispec) then
     if (rz(ii).gt...) then
       ...

 NOTE: in earlier code scanning through per specie and region
 was generally only done when gathering data for all species.
 Obviously, such code can be transformed into a single loop
 over particles with collecting data for all species and region.

 DEPRECATED as method to gather per specie data (see above)"
      end

      operation 1875503 "beta"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    IONCH_CHECK(not utility::feq(beta_, 0.0), \"Called beta before it was initialised\");
    return beta_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ----------------------------------
 PHYSICAL CONSTANTS
 ----------------------------------
 Get the current beta (1/kT) (units 1/J)"
      end

      operation 1875631 "temperature"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    IONCH_CHECK(not utility::feq(temperature_kelvin_, 0.0), \"Called temperature before it was initialised\");
    return temperature_kelvin_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "  beta
 ----------------------------------
 Simulation run temperature"
      end

      operation 1875759 "qstar"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    IONCH_CHECK(not utility::feq(qstar_, 0.0), \"Called qstar before it was initialised\");
    return qstar_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "  tmptur
 ----------------------------------
 Factor to convert specie valency to q"
      end

      operation 1872047 "rieps"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    IONCH_INDEX(idx, nactv_, \"Particle index out of range\");
    return rieps_[idx];
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 The inverse permittivity at particle ix"
      end
    end

    class 1012271 "base_permittivity_map"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      extra_member 425775 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1875887 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1876015 "~base_permittivity_map"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1876143 "eps_at"
	abstract const cpp_virtual public explicit_return_type "double"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "z" explicit_type "double"
	  param in name "r" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1012399 "region"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      attribute 1305007 "code_name_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Region name"
      end

      attribute 1305135 "zlimit_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Unadjusted pore axis limit"
      end

      attribute 1305263 "rlimit_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Unadjusted radial limit"
      end

      attribute 1305391 "disp_max_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Displacement step size"
      end

      extra_member 426031 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1876911 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & code_name_;
    ar & zlimit_;
    ar & rlimit_;
    ar & disp_max_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1877039 "region"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "name" explicit_type "string"
	  param in name "z" explicit_type "double"
	  param in name "r" explicit_type "double"
	  param in name "dis" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw} : code_name_ (name)
      , zlimit_ (z)
      , rlimit_ (r)
      , disp_max_(dis)
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " LIFETIME METHODS
 Main constructor"
      end

      operation 1877167 "region"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "name" explicit_type "string"
	  param in name "z" explicit_type "double"
	  param in name "r" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw} : code_name_ (name)
      , zlimit_ (z)
      , rlimit_ (r)
      , disp_max_()
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1877295 "region"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : code_name_ ()
      , zlimit_ ()
      , rlimit_ ()
      , disp_max_ ()
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1877423 "region"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 1012399 // region
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : code_name_ (other.code_name_)
      , zlimit_ (other.zlimit_)
      , rlimit_ (other.rlimit_)
      , disp_max_(other.disp_max_)
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Copy constructor"
      end

      operation 1877551 "operator ="
	cpp_inline public return_type class_ref 1012399 // region
	nparams 1
	  param in name "other" type class_ref 1012399 // region
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    this->swap (other);
    return *this;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Assignment operator"
      end

      operation 1877679 "swap"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 1012399 // region
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    std::swap(code_name_,other.code_name_);
    std::swap(zlimit_, other.zlimit_);
    std::swap(rlimit_, other.rlimit_);
    std::swap(disp_max_, other.disp_max_);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Internal swap method"
      end

      operation 1877807 "~region"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Destructor"
      end

      operation 1877935 "code_name"
	const cpp_inline public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return code_name_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ACCESSORS
 Region label"
      end

      operation 1878063 "zlimit"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return zlimit_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1878191 "rlimit"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return rlimit_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1878319 "in_region"
	const cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "z" explicit_type "double"
	  param in name "r" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    return (std::abs(z)  <= zlimit_ or utility::feq(std::abs(z), zlimit_))
           and (r <= rlimit_ or  utility::feq(r, rlimit_));
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Check if the centre point of a particle at the given position is within the
/ region"
      end

      operation 1878447 "in_region"
	const cpp_inline public explicit_return_type "bool"
	nparams 3
	  param in name "z" explicit_type "double"
	  param in name "r" explicit_type "double"
	  param in name "ri" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
    return (std::abs(z) + ri <= zlimit_ or utility::feq(std::abs(z) + ri, zlimit_))
           and (r + ri <= rlimit_ or  utility::feq(r + ri, rlimit_));
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Check if the entire particle at the given position is within the
/ region"
      end

      operation 1878575 "generate_in_region"
	const cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "z" explicit_type "double"
	  param inout name "r" explicit_type "double"
	  param in name "radius" explicit_type "double"
	  param in name "rnd1" explicit_type "double"
	  param in name "rnd2" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
    IONCH_REQUIRE(radius < rlimit_ and radius < zlimit_, \"Radius is too large to  fit in region\");
    IONCH_REQUIRE(0.0 <= rnd1 and rnd1 <= 1.0, \"Random number is outside expected range\");
    IONCH_REQUIRE(0.0 <= rnd2 and rnd2 <= 1.0, \"Random number is outside expected range\");
    z = (zlimit_ - radius) * (2 * rnd1 - 1);
    r = (rlimit_ - radius) * std::sqrt(rnd2);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Generate a position in the region
/
/ This method uses two random numbers in the range (0,1)
/ to generate a valid position in region.
/
/ @pre radius < rlimit and radius < zlimit"
      end

      operation 1878703 "displacement_maximum"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return disp_max_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Generate a position in the region
/
/ This method uses two random numbers in the range (0,1)
/ to generate a valid position in region.
/
/ @pre radius < rlimit and radius < zlimit"
      end

      operation 1878831 "volume"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return 2 * zlimit_ * constants::pi() * rlimit_ * rlimit_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1878959 "volume"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "radius" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    IONCH_REQUIRE(radius < rlimit_ and radius < zlimit_, \"Radius is too large to  fit in region\");
    return 2 * (zlimit_ - radius) * constants::pi() * utility::sqr(rlimit_ - radius);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1012783 "permittivity_map"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1107887 // <generalisation>
	relation 1070767 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1107887 // <generalisation>
	  b parent class_ref 1012271 // base_permittivity_map
      end

      attribute 1304879 "global_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The default permittivity."
      end

      extra_member 425903 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1876271 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & boost::serialization::base_object< base_permittivity_map >(*this);
    ar & global_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1876399 "permittivity_map"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : global_() {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " For serialization"
      end

      operation 1876527 "permittivity_map"
	public explicit_return_type ""
	nparams 1
	  param in name "def" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1876655 "~permittivity_map"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1876783 "eps_at"
	const cpp_inline public explicit_return_type "double"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "z" explicit_type "double"
	  param in name "r" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
    return global_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Get the permittivity of the solvent media at the given location."
      end
    end

    class 1012911 "split_region"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " A two-part cylindrical subspace of a cell"
      attribute 1305519 "zlimit_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Unadjusted pore axis limit"
      end

      attribute 1305647 "rlimit_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Unadjusted radial limit"
      end

      attribute 1305775 "zinner_limit_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Unadjusted pore axis inner limit"
      end

      extra_member 426159 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1879087 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & zlimit_;
    ar & rlimit_;
    ar & zinner_limit_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1879215 "split_region"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "zinner" explicit_type "double"
	  param in name "zouter" explicit_type "double"
	  param in name "r" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw} : zlimit_ (std::max(zinner,zouter))
      , rlimit_ (r)
      , zinner_limit_ (std::min(zinner,zouter))
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1879343 "~split_region"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1879471 "split_region"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : zlimit_ ()
      , rlimit_ ()
      , zinner_limit_ ()
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1879599 "split_region"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 1012911 // split_region
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : zlimit_ (other.zlimit_)
      , rlimit_ (other.rlimit_)
      , zinner_limit_ (other.zinner_limit_)
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1879727 "operator ="
	cpp_inline public return_type class_ref 1012911 // split_region
	nparams 1
	  param in name "other" type class_ref 1012911 // split_region
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    this->swap (other);
    return *this;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Assignment operator"
      end

      operation 1879855 "swap"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 1012911 // split_region
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    std::swap(zlimit_, other.zlimit_);
    std::swap(rlimit_, other.rlimit_);
    std::swap(zinner_limit_,other.zinner_limit_);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Internal swap method"
      end

      operation 1879983 "zlimit"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return zlimit_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1880111 "rlimit"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return rlimit_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1880239 "inner_limit"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return zinner_limit_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1880367 "half_length"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return zlimit() - zinner_limit_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Length of one of the two cylinders"
      end

      operation 1880495 "in_region"
	const cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "z" explicit_type "double"
	  param in name "r" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    return (std::abs(z)  <= zlimit_ or utility::feq(std::abs(z), zlimit_))
           and (r <= rlimit_ or  utility::feq(r, rlimit_))
           and (std::abs(z) >= zinner_limit_ or utility::feq(std::abs(z), zinner_limit_));
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Check if the centre point of a particle at the given position is within the
/ region"
      end

      operation 1880623 "in_region"
	const cpp_inline public explicit_return_type "bool"
	nparams 3
	  param in name "z" explicit_type "double"
	  param in name "r" explicit_type "double"
	  param in name "ri" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
    return (std::abs(z) + ri <= zlimit_ or utility::feq(std::abs(z) + ri, zlimit_))
           and (r + ri <= rlimit_ or  utility::feq(r + ri, rlimit_))
           and (std::abs(z) - ri >= zinner_limit_ or utility::feq(std::abs(z) - ri, zinner_limit_));
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Check if the entire particle at the given position is within the
/ region"
      end

      operation 1880751 "generate_in_region"
	const cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "z" explicit_type "double"
	  param inout name "r" explicit_type "double"
	  param in name "radius" explicit_type "double"
	  param in name "rnd1" explicit_type "double"
	  param in name "rnd2" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
    IONCH_REQUIRE(radius < rlimit() and radius < half_length()/2, \"Radius is too large to  fit in region\");
    IONCH_REQUIRE(0.0 <= rnd1 and rnd1 <= 1.0, \"Random number is outside expected range\");
    IONCH_REQUIRE(0.0 <= rnd2 and rnd2 <= 1.0, \"Random number is outside expected range\");
    z = (half_length() - 2  * radius) * (2 * rnd1 - 1);
    z = (z < 0.0 ? z - (zinner_limit_ + radius): z + zinner_limit_ + radius);
    r = (rlimit() - radius) * std::sqrt(rnd2);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Generate a position in the region
/
/ This method uses two random numbers in the range (0,1)
/ to generate a valid position in region.
/
/ @pre radius < rlimit and radius < half_length/2"
      end
    end

    class 1013039 "salt"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      attribute 1305903 "chemical_potential_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " salt chem. pot. (in internal units of kT)"
      end

      attribute 1306031 "chemical_excess_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " salt chem. ex. (in internal units of kT)"
      end

      attribute 1306159 "rate_change_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " salt add/delete rate (relative probability)"
      end

      attribute 1306287 "concentration_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " target salt concentrations (in SI Molar (mol/l)"
      end

      attribute 1306415 "cation_index_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " index of cation specie for each salt"
      end

      attribute 1306543 "anion_index_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " index of anion specie for each salt"
      end

      attribute 1306671 "code_name_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " salt names"
      end

      extra_member 426287 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1880879 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & chemical_potential_;
    ar & chemical_excess_;
    ar & rate_change_;
    ar & concentration_;
    ar & cation_index_;
    ar & anion_index_;
    ar & code_name_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1881007 "salt"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}
    : chemical_potential_()
    , chemical_excess_()
    , rate_change_()
    , concentration_()
    , cation_index_(~0ul)
    , anion_index_(~0ul)
    , code_name_()
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1881135 "salt"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 3
	  param in name "name" explicit_type "string"
	  param in name "cation" explicit_type "size_t"
	  param in name "anion" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}
    : chemical_potential_()
    , chemical_excess_()
    , rate_change_()
    , concentration_()
    , cation_index_(cation)
    , anion_index_(anion)
    , code_name_(name)
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1881263 "~salt"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1881391 "chemical_potential"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return chemical_potential_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1881519 "chemical_excess"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return chemical_excess_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1881647 "concentration"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return concentration_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1881775 "set_concentration"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "conc" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    concentration_ = conc;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1881903 "echo_input"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "fid" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
/ Write all the salt parameters
/
/ Write out the interpreted salt data from the input
/ file in the same format as an input file.  This includes program
/ default values for optional input data and normalised rate
/ values."
      end

      operation 1882031 "code_name"
	const cpp_inline public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return code_name_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Four letter code name for this salt"
      end

      operation 1882159 "cation_index"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return cation_index_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Index of cation specie for this salt"
      end

      operation 1882287 "anion_index"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return anion_index_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Index of anion specie for this salt"
      end

      operation 1882415 "rate_change"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return rate_change_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ The probability (against all other salts) that this salt will be chosen
/ for salt add/remove trial
/
/ @ensure 0 <= result <= 1"
      end

      operation 1882543 "set_rate_change"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "prob" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    rate_change_ = prob;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1882671 "normalise_rate_change"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "sumprob" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    rate_change_ /= sumprob;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1882799 "is_valid"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return not (cation_index_ == ~0ul or anion_index_ == ~0ul or code_name_.empty() or code_name_.size() != 4ul);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Check that the salt specie has been fully set up.
/
/ Salt object construction requires linking to the
/ component species that must be done before they
/ can be used in simulations. This method checks that
/ the salt has been properly set up."
      end

      operation 1882927 "salt"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 1013039 // salt
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : chemical_potential_(other.chemical_potential_)
    , chemical_excess_(other.chemical_excess_)
    , rate_change_(other.rate_change_)
    , concentration_(other.concentration_)
    , cation_index_(other.cation_index_)
    , anion_index_(other.anion_index_)
    , code_name_(other.code_name_)
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " copy ctor"
      end

      operation 1883055 "swap"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 1013039 // salt
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " content swap"
      end

      operation 1883183 "operator ="
	cpp_inline public return_type class_ref 1013039 // salt
	nparams 1
	  param in name "other" type class_ref 1013039 // salt
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    this->swap (other);
    return *this;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " assignment"
      end

      operation 1883311 "read_input"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "parser" explicit_type "input_reader"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " -----------------------------------------------------
/ Read salt information section for a salt
/
/ @param fid : input unit number
/ @param sname : the name value that caused this function to be called
/ @param svalue : the value associated with the name (may be mepty string)
/
/ @pre sname=fssalt
/
/
/ @param parser : input file parser object
/
/ @pre parser.name = fsspec"
      end

      operation 1883439 "associate"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "beg" explicit_type "std::vector<specie>::const_iterator"
	  param in name "end" explicit_type "std::vector<specie>::const_iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " -----------------------------------------------------
/ Associate cation and anion"
      end

      operation 1883567 "set_chemical_potential"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "beg" explicit_type "std::vector<specie>::const_iterator"
	  param in name "end" explicit_type "std::vector<specie>::const_iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1883695 "help_information"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "exemplar" type class_ref 1004335 // input_help
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1013167 "specie"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "------------------------------------------------------------------------
 SPECIE PARAMETERS
------------------------------------------------------------------------"
      class 1013679 "specie_type"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name}
 {
${items}
};
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1306927 "MOBILE"
	  public type class_ref 1013679 // specie_type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1307055 "FLEXIBLE"
	  public type class_ref 1013679 // specie_type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1307183 "CHANNEL_ONLY"
	  public type class_ref 1013679 // specie_type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1307311 "SOLUTE"
	  public type class_ref 1013679 // specie_type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1307439 "INVALID"
	  public type class_ref 1013679 // specie_type
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end
      end

      attribute 1307567 "radius_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "/ Radius of the sphere (in Angstrom)"
      end

      attribute 1307695 "valency_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "/ Charge/valency of the sphere (in while charges)"
      end

      attribute 1307823 "red_charge_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "/ Charge reduced to atomic units"
      end

      attribute 1307951 "chem_potential_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "/ The chemical potential for this specie at the given conc. (in kT)"
      end

      attribute 1308079 "chem_excess_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "/ The  chem. ex. for this specie and concentration (in kT)"
      end

      classrelation 1108655 // type_ (<directional composition>)
	relation 1071535 *-->
	  a role_name "type_" private
	    comment "/ Specie type value [nmob_l|nflx_p|nstr_l|nfre_l]"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 1108655 // type_ (<directional composition>)
	  b parent class_ref 1013679 // specie_type
      end

      attribute 1308207 "input_count_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "/ Initial specie count"
      end

      attribute 1308335 "code_name_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " specie code name"
      end

      attribute 1308463 "rate_specie_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "/ Relative chance  for specie (global against other species)"
      end

      attribute 1308591 "rate_exchange_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "/ Chance to jump in/out or move/jump (local per specie)"
      end

      attribute 1308719 "rate_move_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "/ Chance to move or jump (local per specie)"
      end

      attribute 1308847 "rate_change_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "/ Chance to add/delete (global against other species)"
      end

      attribute 1308975 "rate_region_"
	private explicit_type " double "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "/ Relative chance for a region is chosen for add/remove
/ (local per specie)"
      end

      attribute 1309103 "concentration_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " target salt concentrations (in SI Molar (mol/l)"
      end

      extra_member 426543 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1886639 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & radius_;
    ar & valency_;
    ar & red_charge_;
    ar & chem_potential_;
    ar & chem_excess_;
    ar & type_;
    ar & input_count_;
    ar & code_name_;
    ar & rate_specie_;
    ar & rate_exchange_;
    ar & rate_move_;
    ar & rate_change_;
    ar & rate_region_;
    ar & concentration_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1886767 "chemical_potential"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->chem_potential_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Chem. Potential. (internal units of kT)"
      end

      operation 1886895 "chemical_excess"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->chem_excess_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Chem. Ex. (in internal units of kT)"
      end

      operation 1887023 "echo_input"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 3
	  param in name "id" explicit_type "size_t"
	  param in name "cf" explicit_type "conf"
	  param inout name "fid" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// --------------------------------------------------
// Echo individual spec section
//
// Write out the interpreted specie data from the input
// file in the same format as an input file.  This includes program
// default values for optional input data and normalised rate
// values.

${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Echo individual specie section

 Write out the interpreted specie data from the input
 file in the same format as an input file.  This includes program
 default values for optional input data and normalised rate
 values.

 @pre is_valid"
      end

      operation 1887151 "transfer_positions"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "id" explicit_type "size_t"
	  param inout name "cf" explicit_type "conf"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Copy the initial positions to the conformation. Once
 complete, any storage for the original particles can be
 released."
      end

      operation 1887279 "code_name"
	const cpp_inline public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->code_name_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " specie code name/label"
      end

      operation 1887407 "radius"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->radius_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Particle radius (in Angstrom)"
      end

      operation 1887535 "reduced_charge"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->red_charge_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Reduced charge (cached value)"
      end

      operation 1887663 "rate_specie"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->rate_specie_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ The global probability of a move or this specie
/
/ After a 'MOVE' trial has been selected, this is the global
/ probability that this specie will be selected for the move.
/ The actual type of move are determined by rate_exchange and
/ rate_move"
      end

      operation 1887791 "normalise_rate_specie"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "sum_rate" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    this->rate_specie_ /= sum_rate;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Normalise the specie rate with the sum of all specie rates."
      end

      operation 1887919 "rate_exchange"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->rate_exchange_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ The local probability of move within a region or between regions.
/
/ Once this specie has been chosen for a move, this is the probability
/ between the specie being moved within a region or in a jump move
/ between regions."
      end

      operation 1888047 "rate_move"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->rate_move_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ The local probability of spherical or jump move.
/
/ Once this specie has been chosen for a within region move,
/ this is the chance of moving within a small box or
/ making a jump anywhere within the current region"
      end

      operation 1888175 "rate_change"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->rate_change_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ The global probability of individual add/remove
/
/ When a 'INDIVIDUAL_GC' move is chosen, this is the
/ probability that this specie will be selected. The
/ chance performing an add or a remove is always 1:1."
      end

      operation 1888303 "normalise_rate_change"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "sum_rate" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    this->rate_change_ /= sum_rate;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Normalise the global probability of individual add/remove
/ by the sum of all such rates."
      end

      operation 1888431 "rate_region"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return this->rate_region_.at(idx);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Get a per-region probability
/
/ When this specie is chosen for a GC movie, these four
/ probabilities the move is made in regions 1 to (nrgnmx).
/
/ @pre idx < nrgnmx"
      end

      operation 1888559 "concentration"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    IONCH_CHECK(this->is_solute(), \"Only solute species can have a target concentration\");
    return this->concentration_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Target concentration of a specie (in SI Molar (mol/l))

 The target concentration of specie is the sum of the partial
 target concentrations from all salts it is a component of.

 @pre is_solute(ispec)"
      end

      operation 1888687 "valency"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->valency_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Valency (in electrons)"
      end

      operation 1888815 "operator <"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 1013167 // specie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return this->type_ < other.type_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Define an ordering of species based on type."
      end

      operation 1888943 "get_type"
	const cpp_inline public return_type class_ref 1013679 // specie_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->type_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Get the GCMC type of this specie"
      end

      operation 1889071 "is_localized"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->type_ == MOBILE or this->type_ == FLEXIBLE;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Is this a localized structural specie type?

 Particles of a localized specie move within a sphere, and can not
 be added or deleted. Localized species are structural ions that are
 either 'mobile' or 'flexible'"
      end

      operation 1889199 "is_mobile"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->type_ == MOBILE;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Is this a mobile structural ion specie type?

 Particles of a mobile specie are restricted in two way, firstly
 they must remain within the filter region and secondly they must
 each remain within a fixed radius of a defined point.  The only
 movement possible is small displacement moves.  The can not be
 added or deleted from the simulation.

 mobile species are structural ions that are _not_ 'chonly' and
 _not_ 'flexible'"
      end

      operation 1889327 "is_flexible"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->type_ == FLEXIBLE;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Is this a flexible structural specie type?

 Particles of a flexible specie do move within a sphere and can
 not be added or deleted.  Unlike the other structural ions they
 may exist outside zlimit.

 flexible species are structural ions that are _not_ 'mobile' and
 _not_ 'chonly'"
      end

      operation 1889455 "is_solute"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->type_ == SOLUTE;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Is this a non-structural (ie free) ion?

 Particles of a free ion specie may participate in any move
 type, be a component of a salt and be added or deleted from
 the system.
 isfree species are _not_ structural ions"
      end

      operation 1889583 "is_channel_only"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->type_ == CHANNEL_ONLY;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Is this a structural channel-only specie?

 Particles of a channel-only specie are restricted to movement
 anywhere within the filter region.  They can move in increments
 from the current position or jump to anywhere in the filter.
 They can not be added or removed, not can jump into or out of
 the channel.

 'chonly' species are structural ions that are _not_ 'mobile' and
 _not_ 'flexible'."
      end

      operation 1889711 "is_valid"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->type_ != INVALID;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Is this a 'valid' specie type?

 Default constructed objects are not valid"
      end

      operation 1889839 "chemical_potential"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Set the chemical potential

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " MODIFICATION METHODS
 --------------------------------------------------
 set specie chem. pot. and chem. excess

 Updates specie chemical potential and excess using
 given value as a chemical potential

 REQUIRE: idxcl <= ispec <= nspec AND ctargi(ispec) /= 0

 Chem. Potential. (internal units of kT)"
      end

      operation 1889967 "chemical_excess"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Set the chemical excess

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1890095 "specie"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "// ------------------------------------------------------------
// Default initialise a specie object

${inline}${class}::${name}${(}${)}
    : impl_()
    , radius_ (0.0)
    , red_charge_ (0.0)
    , valency_ (0.0)
    , code_name_ ()
    , chem_potential_ (0.0)
    , chem_excess_ (0.0)
    , concentration_ (0.0)
    , type_ (INVALID)
    , input_count_ (0)
    , rate_specie_ (0.0)
    , rate_exchange_ (0.0)
    , rate_move_ (0.0)
    , rate_change_ (0.0)
    , rate_region_ (4ul, 0.0)
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " LIFETIME METHODS
 base constructor"
      end

      operation 1890223 "specie"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 1013167 // specie
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : impl_(other.impl_)
    , radius_ (other.radius_)
    , red_charge_ (other.red_charge_)
    , valency_ (other.valency_)
    , code_name_ (other.code_name_)
    , chem_potential_ (other.chem_potential_)
    , chem_excess_ (other.chem_excess_)
    , concentration_ (other.concentration_)
    , type_ (other.type_)
    , input_count_ (other.input_count_)
    , rate_specie_ (other.rate_specie_)
    , rate_exchange_ (other.rate_exchange_)
    , rate_move_ (other.rate_move_)
    , rate_change_ (other.rate_change_)
    , rate_region_ (other.rate_region_)
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " copy ctor"
      end

      operation 1890351 "~specie"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " unbuild object"
      end

      operation 1890479 "swap"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 1013167 // specie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------
// Exchange the contents of two specie objects

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " content swap"
      end

      operation 1890607 "operator ="
	cpp_inline public return_type class_ref 1013167 // specie
	nparams 1
	  param in name "other" type class_ref 1013167 // specie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    this->swap (other);
    return *this;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " assignment"
      end

      operation 1890735 "read_input"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "parser" explicit_type "input_reader"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// -----------------------------------------------------
// Read specie information section for one specie
//
// A input section for a specie may contain:
//
//   specie (free|chonly|flexible|mobile)
//       # alternate method of specifying specie type
//     type  (free|chonly|flexible|mobile)
//     z {REAL} # particle charge
//     d {REAL} # particle diameter
//       # Label for specie, must correspond to that used in the
//       # names of salt
//     name \"{2 character text}\"
//     chex {REAL} # Precomputed chemical potential
//       # Parameters controlling a particle of this
//       # specie's involvement in the MC move.
//     ratspc {REAL}
//     ratmov {REAL}
//     ratexc {REAL}
//     ratgr {REAL}
//     ratreg {REAL} {REAL} {REAL} {REAL}
//       # Particle locations - (only) optional for free type
//       # species. The 'n' option must be followed by position
//       # information for the given number of particles.
//     n {INTEGER}
//       # For 'free' and 'chonly' species require
//       # only x, y, z coordinates for their starting position.
//       #  X      Y      Z
//       {REAL} {REAL} {REAL}
//
//       # For 'mobile' and 'flexible' species you must specify the starting
//       # position as above and additionally specify
//       # the allowed update radii.  This can be followed
//       # by an additional set of x, y, z coordinates defining
//       # the centre-point for the radius. If only one set
//       # of coordinates is specified then they are used for
//       # the starting and centre-points.  Note that there
//       # is no restriction on using only 4 or only
//       # 7 parameter definitions per input section.
//       #
//       #  X      Y      Z   Upd. R   X0     Y0     Z0
//       {REAL} {REAL} {REAL} {REAL}
//       {REAL} {REAL} {REAL} {REAL} {REAL} {REAL} {REAL}
//
//     } //
//
// @param parser : input file parser object
//
// @pre parser.name = fsspec

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " -----------------------------------------------------
 Read specie information section for one specie

 A input section for a specie may contain:

   specie (free|chonly|flexible|mobile)
       # alternate method of specifying specie type
     type  (free|chonly|flexible|mobile)
     z {REAL} # particle charge/valency
     d {REAL} # particle diameter
       # Label for specie, must correspond to that used in the
       # names of salt. Quotes are optional.
     name \"{2 character text}\"
     chex {REAL} # Precomputed chemical potential
       # Parameters controlling a particle of this
       # specie's involvement in the MC move.
     ratspc {REAL}
     ratmov {REAL}
     ratexc {REAL}
     ratgr {REAL}
     ratreg {REAL} {REAL} {REAL} {REAL}
       # Particle locations - (only) optional for free type
       # species. The 'n' option must be followed by position
       # information for the given number of particles.
     n {INTEGER}
       # For 'free' and 'chonly' species require
       # only x, y, z coordinates for their starting position.
       #  X      Y      Z
       {REAL} {REAL} {REAL}

       # For 'mobile' and 'flexible' species you must specify the starting
       # position as above and additionally specify
       # the allowed update radii.  This can be followed
       # by an additional set of x, y, z coordinates defining
       # the centre-point for the radius. If only one set
       # of coordinates is specified then they are used for
       # the starting and centre-points.  Note that there
       # is no restriction on using only 4 or only
       # 7 parameter definitions per input section.
       #
       #  X      Y      Z   Upd. R   X0     Y0     Z0
       {REAL} {REAL} {REAL} {REAL}
       {REAL} {REAL} {REAL} {REAL} {REAL} {REAL} {REAL}

     end

 @param parser : input file parser object

 @pre parser.name = fsspec"
      end

      operation 1890863 "reset_concentration"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    concentration_ = 0.0;
    chem_potential_ = 0.0;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 iterate the input ions

 Get information about the position of particles that where
 given in the input file.  To enhance data-hiding this method
 gives the 'conf' module a well-defined interface for retrieving
 the position data.  Once the 'conf' module has retrieved all
 the position information it can call 'deltmp' to let the 'spec'
 module know that it can delete temporary storage.

 @param ispec,idx: (initialise with ispec=-1)
     input as last specie/particle, output as current specie/particle
 @param ax,ay,az,ar,rx,ry,rz: output as particle data (r only defined if mobile(ispec))
 @param last=true if no more particles

 NOTE: in fortran there is a particle defined when last=true. However,
 this is not the case here.
 void struks(int &ispec, int &idx, double &ax, double &ay, double &az, double &ar
            , bool &last, double &rx, double &ry, double &rz) const;
 Fill a_pos with any position definitions for a given specie.
static void get_initial_position (const int ispec, std::vector< xyzr_type > &a_pos);
/ Reset the concentration to zero
/
/ Also sets the chemical potential to zero."
      end

      operation 1890991 "set_concentration"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "conc" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Set the chemical potential from the concentration and chemical excess"
      end

      operation 1891119 "set_reduced_charge"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "qstar" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    red_charge_ = qstar * valency_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Set the reduced charge using qstar"
      end

      operation 1891247 "help_information"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "exemplar" type class_ref 1004335 // input_help
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1013295 "subspecie"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      class 1013807 "substate"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1309231 "enthalpy_"
	  private explicit_type "double"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Relative enthalpy of this state (in SI units)"
	end

	attribute 1309359 "entropy_"
	  private explicit_type "double"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Relative entropy of this state (in SI units)"
	end

	attribute 1309487 "rate_swap_"
	  private explicit_type "double"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " subspecie add/delete rate (local relative probability)"
	end

	attribute 1309615 "relative_population_"
	  private explicit_type "double"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " The relative population of this state"
	end

	attribute 1309743 "ion_index_"
	  private explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " index of cation specie for each subspecie"
	end

	attribute 1309871 "code_name_"
	  private explicit_type "string"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " subspecie name"
	end

	extra_member 426671 "friend"
	  
	  cpp "
    friend class boost::serialization::access;" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	end

	operation 1891375 "serialize"
	  stereotype "template"
	  cpp_inline private explicit_return_type "void"
	  nparams 2
	    param inout name "ar" explicit_type "Archive"
	    param in name "version" explicit_type "unsigned int"
	  cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
      ar & enthalpy_;
      ar & entropy_;
      ar & rate_swap_;
      ar & relative_population_;
      ar & ion_index_;
      ar & code_name_;
    };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 1891503 "relative_population"
	  const cpp_inline public explicit_return_type "double"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return relative_population_;
    };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment "/ The relative population of this state"
	end

	operation 1891631 "ion_index"
	  const cpp_inline public explicit_return_type "size_t"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return ion_index_;
    };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment "/ index of cation specie for each subspecie"
	end

	operation 1891759 "enthalpy"
	  const cpp_inline public explicit_return_type "double"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return enthalpy_;
    };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment "/ Relative enthalpy of this state (in SI units)"
	end

	operation 1891887 "entropy"
	  const cpp_inline public explicit_return_type "double"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return entropy_;
    };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment "/ Relative entropy of this state (in SI units)"
	end

	operation 1892015 "rate_swap"
	  const cpp_inline public explicit_return_type "double"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return rate_swap_;
    };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment "/ subspecie add/delete rate (local relative probability)"
	end

	operation 1892143 "code_name"
	  const cpp_inline public explicit_return_type "string"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return code_name_;
    };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment "/ subspecie name"
	end

	operation 1892271 "is_valid"
	  const cpp_inline public explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return not (ion_index_ == ~0ul or rate_swap_ < 0.0 or code_name_.empty() or code_name_.size() != 2ul);
    };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 1892399 "substate"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}
    : enthalpy_()
    , entropy_()
    , rate_swap_(1.0)
    , relative_population_ ()
    , ion_index_()
    , code_name_()
${throw}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 1892527 "substate"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 1
	    param in name "other" type class_ref 1013807 // substate
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : enthalpy_(other.enthalpy_)
    , entropy_(other.entropy_)
    , rate_swap_(other.rate_swap_)
    , relative_population_ (other.relative_population_)
    , ion_index_(other.ion_index_)
    , code_name_(other.code_name_)
${throw}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 1892655 "operator ="
	  cpp_inline public return_type class_ref 1013807 // substate
	  nparams 1
	    param in name "other" type class_ref 1013807 // substate
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
      this->swap (other);
      return *this;
    };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 1892783 "swap"
	  preserve_cpp_body_indent public explicit_return_type "void"
	  nparams 1
	    param inout name "other" type class_ref 1013807 // substate
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 1892911 "read_input"
	  preserve_cpp_body_indent public explicit_return_type "void"
	  nparams 1
	    param inout name "parser" explicit_type "input_reader"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 1893039 "set_ion_index"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "idx" explicit_type "size_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
      ion_index_ = idx;
    };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 1893167 "set_relative_population"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "val" explicit_type "double"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
      relative_population_ = val;
    };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment "/ Set the relative population of this state"
	end

	operation 1893295 "normalise_relative_population"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "sumpop" explicit_type "double"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
      relative_population_ /= sumpop;
    };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment "/ Normalise the relative population of this state"
	end

	operation 1893423 "normalise_rate_swap"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "sumprob" explicit_type "double"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
      rate_swap_ /= sumprob;
    };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment "/ Normalise the relative swap probability"
	end
      end

      classrelation 1108783 // states_ (<directional composition>)
	relation 1071663 *-->
	  stereotype "std::vector"
	  a role_name "states_" private
	    comment " typedef std::vector< substate >::const_iterator  const_iterator;"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 1108783 // states_ (<directional composition>)
	  b parent class_ref 1013807 // substate
      end

      attribute 1309999 "code_name_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " subspecie collective name"
      end

      attribute 1310127 "rate_swap_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " subspecie add/delete rate (global relative probability)"
      end

      extra_member 426799 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1893551 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & states_;
    ar & rate_swap_;
    ar & code_name_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1893679 "subspecie"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}
    : states_()
    , rate_swap_()
    , code_name_()
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1893807 "~subspecie"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1893935 "echo_input"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "fid" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
/ Write all the subspecie parameters
/
/ Write out the interpreted subspecie data from the input
/ file in the same format as an input file.  This includes program
/ default values for optional input data and normalised rate
/ values."
      end

      operation 1894063 "code_name"
	const cpp_inline public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return code_name_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1894191 "rate_swap"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return rate_swap_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1894319 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return states_.size();
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1894447 "empty"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return states_.empty();
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      class 1013935 "const_iterator"
	visibility package stereotype "typedef" base_type class_ref 1013807 // substate
	cpp_decl "${comment}typedef std::vector<${type}>::const_iterator ${name};
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1108911 // <dependency>
	  relation 1071791 -_->
	    a default
	      cpp default "#include in source"
	      python "${type}"
	      classrelation_ref 1108911 // <dependency>
	    b parent class_ref 1013807 // substate
	end
      end

      operation 1894575 "begin"
	const cpp_inline public return_type class_ref 1013935 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return states_.begin();
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1894703 "end"
	const cpp_inline public return_type class_ref 1013935 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return states_.end();
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1894831 "is_valid"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    if (not (states_.size() < 2 or rate_swap_ < 0.0
             or code_name_.empty() or code_name_.size() != 2ul))
    {
      for (const_iterator idx = begin(); idx != end(); ++idx)
      {
        if (not idx->is_valid ())
          return false;
      }
      return true;
    }
    return false;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1894959 "subspecie"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 1013295 // subspecie
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : states_(other.states_)
    , rate_swap_(other.rate_swap_)
    , code_name_(other.code_name_)
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " copy ctor"
      end

      operation 1895087 "swap"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 1013295 // subspecie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " content swap"
      end

      operation 1895215 "operator ="
	cpp_inline public return_type class_ref 1013295 // subspecie
	nparams 1
	  param in name "other" type class_ref 1013295 // subspecie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    this->swap (other);
    return *this;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " assignment"
      end

      operation 1895343 "read_input"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "parser" explicit_type "input_reader"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ -----------------------------------------------------
/ Read subspecie information section for a subspecie
/
/ @param fid : input unit number
/ @param sname : the name value that caused this function to be called
/ @param svalue : the value associated with the name (may be mepty string)
/
/ @pre sname=fssubspecie
/
/
/ @param parser : input file parser object
/
/ @pre parser.name = fsspec"
      end

      operation 1895471 "associate"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 3
	  param in name "fm" type class_ref 1004207 // formation
	  param in name "beg" explicit_type "std::vector<specie>::const_iterator"
	  param in name "end" explicit_type "std::vector<specie>::const_iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " -----------------------------------------------------
/ Associate ions to substates and normalise relative populations"
      end

      operation 1895599 "help_information"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "exemplar" type class_ref 1004335 // input_help
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Set help information into the input_help object for this type."
      end
    end
  end
end
