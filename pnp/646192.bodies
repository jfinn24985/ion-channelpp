class help_section
!!!1712688.cpp!!!	write(inout filt : fixed_width_output_filter, inout dest : ostream) : void
this->help_subtype::write( filt, dest );
{
  namespace io = boost::iostreams;
  core::indent_guard grd( filt );
  {
    io::filtering_ostream out;
    out.push( filt );
    out.push( dest );
    if( not this->subtypes_.empty() )
    {
      out << "type\n";
    }
  }
  if( not this->subtypes_.empty() )
  {
    core::indent_guard grd1( filt );
    {
      io::filtering_ostream out1;
      out1.push( filt );
      out1.push( dest );
      out1 << "[one of: ";
      bool first = true;
      for( auto const& entry : this->subtypes_ )
      {
        if( not first )  out1 << ",";
        else             first = false;
        out1 << entry.first;
      }
      out1 << "]\n";
      out1 << "This section represents a class of types in the ";
      out1 << "the simulation. Each type can have ";
      out1 << "individual options. These options may only ";
      out1 << "be valid in combination with the specific type.\n\n";
      out1 << "Description of available types:\n";
    }
    for( auto const& entry : this->subtypes_ )
    {
      entry.second.write( filt, dest );
    }
  }
}
!!!2404784.cpp!!!	write(inout filt : fixed_width_output_filter, in param : string, inout dest : ostream) : bool
UTILITY_REQUIRE( not param.empty(), "Should not be using this 'write' with empty parameter name." );
if( this->help_subtype::write( filt, param, dest ) )
{
  // param was immediate child
  return true;
}
else
{
  // search in subtypes
  for( auto const& entry : this->subtypes_ )
  {
    if( entry.second.has_entry( param ) )
    {
      // found subtype
      namespace io = boost::iostreams;
      {
        io::filtering_ostream os;
        os.push( filt );
        os.push( dest );
        os << this->title() << "\n";
      }
      {
        core::indent_guard grd( filt );
        {
          io::filtering_ostream out;
          out.push( filt );
          out.push( dest );
          if( not this->description().empty() )
          {
            out << this->description() << "\n";
          }
          out << "type:\n";
        }
        {
          entry.second.write( filt, param, dest );
        }
      }
      return true;
    }
  }
}
return false;
