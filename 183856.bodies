class cylinder_region
!!!1094448.cpp!!!	do_change_volume(in vol : double, in rad : double) : void
// Maintain halflength/radius ratio
// (ignore effect of rad argument).
//
//  vol = 2 * (HL - r) * pi * (R - r) * (R - r)
//
//  if C = HL/R then HL = C.R
//
//  vol = 2 * pi * (CR - r) * (R - r) * (R - r)
//
//  To make tractable (CR - r) --> C(R -r)
//
//  vol = 2C * pi * (R - r) * (R - r) * (R - r)
const double ratio { this->half_length() / this->radius() };

const double newradius { std::cbrt( vol / (2 * ratio * core::constants::pi() ) ) };

this->radius_ = newradius + rad;

const double newlength = { vol / ( 2 * core::constants::pi() * std::pow( newradius, 2 ) ) };

this->half_length_ = newlength + rad;
!!!1114928.cpp!!!	do_extent(out small_corner : coordinate, out big_corner : coordinate, in radius : double) : void
big_corner.x = this->radius() - radius;
big_corner.y = big_corner.x;
big_corner.z = this->half_length() - radius;
small_corner.x = -big_corner.x;
small_corner.y = -big_corner.y;
small_corner.z = -big_corner.z;
!!!991408.cpp!!!	do_fits(in radius : double) : bool
return this->half_length_ >= radius and this->radius_ >= radius;
!!!990512.cpp!!!	do_is_inside(in pos : coordinate, in radius : double) : bool
if( this->half_length_ < radius )
{
  // sphere can not fit in cylinder
  return false;
}
if( this->radius_ < radius )
{
  // sphere can not fit in cylinder
  return false;
}
if( ( this->half_length_ - radius ) < std::abs( pos.y ) )
{
  // sphere too close to end
  return false;
}
if( std::pow( this->radius_ - radius, 2 ) < ( pos.x * pos.x + pos.y * pos.y ) )
{
  // sphere too close to wall
  return false;
}
return true;

!!!1094064.cpp!!!	do_make_gridder(inout rgenr : random_distribution, in count : size_t) : grid_generator
boost::shared_ptr< grid_generator > result;
result.reset( new tubular_grid( 2*this->half_length(), this->radius(), count, rgenr ) );
return result;
!!!1094320.cpp!!!	do_make_gridder(in spacing : double, inout rgenr : random_distribution) : grid_generator
boost::shared_ptr< grid_generator > result;
result.reset( new tubular_grid( 2*this->half_length(), this->radius(), spacing, rgenr ) );
return result;
!!!991024.cpp!!!	do_new_position(inout rgnr : random_distribution, in radius : double) : coordinate
// A random position within cylinder
particle::coordinate pos( 0.0, 0.0, 0.0 );
if( radius < this->radius_ )
{
  // Volume is linear in square of radius
  const double r( std::qrt( rgnr.uniform( std::pow( this->radius_ - radius, 2 ) ) ) );
  const double phi( rgnr.uniform( 0.0, core::constants::pi() * 2 ) );
  pos.x = r * std::cos( phi );
  pos.y = r * std::sin( phi );
}
// else x = 0, y = 0

if( radius < this->half_length_ )
{
  const double reduced_hl( this->half_length_ - radius );
  pos.z = rgnr.uniform( -reduced_hl, reduced_hl );
}
// else z = 0
return pos;

!!!1093296.cpp!!!	region_factory(in label : string, in params : string) : base_region
// needed information
// label : from label arg
// radius : from param arg
// half_length : from param arg
double half_length {};
double radius {};

const std::string half_length_label { "half-length" };
const std::string radius_label { "radius" };

// check for required parameters.
UTILITY_INPUT( params.count( half_length_label ) == 1, "Cylinder region \""+half_length_label+"\" parameter missing in input.", core::strngs::fsregn() );
UTILITY_INPUT( params.count( radius_label ) == 1, "Cylinder region \""+radius_label+"\" parameter missing in input.", core::strngs::fsregn() );

core::input_base_reader::float_input( half_length_label, params.at( half_length_label ), "Cylinder region", core::strngs::fsregn(), half_length, true, false );

core::input_base_reader::float_input( radius_label, params.at( radius_label ), "Cylinder region", core::strngs::fsregn(), radius, true, false );

// build region object.
boost::shared_ptr< geometry::base_region > current;
current.reset( new cylinder_region( label, radius, half_length ) );
return current;



!!!1093168.cpp!!!	add_region_definition(inout meta : region_meta) : void
region_definition cylinder_defn;
cylinder_defn.type_name_ = "cylinder";
cylinder_defn.documentation_.insert( std::make_pair< std::string, std::string >( "radius", "[required, values > 0 in Angstrom] The radius of the cylinder in the XY plane." ) );
cylinder_defn.documentation_.insert( std::make_pair< std::string, std::string >( "half-length", "[required, value in Angstrom] Half the length of the cylinder. The cylinder is centred on the origin so |z| <= half-length." ) );
cylinder_defn.factory_ = &cylinder_region::region_factory;
meta.add_definition( cylinder_defn );
