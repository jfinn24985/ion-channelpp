class region_meta
!!!1062448.cpp!!!	add_definition(inout defn : region_definition) : void
UTILITY_REQUIRE( not this->has_definition( defn->label() ), "Can not add two region definitions with the same name." );
this->type_to_object_.push_back( defn.release() );
!!!2330800.cpp!!!	definition_key_list() : string
std::vector< std::string > result;
for( auto const& entry : this->type_to_object_ )
{
  result.push_back( entry.label() );
}
return result;
!!!1061552.cpp!!!	publish_help(inout helper : input_help) : void
const std::string rgnlabel( this->section_label() );
// ----------------------------------------
// add section
// ----------------------------------------

//   Specie input section definition
helper.add_section( { rgnlabel,
    "Region input section definition.  In addition to the listed options, each individual "
    "region subtype may have its own specific options." } );

// ----------------------------------------
// add parameters
// ----------------------------------------

//  name : [required] region label
{
  const std::string description( "Label for a region. Must be unique in a simulation as it can be referred to from other parts of the simulation." );
  helper.get_section( rgnlabel ).add_entry( { core::strngs::fsname(), "text label", "unique for all regions", "required", description } );
}

// Subtype parameter documentation.
for( auto iter = this->type_to_object_.begin(); iter != this->type_to_object_.end(); ++iter )
{
  iter->publish_help( helper, rgnlabel );
}
!!!1062576.cpp!!!	has_definition(in type_name : string) : bool
for (auto iter = this->type_to_object_.begin(); iter != this->type_to_object_.end(); ++iter )
{
  if (iter->label() == type_name )
  {
    return true;
  }
}
return false;
!!!1062064.cpp!!!	do_read_entry(inout reader : input_base_reader) : bool
if( reader.name() == core::strngs::fstype() )
{
  // --------------------
  // Region type
  reader.duplicate_test( this->type_name_.empty(), this->section_label() );
  std::vector< std::string > keylist{ this->definition_key_list() };
  const std::size_t idx = reader.get_key( "Region subtype", this->section_label(), keylist );
  this->type_name_ = keylist.at( idx );
}
else if( reader.name() == core::strngs::fsname() )
{
  // --------------------
  // Region label
  reader.duplicate_test( this->label_.empty(), this->section_label() );
  this->label_ = reader.get_text( "Region label", this->section_label() );
}
else
{
  // --------------------
  // Region subtype specific parameters
  const std::string lname{ reader.name() };
  reader.duplicate_test( 0 == std::count_if( this->parameter_set_.begin(), this->parameter_set_.end(), [&lname](const core::input_parameter_memo& param){ return lname == param.name(); } ), this->section_label() );
  this->parameter_set_.push_back( core::input_parameter_memo( reader ) );
}
return true;
!!!1061936.cpp!!!	do_read_end(in reader : input_base_reader) : void
{
  std::string bad_params;
  // check for required parameters.
  if( this->type_name_.empty() ) bad_params = core::strngs::fstype();
  if( this->label_.empty() ) bad_params += (bad_params.empty() ? "": " ") +  core::strngs::fsname();
  if( not bad_params.empty() ) reader.missing_parameters_error( "Geometry", core::strngs::fsregn(), bad_params );
}
// We know from having a type name and do_read_entry that a
// type object must exist.
for( auto const& defn : this->type_to_object_ )
{
  if( defn.label() == this->type_name_ )
  {
    // check parameters.
    std::string bad_params;
    for( auto const& entry : this->parameter_set_ )
    {
      // check for required parameters.
      if( not defn.has_definition( entry.name() ) ) bad_params += (bad_params.empty() ? "": " ") + entry.name();
    }
    if( not bad_params.empty() ) reader.invalid_parameter_subtype_error( core::strngs::fsregn(), this->type_name_, bad_params );
    // push "end" tag onto parameter set.
    this->parameter_set_.push_back( core::input_parameter_memo( reader ) );
    // build object and add to manager.
    this->manager_->add_region( defn( this->label_, this->parameter_set_ ) );
    return;
  }
}
UTILITY_CHECK( false, "Earlier checks for region type should mean we never get here." );
!!!1061808.cpp!!!	do_reset() : void
this->label_.clear();
this->type_name_.clear();
this->parameter_set_.clear();
