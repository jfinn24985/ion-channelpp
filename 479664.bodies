class region_meta
!!!1062448.cpp!!!	add_definition(inout defn : region_definition) : void
UTILITY_REQUIRE( not this->has_definition( defn->label() ), "Can not add two region definitions with the same name." );
this->type_to_object_.push_back( defn.release() );
!!!1061552.cpp!!!	publish_help(inout helper : input_help) : void
const std::string rgnlabel( this->section_label() );
// ----------------------------------------
// add section
// ----------------------------------------

//   Specie input section definition
helper.add_section( rgnlabel,
    "Region input section definition.  In addition to the listed options, each individual "
    "region subtype may have its own specific options." );

// ----------------------------------------
// add parameters
// ----------------------------------------

//  type : [required] region subtype
{
  const std::string description( "[required, string] region subtype (see documentation for valid subtypes)." );
  helper.add_option( rgnlabel, core::strngs::fstype(), description );
}

//  name : [required] region label
{
  const std::string description( "[required, string] region label. Must be unique in a simulation." );
  helper.add_option( rgnlabel, core::strngs::fsname(), description );
}

// Subtype parameter documentation.
for( auto iter = this->type_to_object_.begin(); iter != this->type_to_object_.end(); ++iter )
{
  iter->publish_help( helper, rgnlabel );
}

!!!1062576.cpp!!!	has_definition(in type_name : string) : bool
for (auto iter = this->type_to_object_.begin(); iter != this->type_to_object_.end(); ++iter )
{
  if (iter->label() == type_name )
  {
    return true;
  }
}
return false;
!!!1062064.cpp!!!	do_read_entry(inout reader : input_base_reader) : bool
if (reader.name() == core::strngs::fstype())
{
   // --------------------
   // Region type
   UTILITY_INPUT(this->type_name_.empty(), "Parameter \"type\" appears more than once in a single region section.", this->section_label());
   UTILITY_INPUT(not reader.value().empty(), "Region \"type\" parameter must have a value.", this->section_label());
   std::string val (reader.dequote(reader.value()));
   UTILITY_INPUT(this->has_definition(val) != 0, "Region \"type\" parameter value ("+val+") is not a valid region type for this application (see documentation).", this->section_label());
   this->type_name_ = val;
}
else if (reader.name() == core::strngs::fsname())
{
   // --------------------
   // Region label
   UTILITY_INPUT(this->label_.empty(), "Parameter \"name\" appears more than once in a single region section.", this->section_label());
   UTILITY_INPUT(not reader.value().empty(), "Region \"name\" parameter must have a value.", this->section_label());
   std::string val (reader.dequote(reader.value()));
   this->label_ = val;
}
else
{
   // --------------------
   // Region subtype specific parameters
   UTILITY_INPUT (0 == this->parameter_set_.count( reader.name() ), ("Parameter \""+reader.name()+"\" appears more than once in a single region section."), this->section_label());
   this->parameter_set_.insert (std::make_pair(reader.name(), reader.value()));
}
return true;
!!!1061936.cpp!!!	do_read_end() : void
UTILITY_INPUT( not this->type_name_.empty(), "No region type was found.", this->section_label() );
UTILITY_INPUT( not this->label_.empty(), "No region label/name was found.", this->section_label() );
// identify type definition
auto factory = this->type_to_object_.begin();
for ( /* empty */; factory != this->type_to_object_.end(); ++factory )
{
  if (factory->label() == this->type_name_ )
  {
    break;
  }
}
UTILITY_INPUT( factory != this->type_to_object_.end(), "No region definition for type \""+this->type_name_+"\" was found.", this->section_label() );
// check parameters.
for( auto const& entry : this->parameter_set_ )
{
   UTILITY_INPUT( factory->has_definition( entry.first ), "Parameter with name \""+entry.first+"\" is not valid for region type \""+this->type_name_+"\".", this->section_label() );
}
// build object and add to manager.
boost::shared_ptr< geometry::base_region > current;
current = (*factory)( this->label_, this->parameter_set_ );
if( current )
{
  this->manager_->add_region( current );
}
!!!1061808.cpp!!!	do_reset() : void
this->label_.clear();
this->type_name_.clear();
this->parameter_set_.clear();
