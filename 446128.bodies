class particle_manager
!!!908336.cpp!!!	serialize(inout ar : Archive, in version : unsigned int) : void
ar & species_;
ar & ensemble_;
ar & target_particles_;
!!!907952.cpp!!!	description(inout os : ostream) : void
os << "[ensemble]\n- base settings\n";
os << "  specie count : " << this->specie_count() << "\n";
!!!907952.python!!!	description(inout os : ostream) : void
from constants import constants
constants.description( os )
print >>os, "[simulation]"
print >>os, "        volume :", self.cell_region_.volume(-1), "Anstrom{3}"
print >>os, "  permittivity :", self.cell_region_.permittivity()
print >>os, " beta (1/k_BT) :", (1.0/(constants.boltzmann_constant()*self.temperature_kelvin_)), " J{-1}"
print >>os, "  temperature :", self.temperature_kelvin_, " K"
print >>os, " specie count :", self.specie_count()
print >>os, " - loop sizes"
print >>os, "       thermal :", self.equilibration_interval_
print >>os, "    production :", self.production_interval_
print >>os, "         inner :", self.inner_loop_size_
print >>os, " current index :", self.outer_loop_index_
print >>os, " - other parameters"
print >>os, " starting particle count :", self.target_number_of_particles()
print >>os, "          ionic strength :", self.ionic_strength()
print >>os, "             trial rates :", self.rates_
print >>os, "              move delta :", self.delta
for spc in self.species_:
  spc.description( os )
print >>os, "[choices] trial types and rates"
print >>os, " %6s %4s %7s" % ( "type", "spc.", "rate(%)" )
for choice in self.choices_:
  print >>os, " %6s %4s %7.2f" % ( choice.label(), self.species_[choice.specie_key()].label(), choice.probability()*100.0 )
for observer in self.observers_:
  observer.description( os )
for potl in self.evaluators_:
  potl.description( os )
self.ensemble_.description( os )

!!!907440.cpp!!!	get_specie_key(in label : string) : size_t
for (std::size_t ix = 0; ix != this->species_.size(); ++ix)
{
  if (label == species_[ix].label ()) return ix;
}
throw std::out_of_range(label+" is not a specie label");
return this->species_.size();
!!!907440.python!!!	get_specie_key(in label : string) : size_t
for ispec, spc in enumerate(self.species_):
  if spc.label() == label:
    return ispec
raise KeyError, label+" is not a specie label"
!!!907184.cpp!!!	has_specie(in name : string) : bool
for (auto const& spc: this->species_)
{
  if (name == spc.label ()) return true;
}
return false;
