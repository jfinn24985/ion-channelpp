class input_reader
!!!555824.cpp!!!	add_buffer(in filename : path, in buffer : string) : void
UTILITY_INPUT_OLD( this->file_stack_.size() < 100, "Include depth exceeding 100 levels, which probably indicates an include cycle", core::strngs::fsincl() );
// leave filename as-is
this->file_stack_.push_back( input_node{} );
this->file_stack_.back().set_buffer( filename.string(), buffer );

!!!555696.cpp!!!	add_include(in filename : path) : void
UTILITY_INPUT_OLD( this->file_stack_.size() < 100, "Include depth exceeding 100 levels, which probably indicates an include cycle", core::strngs::fsincl() );
boost::filesystem::path fullpath( filename );
if ( fullpath.has_relative_path() )
{
  boost::filesystem::path here( this->current_filename() );
  if ( here.has_parent_path() )
  {
    fullpath = here.parent_path() / fullpath;
  }
  // else assume is relative to working directory.
}
this->file_stack_.push_back( input_node{} );
this->file_stack_.back().set_buffer( fullpath.string() );

!!!1542831.cpp!!!	do_next() : bool
if ( this->file_stack_.empty() )
{
  return false;
}
// Keep going until we get a result or reach the end of all files.
while ( true )
{
  // Get the top most input node
  input_node &fid = this->file_stack_.back();
  if ( fid.eof() )
  {
    this->file_stack_.pop_back();
    if( this->file_stack_.empty() )
    {
      return false;
    }
    continue;
  }
  std::string line;
  fid.getline( line );

  if ( not this->set_line( line ) ) continue;

  // Check for include.
  if ( this->name() == core::strngs::fsincl() )
  {
    this->add_include( this->value() );
    continue;
  }
  break;
}
return true;

!!!1542831.python!!!	do_next() : bool
if len(self.file_stack_) == 0:
  return False
# Keep going until we get a result or reach the end of all files.
while True:
  # Get the top most stream
  node = self.file_stack_[-1]
  self.name_ = None
  self.line_ = None
  self.value_ = None
  self.line_ = node.stream_.readline()
  if self.line_ == "":
    self.file_stack_.pop()
    if len(self.file_stack_) == 0:
      self.line_ = None
      return False
    continue
  # Keep track of the current line number.
  node.line_no_ += 1
  if self.line_ == "\n":
    continue
  self.line_ = input_reader.decomment(self.line_, '#')
  if self.line_ == "\n":
    continue
  self.line_ = self.line_.strip()
  if self.line_ == "":
    continue
  # Split line
  # have name/value ?? (look for ' ' or '=')
  if self.line_.find("=") >= 0:
    arr = self.line_.split("=",1)
    self.name_ = arr[0]
    if len(arr) > 1:
      self.value_ = arr[1]
  else:
    arr = self.line_.split(None,1)
    self.name_ = arr[0]
    if len(arr) > 1:
      self.value_ = arr[1]
  self.name_ = self.name_.strip()
  self.value_ = None if self.value_ == None else self.value_.strip()
  # Check for include.
  if self.name_ == "include":
    newnode = location_node()
    newnode.open(self.value_)
    self.file_stack_.append(newnode)
    continue
  break
return True
