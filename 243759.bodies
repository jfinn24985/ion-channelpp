class filesystem
!!!316207.cpp!!!	compare_binary(in a_path : string, in a_start : IterType, in a_end : IterType) : bool
typedef BOOST_TYPEOF(*a_begin) CharType;
typedef boost::iostreams::file_source< CharType > input_source;
typedef boost::iostreams::char_traits< CharType > char_traits;
for (input_source ifs (a_path);
     a_begin != a_end; 
     ++a_begin)
  {
    const char_traits::int_type result = boost::iostreams::get(ifs);
    if (result == char_traits::eof())
      {
	return false;
      }
    UTILITY_CHECK(result != char_traits::would_block(), "Simple file source should be non-blocking.");
    if (result != *a_begin)
      {
	return false;
      }
  }
return true;
!!!1611567.cpp!!!	compare_content(in a_path : string, in a_start : IterType, in a_end : IterType) : bool
typedef BOOST_TYPEOF(*a_begin) CharType;
for (std::ifstream ifs (a_path);
     ifs and a_begin != a_end; 
     ++a_begin)
  {
    CharType result;
    ifs >> result;
    if (result != *a_begin)
      {
	return false;
      }
  }
return true;
!!!316463.cpp!!!	relative_path(in a_base : path, in a_leafer : path) : path
// Ensure that starting paths are complete
boost::filesystem::path l_base (boost::filesystem::complete (a_base));
boost::filesystem::path l_leaf (boost::filesystem::complete (a_leafer));
boost::filesystem::path Result;
boost::filesystem::path::iterator l_lhs (l_base.begin ());
boost::filesystem::path::iterator l_rhs (l_leaf.begin ());
// Iterate along a_base and a_leafer for first mismatch.
if (*l_lhs != *l_rhs)
{ // No common base, just return a_leafer
  Result = l_leaf;
}
else
{
  for (++l_rhs, ++l_lhs; // Iterate to first mismatch.
	l_lhs != l_base.end () and l_rhs != l_leaf.end () and (*l_lhs) == (*l_rhs);
	++l_rhs, ++l_lhs); // Do nothing in loop.
  if (l_lhs != l_base.end ())
  { // Need to add "parent dirs" until we reach end
    for (; l_lhs != l_base.end (); ++l_lhs)
    {
      Result /= "..";
    }
  }
  if (l_lhs == l_base.end ())
  { // Now everything from l_rhs is in path.
    for (; l_rhs != l_leaf.end (); ++l_rhs)
    {
      Result /= *l_rhs;
    }
  }
}
return Result;
