class platform_test
!!!1821232.cpp!!!	mockup_particle_manager() : particle_manager
boost::shared_ptr< particle::particle_manager > pman( new particle::particle_manager );
//XX {
//XX   particle::specie spc1;
//XX   spc1.set_label( "CA" );
//XX   spc1.set_concentration( 1.0 );
//XX   spc1.set_radius( 0.11 );
//XX   spc1.set_rate( 0.2 );
//XX   spc1.set_valency( 1.0 );
//XX   spc1.set_excess_potential( 0.123 );
//XX   spc1.set_type( particle::specie::MOBILE );
//XX   spc1.append_position( particle::coordinate( 2.0, 2.0, 0.0 ), particle::centroid( 3.0, 2.0, 2.0, 0.0 ) );
//XX   pman->add_specie( spc1 );
//XX }
//XX {
//XX   particle::specie spc1;
//XX   spc1.set_label( "CO" );
//XX   spc1.set_concentration( 1.0 );
//XX   spc1.set_radius( 0.12 );
//XX   spc1.set_rate( 0.2 );
//XX   spc1.set_valency( -1.0 );
//XX   spc1.set_excess_potential( 0.123 );
//XX   spc1.set_type( particle::specie::FLEXIBLE );
//XX   spc1.append_position( particle::coordinate( 0.0, 0.0, 2.0 ), particle::centroid( 3.0, 0.0, 0.0, 2.0 ) );
//XX   pman->add_specie( spc1 );
//XX }
//XX {
//XX   particle::specie spc1;
//XX   spc1.set_label( "OX" );
//XX   spc1.set_concentration( 1.0 );
//XX   spc1.set_radius( 0.12 );
//XX   spc1.set_rate( 0.2 );
//XX   spc1.set_valency( -1.0 );
//XX   spc1.set_excess_potential( 0.123 );
//XX   spc1.set_type( particle::specie::CHANNEL_ONLY );
//XX   spc1.append_position( particle::coordinate( 2.0, 0.0, 2.0 ) );
//XX   pman->add_specie( spc1 );
//XX }
//XX {
//XX   particle::specie spc1;
//XX   spc1.set_label( "Na" );
//XX   spc1.set_concentration( 1.0 );
//XX   spc1.set_radius( 0.12 );
//XX   spc1.set_rate( 0.2 );
//XX   spc1.set_valency( 1.0 );
//XX   spc1.set_excess_potential( 0.123 );
//XX   spc1.set_type( particle::specie::SOLUTE );
//XX   spc1.append_position( particle::coordinate( 0.0, 0.0, 0.0 ) );
//XX   spc1.append_position( particle::coordinate( 2.0, 0.0, 0.0 ) );
//XX   pman->add_specie( spc1 );
//XX }
//XX {
//XX   particle::specie spc1;
//XX   spc1.set_label( "Cl" );
//XX   spc1.set_concentration( 1.0 );
//XX   spc1.set_radius( 0.2 );
//XX   spc1.set_rate( 0.2 );
//XX   spc1.set_valency( -1.0 );
//XX   spc1.set_excess_potential( 0.3123 );
//XX   spc1.set_type( particle::specie::SOLUTE );
//XX   spc1.append_position( particle::coordinate( 0.0, 2.0, 0.0 ) );
//XX   pman->add_specie( spc1 );
//XX }
//XX pman->add_predefined_particles();
return pman;
!!!1821360.cpp!!!	mockup_geometry_manager() : geometry_manager
boost::shared_ptr< geometry::geometry_manager > gman;
//XX boost::shared_ptr< geometry::base_region > regn( new geometry::periodic_cube_region( "cell", 5.0 ) );
//XX boost::shared_ptr< geometry::geometry_manager > gman( new geometry::geometry_manager( regn ) );
//XX {
//XX   boost::shared_ptr< geometry::base_region > bulk( new geometry::cube_region( "bulk", 4.0, particle::coordinate( 0.0, 0.0, 0.0 ), true ) );
//XX   gman->add_region( bulk );
//XX }
return gman;
!!!1999920.cpp!!!	canon_input() : string
const std::string result( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n\nrun\ntype standard\noutputdir \"\%1$04d\"\nend\n\nevaluator\ntype coulomb\nend\n\nsampler\ntype specie-count\nend\n\nsampler\ntype metropolis\nend\n\nsampler\ntype widom\niwidom 10\nend\n\nregion\ntype cube\nname centre\nwidth 5\norigin 2.5 2.5 2.5\nend\n\nspecie\nname Na\nz 1\nd 1.01\nctarg 0.1\nend\n\nspecie\nname Cl\nz -1\nd 1.78\nctarg 0.1\nend\n\ntrial\nrate 0.5\ntype move\ndelta 1.0\nend\n\ntrial\nrate 0.5\ntype jump\nend\n\n" );
return result;
!!!1821872.cpp!!!	base_storage_manager_test() : void
//Tested methods
//  * checkpoint_name
//  * default_checkpoint_name
//  * default_filename_base
//  * default_output_dir_fmt
//  * default_output_name
//  * default_run_number
//  * filename_base
//  * output_dir_fmt
//  * output_name
//  * run_number
//  * serialize
//  * set_checkpoint_name
//  * set_filename_base
//  * set_output_dir_fmt
//  * set_output_name
//  * set_run_number
//Not tested (undefined in simple_storage_manager)
//  checkpoint_path
//  compute_output_dir
//  find_input_filename
//  output_path
//  open_output
//  open_input
//  open_checkpoint
//  open_log
//  get_log (undefined because open_log is undefined.)
{
  // Test for virtual noncopy pattern
  BOOST_CHECK( std::is_default_constructible< platform_test::simple_storage_manager >::type {} );
  BOOST_CHECK( not std::is_copy_constructible< platform_test::simple_storage_manager >::type {} );
  BOOST_CHECK( not std::is_move_constructible< platform_test::simple_storage_manager >::type {} );
  BOOST_CHECK( not( std::is_assignable< platform_test::simple_storage_manager, platform_test::simple_storage_manager >::type {} ) );
  BOOST_CHECK( std::has_virtual_destructor< platform_test::simple_storage_manager >::type {} );
}
// static methods
const std::string cname( "checkpoint.arc" );
const std::string test_cname( "check.dat" );
const std::string fbase( "input.\%1$03d.inp" );
const std::string test_fbase( "channel.\%1$04d.inp" );
const std::string dbase( "\%1$03d" );
const std::string test_dbase( "\%1$04d.dat" );
const std::string oname( "output.dbm" );
const std::string test_oname( "result.zip" );
const std::size_t runnum( 1ul );
const std::size_t test_runnum( 5999ul );
{
  BOOST_CHECK_EQUAL( platform::storage_manager::default_checkpoint_name(), cname );
  BOOST_CHECK_EQUAL( platform::storage_manager::default_filename_base(), fbase );
  BOOST_CHECK_EQUAL( platform::storage_manager::default_output_dir_fmt(), dbase );
  BOOST_CHECK_EQUAL( platform::storage_manager::default_output_name(), oname );
  BOOST_CHECK_EQUAL( platform::storage_manager::default_run_number(), runnum );
}
std::stringstream store;
{
  // Public ctor 1
  boost::shared_ptr< platform_test::simple_storage_manager > var1( new platform_test::simple_storage_manager );
  BOOST_CHECK_EQUAL( var1->checkpoint_name(), cname );
  // compute_output_dir gives empty string so path and name should be equal
  BOOST_CHECK_EQUAL( var1->checkpoint_path(), cname );
  BOOST_CHECK_EQUAL( var1->filename_base(), fbase );
  BOOST_CHECK_EQUAL( var1->output_dir_fmt(), dbase );
  BOOST_CHECK_EQUAL( var1->output_name(), oname );
  BOOST_CHECK( var1->get_value().empty() );
  // compute_output_dir gives empty string so path and name should be equal
  BOOST_CHECK_EQUAL( var1->output_path(), oname );
  BOOST_CHECK_EQUAL( var1->run_number(), runnum );

  BOOST_CHECK_NO_THROW( var1->set_checkpoint_name( test_cname ) );
  BOOST_CHECK_NO_THROW( var1->set_filename_base( test_fbase ) );
  BOOST_CHECK_NO_THROW( var1->set_output_dir_fmt( test_dbase ) );
  BOOST_CHECK_NO_THROW( var1->set_output_name( test_oname ) );
  BOOST_CHECK_NO_THROW( var1->set_run_number( test_runnum ) );

  BOOST_CHECK_EQUAL( var1->checkpoint_name(), test_cname );
  BOOST_CHECK_EQUAL( var1->checkpoint_path(), test_cname );
  BOOST_CHECK_EQUAL( var1->filename_base(), test_fbase );
  BOOST_CHECK_EQUAL( var1->output_dir_fmt(), test_dbase );
  BOOST_CHECK_EQUAL( var1->output_name(), test_oname );
  BOOST_CHECK_EQUAL( var1->output_path(), test_oname );
  BOOST_CHECK_EQUAL( var1->run_number(), test_runnum );

  // write class instance to archive
  boost::archive::text_oarchive oa( store );
  oa << var1;
}
{
  boost::shared_ptr< platform_test::simple_storage_manager > var2;
  // read class instance from archive
  boost::archive::text_iarchive ia( store );
  ia >> var2;
  BOOST_CHECK_EQUAL( var2->checkpoint_name(), test_cname );
  BOOST_CHECK_EQUAL( var2->filename_base(), test_fbase );
  BOOST_CHECK_EQUAL( var2->output_dir_fmt(), test_dbase );
  BOOST_CHECK_EQUAL( var2->output_name(), test_oname );
  BOOST_CHECK_EQUAL( var2->run_number(), test_runnum );
  BOOST_CHECK( var2->get_value().empty() );

  // test open/get/set log methods
  {
    var2->get_log() << "TEST1";
    BOOST_CHECK_EQUAL( "TEST1", var2->thelog->str() );
  }
  {
    boost::shared_ptr< std::stringstream > ss( new std::stringstream );
    var2->set_log( ss );
    var2->get_log() << "TEST2";
    BOOST_CHECK_EQUAL( "TEST2", ss->str() );
  }
}

!!!1855152.cpp!!!	serial_storage_lifetime_test() : void
{
  // Test for virtual noncopy pattern
  BOOST_CHECK( std::is_default_constructible< platform::serial_storage >::type {} );
  BOOST_CHECK( not std::is_copy_constructible< platform::serial_storage >::type {} );
  BOOST_CHECK( not std::is_move_constructible< platform::serial_storage >::type {} );
  BOOST_CHECK( not( std::is_assignable< platform::serial_storage, platform::serial_storage >::type {} ) );
  BOOST_CHECK( std::has_virtual_destructor< platform::serial_storage >::type {} );
}
// static methods
const std::string cname( "checkpoint.arc" );
const std::string fbase( "input.\%1$03d.inp" );
const std::string dbase( "\%1$03d" );
const std::string oname( "output.dbm" );
const std::size_t runnum( 1ul );
{
  BOOST_CHECK_EQUAL( platform::storage_manager::default_checkpoint_name(), cname );
  BOOST_CHECK_EQUAL( platform::storage_manager::default_filename_base(), fbase );
  BOOST_CHECK_EQUAL( platform::storage_manager::default_output_dir_fmt(), dbase );
  BOOST_CHECK_EQUAL( platform::storage_manager::default_output_name(), oname );
  BOOST_CHECK_EQUAL( platform::storage_manager::default_run_number(), runnum );
  BOOST_CHECK_EQUAL( platform::serial_storage::type_label_(), "standard" );
}
{
  // Public ctor that inherits from base storage_manager
  boost::shared_ptr< platform::serial_storage > var1( new platform::serial_storage );
  BOOST_CHECK_EQUAL( var1->checkpoint_name(), cname );
  BOOST_CHECK_EQUAL( var1->filename_base(), fbase );
  BOOST_CHECK_EQUAL( var1->output_dir_fmt(), dbase );
  BOOST_CHECK_EQUAL( var1->output_name(), oname );
  BOOST_CHECK_EQUAL( var1->run_number(), runnum );
}

!!!1855024.cpp!!!	serial_storage_method_test() : void
//Tested methods
//  * checkpoint_name
//  * default_checkpoint_name
//  * default_filename_base
//  * default_output_dir_fmt
//  * default_output_name
//  * default_run_number
//  * filename_base
//  * get_label
//  * output_dir_fmt
//  * output_name
//  * run_number
//  * serialize
//  * set_checkpoint_name
//  * set_filename_base
//  * set_output_dir_fmt
//  * set_output_name
//  * set_run_number
//Not tested (undefined in simple_storage_manager)
//  * checkpoint_path
//  * compute_output_dir
//  * find_input_filename
//  * output_path
//  * open_output
//  * open_input
//  * open_checkpoint
//  ** open_log
//  ** get_log (undefined because open_log is undefined.)

const std::string cname( "checkpoint.arc" );
const std::string test_cname( "check.dat" );
const std::string fbase( "input.\%1$03d.inp" );
const std::string test_fbase( "channel.\%1$04d.inp" );
const std::string dbase( "\%1$03d" );
const std::string outpath( "001" );
const std::string outdir( "001/" );
const std::string test_dbase( "\%1$04d.dat" );
const std::string test_outpath( "5999.dat" );
const std::string test_outdir( "5999.dat/" );
const std::string oname( "output.dbm" );
const std::string test_oname( "result.zip" );
const std::size_t runnum( 1ul );
const std::size_t test_runnum( 5999ul );

std::stringstream store;
{
  // Public ctor 1
  boost::shared_ptr< platform::serial_storage > var1( new platform::serial_storage );
  BOOST_CHECK_EQUAL( var1->get_label(), "standard" );
  BOOST_CHECK_EQUAL( var1->checkpoint_name(), cname );
  BOOST_CHECK_EQUAL( var1->filename_base(), fbase );
  BOOST_CHECK_EQUAL( var1->output_dir_fmt(), dbase );
  BOOST_CHECK_EQUAL( var1->output_name(), oname );
  BOOST_CHECK_EQUAL( var1->run_number(), runnum );
  // compute_output_dir gives "001"
  BOOST_CHECK_EQUAL( var1->compute_output_dir(), outpath );
  BOOST_CHECK_EQUAL( var1->checkpoint_path(), outdir + cname );
  BOOST_CHECK_EQUAL( var1->output_path(), outdir + oname );

  var1->set_checkpoint_name( test_cname );
  var1->set_filename_base( test_fbase );
  var1->set_output_dir_fmt( test_dbase );
  var1->set_output_name( test_oname );
  var1->set_run_number( test_runnum );

  BOOST_CHECK_EQUAL( var1->checkpoint_name(), test_cname );
  BOOST_CHECK_EQUAL( var1->filename_base(), test_fbase );
  BOOST_CHECK_EQUAL( var1->output_dir_fmt(), test_dbase );
  BOOST_CHECK_EQUAL( var1->output_name(), test_oname );
  BOOST_CHECK_EQUAL( var1->run_number(), test_runnum );
  // compute_output_dir gives "5999.dat"
  BOOST_CHECK_EQUAL( var1->compute_output_dir(), test_outpath );
  BOOST_CHECK_EQUAL( var1->checkpoint_path(), test_outdir + test_cname );
  BOOST_CHECK_EQUAL( var1->output_path(), test_outdir + test_oname );

  // write class instance to archive
  boost::archive::text_oarchive oa( store );
  oa << var1;
}
{
  boost::shared_ptr< platform::serial_storage > var2;
  // read class instance from archive
  boost::archive::text_iarchive ia( store );
  ia >> var2;
  BOOST_CHECK_EQUAL( var2->checkpoint_name(), test_cname );
  BOOST_CHECK_EQUAL( var2->filename_base(), test_fbase );
  BOOST_CHECK_EQUAL( var2->output_dir_fmt(), test_dbase );
  BOOST_CHECK_EQUAL( var2->output_name(), test_oname );
  BOOST_CHECK_EQUAL( var2->run_number(), test_runnum );
  BOOST_CHECK_EQUAL( var2->compute_output_dir(), test_outpath );
  BOOST_CHECK_EQUAL( var2->checkpoint_path(), test_outdir + test_cname );
  BOOST_CHECK_EQUAL( var2->output_path(), test_outdir + test_oname );
  try
  {
    std::string fn;
    fn = var2->find_input_filename();
    BOOST_ERROR( "Unexpected \"var2->find_input_filename()\" found file named " + fn );
  }
  catch( std::runtime_error const& err )
  {
    const std::string msg( err.what() );
    //std::cout << msg << "\n";
    BOOST_CHECK( msg.find( "Unable to find input file(s) named: channel.5999.inp channel.inp" ) < msg.size() );
  }
  catch( std::exception const& err )
  {
    BOOST_ERROR( std::string( "exception thrown by \"var2->find_input_filename()\" was not expected type: " ) + err.what() );
  }
  {
    auto ipath( boost::filesystem::unique_path( "input%%%%%.inp" ) );
    const std::string spath( ipath.native() );

    // USE PATH AS INPUT FILE NAME
    //////////////////////////////
    BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
    var2->set_filename_base( spath );
    BOOST_CHECK_EQUAL( var2->filename_base(), spath );
    // Try to find input after generating file
    try
    {
      {
        std::ofstream tmp( spath );
        tmp << "\n";
      }
      BOOST_CHECK_EQUAL( var2->find_input_filename(), spath );
    }
    catch( std::exception const& err )
    {
      BOOST_ERROR( std::string( "exception thrown by \"var2->find_input_filename()\" was not expected:" ) + err.what() );
    }
    // Try to open input
    try
    {
      auto reader_ptr = var2->open_input();
      BOOST_CHECK_EQUAL( reader_ptr->current_filename(), boost::filesystem::absolute( spath ).native() );
      BOOST_CHECK_EQUAL( reader_ptr->current_line_number(), 0 );
      BOOST_CHECK_EQUAL( reader_ptr->next(), false );
    }
    catch( std::exception const& err )
    {
      BOOST_ERROR( std::string( "exception thrown by \"var2->open_input()\" was not expected:" ) + err.what() );
    }
    if( boost::filesystem::exists( ipath ) )
    {
      boost::filesystem::remove( ipath );
    }
    var2->set_filename_base( test_fbase );
    // USE PATH AS OUTPUT DIR NAME
    //////////////////////////////
    BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
    var2->set_output_dir_fmt( spath );
    BOOST_CHECK_EQUAL( var2->output_dir_fmt(), spath );
    const std::string gen_cpath = var2->checkpoint_path();
    BOOST_CHECK_EQUAL( gen_cpath, spath + "/" + test_cname );
    const std::string gen_opath = var2->output_path();
    BOOST_CHECK_EQUAL( gen_opath, spath + "/" + test_oname );
    // Path should not be created until we open a file.
    BOOST_CHECK( not boost::filesystem::exists( ipath ) );
    try
    {
      {
        auto sink_ptr = var2->open_output();
        BOOST_CHECK( boost::filesystem::exists( ipath ) );
        BOOST_CHECK_EQUAL( sink_ptr->filename(), gen_opath );
        // Put entry in sink so that file is generated
        // if lazy opening is used.
        sink_ptr->write( "entry1", "Some value" );
      }
      // check for file after sink is closed.
      BOOST_CHECK( boost::filesystem::exists( gen_opath ) );
    }
    catch( std::exception const& err )
    {
      BOOST_ERROR( std::string( "exception thrown by \"var2->open_output()\" was not expected:" ) + err.what() );
    }
    if( boost::filesystem::exists( ipath ) )
    {
      boost::filesystem::remove_all( ipath );
    }
    try
    {
      {
        auto os_ptr = var2->open_checkpoint();
        BOOST_CHECK( boost::filesystem::exists( ipath ) );
        BOOST_CHECK( os_ptr.get() != nullptr );
        // Put text in checkpoint so that file is generated
        // if lazy opening is used.
        *( os_ptr ) << "Write some text\n";
      }
      // check for file after checkpoint is closed.
      BOOST_CHECK( boost::filesystem::exists( gen_cpath ) );
    }
    catch( std::exception const& err )
    {
      BOOST_ERROR( std::string( "exception thrown by \"var2->open_checkpoint()\" was not expected:" ) + err.what() );
    }
    if( boost::filesystem::exists( ipath ) )
    {
      boost::filesystem::remove_all( ipath );
    }
  }
  {
    boost::shared_ptr< std::stringstream > ss( new std::stringstream );
    var2->set_log( ss );
    var2->get_log() << "TEST";
    BOOST_CHECK_EQUAL( "TEST", ss->str() );
  }
  var2->get_log() << "TEST2";
  BOOST_CHECK_EQUAL( "TESTTEST2", dynamic_cast< std::stringstream& >(var2->get_log()).str() );
}

!!!1861808.cpp!!!	serial_storage_input_filename_noexist() : void
boost::shared_ptr< platform::serial_storage > sman_ptr( new platform::serial_storage );
{
  auto ipath( boost::filesystem::unique_path( "input%%%%%.inp" ) );
  const std::string spath( ipath.native() );

  // USE PATH AS INPUT FILE NAME
  //////////////////////////////
  BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
  sman_ptr->set_filename_base( spath );
  BOOST_CHECK_EQUAL( sman_ptr->filename_base(), spath );
  // Try to find input before generating file
  try
  {
    std::string fn;
    fn = sman_ptr->find_input_filename();
    BOOST_ERROR( "Unexpected \"sman_ptr->find_input_filename()\" found file named " + fn );
  }
  catch( std::runtime_error const& err )
  {
    const std::string msg( err.what() );
    //std::cout << msg << "\n";
    BOOST_CHECK( msg.find( "Unable to find input file(s) named: " + spath ) < msg.size() );
  }
  catch( std::exception const& err )
  {
    BOOST_ERROR( std::string( "exception thrown by \"sman_ptr->find_input_filename()\" was not expected type: " ) + err.what() );
  }
}
!!!1861936.cpp!!!	serial_storage_input_filename_is_dir() : void
boost::shared_ptr< platform::serial_storage > sman_ptr( new platform::serial_storage );
{
  auto ipath( boost::filesystem::unique_path( "input%%%%%.inp" ) );
  const std::string spath( ipath.native() );

  // USE PATH AS INPUT FILE NAME
  //////////////////////////////
  BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
  sman_ptr->set_filename_base( spath );
  BOOST_CHECK_EQUAL( sman_ptr->filename_base(), spath );
  boost::filesystem::create_directories( ipath );
  try
  {
    std::string fn;
    fn = sman_ptr->find_input_filename();
    BOOST_ERROR( "Unexpected \"sman_ptr->find_input_filename()\" found file named " + fn );
  }
  catch( std::runtime_error const& err )
  {
    const std::string msg( err.what() );
    //std::cout << msg << "\n";
    BOOST_CHECK( msg.find( "Unable to find input file(s) named: " + spath ) < msg.size() );
  }
  catch( std::exception const& err )
  {
    BOOST_ERROR( std::string( "exception thrown by \"sman_ptr->find_input_filename()\" was not expected type: " ) + err.what() );
  }
  if( boost::filesystem::exists( ipath ) )
  {
    boost::filesystem::remove_all( ipath );
  }
}

!!!1862064.cpp!!!	serial_storage_input_filename_is_not_accessible() : void
boost::shared_ptr< platform::serial_storage > sman_ptr( new platform::serial_storage );
{
  auto ipath( boost::filesystem::unique_path( "input%%%%%.inp" ) );
  const std::string spath( ipath.native() );

  // USE PATH AS INPUT FILE NAME
  //////////////////////////////
  BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
  sman_ptr->set_filename_base( spath );
  BOOST_CHECK_EQUAL( sman_ptr->filename_base(), spath );
  // Try to find input after generating inaccessible file
  try
  {
    {
      std::ofstream tmp( spath );
      tmp << "\n";
    }
    boost::filesystem::permissions( spath, boost::filesystem::no_perms );
    BOOST_CHECK_EQUAL( sman_ptr->find_input_filename(), spath );
    BOOST_ERROR( "Unexpected \"sman_ptr->find_input_filename()\" found file named " + spath );
  }
  catch( std::runtime_error const& err )
  {
    const std::string msg( err.what() );
    //std::cout << msg << "\n";
    BOOST_CHECK( msg.find( "Unable to find input file(s) named: " + spath ) < msg.size() );
  }
  catch( std::exception const& err )
  {
    BOOST_ERROR( std::string( "exception thrown by \"sman_ptr->find_input_filename()\" was not expected:" ) + err.what() );
  }
  if( boost::filesystem::exists( ipath ) )
  {
    boost::filesystem::remove( ipath );
  }
}
!!!1862192.cpp!!!	serial_storage_input_filename_is_not_readable() : void
boost::shared_ptr< platform::serial_storage > sman_ptr( new platform::serial_storage );
{
  auto ipath( boost::filesystem::unique_path( "input%%%%%.inp" ) );
  const std::string spath( ipath.native() );

  // USE PATH AS INPUT FILE NAME
  //////////////////////////////
  BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
  sman_ptr->set_filename_base( spath );
  BOOST_CHECK_EQUAL( sman_ptr->filename_base(), spath );
  // Try to find input after generating inaccessible file
  try
  {
    {
      std::ofstream tmp( spath );
      tmp << "\n";
    }
    boost::filesystem::permissions( spath, boost::filesystem::owner_write );
    BOOST_CHECK_EQUAL( sman_ptr->find_input_filename(), spath );
    BOOST_ERROR( "Unexpected \"sman_ptr->find_input_filename()\" found file named " + spath );
  }
  catch( std::runtime_error const& err )
  {
    const std::string msg( err.what() );
    // std::cout << msg << "\n";
    BOOST_CHECK( msg.find( "Unable to find input file(s) named: " + spath ) < msg.size() );
  }
  catch( std::exception const& err )
  {
    BOOST_ERROR( std::string( "exception thrown by \"sman_ptr->find_input_filename()\" was not expected:" ) + err.what() );
  }
  if( boost::filesystem::exists( ipath ) )
  {
    boost::filesystem::remove( ipath );
  }
}
!!!1863600.cpp!!!	serial_storage_open_output_output_directory_is_not_directory() : void
boost::shared_ptr< platform::serial_storage > sman_ptr( new platform::serial_storage );
{
  auto ipath( boost::filesystem::unique_path( "output%%%%%" ) );
  const std::string spath( ipath.native() );

  // USE PATH AS OUTPUT DIR NAME
  //////////////////////////////
  BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
  sman_ptr->set_output_dir_fmt( spath );
  BOOST_CHECK_EQUAL( sman_ptr->output_dir_fmt(), spath );
  // Try to get directory after generating file with same name
  try
  {
    {
      std::ofstream tmp( spath );
      tmp << "\n";
    }
    auto os_str = sman_ptr->open_output();
    BOOST_REQUIRE( os_str );
    BOOST_ERROR( "Unexpected \"sman_ptr->open_output()\" found file named " + spath );
  }
  catch( std::runtime_error const& err )
  {
    const std::string msg( err.what() );
    // std::cout << msg << "\n";
    BOOST_CHECK( msg.find( "Filesystem object at target output directory path [" + spath + "] is not a directory" ) < msg.size() );
  }
  catch( std::exception const& err )
  {
    BOOST_ERROR( std::string( "exception thrown by \"sman_ptr->open_output()\" was not expected:" ) + err.what() );
  }
  if( boost::filesystem::exists( ipath ) )
  {
    boost::filesystem::remove( ipath );
  }
}
!!!1863472.cpp!!!	serial_storage_open_output_output_directory_is_not_accessible() : void
boost::shared_ptr< platform::serial_storage > sman_ptr( new platform::serial_storage );
{
  auto ipath( boost::filesystem::unique_path( "output%%%%%" ) );
  const std::string spath( ipath.native() );

  // USE PATH AS OUTPUT DIR NAME
  //////////////////////////////
  BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
  sman_ptr->set_output_dir_fmt( spath );
  BOOST_CHECK_EQUAL( sman_ptr->output_dir_fmt(), spath );
  // Try to get directory after generating file with same name
  try
  {
    boost::filesystem::create_directories( ipath );
    boost::filesystem::permissions( ipath, boost::filesystem::no_perms );
    auto os_str = sman_ptr->open_output();
    BOOST_REQUIRE( os_str );
    BOOST_ERROR( "Unexpected \"sman_ptr->open_output()\" found file named " + spath );
  }
  catch( std::runtime_error const& err )
  {
    const std::string msg( err.what() );
    // std::cout << msg << "\n";
    BOOST_CHECK( msg.find( "Problem openning output file " + spath + "/" + sman_ptr->output_name() ) < msg.size() );
  }
  catch( std::exception const& err )
  {
    BOOST_ERROR( std::string( "exception thrown by \"sman_ptr->open_output()\" was not expected:" ) + err.what() );
  }
  if( boost::filesystem::exists( ipath ) )
  {
    boost::filesystem::remove( ipath );
  }
}
!!!1863344.cpp!!!	serial_storage_open_output_output_directory_is_0W0() : void
boost::shared_ptr< platform::serial_storage > sman_ptr( new platform::serial_storage );
{
  auto ipath( boost::filesystem::unique_path( "output%%%%%" ) );
  const std::string spath( ipath.native() );

  // USE PATH AS OUTPUT DIR NAME
  //////////////////////////////
  BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
  sman_ptr->set_output_dir_fmt( spath );
  BOOST_CHECK_EQUAL( sman_ptr->output_dir_fmt(), spath );
  // Try to get directory after generating file with same name
  try
  {
    boost::filesystem::create_directories( ipath );
    boost::filesystem::permissions( ipath, boost::filesystem::owner_write );
    auto os_str = sman_ptr->open_output();
    BOOST_REQUIRE( os_str );
    BOOST_ERROR( "Unexpected \"sman_ptr->open_output()\" found file named " + spath );
  }
  catch( std::runtime_error const& err )
  {
    const std::string msg( err.what() );
    // std::cout << msg << "\n";
    BOOST_CHECK( msg.find( "Problem openning output file " + spath + "/" + sman_ptr->output_name() ) < msg.size() );
  }
  catch( std::exception const& err )
  {
    BOOST_ERROR( std::string( "exception thrown by \"sman_ptr->open_output()\" was not expected:" ) + err.what() );
  }
  if( boost::filesystem::exists( ipath ) )
  {
    boost::filesystem::remove( ipath );
  }
}
!!!1863216.cpp!!!	serial_storage_open_output_output_directory_is_RW0() : void
boost::shared_ptr< platform::serial_storage > sman_ptr( new platform::serial_storage );
{
  auto ipath( boost::filesystem::unique_path( "output%%%%%" ) );
  const std::string spath( ipath.native() );

  // USE PATH AS OUTPUT DIR NAME
  //////////////////////////////
  BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
  sman_ptr->set_output_dir_fmt( spath );
  BOOST_CHECK_EQUAL( sman_ptr->output_dir_fmt(), spath );
  // Try to get directory after generating file with same name
  try
  {
    boost::filesystem::create_directories( ipath );
    boost::filesystem::permissions( ipath, boost::filesystem::owner_write | boost::filesystem::owner_read );
    auto os_str = sman_ptr->open_output();
    BOOST_REQUIRE( os_str );
    BOOST_ERROR( "Unexpected \"sman_ptr->open_output()\" found file named " + spath );
  }
  catch( std::runtime_error const& err )
  {
    const std::string msg( err.what() );
    // std::cout << msg << "\n";
    BOOST_CHECK( msg.find( "Problem openning output file " + spath + "/" + sman_ptr->output_name() ) < msg.size() );
  }
  catch( std::exception const& err )
  {
    BOOST_ERROR( std::string( "exception thrown by \"sman_ptr->open_output()\" was not expected:" ) + err.what() );
  }
  if( boost::filesystem::exists( ipath ) )
  {
    boost::filesystem::remove( ipath );
  }
}
!!!1863088.cpp!!!	serial_storage_open_output_output_directory_is_0WX() : void
boost::shared_ptr< platform::serial_storage > sman_ptr( new platform::serial_storage );
{
  auto ipath( boost::filesystem::unique_path( "output%%%%%" ) );
  const std::string spath( ipath.native() );

  // USE PATH AS OUTPUT DIR NAME
  //////////////////////////////
  BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
  sman_ptr->set_output_dir_fmt( spath );
  BOOST_CHECK_EQUAL( sman_ptr->output_dir_fmt(), spath );
  // Try to get directory after generating file with same name
  try
  {
    boost::filesystem::create_directories( ipath );
    boost::filesystem::permissions( ipath, boost::filesystem::owner_write | boost::filesystem::owner_exe );
    auto os_str = sman_ptr->open_output();
    BOOST_REQUIRE( os_str );
  }
  catch( std::exception const& err )
  {
    BOOST_ERROR( std::string( "exception thrown by \"sman_ptr->open_output()\" was not expected:" ) + err.what() );
  }
  if( boost::filesystem::exists( ipath ) )
  {
    boost::filesystem::permissions( ipath, boost::filesystem::owner_read | boost::filesystem::owner_write | boost::filesystem::owner_exe );
    boost::filesystem::remove_all( ipath );
  }
}
!!!1862960.cpp!!!	serial_storage_open_output_output_directory_is_R0X() : void
boost::shared_ptr< platform::serial_storage > sman_ptr( new platform::serial_storage );
{
  auto ipath( boost::filesystem::unique_path( "output%%%%%" ) );
  const std::string spath( ipath.native() );

  // USE PATH AS OUTPUT DIR NAME
  //////////////////////////////
  BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
  sman_ptr->set_output_dir_fmt( spath );
  BOOST_CHECK_EQUAL( sman_ptr->output_dir_fmt(), spath );
  // Try to get directory after generating file with same name
  try
  {
    boost::filesystem::create_directories( ipath );
    boost::filesystem::permissions( ipath, boost::filesystem::owner_exe | boost::filesystem::owner_read );
    auto os_str = sman_ptr->open_output();
    BOOST_REQUIRE( os_str );
    BOOST_ERROR( "Unexpected \"sman_ptr->open_output()\" found file named " + spath );
  }
  catch( std::runtime_error const& err )
  {
    const std::string msg( err.what() );
    // std::cout << msg << "\n";
    BOOST_CHECK( msg.find( "Problem openning output file " + spath + "/" + sman_ptr->output_name() ) < msg.size() );
  }
  catch( std::exception const& err )
  {
    BOOST_ERROR( std::string( "exception thrown by \"sman_ptr->open_output()\" was not expected:" ) + err.what() );
  }
  if( boost::filesystem::exists( ipath ) )
  {
    boost::filesystem::remove( ipath );
  }
}
!!!1862320.cpp!!!	serial_storage_open_checkpoint_output_directory_is_not_directory() : void
boost::shared_ptr< platform::serial_storage > sman_ptr( new platform::serial_storage );
{
  auto ipath( boost::filesystem::unique_path( "output%%%%%" ) );
  const std::string spath( ipath.native() );

  // USE PATH AS OUTPUT DIR NAME
  //////////////////////////////
  BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
  sman_ptr->set_output_dir_fmt( spath );
  BOOST_CHECK_EQUAL( sman_ptr->output_dir_fmt(), spath );
  // Try to get directory after generating file with same name
  try
  {
    {
      std::ofstream tmp( spath );
      tmp << "\n";
    }
    auto os_str = sman_ptr->open_checkpoint();
    BOOST_REQUIRE( *(os_str) );
    BOOST_ERROR( "Unexpected \"sman_ptr->open_checkpoint()\" found file named " + spath );
  }
  catch( std::runtime_error const& err )
  {
    const std::string msg( err.what() );
    // std::cout << msg << "\n";
    BOOST_CHECK( msg.find( "Filesystem object at target output directory path [" + spath + "] is not a directory" ) < msg.size() );
  }
  catch( std::exception const& err )
  {
    BOOST_ERROR( std::string( "exception thrown by \"sman_ptr->open_checkpoint()\" was not expected:" ) + err.what() );
  }
  if( boost::filesystem::exists( ipath ) )
  {
    boost::filesystem::remove( ipath );
  }
}
!!!1862448.cpp!!!	serial_storage_open_checkpoint_output_directory_is_not_accessible() : void
boost::shared_ptr< platform::serial_storage > sman_ptr( new platform::serial_storage );
{
  auto ipath( boost::filesystem::unique_path( "output%%%%%" ) );
  const std::string spath( ipath.native() );

  // USE PATH AS OUTPUT DIR NAME
  //////////////////////////////
  BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
  sman_ptr->set_output_dir_fmt( spath );
  BOOST_CHECK_EQUAL( sman_ptr->output_dir_fmt(), spath );
  // Try to get directory after generating file with same name
  try
  {
    boost::filesystem::create_directories( ipath );
    boost::filesystem::permissions( ipath, boost::filesystem::no_perms );
    auto os_str = sman_ptr->open_checkpoint();
    BOOST_REQUIRE( *(os_str) );
    BOOST_ERROR( "Unexpected \"sman_ptr->open_checkpoint()\" found file named " + spath );
  }
  catch( std::runtime_error const& err )
  {
    const std::string msg( err.what() );
    // std::cout << msg << "\n";
    BOOST_CHECK( msg.find( "Problem openning checkpoint file " + spath + "/" + sman_ptr->checkpoint_name() ) < msg.size() );
  }
  catch( std::exception const& err )
  {
    BOOST_ERROR( std::string( "exception thrown by \"sman_ptr->open_checkpoint()\" was not expected:" ) + err.what() );
  }
  if( boost::filesystem::exists( ipath ) )
  {
    boost::filesystem::remove( ipath );
  }
}
!!!1862576.cpp!!!	serial_storage_open_checkpoint_output_directory_is_0W0() : void
boost::shared_ptr< platform::serial_storage > sman_ptr( new platform::serial_storage );
{
  auto ipath( boost::filesystem::unique_path( "output%%%%%" ) );
  const std::string spath( ipath.native() );

  // USE PATH AS OUTPUT DIR NAME
  //////////////////////////////
  BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
  sman_ptr->set_output_dir_fmt( spath );
  BOOST_CHECK_EQUAL( sman_ptr->output_dir_fmt(), spath );
  // Try to get directory after generating file with same name
  try
  {
    boost::filesystem::create_directories( ipath );
    boost::filesystem::permissions( ipath, boost::filesystem::owner_write );
    auto os_str = sman_ptr->open_checkpoint();
    BOOST_REQUIRE( *(os_str) );
    BOOST_ERROR( "Unexpected \"sman_ptr->open_checkpoint()\" found file named " + spath );
  }
  catch( std::runtime_error const& err )
  {
    const std::string msg( err.what() );
    // std::cout << msg << "\n";
    BOOST_CHECK( msg.find( "Problem openning checkpoint file " + spath + "/" + sman_ptr->checkpoint_name() ) < msg.size() );
  }
  catch( std::exception const& err )
  {
    BOOST_ERROR( std::string( "exception thrown by \"sman_ptr->open_checkpoint()\" was not expected:" ) + err.what() );
  }
  if( boost::filesystem::exists( ipath ) )
  {
    boost::filesystem::remove( ipath );
  }
}
!!!1862704.cpp!!!	serial_storage_open_checkpoint_output_directory_is_RW0() : void
boost::shared_ptr< platform::serial_storage > sman_ptr( new platform::serial_storage );
{
  auto ipath( boost::filesystem::unique_path( "output%%%%%" ) );
  const std::string spath( ipath.native() );

  // USE PATH AS OUTPUT DIR NAME
  //////////////////////////////
  BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
  sman_ptr->set_output_dir_fmt( spath );
  BOOST_CHECK_EQUAL( sman_ptr->output_dir_fmt(), spath );
  // Try to get directory after generating file with same name
  try
  {
    boost::filesystem::create_directories( ipath );
    boost::filesystem::permissions( ipath, boost::filesystem::owner_write | boost::filesystem::owner_read );
    auto os_str = sman_ptr->open_checkpoint();
    BOOST_REQUIRE( *(os_str) );
    BOOST_ERROR( "Unexpected \"sman_ptr->open_checkpoint()\" found file named " + spath );
  }
  catch( std::runtime_error const& err )
  {
    const std::string msg( err.what() );
    // std::cout << msg << "\n";
    BOOST_CHECK( msg.find( "Problem openning checkpoint file " + spath + "/" + sman_ptr->checkpoint_name() ) < msg.size() );
  }
  catch( std::exception const& err )
  {
    BOOST_ERROR( std::string( "exception thrown by \"sman_ptr->open_checkpoint()\" was not expected:" ) + err.what() );
  }
  if( boost::filesystem::exists( ipath ) )
  {
    boost::filesystem::remove( ipath );
  }
}
!!!1862832.cpp!!!	serial_storage_open_checkpoint_output_directory_is_0WX() : void
boost::shared_ptr< platform::serial_storage > sman_ptr( new platform::serial_storage );
{
  auto ipath( boost::filesystem::unique_path( "output%%%%%" ) );
  const std::string spath( ipath.native() );

  // USE PATH AS OUTPUT DIR NAME
  //////////////////////////////
  BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
  sman_ptr->set_output_dir_fmt( spath );
  BOOST_CHECK_EQUAL( sman_ptr->output_dir_fmt(), spath );
  // Try to get directory after generating file with same name
  try
  {
    boost::filesystem::create_directories( ipath );
    boost::filesystem::permissions( ipath, boost::filesystem::owner_write | boost::filesystem::owner_exe );
    auto os_str = sman_ptr->open_checkpoint();
    BOOST_REQUIRE( *(os_str) );
  }
  catch( std::exception const& err )
  {
    BOOST_ERROR( std::string( "exception thrown by \"sman_ptr->open_checkpoint()\" was not expected:" ) + err.what() );
  }
  if( boost::filesystem::exists( ipath ) )
  {
    boost::filesystem::permissions( ipath, boost::filesystem::owner_read | boost::filesystem::owner_write | boost::filesystem::owner_exe );
    boost::filesystem::remove_all( ipath );
  }
}
!!!1823920.cpp!!!	serial_storage_open_checkpoint_output_directory_is_R0X() : void
boost::shared_ptr< platform::serial_storage > sman_ptr( new platform::serial_storage );
{
  auto ipath( boost::filesystem::unique_path( "output%%%%%" ) );
  const std::string spath( ipath.native() );

  // USE PATH AS OUTPUT DIR NAME
  //////////////////////////////
  BOOST_REQUIRE( not boost::filesystem::exists( ipath ) );
  sman_ptr->set_output_dir_fmt( spath );
  BOOST_CHECK_EQUAL( sman_ptr->output_dir_fmt(), spath );
  // Try to get directory after generating file with same name
  try
  {
    boost::filesystem::create_directories( ipath );
    boost::filesystem::permissions( ipath, boost::filesystem::owner_exe | boost::filesystem::owner_read );
    auto os_str = sman_ptr->open_checkpoint();
    BOOST_REQUIRE( *(os_str) );
    BOOST_ERROR( "Unexpected \"sman_ptr->open_checkpoint()\" found file named " + spath );
  }
  catch( std::runtime_error const& err )
  {
    const std::string msg( err.what() );
    // std::cout << msg << "\n";
    BOOST_CHECK( msg.find( "Problem openning checkpoint file " + spath + "/" + sman_ptr->checkpoint_name() ) < msg.size() );
  }
  catch( std::exception const& err )
  {
    BOOST_ERROR( std::string( "exception thrown by \"sman_ptr->open_checkpoint()\" was not expected:" ) + err.what() );
  }
  if( boost::filesystem::exists( ipath ) )
  {
    boost::filesystem::remove( ipath );
  }
}
!!!1914928.cpp!!!	storage_meta_lifetime_test() : void
{
  // Test for virtual object pattern
  BOOST_CHECK( not std::is_default_constructible< platform::storage_meta >::type {} );
  BOOST_CHECK( not std::is_copy_constructible< platform::storage_meta >::type {} );
  BOOST_CHECK( not std::is_move_constructible< platform::storage_meta >::type {} );
  BOOST_CHECK( not ( std::is_assignable< platform::storage_meta, platform::storage_meta >::type {} ) );
  BOOST_CHECK( std::has_virtual_destructor< platform::storage_meta >::type {} );
}
{
  boost::shared_ptr< platform::storage_manager > tmp;
  boost::shared_ptr< platform::storage_meta > var( new platform::storage_meta( tmp ) );
  BOOST_CHECK_EQUAL( var->size(), 0ul );
  BOOST_CHECK_EQUAL( var->section_label(), "run" );
  BOOST_CHECK_EQUAL( var->multiple(), false );
  BOOST_CHECK_EQUAL( var->required(), false );
  BOOST_CHECK( var->empty() );
}
{
  BOOST_CHECK_EQUAL( platform::storage_meta::checkpoint_name_label(), "checkname" );
  BOOST_CHECK_EQUAL( platform::storage_meta::output_name_label(), "outname" );
  BOOST_CHECK_EQUAL( platform::storage_meta::storage_label(), "run" );
}
!!!1914800.cpp!!!	storage_meta_methods_test() : void
{
  boost::shared_ptr< platform::storage_manager > tmp;
  boost::shared_ptr< platform::storage_meta > var( new platform::storage_meta( tmp ) );
  BOOST_CHECK_EQUAL( var->size(), 0ul );
  BOOST_CHECK( not var->has_type( platform::serial_storage::type_label_() ) );
  platform::serial_storage::add_definition( *var );
  BOOST_CHECK( var->has_type( platform::serial_storage::type_label_() ) );
}
!!!1915056.cpp!!!	run_input_test() : void
core::input_delegater dg( 1 );
const std::string type_label( "test" );
const std::string cname( "checkpoint.arc" );
const std::string test_cname( "check.dat" );
const std::string fbase( "input.\%1$03d.inp" );
const std::string test_fbase( "channel.\%1$04d.inp" );
const std::string dbase( "\%1$03d" );
const std::string outpath( "001" );
const std::string outdir( "001/" );
const std::string test_dbase( "\%1$04d.dat" );
const std::string test_outpath( "5999.dat" );
const std::string test_outdir( "5999.dat/" );
const std::string oname( "output.dbm" );
const std::string test_oname( "result.zip" );
boost::shared_ptr< platform::platform_test::simple_storage_manager > fstype( new platform::platform_test::simple_storage_manager );
{
  boost::shared_ptr< platform::storage_meta > meta( new platform::storage_meta( fstype ) );
  std::string desc( "Test storage manager." );
  std::unique_ptr< storage_definition > defn( new storage_definition( type_label, desc ) );
  // no extra parameters
  meta->add_type( defn );

  BOOST_REQUIRE( meta->has_type( "test" ) );

  dg.add_input_delegate( meta );
}

BOOST_CHECK_EQUAL( fstype->checkpoint_name(), cname );
BOOST_CHECK_EQUAL( fstype->filename_base(), fbase );
BOOST_CHECK_EQUAL( fstype->output_dir_fmt(), dbase );
BOOST_CHECK_EQUAL( fstype->output_name(), oname );
 
// Should be valid input
/////////////////////////////
std::string canon_input( "run\ntype \"test\"\ninput \"channel.\%1$04d.inp\"\noutputdir \"\%1$04d.dat\"\ncheckname check.dat\noutname result.zip\nend\n\n" );
core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "Unexpected exception thrown by \"dg.read_input( reader )\": " ) + err.what() );
}

BOOST_CHECK_EQUAL( fstype->checkpoint_name(), test_cname );
BOOST_CHECK_EQUAL( fstype->filename_base(), fbase );
BOOST_CHECK_EQUAL( fstype->output_dir_fmt(), test_dbase );
BOOST_CHECK_EQUAL( fstype->output_name(), test_oname );
const std::string slog( fstype->thelog->str() );
BOOST_CHECK( slog.find( fbase ) < slog.size() );
BOOST_CHECK( slog.find( test_fbase ) < slog.size() );
//std::cout << "\n" << slog << "\n";
!!!1824048.cpp!!!	run_input_type_no_value_test() : void
core::input_delegater dg( 1 );
boost::shared_ptr< platform::storage_manager > fstype( new platform::platform_test::simple_storage_manager );
{
  boost::shared_ptr< platform::storage_meta > meta( new platform::storage_meta( fstype ) );
  std::string type_label( "test" );
  std::string desc( "Test storage manager." );
  std::unique_ptr< storage_definition > defn( new storage_definition( type_label, desc ) );
  // no extra parameters
  meta->add_type( defn );

  dg.add_input_delegate( meta );
}
// Type is hidden by comment character
/////////////////////////////
std::string canon_input( "run\ntype #\"standard\"\noutdir \"%1$07d\"\nend\n\n" );
core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Parameter \"type\" requires a value in a run section." ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}
!!!1824176.cpp!!!	run_input_type_bad_value_test() : void
core::input_delegater dg( 1 );
boost::shared_ptr< platform::storage_manager > fstype( new platform::platform_test::simple_storage_manager );
{
  boost::shared_ptr< platform::storage_meta > meta( new platform::storage_meta( fstype ) );
  std::string type_label( "test" );
  std::string desc( "Test storage manager." );
  std::unique_ptr< storage_definition > defn( new storage_definition( type_label, desc ) );
  // no extra parameters
  meta->add_type( defn );

  dg.add_input_delegate( meta );
}
// Type is hidden by comment character
/////////////////////////////
std::string canon_input( "run\ntype \"standard\"\ninput \"channel.\%1$04d.inp\"\noutputdir \"\%1$04d.dat\"\ncheckname check.dat\noutname result.zip\nend\n\n" );
core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Run \"type\" parameter value (standard) does not name a valid storage manager subtype for this application" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}
!!!1824304.cpp!!!	run_input_duplicate_type_test() : void
core::input_delegater dg( 1 );
boost::shared_ptr< platform::storage_manager > fstype( new platform::platform_test::simple_storage_manager );
{
  boost::shared_ptr< platform::storage_meta > meta( new platform::storage_meta( fstype ) );
  std::string type_label( "test" );
  std::string desc( "Test storage manager." );
  std::unique_ptr< storage_definition > defn( new storage_definition( type_label, desc ) );
  // no extra parameters
  meta->add_type( defn );

  dg.add_input_delegate( meta );
}
// Type is repeated
/////////////////////////////
std::string canon_input( "run\ntype \"test\"\ntype \"test\"\ninput \"channel.\%1$04d.inp\"\noutputdir \"\%1$04d.dat\"\ncheckname check.dat\noutname result.zip\nend\n\n" );
core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  // std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Run \"type\" parameter appears more than once" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}
!!!1824432.cpp!!!	run_input_checkname_no_value_test() : void
core::input_delegater dg( 1 );
boost::shared_ptr< platform::storage_manager > fstype( new platform::platform_test::simple_storage_manager );
{
  boost::shared_ptr< platform::storage_meta > meta( new platform::storage_meta( fstype ) );
  std::string type_label( "test" );
  std::string desc( "Test storage manager." );
  std::unique_ptr< storage_definition > defn( new storage_definition( type_label, desc ) );
  // no extra parameters
  meta->add_type( defn );

  dg.add_input_delegate( meta );
}
// Checkname is hidden by comment character
/////////////////////////////
std::string canon_input( "run\ntype \"test\"\ninput \"channel.\%1$04d.inp\"\noutputdir \"\%1$04d.dat\"\ncheckname #check.dat\noutname result.zip\nend\n\n" );
core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Parameter \"checkname\" requires a value" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}
!!!1824560.cpp!!!	run_input_outname_no_value_test() : void
core::input_delegater dg( 1 );
boost::shared_ptr< platform::storage_manager > fstype( new platform::platform_test::simple_storage_manager );
{
  boost::shared_ptr< platform::storage_meta > meta( new platform::storage_meta( fstype ) );
  std::string type_label( "test" );
  std::string desc( "Test storage manager." );
  std::unique_ptr< storage_definition > defn( new storage_definition( type_label, desc ) );
  // no extra parameters
  meta->add_type( defn );

  dg.add_input_delegate( meta );
}
// Type is hidden by comment character
/////////////////////////////
std::string canon_input( "run\ntype \"test\"\ninput \"channel.\%1$04d.inp\"\noutputdir \"\%1$04d.dat\"\ncheckname check.dat\noutname #result.zip\nend\n\n" );
core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Parameter \"outname\" requires a value" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1824688.cpp!!!	run_input_outdir_no_value_test() : void
core::input_delegater dg( 1 );
boost::shared_ptr< platform::storage_manager > fstype( new platform::platform_test::simple_storage_manager );
{
  boost::shared_ptr< platform::storage_meta > meta( new platform::storage_meta( fstype ) );
  std::string type_label( "test" );
  std::string desc( "Test storage manager." );
  std::unique_ptr< storage_definition > defn( new storage_definition( type_label, desc ) );
  // no extra parameters
  meta->add_type( defn );

  dg.add_input_delegate( meta );
}
// Type is hidden by comment character
/////////////////////////////
std::string canon_input( "run\ntype \"test\"\ninput \"channel.\%1$04d.inp\"\noutputdir #\"\%1$04d.dat\"\ncheckname check.dat\noutname result.zip\nend\n\n" );
core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  // std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Parameter \"outputdir\" requires a value" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}
!!!1824816.cpp!!!	run_input_inputpattern_no_value_test() : void
core::input_delegater dg( 1 );
boost::shared_ptr< platform::storage_manager > fstype( new platform::platform_test::simple_storage_manager );
{
  boost::shared_ptr< platform::storage_meta > meta( new platform::storage_meta( fstype ) );
  std::string type_label( "test" );
  std::string desc( "Test storage manager." );
  std::unique_ptr< storage_definition > defn( new storage_definition( type_label, desc ) );
  // no extra parameters
  meta->add_type( defn );

  dg.add_input_delegate( meta );
}
// Type is hidden by comment character
/////////////////////////////
std::string canon_input( "run\ntype \"test\"\ninput #\"channel.\%1$04d.inp\"\noutputdir \"\%1$04d.dat\"\ncheckname check.dat\noutname result.zip\nend\n\n" );
core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  // std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Parameter \"input\" requires a value" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}
!!!1823024.cpp!!!	standard_simulation_lifetime_test() : void
{
  // Test for virtual object pattern
  BOOST_CHECK( not std::is_default_constructible< platform::simulation_manager >::type {} );
  BOOST_CHECK( not std::is_copy_constructible< platform::simulation_manager >::type {} );
  BOOST_CHECK( not std::is_move_constructible< platform::simulation_manager >::type {} );
  BOOST_CHECK( not ( std::is_assignable< platform::simulation_manager, platform::simulation_manager >::type {} ) );
  BOOST_CHECK( std::has_virtual_destructor< platform::simulation_manager >::type {} );
}
{
  // Test for virtual object pattern
  BOOST_CHECK( std::is_default_constructible< platform::standard_simulation >::type {} );
  BOOST_CHECK( not std::is_copy_constructible< platform::standard_simulation >::type {} );
  BOOST_CHECK( not std::is_move_constructible< platform::standard_simulation >::type {} );
  BOOST_CHECK( not ( std::is_assignable< platform::standard_simulation, platform::standard_simulation >::type {} ) );
  BOOST_CHECK( std::has_virtual_destructor< platform::standard_simulation >::type {} );
}
{
  boost::shared_ptr< platform::standard_simulation > var( new platform::standard_simulation );
  BOOST_CHECK_EQUAL( var->equilibration_interval(), 0ul );
  BOOST_CHECK_EQUAL( var->production_interval(), 0ul );
}
!!!1822000.cpp!!!	simulation_manager_methods_test() : void
std::stringstream store;
{
  boost::shared_ptr< platform::standard_simulation > var( new platform::standard_simulation );
  BOOST_CHECK_EQUAL( var->equilibration_interval(), 0ul );
  BOOST_CHECK_EQUAL( var->production_interval(), 0ul );

  var->set_equilibration_interval( 100ul );
  var->set_production_interval( 1000ul );

  BOOST_CHECK_EQUAL( var->equilibration_interval(), 100ul );
  BOOST_CHECK_EQUAL( var->production_interval(), 1000ul );

  // write class instance to archive
  boost::archive::text_oarchive oa( store );
  oa << var;
}
{
  boost::shared_ptr< platform::standard_simulation > var2;
  // read class instance from archive
  boost::archive::text_iarchive ia( store );
  ia >> var2;

  BOOST_CHECK_EQUAL( var2->equilibration_interval(), 100ul );
  BOOST_CHECK_EQUAL( var2->production_interval(), 1000ul );
}
!!!1948592.cpp!!!	simulation_lifetime_test() : void
{
  // Test for non-virtual no-copy object pattern
  BOOST_CHECK( std::is_default_constructible< platform::simulation >::type {} );
  BOOST_CHECK( not std::is_copy_constructible< platform::simulation >::type {} );
  BOOST_CHECK( not std::is_move_constructible< platform::simulation >::type {} );
  BOOST_CHECK( not ( std::is_assignable< platform::simulation, platform::simulation >::type {} ) );
  BOOST_CHECK( not std::has_virtual_destructor< platform::simulation >::type {} );
}
{
  boost::shared_ptr< platform::simulation > var( new platform::simulation );
  BOOST_CHECK_EQUAL( var->energy(), 0.0 );
  BOOST_CHECK_EQUAL( var->inner_loop_size(), 0ul );
  BOOST_CHECK_EQUAL( var->get_outer_loop_index(), 0ul );
  BOOST_CHECK_EQUAL( var->report_interval(), 0ul );
  BOOST_CHECK( var->run_title().empty() );
  BOOST_CHECK( not var->has_manager() );
}
!!!1966512.cpp!!!	simulation_modify_method_test() : void
std::stringstream store;
const std::string title( "Test simulation" );
const std::size_t inner( 100ul );
const std::size_t prod( 2000ul );
const std::size_t therm( 100ul );
const std::size_t report( 500ul );
const std::size_t ntarg( 50ul );
const double epsw( 70.0 );
const double tmptr( 305.0 );
{
  boost::shared_ptr< platform::simulation_manager > simtype( new platform::standard_simulation );
  simtype->set_production_interval( prod );
  simtype->set_equilibration_interval( therm );

  boost::shared_ptr< platform::simulation > var( new platform::simulation );
  BOOST_CHECK_EQUAL( var->energy(), 0.0 );
  BOOST_CHECK_EQUAL( var->inner_loop_size(), 0ul );
  BOOST_CHECK_EQUAL( var->get_outer_loop_index(), 0ul );
  BOOST_CHECK_EQUAL( var->report_interval(), 0ul );
  BOOST_CHECK( var->run_title().empty() );
  BOOST_CHECK( not var->has_manager() );

  var->set_inner_loop_size( inner );
  var->set_report_interval( report );
  var->set_run_title( title );
  var->set_target_count( ntarg );
  var->set_solvent_permittivity( epsw );
  var->set_temperature( tmptr );
  var->set_manager( simtype );

  BOOST_CHECK_EQUAL( var->inner_loop_size(), 100ul );
  BOOST_CHECK_EQUAL( var->get_outer_loop_index(), 0ul );
  BOOST_CHECK_EQUAL( var->report_interval(), 500ul );
  BOOST_CHECK_EQUAL( var->run_title(), title );
  BOOST_CHECK_EQUAL( var->particles().target_count(), ntarg );
  BOOST_CHECK_EQUAL( var->evaluators().temperature(), tmptr );
  BOOST_CHECK_EQUAL( var->evaluators().permittivity(), epsw );
  BOOST_REQUIRE( var->has_manager() );
  BOOST_CHECK_EQUAL( var->manager().equilibration_interval(), therm );
  BOOST_CHECK_EQUAL( var->manager().production_interval(), prod );

  // write class instance to archive
  boost::archive::text_oarchive oa( store );
  oa << var;
}
{
   boost::shared_ptr< platform::simulation > var( new platform::simulation );
   // read class instance from archive
  boost::archive::text_iarchive ia( store );
  ia >> var;

  BOOST_CHECK_EQUAL( var->inner_loop_size(), 100ul );
  BOOST_CHECK_EQUAL( var->get_outer_loop_index(), 0ul );
  BOOST_CHECK_EQUAL( var->report_interval(), 500ul );
  BOOST_CHECK_EQUAL( var->run_title(), title );
  BOOST_CHECK_EQUAL( var->manager().equilibration_interval(), therm );
  BOOST_CHECK_EQUAL( var->manager().production_interval(), prod );
  BOOST_CHECK_EQUAL( var->particles().target_count(), ntarg );
  BOOST_CHECK_EQUAL( var->evaluators().temperature(), tmptr );
  BOOST_CHECK_EQUAL( var->evaluators().permittivity(), epsw );

}
!!!1986480.cpp!!!	simulation_license_test() : void
std::stringstream store;
const std::string title( "Test simulation" );
const std::size_t inner( 100ul );
const std::size_t prod( 2000ul );
const std::size_t therm( 100ul );
const std::size_t report( 500ul );
const std::size_t ntarg( 50ul );
const double epsw( 70.0 );
const double tmptr( 305.0 );
{
  boost::shared_ptr< platform::simulation_manager > simtype( new platform::standard_simulation );
  simtype->set_production_interval( prod );
  simtype->set_equilibration_interval( therm );

  boost::shared_ptr< platform::simulation > var( new platform::simulation );
  BOOST_CHECK_EQUAL( var->energy(), 0.0 );
  BOOST_CHECK_EQUAL( var->inner_loop_size(), 0ul );
  BOOST_CHECK_EQUAL( var->get_outer_loop_index(), 0ul );
  BOOST_CHECK_EQUAL( var->report_interval(), 0ul );
  BOOST_CHECK( var->run_title().empty() );
  BOOST_CHECK( not var->has_manager() );

  {
    std::stringstream os;
    var->license( os );
    const std::string lic( os.str() );
    //std::cout << lic;
    BOOST_CHECK( lic.find( "GNU General Public License" ) < lic.size() );
    BOOST_CHECK( lic.find( "Free Software Foundation" ) < lic.size() );
    BOOST_CHECK( lic.find( "http://www.gnu.org/licenses" ) < lic.size() );
  }

  var->set_inner_loop_size( inner );
  var->set_report_interval( report );
  var->set_run_title( title );
  var->set_target_count( ntarg );
  var->set_solvent_permittivity( epsw );
  var->set_temperature( tmptr );
  var->set_manager( simtype );

  {
    std::stringstream os;
    var->license( os );
    const std::string lic( os.str() );
    //std::cout << lic;
    BOOST_CHECK( lic.find( "GNU General Public License" ) < lic.size() );
    BOOST_CHECK( lic.find( "Free Software Foundation" ) < lic.size() );
    BOOST_CHECK( lic.find( "http://www.gnu.org/licenses" ) < lic.size() );
  }

  BOOST_CHECK_EQUAL( var->inner_loop_size(), 100ul );
  BOOST_CHECK_EQUAL( var->get_outer_loop_index(), 0ul );
  BOOST_CHECK_EQUAL( var->report_interval(), 500ul );
  BOOST_CHECK_EQUAL( var->run_title(), title );
  BOOST_CHECK_EQUAL( var->particles().target_count(), ntarg );
  BOOST_CHECK_EQUAL( var->evaluators().temperature(), tmptr );
  BOOST_CHECK_EQUAL( var->evaluators().permittivity(), epsw );
  BOOST_REQUIRE( var->has_manager() );
  BOOST_CHECK_EQUAL( var->manager().equilibration_interval(), therm );
  BOOST_CHECK_EQUAL( var->manager().production_interval(), prod );
}
!!!1986608.cpp!!!	simulation_program_description_test() : void
boost::shared_ptr< platform::simulation > var( new platform::simulation );
std::stringstream os;
var->program_description( os );
const std::string lic( os.str() );
//std::cout << lic;
BOOST_CHECK( lic.find( "3.1415927" ) < lic.size() );
BOOST_CHECK( lic.find( "8.8542e-12" ) < lic.size() );
BOOST_CHECK( lic.find( "6.02214e+23" ) < lic.size() );
BOOST_CHECK( lic.find( "1.3806e-23" ) < lic.size() );
BOOST_CHECK( lic.find( "1.6021917e-19" ) < lic.size() );
BOOST_CHECK( lic.find( "1660.5393" ) < lic.size() );
BOOST_CHECK( lic.find( "machine integer size" ) < lic.size() );
BOOST_CHECK( lic.find( "Host machine" ) < lic.size() );
BOOST_CHECK( lic.find( "compiled version" ) < lic.size() );
!!!1955248.cpp!!!	simulation_definition_lifetime_test() : void
{
  // Test for virtual no-copy object pattern
  BOOST_CHECK( not std::is_default_constructible< platform::simulation_definition >::type {} );
  BOOST_CHECK( not std::is_copy_constructible< platform::simulation_definition >::type {} );
  BOOST_CHECK( not std::is_move_constructible< platform::simulation_definition >::type {} );
  BOOST_CHECK( not ( std::is_assignable< platform::simulation_definition, platform::simulation_definition >::type {} ) );
  BOOST_CHECK( std::has_virtual_destructor< platform::simulation_definition >::type {} );
}
{
  auto dummy = [](const std::map<std::string, std::string > p)->std::unique_ptr<platform::simulation_manager>{ return std::unique_ptr<platform::simulation_manager>{}; };
  boost::shared_ptr< platform::simulation_definition > var( new platform::simulation_definition( "standard", "some desc", dummy ) );
  BOOST_CHECK_EQUAL( var->label(), "standard" );
  BOOST_CHECK_EQUAL( var->description(), "some desc" );
  BOOST_CHECK_EQUAL( var->size(), 0ul );
  BOOST_CHECK( var->empty() );
}
!!!1955376.cpp!!!	simulator_meta_lifetime_test() : void
{
  // Test for virtual no-copy object pattern
  BOOST_CHECK( not std::is_default_constructible< platform::simulator_meta >::type {} );
  BOOST_CHECK( not std::is_copy_constructible< platform::simulator_meta >::type {} );
  BOOST_CHECK( not std::is_move_constructible< platform::simulator_meta >::type {} );
  BOOST_CHECK( not ( std::is_assignable< platform::simulator_meta, platform::simulator_meta >::type {} ) );
  BOOST_CHECK( std::has_virtual_destructor< platform::simulator_meta >::type {} );
}
{
  platform::simulation dummy;
  boost::shared_ptr< platform::simulator_meta > var( new platform::simulator_meta( dummy ) );
  BOOST_CHECK_EQUAL( var->section_label(), "simulator" );
  BOOST_CHECK_EQUAL( var->multiple(), false );
  BOOST_CHECK_EQUAL( var->required(), true );
  BOOST_CHECK_EQUAL( var->size(), 0ul );
  BOOST_CHECK( var->empty() );
}
!!!1955120.cpp!!!	simulator_meta_input_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

const std::string title( "Test simulation" );
const std::size_t inner( 100ul );
const std::size_t prod( 2000ul );
const std::size_t therm( 100ul );
const std::size_t report( 500ul );
const std::size_t ntarg( 50ul );
const double epsw( 70.0 );
const double tmptr( 305.0 );

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "Unexpected exception thrown by \"dg.read_input( reader )\": " ) + err.what() );
}

BOOST_CHECK_EQUAL( sim->run_title(), title );
BOOST_CHECK_EQUAL( sim->get_outer_loop_index(), 0ul );
BOOST_CHECK_EQUAL( sim->inner_loop_size(), inner );
BOOST_CHECK_EQUAL( sim->report_interval(), report );
BOOST_CHECK_EQUAL( sim->has_manager(), true );
BOOST_CHECK_EQUAL( sim->manager().equilibration_interval(), therm );
BOOST_CHECK_EQUAL( sim->manager().production_interval(), prod );
BOOST_CHECK_EQUAL( sim->manager().type_label(), "standard" );
BOOST_CHECK_EQUAL( sim->particles().target_count(), ntarg );
BOOST_CHECK_EQUAL( sim->evaluators().temperature(), tmptr );
BOOST_CHECK_EQUAL( sim->evaluators().permittivity(), epsw );


!!!1965104.cpp!!!	simulator_input_type_no_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype \ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Parameter \"type\" requires a value in a simulator section." ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1825072.cpp!!!	simulator_input_duplicate_type_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation manager \"type\" parameter appears more than once" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1825200.cpp!!!	simulator_input_type_bad_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype parallel\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );


try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation manager \"type\" parameter value (parallel) does not name a valid simulation manager subtype for this application" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1825328.cpp!!!	simulator_input_inner_no_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner #100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );


try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation inner loop \"inner\" parameter requires a value" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1962928.cpp!!!	simulator_input_inner_bad_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner ten\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation inner loop \"inner\" parameter value (ten) is not an ordinal" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1966256.cpp!!!	simulator_input_name_no_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname #Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation title \"name\" parameter requires a value" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1824944.cpp!!!	simulator_input_name_empty_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname \"\"\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation title \"name\" parameter requires a non-empty value" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1963184.cpp!!!	simulator_input_nstep_no_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep #2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );


try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation production step \"nstep\" parameter requires a value" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1963056.cpp!!!	simulator_input_nstep_bad_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep twenty\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation production step \"nstep\" parameter value (twenty) is not an ordinal" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1963440.cpp!!!	simulator_input_naver_no_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver #100\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );


try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation equilibration step \"naver\" parameter requires a value" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1963312.cpp!!!	simulator_input_naver_bad_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver ten\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation equilibration step \"naver\" parameter value (ten) is not an ordinal" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1963696.cpp!!!	simulator_input_isave_no_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave #500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );


try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation checkpoint/report interval \"isave\" parameter requires a value" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1963568.cpp!!!	simulator_input_isave_bad_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave ten\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation checkpoint/report interval \"isave\" parameter value (ten) is not an ordinal" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1963952.cpp!!!	simulator_input_ntarg_no_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg #50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );


try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation target particle number \"ntarg\" parameter requires a value" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1963824.cpp!!!	simulator_input_ntarg_bad_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg ten\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation target particle number \"ntarg\" parameter value (ten) is not an ordinal" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1964208.cpp!!!	simulator_input_epsw_no_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw #70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );


try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation media permittivity \"epsw\" parameter requires a value" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1964080.cpp!!!	simulator_input_epsw_bad_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw seventy\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation media permittivity \"epsw\" parameter value (seventy) is not a number" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1964336.cpp!!!	simulator_input_epsw_negative_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw -70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );


try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation media permittivity \"epsw\" parameter value (-70.0) must be greater than zero." ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1964464.cpp!!!	simulator_input_epsw_zero_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 0.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );


try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation media permittivity \"epsw\" parameter value (0.0) must be greater than zero." ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1964976.cpp!!!	simulator_input_kelvin_no_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin #305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );


try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation temperature (in kelvin) \"kelvin\" parameter requires a value" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1964848.cpp!!!	simulator_input_kelvin_bad_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin \"STP\"\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation temperature (in kelvin) \"kelvin\" parameter value (\"STP\") is not a number" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1964720.cpp!!!	simulator_input_kelvin_negative_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin -305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );


try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation temperature (in kelvin) \"kelvin\" parameter value (-305.0) must be greater than zero." ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1964592.cpp!!!	simulator_input_kelvin_zero_value_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin 0.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );


try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation temperature (in kelvin) \"kelvin\" parameter value (0.0) must be greater than zero." ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1966128.cpp!!!	simulator_input_no_type_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation manager \"type\" missing in input file" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1966000.cpp!!!	simulator_input_no_inner_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );


try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation inner loop \"inner\" missing in input file" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1966384.cpp!!!	simulator_input_no_nstep_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnaver 2000\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );


try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation production step \"nstep\" missing in input file" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1965744.cpp!!!	simulator_input_no_naver_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );


try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation equilibration step \"naver\" missing in input file" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1965616.cpp!!!	simulator_input_no_isave_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );


try
{
  dg.read_input( reader );
  BOOST_ERROR( "expected \"dg.read_input( reader )\" exception not thrown" );
}
catch( std::runtime_error const& err )
{
  const std::string msg( err.what() );
  //std::cout << msg << "\n";
  BOOST_CHECK( msg.find( "Simulation checkpoint/report interval \"isave\" missing in input file" ) < msg.size() );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1965488.cpp!!!	simulator_input_no_ntarg_test_PASS() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1965360.cpp!!!	simulator_input_no_epsw_test_PASS() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1965232.cpp!!!	simulator_input_no_kelvin_test_PASS() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nname Test simulation\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1965872.cpp!!!	simulator_input_no_name_test_PASS() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( 1 );
{
  boost::shared_ptr< platform::simulator_meta > meta( new platform::simulator_meta( *sim ) );
  platform::standard_simulation::add_definition( *meta );

  BOOST_REQUIRE( meta->has_type( "standard" ) );
  dg.add_input_delegate( meta );
}

std::string canon_input( "\n\nsimulator\ntype standard\ninner 100\nnstep 2000\nnaver 100\nisave 500\nntarg 50\nepsw 70.0\nkelvin 305.0\nend\n" );

core::input_preprocess reader;
reader.add_buffer( "dummy", canon_input );

try
{
  dg.read_input( reader );
}
catch( std::exception const& err )
{
  BOOST_ERROR( std::string( "exception thrown by \"dg.read_input( reader )\" was not expected type: " ) + err.what() );
}


!!!1825584.cpp!!!	full_simulation_input_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( platform::simulation::get_max_input_version() );
BOOST_REQUIRE_EQUAL( dg.max_version(), 1ul );
sim->build_input_delegater( dg );

BOOST_REQUIRE( dg.has_section( core::strngs::simulator_label() ) );
BOOST_REQUIRE( dg.has_section( core::strngs::evaluator_label() ) );
BOOST_REQUIRE( dg.has_section( core::strngs::sampler_label() ) );
BOOST_REQUIRE( dg.has_section( core::strngs::fsspec() ) );
BOOST_REQUIRE( dg.has_section( core::strngs::fsregn() ) );
BOOST_REQUIRE( dg.has_section( core::strngs::fstry() ) );
BOOST_REQUIRE( dg.has_section( platform::storage_meta::storage_label() ) );

//{
//  core::input_help hlp;
//  dg.get_documentation( hlp );
//  hlp.write( std::cout );
//}

const std::string title( "Test simulation" );
const std::size_t inner( 100ul );
const std::size_t prod( 2000ul );
const std::size_t therm( 100ul );
const std::size_t report( 500ul );
const std::size_t ntarg( 50ul );
const double epsw( 70.0 );
const double tmptr( 305.0 );

core::input_preprocess reader;
reader.add_buffer( "dummy", platform_test::canon_input() );
try
{
  dg.read_input( reader );
}
catch( std::exception const& err )
{
  std::cout << err.what() << "\n";
  BOOST_ERROR( std::string( "Unexpected exception thrown by \"dg.read_input( reader )\": " ) + err.what() );
}

BOOST_CHECK_EQUAL( sim->run_title(), title );
BOOST_CHECK_EQUAL( sim->get_outer_loop_index(), 0ul );
BOOST_CHECK_EQUAL( sim->inner_loop_size(), inner );
BOOST_CHECK_EQUAL( sim->report_interval(), report );
BOOST_CHECK_EQUAL( sim->has_manager(), true );
BOOST_CHECK_EQUAL( sim->manager().equilibration_interval(), therm );
BOOST_CHECK_EQUAL( sim->manager().production_interval(), prod );
BOOST_CHECK_EQUAL( sim->manager().type_label(), "standard" );
BOOST_CHECK_EQUAL( sim->particles().target_count(), ntarg );
BOOST_CHECK_EQUAL( sim->evaluators().temperature(), tmptr );
BOOST_CHECK_EQUAL( sim->evaluators().permittivity(), epsw );
BOOST_CHECK_EQUAL( sim->storage().checkpoint_name(), platform::storage_manager::default_checkpoint_name() );
BOOST_CHECK_EQUAL( sim->storage().filename_base(), platform::storage_manager::default_filename_base() );
BOOST_CHECK_EQUAL( sim->storage().output_name(), platform::storage_manager::default_output_name() );
BOOST_CHECK_EQUAL( sim->storage().run_number(), platform::storage_manager::default_run_number() );
BOOST_CHECK_EQUAL( sim->storage().output_dir_fmt(), "\%1$04d" );
BOOST_CHECK_EQUAL( sim->evaluators().size(), 1ul );
BOOST_CHECK_EQUAL( sim->evaluators().get_evaluators()[0].type_label(), "coulomb" );
BOOST_CHECK_EQUAL( sim->report().size(), 3ul );
BOOST_CHECK( sim->report().has_sample( "specie-count" ) );
BOOST_CHECK( sim->report().has_tracked( "widom" ) );
BOOST_CHECK( sim->report().has_tracked( "metropolis" ) );
BOOST_CHECK( not sim->report().has_sink() ); // no sink before "prepare"?
BOOST_CHECK_EQUAL( sim->particles().get_ensemble().count(), 0ul );
BOOST_CHECK_EQUAL( sim->particles().specie_count(), 2ul );
BOOST_CHECK_EQUAL( sim->particles().target_ionic_strength(), 0.2 );
BOOST_CHECK_EQUAL( sim->particles().get_ensemble().count(), 0ul );
BOOST_CHECK_EQUAL( sim->particles().get_ensemble().known_keys(), 0ul );
BOOST_CHECK( sim->particles().has_specie( "Na" ) );
BOOST_CHECK( sim->particles().has_specie( "Cl" ) );
BOOST_CHECK_EQUAL( sim->regions().size(), 2ul );
BOOST_CHECK_EQUAL( sim->regions().region_key( "cell" ), 0ul );
BOOST_CHECK_EQUAL( sim->regions().region_key( "centre" ), 1ul );
BOOST_CHECK_EQUAL( sim->choices().size(), 0ul );
BOOST_CHECK_EQUAL( sim->choices().size_chooser(), 2ul );
BOOST_CHECK( sim->choices().has_chooser( "move" ) );
BOOST_CHECK( sim->choices().has_chooser( "jump" ) );
BOOST_CHECK( sim->choices().empty() );
!!!1979696.cpp!!!	full_simulation_generate_sim_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( platform::simulation::get_max_input_version() );
BOOST_REQUIRE_EQUAL( dg.max_version(), 1ul );
sim->build_input_delegater( dg );

const std::size_t ntarg( 50ul );
core::input_preprocess reader;
reader.add_buffer( "dummy", platform_test::canon_input() );
try
{
  dg.read_input( reader );
}
catch( std::exception const& err )
{
  std::cout << err.what() << "\n";
  BOOST_ERROR( std::string( "Unexpected exception thrown by \"dg.read_input( reader )\": " ) + err.what() );
}

BOOST_CHECK_EQUAL( sim->particles().get_ensemble().count(), 0ul );
BOOST_CHECK_EQUAL( sim->particles().get_ensemble().known_keys(), 0ul );
try
{
  sim->generate_simulation();

  BOOST_CHECK_EQUAL( sim->particles().get_ensemble().count(), ntarg );
  BOOST_CHECK_EQUAL( sim->particles().get_ensemble().specie_count( 0 ), ntarg/2 );
  BOOST_CHECK_EQUAL( sim->particles().get_ensemble().specie_count( 1 ), ntarg/2 );
}
catch( std::exception const& err )
{
  std::cout << err.what();
  BOOST_ERROR( "Unexpected exception." );
}
!!!1979824.cpp!!!	full_simulation_echo_input_test() : void
boost::shared_ptr< platform::simulation > sim( new platform::simulation );

core::input_delegater dg( platform::simulation::get_max_input_version() );
BOOST_REQUIRE_EQUAL( dg.max_version(), 1ul );
sim->build_input_delegater( dg );

core::input_preprocess reader;
reader.add_buffer( "dummy", platform_test::canon_input() );
try
{
  dg.read_input( reader );
}
catch( std::exception const& err )
{
  std::cout << err.what() << "\n";
  BOOST_ERROR( std::string( "Unexpected exception thrown by \"dg.read_input( reader )\": " ) + err.what() );
}
try
{
  sim->generate_simulation();
}
catch( std::exception const& err )
{
  std::cout << err.what();
  BOOST_ERROR( "Unexpected exception." );
}

{
  core::input_document wr( 1 );
  sim->write_document( wr );
  //wr.write( std::cout );
  BOOST_CHECK_EQUAL( wr.size(), 12ul );
  std::map< std::string, std::size_t > expect { { "trial", 2ul }, { "simulator", 1ul }, { "run", 1 }, { "evaluator", 1 }, { "sampler", 3 }, { "region", 2 }, { "specie", 2 } };
  std::map< std::string, std::size_t > found;
  for( std::size_t ii = 0; ii != wr.size(); ++ii )
  {
    found[ wr[ ii ].label() ] += 1;
    if( wr[ ii ].label() == "simulator" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "epsw" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "epsw" ), "70.000000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "inner" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "inner" ), "100" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "isave" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "isave" ), "500" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "kelvin" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "kelvin" ), "305.000000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "name" ) );
      const std::string xtitle( "\"Test simulation\"" );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "name" ), xtitle );
      BOOST_REQUIRE( wr[ ii ].has_entry( "naver" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "naver" ), "100" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "nstep" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "nstep" ), "2000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "ntarg" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "ntarg" ), "50" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "type" ), "standard" );
    }
    else if( wr[ ii ].label() == "run" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "checkname" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "checkname" ), "checkpoint.arc" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "input" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "input" ), "input.\%1$03d.inp" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "outname" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "outname" ), "output.dbm" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "outputdir" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "outputdir" ), "\%1$04d" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "type" ), "standard" );
    }
    else if( wr[ ii ].label() == "evaluator" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "type" ), "coulomb" );
    }
    else if( wr[ ii ].label() == "sampler" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      const std::string stype( wr[ ii ].get_entry( "type" ) );
      BOOST_CHECK( ( stype == "metropolis" or stype == "widom" or stype == "specie-count" ) );
      if( stype == "widom" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "iwidom" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "iwidom" ), "10" );
      }
    }
    else if( wr[ ii ].label() == "region" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      const std::string stype( wr[ ii ].get_entry( "type" ) );
      BOOST_CHECK( ( stype == "periodic-cube" or stype == "cube" ) );
      if( stype == "cube" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "name" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "name" ), "centre" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "open" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "open" ), "true" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "origin" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "origin" ), "2.5 2.5 2.5" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "width" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "width" ), "5.000000" );
      }
      else
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "name" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "name" ), "cell" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "width" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "width" ), "74.598436" );
      }
    }
    else if( wr[ ii ].label() == "specie" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "rate" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "rate" ), "1.000000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "chex" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "chex" ), "0" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "ctarg" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "ctarg" ), "0.100000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "type" ), "free" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "name" ) );
      const std::string stype( wr[ ii ].get_entry( "name" ) );
      BOOST_CHECK( ( stype == "\"Na\"" or stype == "\"Cl\"" ) );
      if( stype == "\"Na\"" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "z" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "z" ), "1.000000" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "d" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "d" ), "1.010000" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "n" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "n" ).substr( 0, 2 ), "25" );
      }
      else
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "z" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "z" ), "-1" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "d" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "d" ), "1.780000" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "n" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "n" ).substr( 0, 2 ), "25" );
      }
    }
    else if( wr[ ii ].label() == "trial" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "rate" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "rate" ), "0.500000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      const std::string stype( wr[ ii ].get_entry( "type" ) );
      BOOST_CHECK( ( stype == "move" or stype == "jump" ) );
      if( stype == "move" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "delta" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "delta" ), "1.0" );
      }
    }
  }
  BOOST_CHECK( expect == found );
}
!!!1993136.cpp!!!	full_simulation_read_echo_test() : void
std::stringstream echoinput;
{
  boost::shared_ptr< platform::simulation > sim( new platform::simulation );

  core::input_delegater dg( platform::simulation::get_max_input_version() );
  BOOST_REQUIRE_EQUAL( dg.max_version(), 1ul );
  sim->build_input_delegater( dg );

  core::input_preprocess reader;
  reader.add_buffer( "dummy", platform_test::canon_input() );
  try
  {
    dg.read_input( reader );
  }
  catch( std::exception const& err )
  {
    std::cout << err.what() << "\n";
    BOOST_ERROR( std::string( "Unexpected exception thrown by \"dg.read_input( reader )\": " ) + err.what() );
  }
  try
  {
    sim->generate_simulation();
  }
  catch( std::exception const& err )
  {
    std::cout << err.what();
    BOOST_ERROR( "Unexpected exception." );
  }

  {
    core::input_document wr( 1 );
    sim->write_document( wr );
    BOOST_CHECK_EQUAL( wr.size(), 12ul );
    wr.write( echoinput );
  }
}
{
  boost::shared_ptr< geometry::base_region > regn( new geometry::periodic_cube_region( "cell", 10.0 ) );
  boost::shared_ptr< platform::storage_manager > stor( new platform::serial_storage );
  boost::shared_ptr< std::stringstream > slog( new std::stringstream );
  stor->set_log( slog );
  boost::shared_ptr< platform::simulation > sim( new platform::simulation( regn, stor ) );

  core::input_delegater dg( platform::simulation::get_max_input_version() );
  BOOST_REQUIRE_EQUAL( dg.max_version(), 1ul );
  sim->build_input_delegater( dg );

  core::input_preprocess reader;
  const std::string canon_input( echoinput.str() );
  reader.add_buffer( "dummy", canon_input );
  try
  {
    dg.read_input( reader );
  }
  catch( std::exception const& err )
  {
    std::cout << err.what() << "\n";
    BOOST_ERROR( std::string( "Unexpected exception thrown by \"dg.read_input( reader )\": " ) + err.what() );
    return;
  }
  try
  {
    sim->generate_simulation();
  }
  catch( std::exception const& err )
  {
    std::cout << err.what();
    BOOST_ERROR( "Unexpected exception." );
    return;
  }

  {
    std::stringstream echo2;
    core::input_document wr( 1 );
    sim->write_document( wr );
    BOOST_CHECK_EQUAL( wr.size(), 12ul );
    wr.write( echo2 );
    BOOST_CHECK_EQUAL( echo2.str(), canon_input );

    std::map< std::string, std::size_t > expect { { "trial", 2ul }, { "simulator", 1ul }, { "run", 1 }, { "evaluator", 1 }, { "sampler", 3 }, { "region", 2 }, { "specie", 2 } };
    std::map< std::string, std::size_t > found;
    for( std::size_t ii = 0; ii != wr.size(); ++ii )
    {
      found[ wr[ ii ].label() ] += 1;
      if( wr[ ii ].label() == "simulator" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "epsw" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "epsw" ), "70.000000" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "inner" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "inner" ), "100" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "isave" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "isave" ), "500" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "kelvin" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "kelvin" ), "305.000000" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "name" ) );
        const std::string xtitle( "\"Test simulation\"" );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "name" ), xtitle );
        BOOST_REQUIRE( wr[ ii ].has_entry( "naver" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "naver" ), "100" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "nstep" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "nstep" ), "2000" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "ntarg" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "ntarg" ), "50" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "type" ), "standard" );
      }
      else if( wr[ ii ].label() == "run" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "checkname" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "checkname" ), "checkpoint.arc" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "input" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "input" ), "input.\%1$03d.inp" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "outname" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "outname" ), "output.dbm" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "outputdir" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "outputdir" ), "\%1$04d" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "type" ), "standard" );
      }
      else if( wr[ ii ].label() == "evaluator" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "type" ), "coulomb" );
      }
      else if( wr[ ii ].label() == "sampler" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
        const std::string stype( wr[ ii ].get_entry( "type" ) );
        BOOST_CHECK( ( stype == "metropolis" or stype == "widom" or stype == "specie-count" ) );
        if( stype == "widom" )
        {
          BOOST_REQUIRE( wr[ ii ].has_entry( "iwidom" ) );
          BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "iwidom" ), "10" );
        }
      }
      else if( wr[ ii ].label() == "region" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
        const std::string stype( wr[ ii ].get_entry( "type" ) );
        BOOST_CHECK( ( stype == "periodic-cube" or stype == "cube" ) );
        if( stype == "cube" )
        {
          BOOST_REQUIRE( wr[ ii ].has_entry( "name" ) );
          BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "name" ), "centre" );
          BOOST_REQUIRE( wr[ ii ].has_entry( "open" ) );
          BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "open" ), "true" );
          BOOST_REQUIRE( wr[ ii ].has_entry( "origin" ) );
          BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "origin" ), "2.5 2.5 2.5" );
          BOOST_REQUIRE( wr[ ii ].has_entry( "width" ) );
          BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "width" ), "5.000000" );
        }
        else
        {
          BOOST_REQUIRE( wr[ ii ].has_entry( "name" ) );
          BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "name" ), "cell" );
          BOOST_REQUIRE( wr[ ii ].has_entry( "width" ) );
          BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "width" ), "74.598436" );
        }
      }
      else if( wr[ ii ].label() == "specie" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "rate" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "rate" ), "1.000000" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "chex" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "chex" ), "0" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "ctarg" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "ctarg" ), "0.100000" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "type" ), "free" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "name" ) );
        const std::string stype( wr[ ii ].get_entry( "name" ) );
        BOOST_CHECK( ( stype == "\"Na\"" or stype == "\"Cl\"" ) );
        if( stype == "\"Na\"" )
        {
          BOOST_REQUIRE( wr[ ii ].has_entry( "z" ) );
          BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "z" ), "1.000000" );
          BOOST_REQUIRE( wr[ ii ].has_entry( "d" ) );
          BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "d" ), "1.010000" );
          BOOST_REQUIRE( wr[ ii ].has_entry( "n" ) );
          BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "n" ).substr( 0, 2 ), "25" );
        }
        else
        {
          BOOST_REQUIRE( wr[ ii ].has_entry( "z" ) );
          BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "z" ), "-1" );
          BOOST_REQUIRE( wr[ ii ].has_entry( "d" ) );
          BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "d" ), "1.780000" );
          BOOST_REQUIRE( wr[ ii ].has_entry( "n" ) );
          BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "n" ).substr( 0, 2 ), "25" );
        }
      }
      else if( wr[ ii ].label() == "trial" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "rate" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "rate" ), "0.500000" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
        const std::string stype( wr[ ii ].get_entry( "type" ) );
        BOOST_CHECK( ( stype == "move" or stype == "jump" ) );
        if( stype == "move" )
        {
          BOOST_REQUIRE( wr[ ii ].has_entry( "delta" ) );
          BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "delta" ), "1.0" );
        }
      }
    }
    BOOST_CHECK( expect == found );
  }
}

!!!2006448.cpp!!!	full_simulation_prepare_test() : void
boost::shared_ptr< geometry::base_region > regn( new geometry::periodic_cube_region( "cell", 10.0 ) );
boost::shared_ptr< platform::storage_manager > stor( new platform::serial_storage );
boost::shared_ptr< std::stringstream > slog( new std::stringstream );
  stor->set_log( slog );
boost::shared_ptr< platform::simulation > sim( new platform::simulation( regn, stor ) );

core::input_delegater dg( platform::simulation::get_max_input_version() );
BOOST_REQUIRE_EQUAL( dg.max_version(), 1ul );
sim->build_input_delegater( dg );

core::input_preprocess reader;
reader.add_buffer( "dummy", platform_test::canon_input() );
try
{
  dg.read_input( reader );
}
catch( std::exception const& err )
{
  std::cout << err.what() << "\n";
  BOOST_ERROR( std::string( "Unexpected exception thrown by \"dg.read_input( reader )\": " ) + err.what() );
}
try
{
  sim->generate_simulation();
}
catch( std::exception const& err )
{
  std::cout << err.what();
  BOOST_ERROR( "Unexpected exception thrown by sim->generate_simulation()." );
}
try
{
  sim->prepare();
  // std::cout << slog->str();
}
catch( std::exception const& err )
{
  std::cout << err.what();
  BOOST_ERROR( "Unexpected exception thrown by sim->prepare();." );
  return;
}
{
  core::input_document wr( 1 );
  sim->write_document( wr );
  // wr.write( std::cout );
  BOOST_CHECK_EQUAL( wr.size(), 12ul );
  std::map< std::string, std::size_t > expect { { "trial", 2ul }, { "simulator", 1ul }, { "run", 1 }, { "evaluator", 1 }, { "sampler", 3 }, { "region", 2 }, { "specie", 2 } };
  std::map< std::string, std::size_t > found;
  for( std::size_t ii = 0; ii != wr.size(); ++ii )
  {
    found[ wr[ ii ].label() ] += 1;
    if( wr[ ii ].label() == "simulator" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "epsw" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "epsw" ), "70.000000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "inner" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "inner" ), "100" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "isave" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "isave" ), "500" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "kelvin" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "kelvin" ), "305.000000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "name" ) );
      const std::string xtitle( "\"Test simulation\"" );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "name" ), xtitle );
      BOOST_REQUIRE( wr[ ii ].has_entry( "naver" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "naver" ), "100" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "nstep" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "nstep" ), "2000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "ntarg" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "ntarg" ), "50" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "type" ), "standard" );
    }
    else if( wr[ ii ].label() == "run" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "checkname" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "checkname" ), "checkpoint.arc" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "input" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "input" ), "input.\%1$03d.inp" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "outname" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "outname" ), "output.dbm" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "outputdir" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "outputdir" ), "\%1$04d" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "type" ), "standard" );
    }
    else if( wr[ ii ].label() == "evaluator" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "type" ), "coulomb" );
    }
    else if( wr[ ii ].label() == "sampler" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      const std::string stype( wr[ ii ].get_entry( "type" ) );
      BOOST_CHECK( ( stype == "metropolis" or stype == "widom" or stype == "specie-count" ) );
      if( stype == "widom" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "iwidom" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "iwidom" ), "10" );
      }
    }
    else if( wr[ ii ].label() == "region" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      const std::string stype( wr[ ii ].get_entry( "type" ) );
      BOOST_CHECK( ( stype == "periodic-cube" or stype == "cube" ) );
      if( stype == "cube" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "name" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "name" ), "centre" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "open" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "open" ), "true" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "origin" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "origin" ), "2.5 2.5 2.5" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "width" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "width" ), "5.000000" );
      }
      else
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "name" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "name" ), "cell" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "width" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "width" ), "74.598436" );
      }
    }
    else if( wr[ ii ].label() == "specie" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "rate" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "rate" ), "1.000000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "chex" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "chex" ), "0" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "ctarg" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "ctarg" ), "0.100000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "type" ), "free" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "name" ) );
      const std::string stype( wr[ ii ].get_entry( "name" ) );
      BOOST_CHECK( ( stype == "\"Na\"" or stype == "\"Cl\"" ) );
      if( stype == "\"Na\"" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "z" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "z" ), "1.000000" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "d" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "d" ), "1.010000" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "n" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "n" ).substr( 0, 2 ), "25" );
      }
      else
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "z" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "z" ), "-1" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "d" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "d" ), "1.780000" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "n" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "n" ).substr( 0, 2 ), "25" );
      }
    }
    else if( wr[ ii ].label() == "trial" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "rate" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "rate" ), "0.500000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      const std::string stype( wr[ ii ].get_entry( "type" ) );
      BOOST_CHECK( ( stype == "move" or stype == "jump" ) );
      if( stype == "move" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "delta" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "delta" ), "1.0" );
      }
    }
  }
  BOOST_CHECK( expect == found );
}
!!!1999792.cpp!!!	full_simulation_run_loop_test() : void
boost::shared_ptr< geometry::base_region > regn( new geometry::periodic_cube_region( "cell", 10.0 ) );
boost::shared_ptr< platform::storage_manager > stor( new platform::serial_storage );
boost::shared_ptr< std::stringstream > slog( new std::stringstream );
  stor->set_log( slog );
boost::shared_ptr< platform::simulation > sim( new platform::simulation( regn, stor ) );

core::input_delegater dg( platform::simulation::get_max_input_version() );
BOOST_REQUIRE_EQUAL( dg.max_version(), 1ul );
sim->build_input_delegater( dg );

core::input_preprocess reader;
reader.add_buffer( "dummy", platform_test::canon_input() );
try
{
  dg.read_input( reader );
}
catch( std::exception const& err )
{
  std::cout << err.what() << "\n";
  BOOST_ERROR( std::string( "Unexpected exception thrown by \"dg.read_input( reader )\": " ) + err.what() );
}
try
{
  sim->generate_simulation();
}
catch( std::exception const& err )
{
  std::cout << err.what();
  BOOST_ERROR( "Unexpected exception thrown by sim->generate_simulation()." );
}
try
{
  sim->prepare();
}
catch( std::exception const& err )
{
  std::cout << err.what();
  BOOST_ERROR( "Unexpected exception thrown by sim->prepare();." );
  return;
}
try
{
  slog->str( "" );
  sim->run_loop( sim->manager().equilibration_interval() );
  std::cout << slog->str();
  slog->str( "" );
  sim->run_loop( sim->manager().production_interval() );
  std::cout << slog->str();
}
catch( std::exception const& err )
{
  std::cout << err.what();
  BOOST_ERROR( "Unexpected exception thrown by sim->prepare();." );
  return;
}
{
  core::input_document wr( 1 );
  sim->write_document( wr );
  // wr.write( std::cout );
  BOOST_CHECK_EQUAL( wr.size(), 12ul );
  std::map< std::string, std::size_t > expect { { "trial", 2ul }, { "simulator", 1ul }, { "run", 1 }, { "evaluator", 1 }, { "sampler", 3 }, { "region", 2 }, { "specie", 2 } };
  std::map< std::string, std::size_t > found;
  for( std::size_t ii = 0; ii != wr.size(); ++ii )
  {
    found[ wr[ ii ].label() ] += 1;
    if( wr[ ii ].label() == "simulator" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "epsw" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "epsw" ), "70.000000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "inner" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "inner" ), "100" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "isave" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "isave" ), "500" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "kelvin" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "kelvin" ), "305.000000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "name" ) );
      const std::string xtitle( "\"Test simulation\"" );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "name" ), xtitle );
      BOOST_REQUIRE( wr[ ii ].has_entry( "naver" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "naver" ), "100" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "nstep" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "nstep" ), "2000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "ntarg" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "ntarg" ), "50" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "type" ), "standard" );
    }
    else if( wr[ ii ].label() == "run" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "checkname" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "checkname" ), "checkpoint.arc" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "input" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "input" ), "input.\%1$03d.inp" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "outname" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "outname" ), "output.dbm" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "outputdir" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "outputdir" ), "\%1$04d" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "type" ), "standard" );
    }
    else if( wr[ ii ].label() == "evaluator" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "type" ), "coulomb" );
    }
    else if( wr[ ii ].label() == "sampler" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      const std::string stype( wr[ ii ].get_entry( "type" ) );
      BOOST_CHECK( ( stype == "metropolis" or stype == "widom" or stype == "specie-count" ) );
      if( stype == "widom" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "iwidom" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "iwidom" ), "10" );
      }
    }
    else if( wr[ ii ].label() == "region" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      const std::string stype( wr[ ii ].get_entry( "type" ) );
      BOOST_CHECK( ( stype == "periodic-cube" or stype == "cube" ) );
      if( stype == "cube" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "name" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "name" ), "centre" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "open" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "open" ), "true" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "origin" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "origin" ), "2.5 2.5 2.5" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "width" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "width" ), "5.000000" );
      }
      else
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "name" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "name" ), "cell" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "width" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "width" ), "74.598436" );
      }
    }
    else if( wr[ ii ].label() == "specie" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "rate" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "rate" ), "1.000000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "chex" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "chex" ), "0" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "ctarg" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "ctarg" ), "0.100000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "type" ), "free" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "name" ) );
      const std::string stype( wr[ ii ].get_entry( "name" ) );
      BOOST_CHECK( ( stype == "\"Na\"" or stype == "\"Cl\"" ) );
      if( stype == "\"Na\"" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "z" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "z" ), "1.000000" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "d" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "d" ), "1.010000" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "n" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "n" ).substr( 0, 2 ), "25" );
      }
      else
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "z" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "z" ), "-1" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "d" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "d" ), "1.780000" );
        BOOST_REQUIRE( wr[ ii ].has_entry( "n" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "n" ).substr( 0, 2 ), "25" );
      }
    }
    else if( wr[ ii ].label() == "trial" )
    {
      BOOST_REQUIRE( wr[ ii ].has_entry( "rate" ) );
      BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "rate" ), "0.500000" );
      BOOST_REQUIRE( wr[ ii ].has_entry( "type" ) );
      const std::string stype( wr[ ii ].get_entry( "type" ) );
      BOOST_CHECK( ( stype == "move" or stype == "jump" ) );
      if( stype == "move" )
      {
        BOOST_REQUIRE( wr[ ii ].has_entry( "delta" ) );
        BOOST_CHECK_EQUAL( wr[ ii ].get_entry( "delta" ), "1.0" );
      }
    }
  }
  BOOST_CHECK( expect == found );
}
