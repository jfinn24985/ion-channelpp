class simulator_test_dummy
!!!319536.cpp!!!	do_compute_distances(in position : coordinate, in coords : coordinate_set, inout rij : simulator::array_type, in endindex : size_t, in startindex : size_t = 0) : void
const particle::coordinate newpos(position);
for (std::size_t j = startindex; j != endindex; ++j)
{
   // --------------
   // Calculate r_ij
   const double dx = newpos.x - coords.x( j );
   const double dy = newpos.y - coords.y( j );
   const double dz = newpos.z - coords.z( j );
   rij[j] = std::sqrt(dx*dx + dy*dy + dz*dz);
}
!!!267440.python!!!	do_generate_simulation(inout oslog : ostream) : grid_generator
from constants import constants
## Generate a list of trial types
self.update_choices()
sumconc = self.ionic_strength()
# Use a PBC system.
from periodic_system import periodic_system
self.cell_region_ = periodic_system(self.target_particles_ * constants.to_SI() / sumconc)
# Generate initial ensemble on a grid
gridder = self.cell_region_.make_grid_generator( self.target_particles_, self.get_random() ) 
self.ensemble_.generate_ensemble( gridder, self.target_particles_, self.get_random() )
pass
!!!267056.python!!!	is_valid_position(inout coord : coordinate, in ispec : size_t) : bool
box = self.length_
coord.x += box if coord.x < 0 else (0.0 if coord.x < box else -box)
coord.y += box if coord.y < 0 else (0.0 if coord.y < box else -box)
coord.z += box if coord.z < 0 else (0.0 if coord.z < box else -box)
return True

