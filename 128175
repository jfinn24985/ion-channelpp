format 75
"utility" // utility
  revision 235
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  stereotype "library"
  cpp_h_dir "utility"
  cpp_src_dir "utility"
  cpp_namespace "utility"
  python_dir "cmc"
  comment "  All code in this sub-project is released under the following conditions:

Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
  classview 147633 "double statistics"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 169519 // framework deployment
    comment "Set of non-template classes that use double, ptrdiff_t and size_t
as the floating point and integral types respectively"
    classdiagram 154545 "Double Stats classes"
      draw_all_relations default hide_attributes default hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 546480 "mean_algorithm"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Class containing algorithm for calculating mean. This
 class is meant to be privately inherited by classes
 that wish to contain a running average.

 see wiki and corresponding reference below.

 https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
"
      operation 1318064 "append"
	class_operation public explicit_return_type "void"
	nparams 4
	  param inout name "mean" explicit_type "double"
	  param inout name "variance" explicit_type "double"
	  param in name "val" explicit_type "double"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment " Add a single sample value to the estimate

 \\req count > 0: count == 0 is undefined (will result in X/0)

 NOTE: correct usage is (so count should never be 0!)

  ++count
 append( mean, variance, val, count )

 count is not updated in this method to allow sets of mean, 
 variance pairs to share the same count."
      end

      operation 1317680 "variance"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "variance" explicit_type "double"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return (count <= 1 ? 0.0 : variance/double(count-1));
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}return 0.0 if count <= 1 else (self.variance_/float(count-1))
"
	
	comment " Calculate the estimate's sample variance"
      end

      operation 1318192 "merge"
	class_operation public explicit_return_type "void"
	nparams 6
	  param inout name "lh_mean" explicit_type "double"
	  param inout name "lh_var" explicit_type "double"
	  param inout name "lh_count" explicit_type "size_t"
	  param in name "rh_mean" explicit_type "double"
	  param in name "rh_var" explicit_type "double"
	  param in name "rh_count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Merge together two sets of statistics

 see wiki and corresponding reference below

 https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
 
 Chan, Tony F.; Golub, Gene H.; LeVeque, Randall J. (1979),
 \"Updating Formulae and a Pairwise Algorithm for Computing
 Sample Variances.\" (PDF), Technical Report STAN-CS-79-773,
 Department of Computer Science, Stanford University.
 
"
      end
    end

    class 176433 "basic_mean"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "  Part class to manage a mean/variance pair of
  a sequence.  This class relies on an external
  class to maintain the sample count
"
      classrelation 878384 // <dependency>
	relation 877488 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 878384 // <dependency>
	  b parent class_ref 912431 // access
      end

      attribute 226993 "mean_"
	private explicit_type "double"
	init_value "0.0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Geometric mean value"
      end

      attribute 227121 "variance_"
	private explicit_type "double"
	init_value "0.0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Sum of differences squared 

(NOTE: real variance == this value/(count-1))"
      end

      operation 319537 "append"
	public explicit_return_type "void"
	nparams 2
	  param in name "val" explicit_type "double"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment "Add a sample value to the estimate"
      end

      operation 319665 "basic_mean"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : mean_(0.0), variance_(0.0) {};
"
	
	
	
	
      end

      operation 319793 "basic_mean"
	stereotype "copy"
	public explicit_return_type "void"
	nparams 1
	  param in name "other" type class_ref 176433 // basic_mean
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
: mean_ (other.mean_)
, variance_ (other.variance_)
{}
"
	
	
	
	
      end

      operation 501552 "basic_mean"
	stereotype "move"
	public explicit_return_type "void"
	nparams 1
	  param out name "other" type class_ref 176433 // basic_mean
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${t0} && ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
: mean_( std::move( other.mean_ ) )
, variance_( std::move( other.variance_ ) )
{}
"
	
	
	
	
      end

      operation 762160 "equivalent"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 176433 // basic_mean
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->mean_ == other.mean_ and this->variance_ == other.variance_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 329265 "mean"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.mean_
"
	
	comment "Get the estimate's geometric mean"
      end

      operation 320049 "operator="
	public return_type class_ref 176433 // basic_mean
	nparams 1
	  param in name "other" type class_ref 176433 // basic_mean
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap(other);
  return *this;
}
"
	
	
	
	
      end

      operation 320177 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  this->mean_ = 0.0;
  this->variance_ = 0.0;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}self.mean_ = 0
self.variance_ = 0
"
	
      end

      extra_member 181297 "friend"
	
	cpp "
  friend class boost::serialization::access;

" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 320305 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & mean_;
    ar & variance_;
  }
"
	
	
	
	
      end

      operation 320433 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 176433 // basic_mean
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap(this->mean_, other.mean_);
  std::swap(this->variance_, other.variance_);
}
"
	
	
	
	
      end

      operation 320561 "variance"
	const public explicit_return_type "double"
	nparams 1
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return (count <= 1 ? 0.0 : this->variance_/double(count-1));
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}return 0.0 if count <= 1 else (self.variance_/float(count-1))
"
	
	comment "Get the estimate's sample variance"
      end

      extra_member 350128 "operator=="
	
	cpp "friend inline bool operator==(const basic_mean &lhs, const basic_mean &rhs)
{
  return lhs.equivalent( rhs );
}

" ""
	java ""
	php ""
	python ""
	idl ""
      end
    end

    class 619056 "basic_histogram"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " A combination of fixed-size data array and sampler, independent of the
 converter/digitizer used. This is intended to be used as _private_ base
 class (e.g. of template histograph class) and is not defined with virtual
 functions. It is intended to allow canonical derived classes.

 Sampling is done piecemeal, by first calling begin_sample, then
 increment_bin for each datum and finishing with end_sample."
      classrelation 952240 // data_ (<directional composition>)
	relation 951344 *-->
	  a role_name "data_" private
	    comment " The histogram of observation counts."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 952240 // data_ (<directional composition>)
	  b parent class_ref 175665 // estimate_array
      end

      attribute 691888 "sample_"
	private explicit_type "size_t"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " The counts of values being sampled (not archived, copied
 or swapped).  This vector is used to record the bin counts
 during sampling.  It is only used during the ||sample|| method
 so is neither copied or archived.  Making it an attribute
 allows it to be adjusted if the range needs to be extended
 during sampling.

 The basic_histogram \"is_sampling\" if sample_.size = data_.size
"
      end

      extra_member 647472 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1591728 "basic_histogram"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: data_()
, sample_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " For serialization"
      end

      operation 1603760 "basic_histogram"
	public explicit_return_type ""
	nparams 1
	  param in name "sz" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}
: data_( ${p0} )
, sample_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create histogram of the given size."
      end

      operation 1592240 "basic_histogram"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 619056 // basic_histogram
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: data_( std::move( ${p0}.data_ ) )
, sample_( std::move( ${p0}.sample_ ) )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1592368 "basic_histogram"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 619056 // basic_histogram
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: data_( ${p0}.data_ )
, sample_( ${p0}.sample_ )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1592496 "~basic_histogram"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1592624 "operator="
	public return_type class_ref 619056 // basic_histogram
	nparams 1
	  param in name "source" type class_ref 619056 // basic_histogram
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1592752 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 619056 // basic_histogram
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap( this->data_, ${p0}.data_ );
  std::swap( this->sample_, ${p0}.sample_ );
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 647600 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1592880 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & data_;
    ar & sample_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 647728 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1603376 "advance_bin"
	public explicit_return_type "void"
	nparams 2
	  param in name "idx" explicit_type "size_t"
	  param in name "adv" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  this->sample_[ ${p0} ] += ${p1};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Increase a sample bin count by adv.

 \\pre is_sampling and idx < size (not checked)"
      end

      operation 1603248 "advance_bin_safe"
	public explicit_return_type "void"
	nparams 2
	  param in name "idx" explicit_type "size_t"
	  param in name "adv" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  UTILITY_REQUIRE( this->is_sampling(), \"Cannot increment a bin when no sampling.\" );
  UTILITY_REQUIRE( ${p0} < this->size(), \"Index out of range.\" );
  this->advance_bin( ${p0}, ${p1} );
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Increase a sample bin count by adv.

 \\pre is_sampling and idx < size"
      end

      operation 1593264 "begin_sample"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Initialize the sampling subobject. This will reset any
 sample data if called while is_sampling.

 \\post is_sampling OR size = 0

 The correct way to use this method is in combination with
 sample_datum and end_sample. e.g.
 '''
   begin_sample (call once)
   ...
   sample_datum (0,*) calls
   ...
   end_sample (call once)
 '''

"
      end

      operation 1593392 "end_sample"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  if( this->sample_.size() == this->data_.size() )
  {
    this->data_.append( this->sample_.begin(), this->sample_.end() );
    this->sample_.clear();
  }
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Copy data from the sampling subobject to the estimate
 array object.

 The correct way to use this method is in combination with
 sample_datum and end_sample. e.g.
 '''
   begin_sample (call once)
   ...
   sample_datum (0,*) calls
   ...
   end_sample (call once)
 '''

"
      end

      operation 1595952 "increment_bin"
	public explicit_return_type "void"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  ++this->sample_[ idx ];
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Increment a sample bin

 \\pre is_sampling and idx < size (not checked)"
      end

      operation 1596080 "increment_bin_safe"
	public explicit_return_type "void"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  UTILITY_REQUIRE( this->is_sampling(), \"Cannot increment a bin when no sampling.\" );
  UTILITY_REQUIRE( ${p0} < this->size(), \"Index out of range.\" );
  this->increment_bin( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Increment a sample bin

 \\pre is_sampling and idx < size (checked)"
      end

      operation 1593648 "is_sampling"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return (not this->data_.empty()) and (this->sample_.size() == this->data_.size());
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Is this in sampling phase?"
      end

      operation 1593776 "merge"
	public explicit_return_type "bool"
	nparams 1
	  param inout name "source" type class_ref 619056 // basic_histogram
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Merge two histograms. Returns false if merge was not possible.
 It is not an error if either object is_sampling, although the
 current sample will not be included in the merge.

 \\return size == source.size
 \\post count = old.count + oldsource.count and source.count = 0"
      end

      operation 1602736 "merge"
	stereotype "move"
	public explicit_return_type "bool"
	nparams 1
	  param inout name "source" type class_ref 619056 // basic_histogram
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} && ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} && ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Merge two histograms. Returns false if merge was not possible.
 It is not an error if either object is_sampling, although the
 current sample will not be included in the merge.

 \\return size == source.size
 \\post count = old.count + oldsource.count and source.count = 0"
      end

      operation 1593904 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Reset the objects state, size should remain constant. This
 will discard any current sampling data and set state to
 _not_ is_sampling. "
      end

      operation 1603632 "resize"
	public explicit_return_type "void"
	nparams 1
	  param in name "sz" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  if( this->data_.size() == this->sample_.size() )
  {
    this->sample_.resize( ${p0} );
  }
  this->data_.resize( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Change size of histogram. Increasing size initializes
 bew elements to zero, decreasing size discards data."
      end

      extra_member 647856 "ACCESSORS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	comment " Access internal data"
      end

      operation 1594800 "bin_mean"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->data_.mean( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Mean of the given bin (see estimater_array::mean). This excludes
 any data currently being sampled.

 \\pre idx < size (tested if DEBUG > 0 only)"
      end

      operation 1594928 "bin_variance"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->data_.variance( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Variance of the given bin (see estimater_array::variance). This excludes
 any data currently being sampled.

 \\pre idx < size (tested if DEBUG > 0 only)"
      end

      operation 1595056 "count"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->data_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Count of the number of samples (see estimater_array::count). This excludes
 any data currently being sampled."
      end

      operation 1603504 "sample_count"
	const public explicit_return_type "size_t"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  UTILITY_REQUIRE( this->is_sampling(), \"Can only get sample count during sampling.\" );
  UTILITY_REQUIRE( this->size() > ${p0}, \"Index out of range.\" );
  return this->sample_[ ${p0} ];
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The current value of a bin during sampling

 \\pre is_sampling and idx < size"
      end

      operation 1595568 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->data_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Number of bins (see digitizer::size and estimater_array::size)"
      end
    end

    class 276529 "binary_estimate"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Manage a value that is derived from repeated binary (pass/fail) 
 observations.

 This class uses a successive addition algorithm to calculate the
 mean and variance of a sample value. This is reported to be
 numerically more stable than the traditional sum and sum of
 squares methods.

 The default Counter_Type is size_t.  Generally this should be an
 unsigned integer of approximately the same size as the Float_Type"
      classrelation 877488 // <dependency>
	relation 876592 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 877488 // <dependency>
	  b parent class_ref 912431 // access
      end

      attribute 375473 "count_"
	private explicit_type "size_t"
	init_value "0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The number of trials performed"
      end

      attribute 375601 "heads_"
	private explicit_type "size_t"
	init_value "0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The number of 'positive' results"
      end

      attribute 375729 "variance_"
	private explicit_type "double"
	init_value "0.0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The cumulative variance"
      end

      operation 618033 "append"
	public explicit_return_type "void"
	nparams 1
	  param in name "success" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Add a pass or fail trial."
      end

      operation 618161 "binary_estimate"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}
: count_(0ul)
, heads_(0ul)
, variance_(0.0)
{}"
	
	
	
	
      end

      operation 618289 "binary_estimate"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 276529 // binary_estimate
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} 
: count_ (other.count_)
, heads_ (other.heads_)
, variance_ (other.variance_)
{}
"
	
	
	
	
      end

      operation 769968 "binary_estimate"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "other" type class_ref 276529 // binary_estimate
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${throw} 
: count_( other.count_ )
, heads_( other.heads_ )
, variance_( other.variance_ )
{}
"
	
	
	
	
      end

      operation 618417 "~binary_estimate"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;"
	
	
	
	
      end

      operation 618545 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 276529 // binary_estimate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap (count_, other.count_);
  std::swap (heads_, other.heads_);
  std::swap (variance_, other.variance_);
}
"
	
	
	
	
      end

      operation 618673 "operator ="
	public return_type class_ref 276529 // binary_estimate
	nparams 1
	  param in name "other" type class_ref 276529 // binary_estimate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap(other);
  return *this;
}
"
	
	
	
	
      end

      operation 770224 "count"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->count_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.count_
"
	
	comment "Get the number of trials"
      end

      operation 769456 "equivalent"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "source" type class_ref 276529 // binary_estimate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return (this->count_ == source.count_) and (this->heads_ == source.heads_) and (this->variance_ == source.variance_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Compare two binary estimates for equality"
      end

      operation 618801 "fail"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  this->append (false);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}self.append( False )
"
	
	comment "Add a fail trial"
      end

      operation 619825 "fail_count"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->count_ - this->heads_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.count_ - self.heads_
"
	
	comment "Number of failed attempts"
      end

      operation 619057 "mean"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return (this->count_ == 0 ? 0.0 : double(this->heads_)/double(this->count_));
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return 0.0 if self.count_ == 0 else float(self.heads_)/float(self.count_)
"
	
      end

      extra_member 356656 "operator=="
	
	cpp "friend inline bool operator==(const binary_estimate & lhs, const binary_estimate & rhs)
{
  return lhs.equivalent( rhs );
}
" ""
	java ""
	php ""
	python ""
	idl ""
	comment "friendly op=="
      end

      extra_member 356912 "friend"
	
	cpp "
  friend class boost::serialization::access;

" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 769840 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & count_;
    ar & heads_;
    ar & variance_;
  }
"
	
	
	
	
      end

      operation 618929 "success"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  this->append (true);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}self.append( True )"
	
	comment "Add a successful trial"
      end

      operation 619697 "success_count"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->heads_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.heads_
"
	
	comment "Number of successful attempts"
      end

      operation 619569 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  this->count_ = 0;
  this->heads_ = 0;
  this->variance_ = 0;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}self.count_ = 0
self.heads_ = 0
self.variance_ = 0
"
	
      end

      operation 619313 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->count_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.count_
"
	
	comment "Get the number of trials"
      end

      operation 619441 "stddev"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return (this->count_ > 1 ? std::sqrt(this->variance()) : 0.0);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}import math
return 0.0 if self.count_ < 2 else math.sqrt(self.variance())
"
	
      end

      operation 619185 "variance"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return (this->count_ > 1 ? this->variance_/(double(this->count_ - 1)) : 0.0); 
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return 0.0 if self.count_ < 2 else self.variance_/(self.count_ - 1)
"
	
	comment "Get the variance of the sample."
      end
    end

    class 175409 "digitizer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Convert a real valued type in range min/max into a set of digitized
 integers from 0 to size. Values outside the range min/max have undefined
 values.  (See open_digitizer for class where values outside range map
 to well-defined values.)

 Range to histogram map definition

 Define a mapping of a continuous range [X0,XN) into a discrete histogram
 bin range [0, size). Therefore a value in range (same for bins) if 
 minimum <= value < maximum

 ENSURE minimum < maximum
 ENSURE bin count > 0
"
      classrelation 864048 // <dependency>
	relation 863152 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 864048 // <dependency>
	  b parent class_ref 912431 // access
      end

      class 625584 "data_type"
	visibility package stereotype "typedef" explicit_base_type "double"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment " The expected type to convert to digital integer."
      end

      attribute 227249 "minimum_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The lowest real value to digitise (digital values below this are undefined)"
      end

      attribute 227505 "step_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The width of each bin"
      end

      attribute 227377 "width_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The distance between the minimum and maximum
 points on the axis"
      end

      attribute 226481 "size_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of bins on this axis"
      end

      extra_member 578480 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 315313 "digitizer"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: minimum_()
, step_()
, width_()
, size_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Default constructor"
      end

      operation 315441 "digitizer"
	public explicit_return_type ""
	nparams 3
	  param in name "aminimum" explicit_type "double"
	  param in name "amaximum" explicit_type "double"
	  param in name "acount" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}
: minimum_(std::min(aminimum,amaximum))
, step_(acount > 0 ? std::abs(amaximum - aminimum)/double(acount) : 0)
, width_(std::abs(amaximum - aminimum))
, size_(acount)
{
  UTILITY_REQUIRE(acount > 0, \"Can not have zero bin number\");
  UTILITY_REQUIRE(amaximum > aminimum, \"Minimum of range must be less than the maximum\");
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Create a digitizer from the range and the number of bins.

Object is invalid if acount == 0

Integers will go from 0 near amin to size near amax.
Note that amin > amax is well-defined. "
      end

      operation 265392 "digitizer"
	public explicit_return_type ""
	nparams 3
	  param in name "aminimum" explicit_type "double"
	  param in name "amaximum" explicit_type "double"
	  param in name "acount" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}${throw}
: ${name}(${p0}, ${p1}, std::size_t(${p2}))
{
  UTILITY_REQUIRE(${p2} > 0, \"Can not have negative bin number\");
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Create a digitizer from the range and the number of bins. Overload
 to allow integers (mainly literals) to be used in place of size_ts.

Object is invalid if acount <= 0

Integers will go from 0 near amin to size near amax.
Note that amin > amax is well-defined. "
      end

      operation 315569 "digitizer"
	public explicit_return_type ""
	nparams 3
	  param in name "aminimum" explicit_type "double"
	  param in name "amaximum" explicit_type "double"
	  param in name "abinwidth" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}${throw}
${body}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Create a histogram from a range and the desired bin width.

 NOTE: axis maximum will be increased so that a whole number of
 bins of the given width fits in the range."
      end

      operation 1434800 "digitizer"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 175409 // digitizer
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: minimum_( std::move( source.minimum_ ) )
, step_( std::move( source.step_ ) )
, width_( std::move( source.width_ ) )
, size_( std::move( source.size_ ) )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1434672 "digitizer"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 175409 // digitizer
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: minimum_( source.minimum_ )
, step_( source.step_ )
, width_( source.width_ )
, size_( source.size_ )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1434544 "operator="
	public return_type class_ref 175409 // digitizer
	nparams 1
	  param in name "source" type class_ref 175409 // digitizer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1434928 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 175409 // digitizer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap( this->minimum_, source.minimum_ );
  std::swap( this->step_, source.step_ );
  std::swap( this->width_, source.width_ );
  std::swap( this->size_, source.size_ );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 180785 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 315185 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & minimum_;
    ar & width_;
    ar & step_;
    ar & size_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 578352 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 316209 "bin_maximum"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "bin" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->minimum_ + (bin + 1) * this->step_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The end of a particular bin"
      end

      operation 316337 "bin_midpoint"
	const public explicit_return_type "double"
	nparams 1
	  param in name "bin" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->minimum_ + bin * this->step_ + this->step_ / 2;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The mid-point of a particular bin

 @require bin < size()"
      end

      operation 316081 "bin_minimum"
	const public explicit_return_type "double"
	nparams 1
	  param in name "bin" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->minimum_ + bin * this->step_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The beginning of a particular bin

 @require bin < size()"
      end

      operation 315953 "bin_width"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->step_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The width of each bin"
      end

      operation 316593 "convert"
	const cpp_inline public explicit_return_type "size_t"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  UTILITY_REQUIRE(this->in_range(val), \"Target value outside of range.\");
  return std::min(this->size()
                  , std::size_t(std::floor((val - this->minimum_)/this->step_)));
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The bin number a value maps on to.

Note: mapping uses half closed intervals

bin_minimum(x) <= r < bin_maximum(x), 
therefore bin number is x+1 when r == bin_maximum(x)"
      end

      operation 448561 "equivalent"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "axis" type class_ref 175409 // digitizer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->minimum_ == ${p0}.minimum_ and
    this->step_ == ${p0}.step_ and
    this->width_ == ${p0}.width_ and
    this->size_ == ${p0}.size_;
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1433648 "extend_up"
	public explicit_return_type "size_t"
	nparams 1
	  param in name "maxval" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Extend the allowable range above the current maximum. The new
 maximum will be maxval rounded up to the next bin edge. The
 number of new bins is returned.
 
 \\pre maxval > maximum

 \\return number of new bins

 \\post maximum >= maxval"
      end

      operation 1433776 "extend_down"
	public explicit_return_type "size_t"
	nparams 1
	  param in name "minval" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Extend the allowable range below the current minimum. The new
 minimum will be minval rounded up to the next bin edge. The
 number of new bins is returned.
 
 \\pre minval < minimum

 \\return number of new bins

 \\post minimum <= minval
"
      end

      operation 316465 "in_range"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return (this->minimum_ <= val) and (val < this->minimum_ + this->width_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Check is value is in the histogram range

true if minimum < val <= maximum"
      end

      operation 315825 "maximum"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->minimum_ + this->width_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The end of the histogram range"
      end

      operation 315697 "minimum"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->minimum_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The beginning of the histogram range"
      end

      operation 1452592 "operator=="
	friend public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" type class_ref 175409 // digitizer
	  param in name "rhs" type class_ref 175409 // digitizer
	cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return ${p0}.equivalent( ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1452464 "operator!="
	friend public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" type class_ref 175409 // digitizer
	  param in name "rhs" type class_ref 175409 // digitizer
	cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return not ${p0}.equivalent( ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1433904 "shrink_up"
	public explicit_return_type "size_t"
	nparams 1
	  param in name "maxval" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Decrease the allowable range to below the current maximum. The
 new maximum will be maxval rounded up to the next bin edge. The
 number of new bins removed is returned.  If maxval is greater
 than bin_minimum( size -1 ) then this will result in no change
 and zero will be returned. At least one bin must remain.

 \\pre bin_maximum( 0 ) <= maxval <= maximum

 \\return number of new bins removed : [ 0, size ]

 \\post maximum >= maxval and minimum != maximum
"
      end

      operation 1434032 "shrink_down"
	public explicit_return_type "size_t"
	nparams 1
	  param in name "minval" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Decrease the allowable range to above the current minimum. The
 new minimum will be minval rounded down to the next bin edge. The
 number of new bins removed is returned.  If minval is less
 than bin_maximum( 0 ) then this will result in no change
 and zero will be returned. At least one bin must remain.

 \\pre minimum < minval <= bin_minimum( size - 1 )

 \\return number of new bins removed : [ 0, size ]

 \\post minimum <= minval and minimum != maximum
"
      end

      operation 316721 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->size_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The number of bins in the range"
      end

      operation 1478320 "width"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->width_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The total width of the histogram range

 width = maximum - minimum"
      end
    end

    class 176049 "estimater"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Manage the mean and (sample) variance of a single data set. 

 Sample Mean     : sum(x)/n
 Sample Variance : sum((x-mean)**2)/n-1

 (Unit test suite \"estimate_test_suite\")
"
      classrelation 767792 // <generalisation>
	relation 766896 ---|>
	  a private
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 767792 // <generalisation>
	  b parent class_ref 546480 // mean_algorithm
      end

      attribute 591664 "mean_"
	private explicit_type "double"
	init_value "0.0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Geometric mean value"
      end

      attribute 591536 "variance_"
	private explicit_type "double"
	init_value "0.0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Sum of differences squared 

 (NOTE: real variance == this value/(count-1))"
      end

      attribute 226865 "count_"
	private explicit_type "size_t"
	init_value "0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Number of samples taken"
      end

      extra_member 530736 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 318513 "estimater"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: mean_()
, variance_()
, count_(0ul)
{}
"
	
	
	
	
      end

      operation 318641 "estimater"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 176049 // estimater
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}
: mean_( ${p0}.mean_ )
, variance_( ${p0}.variance_ ) 
, count_( ${p0}.count_ ) 
{}
"
	
	
	
	
      end

      operation 770096 "estimater"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "other" type class_ref 176049 // estimater
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${throw}
: mean_( std::move( ${p0}.mean_ ) )
, variance_( std::move( ${p0}.variance_ ) )
, count_( std::move( ${p0}.count_ ) )
{}
"
	
	
	
	
      end

      operation 318897 "operator="
	cpp_inline public return_type class_ref 176049 // estimater
	nparams 1
	  param in name "other" type class_ref 176049 // estimater
	cpp_decl "    ${comment}${inline}${type}& ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	
	
      end

      extra_member 181169 "friend"
	
	cpp "
  friend class boost::serialization::access;

" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 319153 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} 
{
  ar & mean_;
  ar & variance_;
  ar & count_;
}
"
	
	
	
	
      end

      operation 319281 "swap"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 176049 // estimater
	cpp_decl "    ${comment}${inline}${type} ${name}${(}${t0} & ${p0}${v0}${)}${volatile}${throw}
{
  std::swap( this->mean_, ${p0}.mean_ );
  std::swap( this->variance_, ${p0}.variance_ );
  std::swap( this->count_, ${p0}.count_ );
}
"
	
	
	
	
      end

      extra_member 530864 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 318257 "append"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} 
{
  ++this->count_;
  mean_algorithm::append(this->mean_, this->variance_, val, this->count_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.count_ += 1
super(${class},self).append(val, self.count_)
"
	
	comment "Add a sample value to the estimate"
      end

      operation 318385 "count"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->count_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.count_
"
	
	comment "The number of samples taken"
      end

      operation 769584 "equivalent"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 176049 // estimater
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return (this->count_ == other.count_) and (this->mean_ == other.mean_) and (this->variance_ == other.variance_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Test if two estimaters are equivalent"
      end

      operation 318769 "insert"
	stereotype "template"
	public explicit_return_type "void"
	nparams 2
	  param in name "begin" explicit_type "IterType"
	  param in name "end" explicit_type "IterType"
	cpp_decl "    ${comment}template<typename ${t0}>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  for (;begin != end; ++begin) this->append(static_cast< double >(*begin));
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, iterable${)}:
${docstring}for val in iterable:
  self.count_ += 1
  super(${class},self).append(val, self.count_)
"
	
      end

      operation 321073 "mean"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} 
{
  return this->mean_;
}
"
	
	
	
	
      end

      operation 1318576 "merge"
	public explicit_return_type "void"
	nparams 1
	  param in name "other" type class_ref 176049 // estimater
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  mean_algorithm::merge( this->mean_, this->variance_, this->count_, ${p0}.mean_, ${p0}.variance_, ${p0}.count_ );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Merge two estimates of the same statistic together."
      end

      operation 1318320 "operator=="
	stereotype "friend"
	friend public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" type class_ref 176049 // estimater
	  param in name "rhs" type class_ref 176049 // estimater
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return lhs.equivalent( ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1318448 "operator!="
	stereotype "friend"
	friend public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" type class_ref 176049 // estimater
	  param in name "rhs" type class_ref 176049 // estimater
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return not lhs.equivalent( ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 319025 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  this->mean_ = 0.0;
  this->variance_ = 0.0;
  this->count_ = 0;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}self.count_ = 0
super(${class},self).reset()
"
	
      end

      operation 319409 "variance"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} 
{
  return mean_algorithm::variance(this->variance_, this->count_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return super(${class},self).variance(self.count_)
"
	
      end
    end

    class 175665 "estimate_array"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Manage mean and (biased) variance of a 1D set of data

 (TODO: Unit test suite \"estimate_test_suite\")

 This array is meant to be used with an digitizer object that
 maps a range of a field into a digital range. It provides
 methods to extend (||resize|| and ||reindex||) the array if
 the digitizer needs to record values outside the originally
 expected range. It also provides methods to reduce (||resize||
 and ||remove||) the array if the recorded values lie in
 a subset of the originally expected range.  ||reindex||
 can add places at the beginning and/or end of the original
 range. ||resize|| can extend or remove data from the top of
 the original range. ||remove|| erases data at the beginning
 of the original range. As ||reindex|| and ||remove|| take or
 add data to the beginning of the array the digitizer object
 must be adjusted to maintain the correct mapping from field
 range to digital range.
"
      classrelation 787888 // <generalisation>
	relation 786992 ---|>
	  a private
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 787888 // <generalisation>
	  b parent class_ref 546480 // mean_algorithm
      end

      attribute 604720 "means_"
	private explicit_type "double"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Array of means"
      end

      attribute 604848 "vars_"
	private explicit_type "double"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Array of variance data"
      end

      attribute 226737 "count_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      extra_member 544560 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 316977 "estimate_array"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : means_(), vars_(), count_() {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 317105 "estimate_array"
	public explicit_return_type ""
	nparams 1
	  param in name "sz" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} : means_(sz), vars_(sz), count_() {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 374577 "estimate_array"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 175665 // estimate_array
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: means_(source.means_)
, vars_(source.vars_)
, count_(source.count_)
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1340848 "estimate_array"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 175665 // estimate_array
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: means_( std::move( source.means_ ) )
, vars_( std::move( source.vars_ ) )
, count_( std::move( source.count_ ) )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 374449 "~estimate_array"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 374705 "operator="
	public return_type class_ref 175665 // estimate_array
	nparams 1
	  param in name "source" type class_ref 175665 // estimate_array
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap(source);
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 180913 "friend"
	
	cpp "
  friend class boost::serialization::access;

" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 316849 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & means_; ar & vars_; ar & count_;
  }
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 373169 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 175665 // estimate_array
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  std::swap(this->means_, other.means_);
  std::swap(this->vars_, other.vars_);
  std::swap(this->count_, other.count_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 544432 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 317361 "append"
	stereotype "template"
	public explicit_return_type "void"
	nparams 2
	  param in name "begin" explicit_type "IterType"
	  param in name "end" explicit_type "IterType"
	cpp_decl "    ${comment}template<typename IterType>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ++this->count_;
  std::size_t idx = 0;
  for( idx = 0; idx != this->size() and begin != end; ++idx, ++begin )
  {
    mean_algorithm::append( this->means_[ idx ], this->vars_[ idx ], *begin, this->count_ );
  }
  UTILITY_REQUIRE( begin == end and idx == this->size(), \"Input data size does not match and array size\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Append an array of data values to the current estimator array

 distance(begin,end) < 0 is undefined

 \\pre distance(begin, end) == size : this is tested at end of
 method, so on error the array will be in an undefined state."
      end

      operation 1341232 "append_safe"
	stereotype "template"
	public explicit_return_type "void"
	nparams 2
	  param in name "begin" explicit_type "IterType"
	  param in name "end" explicit_type "IterType"
	cpp_decl "    ${comment}template<typename IterType>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  std::vector< double > tmp( begin, end );
  append( tmp );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Append an array of values data to the current estimator array

 distance(begin,end) < 0 is undefined

 \\pre distance(begin, end) == size : this is tested before the
 array is updated providing a strong exception safety guarrantee."
      end

      operation 1341104 "append"
	public explicit_return_type "void"
	nparams 1
	  param in name "arr" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const std::vector< ${t0} > & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const std::vector< ${t0} > & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Append an array of values data to the current estimator array

 \\pre arr.size == size"
      end

      operation 1433520 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  this->count_ = 0;
  this->means_.${name}(); this->vars_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Remove all elements of the array. All data is lost.

 \\post size = 0. count = 0
"
      end

      operation 317233 "count"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->count_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The number of sample cycles."
      end

      operation 1512240 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->means_.empty();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Are there any elements?"
      end

      operation 318001 "mean"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
#if defined DEBUG && DEBUG != 0
  return this->means_.at( idx );
#else
  return this->means_[ idx ];
#endif
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The geometric means of the samples at a given index"
      end

      operation 1340976 "merge"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 175665 // estimate_array
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Merge two estimate arrays of the same size. The indexing digitizers are assumed
 to be the same. The data in other is \"moved\" into this object.

 \\pre size = other.size
 \\post count = old.count + oldother.count and other.count = 0"
      end

      operation 1602608 "merge"
	stereotype "move"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 175665 // estimate_array
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} && ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} && ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Merge two estimate arrays of the same size. The indexing digitizers are assumed
 to be the same. The data in other is \"moved\" into this object.

 \\pre size = other.size
 \\post count = old.count + oldother.count"
      end

      operation 1433264 "reindex"
	public explicit_return_type "void"
	nparams 2
	  param in name "extend" explicit_type "size_t"
	  param in name "zero" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The index of the array is usually mapped to some external
 field by a digitizer. The digitizer maps a range of the field
 into an index starting at zero. If a value in the field lies
 outside the digitizer's original range then the original index
 must be changed. It needs to be extended if the new value is
 above the original range. It needs to be remapped if the new
 value is below the original range.

 This method extends and if necessary moves data to allow the
 digitizer remaps its range. Note that this invalidates all
 subrange to index mappings that may have been saved. In other
 words the digitizer should always be used to access the array
 from a value in the field. Likewise copies of the digitizer
 also become invalid.

 This operation never loses data.

 \\param extend : Extend indices beyond the current top of
     the array. This does not move data.

 \\param zero : Extend the indices below the current zero
     of the array. This involves moving data.

 \\post newsize = oldsize + extend + zero

 \\post newindex = oldindex + zero
"
      end

      operation 1433392 "remove"
	public explicit_return_type "void"
	nparams 1
	  param in name "zero" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The index of the array is usually mapped to some external
 field by a digitizer. The digitizer maps a range of the field
 into an index starting at zero. If the digitizer realises that
 all values below a certain index are never accessed it may
 want to reindex the array be removing empty values at the
 beginning of the array. 

 \\param zero : The index of an existing element that becomes
     the new zeroth. All data between [ 0, zero ) is lost.

 \\pre size > zero

 \\post newsize = oldsize - zero

 \\post newindex = oldindex - zero
"
      end

      operation 317617 "resize"
	public explicit_return_type "void"
	nparams 1
	  param in name "sz" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->means_.${name}( sz ); this->vars_.${name}( sz );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The index of the array is usually mapped to some external
 field by a digitizer. The digitizer maps a range of the field
 into an index starting at zero. If the digitizer realises that
 all values above a certain index are never accessed it may
 want to remove the empty values at the end of the array if
 sz is less than size. Alternatively it may want to extend the
 array if sz is greater than sz.

 \\param sz : The index of an existing element that becomes
     the new last index. For sz < size all data between 
     [ sz, size ) is lost. For sz > size all data
     [ oldsize, size ) === 0.

 \\pre size != sz

 \\post newsize = sz

 \\post newindex = oldindex
"
      end

      operation 317745 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Set all data to zero. The size of the array is unchanged.

 \\post count = 0, mean[] === 0, var[] === 0, size = oldsize
"
      end

      operation 317489 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->means_.size();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The number of elements"
      end

      operation 317873 "variance"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
#if defined DEBUG && DEBUG != 0
  return mean_algorithm::variance( this->vars_.at( idx ), this->count_ );
#else
  return mean_algorithm::variance( this->vars_[idx], this->count_ );
#endif
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The variance at element idx. var = 0 if count < 2"
      end
    end

    classdiagram 305456 "histograms"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 618544 "fixed_size_histogram"
      visibility package 
      nformals 1
      formal name "Digitizer" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " A combination of digitizer and data array.

 Sampling can be done in one of two ways. If one has access to all
 the sample data at once, then the sample(iter, iter) method can be
 used. If sampling is done piecemeal, then begin_sample, 
 sample_datum and end_sample can be used."
      classrelation 952368 // <generalisation>
	relation 951472 ---|>
	  a private
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 952368 // <generalisation>
	  b parent class_ref 619056 // basic_histogram
      end

      class 618800 "digitizer_type"
	visibility package stereotype "typedef" explicit_base_type "Digitizer"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment " The digitizer type."
      end

      class 618928 "data_type"
	visibility package stereotype "typedef" base_type class_ref 618800 // digitizer_type
	cpp_decl "${comment}typedef typename ${type}::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment " Data type of the digitizer"
      end

      classrelation 951984 // converter_ (<directional composition>)
	relation 951088 *-->
	  a role_name "converter_" multiplicity "1" private
	    comment " Analog to digital converter. Converts between a data_type and an
 index."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 951984 // converter_ (<directional composition>)
	  b parent class_ref 618800 // digitizer_type
      end

      class 618672 "bin_iterator"
	visibility package 
	cpp_decl "${comment}${template}class ${name}: public std::iterator<std::random_access_iterator_tag,double>
 {
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	attribute 691632 "target_"
	  private type class_ref 618544 // fixed_size_histogram
	  multiplicity "1"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} const* ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 691760 "index_"
	  private explicit_type "ptrdiff_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " The current bin index"
	end

	extra_member 645936 "LIFETIME"
	  
	  cpp "" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	end

	extra_member 646064 "friend fixed_size_histogram"
	  
	  cpp "   friend fixed_size_histogram< Digitizer >;

" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	end

	operation 1578032 "bin_iterator"
	  protected explicit_return_type ""
	  nparams 2
	    param in name "targ" type class_ref 618544 // fixed_size_histogram
	    param in name "index" explicit_type "ptrdiff_t"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} const* ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}
: target_( ${p0} )
, index_( ${p1} )
{}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1578160 "bin_iterator"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: target_()
, index_(0L)
{}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1578288 "~bin_iterator"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1578416 "bin_iterator"
	  stereotype "move"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "source" type class_ref 618672 // bin_iterator
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${throw}
: target_( std::move( ${p0}.target_ ) )
, index_( std::move( ${p0}.index_ ) )
{}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1578544 "bin_iterator"
	  stereotype "copy"
	  public explicit_return_type ""
	  nparams 1
	    param in name "source" type class_ref 618672 // bin_iterator
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: target_( ${p0}.target_ )
, index_( ${p0}.index_ )
{}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1578672 "operator="
	  public return_type class_ref 618672 // bin_iterator
	  nparams 1
	    param in name "source" type class_ref 618672 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1578800 "swap"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "other" type class_ref 618672 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap( this->target_, ${p0}.target_ );
  std::swap( this->index_, ${p0}.index_ );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	extra_member 646192 "METHODS"
	  
	  cpp "" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	end

	operation 1578928 "advance"
	  private explicit_return_type "void"
	  nparams 1
	    param in name "diff" explicit_type "ptrdiff_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->index_ += diff;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1579056 "decrement"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  --this->index_;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1579184 "equivalent"
	  const private explicit_return_type "bool"
	  nparams 1
	    param in name "other" type class_ref 618672 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return ( this->index_ == ${p0}.index_ && this->target_ == ${p0}.target_ );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1579312 "less"
	  const private explicit_return_type "bool"
	  nparams 1
	    param in name "other" type class_ref 618672 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return ( this->index_ < ${p0}.index_ && this->target_ == ${p0}.target_ );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment " Establishes only partial ordering, as (a < b) == (b < a)
 if a and b are not for the same histogram.
"
	end

	operation 1579440 "less_eq"
	  const private explicit_return_type "bool"
	  nparams 1
	    param in name "other" type class_ref 618672 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return ( this->index_ <= ${p0}.index_ && this->target_ == ${p0}.target_ );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment " Establishes only partial ordering, as (a < b) == (b < a)
 if a and b are not for the same histogram.
"
	end

	operation 1579568 "increment"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  ++this->index_;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1579696 "mean"
	  const public explicit_return_type "double"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->target_->bin_mean( this->index_ );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1579824 "variance"
	  const public explicit_return_type "double"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->target_->bin_variance( this->index_ );
}

"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1579952 "minimum"
	  const public return_type class_ref 618928 // data_type
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->target_->bin_minimum( this->index_ );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1580080 "midpoint"
	  const public return_type class_ref 618928 // data_type
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->target_->bin_midpoint( this->index_ );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1580208 "maximum"
	  const public return_type class_ref 618928 // data_type
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->target_->bin_maximum( this->index_ );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1580336 "width"
	  const public return_type class_ref 618928 // data_type
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->target_->bin_width();
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1604784 "operator->"
	  const public return_type class_ref 618672 // bin_iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}* ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1580464 "operator*"
	  const public return_type class_ref 618672 // bin_iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return *this;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1580592 "operator+="
	  public return_type class_ref 618672 // bin_iterator
	  nparams 1
	    param in name "diff" explicit_type "ptrdiff_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->advance( ${p0} );
  return *this;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1580720 "operator-="
	  public return_type class_ref 618672 // bin_iterator
	  nparams 1
	    param in name "diff" explicit_type "ptrdiff_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->advance( -${p0} );
  return *this;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	extra_member 646320 "FRIEND OPERATIONS"
	  
	  cpp "" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	end

	operation 1580848 "operator--"
	  public return_type class_ref 618672 // bin_iterator
	  nparams 1
	    param in name "i" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  ${type} tmp(*this);
  this->decrement();
  return tmp;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1580976 "operator--"
	  public return_type class_ref 618672 // bin_iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  this->decrement();
  return *this;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1581104 "operator++"
	  public return_type class_ref 618672 // bin_iterator
	  nparams 1
	    param in name "i" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  ${type} tmp(*this);
  this->increment();
  return tmp;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1581232 "operator++"
	  public return_type class_ref 618672 // bin_iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  this->increment();
  return *this;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1581360 "operator=="
	  friend public explicit_return_type "bool"
	  nparams 2
	    param in name "lhs" type class_ref 618672 // bin_iterator
	    param in name "rhs" type class_ref 618672 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return ${p0}.equivalent( ${p1} );
}

"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1581488 "operator!="
	  friend public explicit_return_type "bool"
	  nparams 2
	    param in name "lhs" type class_ref 618672 // bin_iterator
	    param in name "rhs" type class_ref 618672 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return not ${p0}.equivalent( ${p1} );
}

"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1581616 "operator<"
	  friend public explicit_return_type "bool"
	  nparams 2
	    param in name "lhs" type class_ref 618672 // bin_iterator
	    param in name "rhs" type class_ref 618672 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return ${p0}.less( ${p1} );
}

"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment " Establishes only partial ordering, as (a < b) == (b < a)
 if a and b are not for the same histogram.
"
	end

	operation 1581744 "operator<="
	  friend public explicit_return_type "bool"
	  nparams 2
	    param in name "lhs" type class_ref 618672 // bin_iterator
	    param in name "rhs" type class_ref 618672 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return ${p0}.less_eq( ${p1} );
}

"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment " Establishes only partial ordering, as (a < b) == (b < a)
 if a and b are not for the same histogram.
"
	end

	operation 1581872 "operator>"
	  friend public explicit_return_type "bool"
	  nparams 2
	    param in name "lhs" type class_ref 618672 // bin_iterator
	    param in name "rhs" type class_ref 618672 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return ${p1}.less( ${p0} );
}

"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment " Establishes only partial ordering, as (a < b) == (b < a)
 if a and b are not for the same histogram.
"
	end

	operation 1582000 "operator>="
	  friend public explicit_return_type "bool"
	  nparams 2
	    param in name "lhs" type class_ref 618672 // bin_iterator
	    param in name "rhs" type class_ref 618672 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return ${p1}.less_eq( ${p0} );
}

"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment " Establishes only partial ordering, as (a < b) == (b < a)
 if a and b are not for the same histogram.
"
	end

	operation 1582128 "operator+"
	  friend public return_type class_ref 618672 // bin_iterator
	  nparams 2
	    param in name "diff" explicit_type "ptrdiff_t"
	    param in name "iter" type class_ref 618672 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  iter.advance( ${p0} );
  return iter;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1582256 "operator+"
	  friend public return_type class_ref 618672 // bin_iterator
	  nparams 2
	    param in name "iter" type class_ref 618672 // bin_iterator
	    param in name "diff" explicit_type "ptrdiff_t"
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ${p0}.advance( ${p1} );
  return ${p0};
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1582384 "operator-"
	  friend public return_type class_ref 618672 // bin_iterator
	  nparams 2
	    param in name "diff" explicit_type "ptrdiff_t"
	    param in name "iter" type class_ref 618672 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  iter.advance( -${p0} );
  return iter;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1582512 "operator-"
	  friend public return_type class_ref 618672 // bin_iterator
	  nparams 2
	    param in name "iter" type class_ref 618672 // bin_iterator
	    param in name "diff" explicit_type "ptrdiff_t"
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ${p0}.advance( -${p1} );
  return ${p0};
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1582640 "operator-"
	  friend public explicit_return_type "ptrdiff_t"
	  nparams 2
	    param in name "lhs" type class_ref 618672 // bin_iterator
	    param in name "rhs" type class_ref 618672 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return ${p0}.index_ - ${p1}.index_;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment " This doesn't check to see if the two iterators are for
 the same histogram."
	end
      end

      extra_member 646448 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1582768 "fixed_size_histogram"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: basic_histogram()
, converter_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " For serialization"
      end

      operation 1603888 "fixed_size_histogram"
	public explicit_return_type ""
	nparams 1
	  param in name "converter" type class_ref 618800 // digitizer_type
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}
: basic_histogram( ${p0}.size() )
, converter_( ${p0} )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Construct object with the digitizer.
"
      end

      operation 1582896 "fixed_size_histogram"
	public explicit_return_type ""
	nparams 1
	  param inout name "converter" type class_ref 618800 // digitizer_type
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${throw}
: basic_histogram( ${p0}.size() )
, converter_( std::move( ${p0} ) )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Construct object with the digitizer.
"
      end

      operation 1583280 "fixed_size_histogram"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 618544 // fixed_size_histogram
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: basic_histogram( std::move( ${p0} ) )
, converter_( std::move( ${p0}.converter_ ) )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1583408 "fixed_size_histogram"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 618544 // fixed_size_histogram
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: basic_histogram( ${p0} )
, converter_( ${p0}.converter_ )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1583536 "~fixed_size_histogram"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1583664 "operator="
	public return_type class_ref 618544 // fixed_size_histogram
	nparams 1
	  param in name "source" type class_ref 618544 // fixed_size_histogram
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1583792 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 618544 // fixed_size_histogram
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->basic_histogram::swap( ${p0} );
  std::swap( this->converter_, ${p0}.converter_ );
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 646576 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1583920 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive> ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ${p0} & boost::serialization::base_object< basic_histogram >(*this);
  ar & converter_;
};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 646704 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 647984 "USING"
	
	cpp "   public:
    using basic_histogram::begin_sample;
    using basic_histogram::bin_mean;
    using basic_histogram::bin_variance;
    using basic_histogram::count;
    using basic_histogram::end_sample;
    using basic_histogram::is_sampling;
    using basic_histogram::reset;
    using basic_histogram::size;
" ""
	java ""
	php ""
	python ""
	idl ""
	comment " The methods of basic_histogram we export. "
      end

      operation 1604016 "merge"
	public explicit_return_type "bool"
	nparams 1
	  param inout name "source" type class_ref 618544 // fixed_size_histogram
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  if( this->converter_ == ${p0}.converter_ )
  {
    return this->basic_histogram::merge( ${p0} );
  }
  return false;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Merge two histograms. If the ranges of the digitizers are
 not the same but they have some equivalent bins, then the
 histograms are adjusted to give equivalent digitizers and
 data structures before merging.

 Returns false if merge was not possible.
"
      end

      operation 1584816 "merge"
	stereotype "move"
	public explicit_return_type "bool"
	nparams 1
	  param inout name "source" type class_ref 618544 // fixed_size_histogram
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} && ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  if( this->converter_ == ${p0}.converter_ )
  {
    return this->basic_histogram::merge( std::move( ${p0} ) );
  }
  return false;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Merge two histograms. If the ranges of the digitizers are
 not the same but they have some equivalent bins, then the
 histograms are adjusted to give equivalent digitizers and
 data structures before merging.

 Returns false if merge was not possible.
"
      end

      operation 1585072 "sample"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "begin" explicit_type "InIter"
	  param in name "end" explicit_type "InIter"
	cpp_decl "    ${comment}template< class ${t0} > ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  this->begin_sample();
  for( ; ${p0} != ${p1}; ++${p0} )
  {
    this->sample_datum( static_cast< data_type >( *${p0} ) );
  }
  this->end_sample();
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Sample the given range of data. The arguments are only expected
 to satisfy a model of the input iterator. If observable is not
 auto_extendable then out-of-range values raise an exception.
"
      end

      operation 1604272 "sample_safe"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "begin" explicit_type "InIter"
	  param in name "end" explicit_type "InIter"
	cpp_decl "    ${comment}template< class ${t0} > ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  this->begin_sample();
  for( ; ${p0} != ${p1}; ++${p0} )
  {
    this->sample_datum_safe( static_cast< data_type >( *${p0} ) );
  }
  this->end_sample();
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Sample the given range of data. The arguments are only expected
 to satisfy a model of the input iterator. If observable is not
 auto_extendable then out-of-range values raise an exception.
"
      end

      operation 1585200 "sample_datum_safe"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" type class_ref 618928 // data_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  UTILITY_REQUIRE( this->converter_.in_range( val ), \"Sampled value out of expected range.\" );
  this->increment_bin( this->converter_.convert( val ) );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add one datum to the sampling subobject.

 \\pre in_range( val )

 The correct way to use this method is in combination with
 sample_datum and end_sample. e.g.
 '''
   begin_sample (call once)
   ...
   sample_datum (0,*) calls
   ...
   end_sample (call once)
 '''

"
      end

      operation 1604144 "sample_datum"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" type class_ref 618928 // data_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->increment_bin( this->converter_.convert( val ) );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add one datum to the sampling subobject.

 \\pre in_range( val ) (NOT CHECKED)

 The correct way to use this method is in combination with
 sample_datum and end_sample. e.g.
 '''
   begin_sample (call once)
   ...
   sample_datum (0,*) calls
   ...
   end_sample (call once)
 '''

"
      end

      extra_member 646832 "ACCESSORS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	comment " Access internal data"
      end

      operation 1585328 "bin_maximum"
	const public return_type class_ref 618928 // data_type
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->converter_.${name}( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Maximum of the given bin (see digitizer::bin_maximum)"
      end

      operation 1585456 "bin_midpoint"
	const public return_type class_ref 618928 // data_type
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->converter_.${name}( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Midpoint of the given bin (see digitizer::bin_midpoint)"
      end

      operation 1585584 "bin_minimum"
	const public return_type class_ref 618928 // data_type
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->converter_.${name}( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Minimum of the given bin (see digitizer::bin_minimum)"
      end

      operation 1585712 "bin_width"
	const public return_type class_ref 618928 // data_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->converter_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Width of a bin (see digitizer::width)"
      end

      operation 1586224 "maximum"
	const public return_type class_ref 618928 // data_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->converter_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Maximum of the data range (see digitizer::maximum)"
      end

      operation 1586352 "minimum"
	const public return_type class_ref 618928 // data_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->converter_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Minimum of the data range (see digitizer::minimum)"
      end

      operation 1586480 "in_range"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "val" type class_ref 618928 // data_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->converter_.${name}( ${p0} );
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Test if value is in current data range (see digitizer::in_range)"
      end

      operation 1586736 "begin"
	const public return_type class_ref 618672 // bin_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return ${type}( this, 0 );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Iterator to access the first bin"
      end

      operation 1586864 "end"
	const public return_type class_ref 618672 // bin_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return ${type}( this, this->size() );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Iterator to the one-past-last bin"
      end
    end

    class 585776 "histogram"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " A combination of digitizer and data array.

 Sampling can be done in one of two ways. If one has access to all
 the sample data at once, then the sample(iter, iter) method can be
 used. If sampling is done piecemeal, then begin_sample, 
 sample_datum and end_sample can be used."
      classrelation 857392 // converter_ (<directional composition>)
	relation 856496 *-->
	  a role_name "converter_" private
	    comment " Object that converts a continuous value into a digital index. "
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 857392 // converter_ (<directional composition>)
	  b parent class_ref 175409 // digitizer
      end

      classrelation 857520 // data_ (<directional composition>)
	relation 856624 *-->
	  a role_name "data_" private
	    comment " The histogram of observation counts."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 857520 // data_ (<directional composition>)
	  b parent class_ref 175665 // estimate_array
      end

      attribute 631600 "sample_"
	private explicit_type "size_t"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " The counts of values being sampled (not archived, copied
 or swapped).  This vector is used to record the bin counts
 during sampling.  It is only used during the ||sample|| method
 so is neither copied or archived.  Making it an attribute
 allows it to be adjusted if the range needs to be extended
 during sampling.
"
      end

      attribute 631472 "extendable_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Whether the histogram can automatically extend if the
 sampled range exceeds the expected range."
      end

      attribute 677808 "sampling_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Is this histogram sampling?"
      end

      class 592304 "bin_iterator"
	visibility package 
	cpp_decl "${comment}${template}class ${name}: public std::iterator<std::random_access_iterator_tag,double>
 {
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	attribute 638256 "target_"
	  private type class_ref 585776 // histogram
	  multiplicity "1"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} const* ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 638128 "index_"
	  private explicit_type "ptrdiff_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " The current bin index"
	end

	extra_member 592432 "LIFETIME"
	  
	  cpp "" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	end

	extra_member 592048 "friend histogram"
	  
	  cpp "friend histogram;" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	end

	operation 1469360 "bin_iterator"
	  protected explicit_return_type ""
	  nparams 2
	    param in name "targ" type class_ref 585776 // histogram
	    param in name "index" explicit_type "ptrdiff_t"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} const* ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}
: target_( ${p0} )
, index_( ${p1} )
{}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1466288 "bin_iterator"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: target_()
, index_(0L)
{}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1466416 "~bin_iterator"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1466544 "bin_iterator"
	  stereotype "move"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "source" type class_ref 592304 // bin_iterator
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${throw}
: target_( std::move( ${p0}.target_ ) )
, index_( std::move( ${p0}.index_ ) )
{}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1466672 "bin_iterator"
	  stereotype "copy"
	  public explicit_return_type ""
	  nparams 1
	    param in name "source" type class_ref 592304 // bin_iterator
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: target_( ${p0}.target_ )
, index_( ${p0}.index_ )
{}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1466800 "operator="
	  public return_type class_ref 592304 // bin_iterator
	  nparams 1
	    param in name "source" type class_ref 592304 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1466928 "swap"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "other" type class_ref 592304 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap( this->target_, ${p0}.target_ );
  std::swap( this->index_, ${p0}.index_ );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	extra_member 592176 "METHODS"
	  
	  cpp "" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	end

	operation 1469232 "advance"
	  private explicit_return_type "void"
	  nparams 1
	    param in name "diff" explicit_type "ptrdiff_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->index_ += diff;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1467184 "decrement"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  --this->index_;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1468720 "equivalent"
	  const private explicit_return_type "bool"
	  nparams 1
	    param in name "other" type class_ref 592304 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return ( this->index_ == ${p0}.index_ && this->target_ == ${p0}.target_ );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1468848 "less"
	  const private explicit_return_type "bool"
	  nparams 1
	    param in name "other" type class_ref 592304 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return ( this->index_ < ${p0}.index_ && this->target_ == ${p0}.target_ );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment " Establishes only partial ordering, as (a < b) == (b < a)
 if a and b are not for the same histogram.
"
	end

	operation 1468592 "less_eq"
	  const private explicit_return_type "bool"
	  nparams 1
	    param in name "other" type class_ref 592304 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return ( this->index_ <= ${p0}.index_ && this->target_ == ${p0}.target_ );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment " Establishes only partial ordering, as (a < b) == (b < a)
 if a and b are not for the same histogram.
"
	end

	operation 1467056 "increment"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  ++this->index_;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1470256 "mean"
	  const public explicit_return_type "double"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->target_->bin_mean( this->index_ );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1470384 "variance"
	  const public explicit_return_type "double"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->target_->bin_variance( this->index_ );
}

"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1470512 "minimum"
	  const public explicit_return_type "double"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->target_->bin_minimum( this->index_ );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1470768 "midpoint"
	  const public explicit_return_type "double"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->target_->bin_midpoint( this->index_ );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1470640 "maximum"
	  const public explicit_return_type "double"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->target_->bin_maximum( this->index_ );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1470896 "width"
	  const public explicit_return_type "double"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->target_->bin_width();
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1471024 "operator*"
	  const public explicit_return_type "double"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->mean();
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1469872 "operator+="
	  public return_type class_ref 592304 // bin_iterator
	  nparams 1
	    param in name "diff" explicit_type "ptrdiff_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->advance( ${p0} );
  return *this;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1469744 "operator-="
	  public return_type class_ref 592304 // bin_iterator
	  nparams 1
	    param in name "diff" explicit_type "ptrdiff_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->advance( -${p0} );
  return *this;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	extra_member 592304 "FRIEND OPERATIONS"
	  
	  cpp "" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	end

	operation 1467952 "operator--"
	  public return_type class_ref 592304 // bin_iterator
	  nparams 1
	    param in name "i" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  ${type} tmp(*this);
  this->decrement();
  return tmp;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1467568 "operator--"
	  public return_type class_ref 592304 // bin_iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  this->decrement();
  return *this;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1467824 "operator++"
	  public return_type class_ref 592304 // bin_iterator
	  nparams 1
	    param in name "i" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  ${type} tmp(*this);
  this->increment();
  return tmp;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1467440 "operator++"
	  public return_type class_ref 592304 // bin_iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  this->increment();
  return *this;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1468208 "operator=="
	  friend public explicit_return_type "bool"
	  nparams 2
	    param in name "lhs" type class_ref 592304 // bin_iterator
	    param in name "rhs" type class_ref 592304 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return ${p0}.equivalent( ${p1} );
}

"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1468336 "operator!="
	  friend public explicit_return_type "bool"
	  nparams 2
	    param in name "lhs" type class_ref 592304 // bin_iterator
	    param in name "rhs" type class_ref 592304 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return not ${p0}.equivalent( ${p1} );
}

"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1469104 "operator<"
	  friend public explicit_return_type "bool"
	  nparams 2
	    param in name "lhs" type class_ref 592304 // bin_iterator
	    param in name "rhs" type class_ref 592304 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return ${p0}.less( ${p1} );
}

"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment " Establishes only partial ordering, as (a < b) == (b < a)
 if a and b are not for the same histogram.
"
	end

	operation 1468976 "operator<="
	  friend public explicit_return_type "bool"
	  nparams 2
	    param in name "lhs" type class_ref 592304 // bin_iterator
	    param in name "rhs" type class_ref 592304 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return ${p0}.less_eq( ${p1} );
}

"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment " Establishes only partial ordering, as (a < b) == (b < a)
 if a and b are not for the same histogram.
"
	end

	operation 1468464 "operator>"
	  friend public explicit_return_type "bool"
	  nparams 2
	    param in name "lhs" type class_ref 592304 // bin_iterator
	    param in name "rhs" type class_ref 592304 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return ${p1}.less( ${p0} );
}

"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment " Establishes only partial ordering, as (a < b) == (b < a)
 if a and b are not for the same histogram.
"
	end

	operation 1468080 "operator>="
	  friend public explicit_return_type "bool"
	  nparams 2
	    param in name "lhs" type class_ref 592304 // bin_iterator
	    param in name "rhs" type class_ref 592304 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return ${p1}.less_eq( ${p0} );
}

"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment " Establishes only partial ordering, as (a < b) == (b < a)
 if a and b are not for the same histogram.
"
	end

	operation 1470128 "operator+"
	  friend public return_type class_ref 592304 // bin_iterator
	  nparams 2
	    param in name "diff" explicit_type "ptrdiff_t"
	    param in name "iter" type class_ref 592304 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  iter.advance( ${p0} );
  return iter;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1470000 "operator+"
	  friend public return_type class_ref 592304 // bin_iterator
	  nparams 2
	    param in name "iter" type class_ref 592304 // bin_iterator
	    param in name "diff" explicit_type "ptrdiff_t"
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ${p0}.advance( ${p1} );
  return ${p0};
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1469616 "operator-"
	  friend public return_type class_ref 592304 // bin_iterator
	  nparams 2
	    param in name "diff" explicit_type "ptrdiff_t"
	    param in name "iter" type class_ref 592304 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  iter.advance( -${p0} );
  return iter;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1469488 "operator-"
	  friend public return_type class_ref 592304 // bin_iterator
	  nparams 2
	    param in name "iter" type class_ref 592304 // bin_iterator
	    param in name "diff" explicit_type "ptrdiff_t"
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ${p0}.advance( -${p1} );
  return ${p0};
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 1471152 "operator-"
	  friend public explicit_return_type "ptrdiff_t"
	  nparams 2
	    param in name "lhs" type class_ref 592304 // bin_iterator
	    param in name "rhs" type class_ref 592304 // bin_iterator
	  cpp_decl "    ${comment}${friend}${static}inline ${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  return ${p0}.index_ - ${p1}.index_;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment " This doesn't check to see if the two iterators are for
 the same histogram."
	end
      end

      extra_member 578736 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1435056 "histogram"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: converter_()
, data_()
, sample_()
, extendable_()
, sampling_( false )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " For serialization"
      end

      operation 1435696 "histogram"
	public explicit_return_type ""
	nparams 4
	  param in name "minval" explicit_type "double"
	  param in name "maxval" explicit_type "double"
	  param in name "binwidth" explicit_type "double"
	  param in name "extendable" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throw}
${body}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Construct object with the given range and bin width.
 Indicate if the histogram can automatically expand if the
 sampled range exceeds the expected range.

 \\param minval, maxval : expected observation range.

 \\param bincount : the number of bins in the range.

 \\param extendable : whether to allow extending of range.
"
      end

      operation 1459760 "histogram"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 4
	  param in name "minval" explicit_type "double"
	  param in name "maxval" explicit_type "double"
	  param in name "bincount" explicit_type "size_t"
	  param in name "extendable" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throw}
${body}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Construct object with the given range and desired number
 of bins.  Indicate if the histogram can automatically expand
 if the sampled range exceeds the expected range.

 \\param minval, maxval : expected observation range.

 \\param bincount : the number of bins in the range.

 \\param extendable : whether to allow extending of range.
"
      end

      operation 1435824 "histogram"
	public explicit_return_type ""
	nparams 4
	  param in name "minval" explicit_type "double"
	  param in name "maxval" explicit_type "double"
	  param in name "bincount" explicit_type "int"
	  param in name "extendable" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throw}
${body}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Construct object with the given range and desired number
 of bins.  Indicate if the histogram can automatically expand
 if the sampled range exceeds the expected range.

 \\param minval, maxval : expected observation range.

 \\param bincount : the number of bins in the range.

 \\param extendable : whether to allow extending of range.
"
      end

      operation 1435312 "histogram"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 585776 // histogram
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: converter_( std::move( ${p0}.converter_ ) )
, data_( std::move( ${p0}.data_ ) )
, sample_()
, extendable_( std::move( ${p0}.extendable_ ) )
, sampling_( std::move( ${p0}.sampling_ ) )
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1435440 "histogram"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 585776 // histogram
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: converter_( ${p0}.converter_ )
, data_( ${p0}.data_ )
, sample_()
, extendable_( ${p0}.extendable_ )
, sampling_( ${p0}.sampling_ )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1435184 "~histogram"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1435568 "operator="
	public return_type class_ref 585776 // histogram
	nparams 1
	  param in name "source" type class_ref 585776 // histogram
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap( ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1438128 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 585776 // histogram
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap( this->converter_, ${p0}.converter_ );
  std::swap( this->data_, ${p0}.data_ );
  std::swap( this->extendable_, ${p0}.extendable_ );
  std::swap( this->sampling_, ${p0}.sampling_ );
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 578992 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1437488 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & converter_;
    ar & data_;
    ar & extendable_;
    ar & sampling_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 578608 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1437744 "auto_extendable"
	stereotype "get"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->extendable_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1437616 "auto_extendable"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "doit" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->extendable_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1436208 "begin_sample"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Initialize the sampling subobject.

 The correct way to use this method is in combination with
 sample_datum and end_sample. e.g.
 '''
   begin_sample (call once)
   ...
   sample_datum (0,*) calls
   ...
   end_sample (call once)
 '''

"
      end

      operation 1484976 "end_sample"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  this->data_.append( this->sample_.begin(), this->sample_.end() );
  this->sampling_ = false;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Copy data from the sampling subobject to the estimate
 array object.

 The correct way to use this method is in combination with
 sample_datum and end_sample. e.g.
 '''
   begin_sample (call once)
   ...
   sample_datum (0,*) calls
   ...
   end_sample (call once)
 '''

"
      end

      operation 1436080 "extend"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Extend the histogram to include the given value. This
 method is independent of is_auto_extendable.

 \\pre not in_range( val )"
      end

      operation 1556400 "is_sampling"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->sampling_;
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Is this in sampling phase?"
      end

      operation 1438000 "merge"
	public explicit_return_type "bool"
	nparams 1
	  param inout name "source" type class_ref 585776 // histogram
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Merge two histograms. If the ranges of the digitizers are
 not the same but they have some equivalent bins, then the
 histograms are adjusted to give equivalent digitizers and
 data structures before merging.

 Returns false if merge was not possible.
"
      end

      operation 1556912 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Reset the objects state, size should remain constant"
      end

      operation 1435952 "sample"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "begin" explicit_type "InIter"
	  param in name "end" explicit_type "InIter"
	cpp_decl "    ${comment}template< class ${t0} > ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  this->begin_sample();
  for( ; ${p0} != ${p1}; ++${p0} )
  {
    this->sample_datum( static_cast< double >( *${p0} ) );
  }
  this->end_sample();
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Sample the given range of data. The arguments are only expected
 to satisfy a model of the input iterator. If observable is not
 auto_extendable then out-of-range values raise an exception.
"
      end

      operation 1438256 "sample_datum"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add one datum to the sampling subobject.

 The correct way to use this method is in combination with
 sample_datum and end_sample. e.g.
 '''
   begin_sample (call once)
   ...
   sample_datum (0,*) calls
   ...
   end_sample (call once)
 '''

"
      end

      extra_member 578864 "ACCESSORS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	comment " Access internal data"
      end

      operation 1436720 "bin_maximum"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->converter_.${name}( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Maximum of the given bin (see digitizer::bin_maximum)"
      end

      operation 1436976 "bin_midpoint"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->converter_.${name}( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Midpoint of the given bin (see digitizer::bin_midpoint)"
      end

      operation 1444784 "bin_minimum"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->converter_.${name}( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Minimum of the given bin (see digitizer::bin_minimum)"
      end

      operation 1436848 "bin_width"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->converter_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Width of a bin (see digitizer::width)"
      end

      operation 1437232 "bin_mean"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->data_.mean( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Mean of the given bin (see estimater_array::mean)"
      end

      operation 1437104 "bin_variance"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->data_.variance( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Variance of the given bin (see estimater_array::variance)"
      end

      operation 1471792 "count"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->data_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Count of the number of samples (see estimater_array::count)"
      end

      operation 1436592 "maximum"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->converter_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Maximum of the data range (see digitizer::maximum)"
      end

      operation 1436464 "minimum"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->converter_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Minimum of the data range (see digitizer::minimum)"
      end

      operation 1436336 "in_range"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->converter_.${name}( ${p0} );
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Test if value is in current data range (see digitizer::in_range)"
      end

      operation 1437360 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->converter_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Number of bins (see digitizer::size and estimater_array::size)"
      end

      operation 1471408 "begin"
	const public return_type class_ref 592304 // bin_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return ${type}( this, 0 );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Iterator to access the first bin"
      end

      operation 1471280 "end"
	const public return_type class_ref 592304 // bin_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return ${type}( this, this->size() );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Iterator to the one-past-last bin"
      end
    end

    class 189489 "estimate_2d"
      visibility package stereotype "deprecated"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Manage the mean and (biased) variance of a 2D array of data. 

 (Unit test suite \"estimater_test_fw\")
"
      classrelation 306993 // <dependency>
	relation 306737 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 306993 // <dependency>
	  b parent class_ref 176433 // basic_mean
      end

      class 189617 "index_type"
	visibility package stereotype "typedef" explicit_base_type "size_t"
	cpp_decl "${comment}typedef std::array< ${type}, 2ul > ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      classrelation 306609 // array_ (<directional composition>)
	relation 306353 *-->
	  stereotype "multi_array"
	  a role_name "array_" multiplicity "*" private
	    comment "The 2D array of data"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type}, ${association} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 306609 // array_ (<directional composition>)
	  b parent class_ref 176433 // basic_mean
	  association_explicit_type "2"
      end

      attribute 247473 "count_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Sampling count"
      end

      operation 344241 "append"
	stereotype "template"
	public explicit_return_type "IterType"
	nparams 2
	  param in name "begin" explicit_type "IterType"
	  param in name "end" explicit_type "IterType"
	cpp_decl "    ${comment}template<typename IterType>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}{
  ++this->count_;
  estimate_2d::index_type idx;
  for (std::size_t i = 0; i != this->array_.shape()[0]; ++i)
  {
    idx[0] = i;
    for (std::size_t j = 0; j != this->array_.shape()[1] and begin != end; ++j, ++begin)
    {
      idx[1] = j;
      this->array_(idx).append (*begin, this->count_);
    }
  }
  return begin;
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Append an array of values data to the current estimator array

 distance(begin,end) < 0 is undefined
 distance(begin,end) < size, zero appended for missing elements
 distance(begin,end) > size, extra elements ignored

 returns iterator after the last element used"
      end

      operation 349233 "count"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->count_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 344113 "estimate_2d"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : array_(), count_() {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 343985 "estimate_2d"
	public explicit_return_type ""
	nparams 1
	  param in name "sz" type class_ref 189617 // index_type
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} : array_(sz), count_() {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 374193 "estimate_2d"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 189489 // estimate_2d
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: array_(source.array_)
, count_(source.count_)
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 374065 "~estimate_2d"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 343857 "mean"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" type class_ref 189617 // index_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->array_(idx).mean();
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 374321 "operator="
	public return_type class_ref 189489 // estimate_2d
	nparams 1
	  param in name "source" type class_ref 189489 // estimate_2d
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap(source);
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 343729 "resize"
	public explicit_return_type "void"
	nparams 1
	  param in name "sz" type class_ref 189617 // index_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->array_.resize(sz);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 343601 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 194481 "friend"
	
	cpp "
  friend class boost::serialization::access;

" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 343473 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & array_;
    ar & count_;
  }
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 356017 "shape"
	const public explicit_return_type "std::size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} *const ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->array_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 343345 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->array_.num_elements();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 373297 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 189489 // estimate_2d
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  std::swap(this->array_, other.array_);
  std::swap(this->count_, other.count_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 343217 "variance"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" type class_ref 189617 // index_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->array_(idx).variance(this->count_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 189745 "estimate_3d"
      visibility package stereotype "deprecated"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Manage the mean and (biased) variance of a 2D array of data. 

 (Unit test suite \"estimate_test_suite\")
"
      class 197297 "const_iterator"
	visibility package stereotype "typedef" base_type class_ref 176433 // basic_mean
	cpp_decl "${comment}typedef boost::multi_array< ${type}, 3ul>::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 189873 "index_type"
	visibility package stereotype "typedef" explicit_base_type "size_t"
	cpp_decl "${comment}typedef std::array< ${type}, 3ul > ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      classrelation 306737 // array_ (<directional composition>)
	relation 306481 *-->
	  stereotype "multi_array"
	  a role_name "array_" multiplicity "*" private
	    comment "The 2D array of data"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type}, ${association} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 306737 // array_ (<directional composition>)
	  b parent class_ref 176433 // basic_mean
	  association_explicit_type "3"
      end

      attribute 247601 "count_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Sampling count"
      end

      operation 344369 "append"
	stereotype "template"
	public explicit_return_type "IterType"
	nparams 2
	  param in name "begin" explicit_type "IterType"
	  param in name "end" explicit_type "IterType"
	cpp_decl "    ${comment}template<typename IterType>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ++this->count_;
  estimate_3d::index_type idx;
  for (std::size_t i = 0; i != this->array_.shape()[0]; ++i)
  {
    idx[0] = i;
    for (std::size_t j = 0; j != this->array_.shape()[1]; ++j)
    {
      idx[1] = j;
      for (std::size_t k = 0; k != this->array_.shape()[2] and begin != end; ++k, ++begin)
      {
        idx[2] = k;
        this->array_(idx).append (*begin, this->count_);
      }
    }
  }
  return begin;
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Append an array of values data to the current estimator array

 distance(begin,end) < 0 is undefined
 distance(begin,end) < size, zero appended for missing elements
 distance(begin,end) > size, extra elements ignored

 returns iterator after the last element used"
      end

      operation 366513 "begin"
	const public return_type class_ref 197297 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->array_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 349361 "count"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->count_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 366641 "end"
	const public return_type class_ref 197297 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->array_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 344497 "estimate_3d"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : array_(), count_() {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 344625 "estimate_3d"
	public explicit_return_type ""
	nparams 1
	  param in name "sz" type class_ref 189873 // index_type
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} : array_(sz), count_() {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 373809 "estimate_3d"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 189745 // estimate_3d
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: array_(source.array_)
, count_(source.count_)
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 373681 "~estimate_3d"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 373937 "operator="
	public return_type class_ref 189745 // estimate_3d
	nparams 1
	  param in name "source" type class_ref 189745 // estimate_3d
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap(source);
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 344753 "mean"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" type class_ref 189873 // index_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->array_(idx).mean();
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 344881 "resize"
	public explicit_return_type "void"
	nparams 1
	  param in name "sz" type class_ref 189873 // index_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->array_.resize(sz);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 345009 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 194609 "friend"
	
	cpp "
  friend class boost::serialization::access;

" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 345137 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & array_;
    ar & count_;
  }
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 356145 "shape"
	const public explicit_return_type "std::size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} *const ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->array_.${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 345265 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->array_.num_elements();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 373425 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 189745 // estimate_3d
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  std::swap(this->array_, other.array_);
  std::swap(this->count_, other.count_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 345393 "variance"
	const public explicit_return_type "double"
	nparams 1
	  param in name "idx" type class_ref 189873 // index_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->array_(idx).variance(this->count_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 174897 "digital_sampler"
      visibility package stereotype "deprecated"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "  ----------------------------------------------------------------------
  Generate one sample for a HISTOGRAM

  Capture the counts of bin in an N-dimensional histogram set.

  ContainerType must conform to the MultiArray concept described
  in the boost multi_array library.

  The concept of data collection is to update the histogram during a
  sample session.  During each sampling session the sample count will
  increment by one. There are two modes of operation:

      - random access sampling

        Randomly update bins by calling 'sample(idx, val)'. Indicate
        the end of the sampling session by a call to 'end_sample()'.

      - iterator access

        Increment indices in a list [begin,end) by one using
        'insert(...)'.

   * Each mode will only update the count by one.

   * 'sample(...)' starts a sampling session.  Calling
     'insert(...)' afterwards will be considered as part of the
     same sampling session until the next call to 'end_sample()'."
      class 175281 "const_iterator"
	visibility package stereotype "typedef" explicit_base_type "size_t"
	cpp_decl "${comment}typedef std::vector< ${type} >::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      attribute 226225 "counts_"
	private explicit_type "size_t"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " The counts for each bin 

(we use doubles to integrate this class with the estimate array 
which requires iterator types that dereference to a double)"
      end

      attribute 226353 "digitizer_"
	private type class_ref 175409 // digitizer
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The axis definition"
      end

      operation 314929 "begin"
	stereotype "const"
	const public return_type class_ref 175281 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->counts_.${name}();
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "iterator to the first bin"
      end

      operation 314289 "digital_sampler"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Create default digitizer that will reject all samples.

 default semantics for empty ctor"
      end

      operation 314033 "digital_sampler"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 174897 // digital_sampler
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} = default;"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " default semantics for copy ctor"
      end

      operation 314417 "digital_sampler"
	public explicit_return_type ""
	nparams 1
	  param in name "axis" type class_ref 175409 // digitizer
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}
: counts_(axis.size())
, digitizer_(axis)
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Create sampler with the given digitizer"
      end

      operation 374833 "~digital_sampler"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 320817 "end"
	stereotype "const"
	const public return_type class_ref 175281 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->counts_.${name}();
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "One-passed-last bin iterator"
      end

      operation 320945 "get_digitizer"
	const public return_type class_ref 175409 // digitizer
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->digitizer_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Access the digitizer"
      end

      operation 314673 "insert"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Collect digital sample at the given value"
      end

      operation 320689 "insert"
	stereotype "template"
	public explicit_return_type "void"
	nparams 2
	  param in name "begin" explicit_type "Iter"
	  param in name "end" explicit_type "Iter"
	cpp_decl "    ${comment}${friend}template< typename Iter > ${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  for (;begin != end; ++begin) this->insert(static_cast<double>(*begin));
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Collect digital samples from the given range of data

 beg,end not from a single sequence is undefined
 beg > end is undefined"
      end

      operation 357681 "operator[]"
	const public explicit_return_type "size_t"
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->counts_[idx];
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " count of bin idx

 result is undefined if idx >= size"
      end

      operation 313905 "operator ="
	public return_type class_ref 174897 // digital_sampler
	nparams 1
	  param in name "other" type class_ref 174897 // digital_sampler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap(other);
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " default assignment semantics"
      end

      operation 314545 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Reset the counts"
      end

      extra_member 180657 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 313777 "serialize"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ar & counts_;
  ar & digitizer_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 314801 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->counts_.size();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Number of bins"
      end

      operation 375089 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 174897 // digital_sampler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  std::swap(this->counts_, other.counts_);
  std::swap(this->digitizer_, other.digitizer_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end
    end

    class 190001 "digital_2d_sampler"
      visibility package stereotype "deprecated"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "  ----------------------------------------------------------------------
  Generate one sample for a HISTOGRAM

  Capture the counts of bin in an N-dimensional histogram set.

  ContainerType must conform to the MultiArray concept described
  in the boost multi_array library.

  The concept of data collection is to update the histogram during a
  sample session.  During each sampling session the sample count will
  increment by one. There are two modes of operation:

      - random access sampling

        Randomly update bins by calling 'sample(idx, val)'. Indicate
        the end of the sampling session by a call to 'end_sample()'.

      - iterator access

        Increment indices in a list [begin,end) by one using
        'insert(...)'.

   * Each mode will only update the count by one.

   * 'sample(...)' starts a sampling session.  Calling
     'insert(...)' afterwards will be considered as part of the
     same sampling session until the next call to 'end_sample()'."
      class 190129 "const_iterator"
	visibility package stereotype "typedef" explicit_base_type "size_t"
	cpp_decl "${comment}typedef const ${type}* ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 190513 "index_type"
	visibility package stereotype "typedef" explicit_base_type "size_t"
	cpp_decl "${comment}typedef std::array< ${type}, 2ul > ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 203953 "array_type"
	visibility package stereotype "typedef" base_type class_ref 203825 // multi_array
	nactuals 3
	actual class class_ref 203825 // multi_array
	  rank 0 explicit_value "size_t"
	actual class class_ref 203825 // multi_array
	  rank 1 explicit_value "2"
	actual class class_ref 203825 // multi_array
	  rank 2 explicit_value ""
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	classrelation 320689 // <realization>
	  relation 320433 -_-|>
	    a public
	      cpp default "${type}"
	      python "${type}"
	      classrelation_ref 320689 // <realization>
	    b parent class_ref 203825 // multi_array
	end
      end

      classrelation 320817 // counts_ (<directional composition>)
	relation 320561 *-->
	  stereotype "unique_ptr"
	  a role_name "counts_" multiplicity "*" private
	    comment " The counts for each bin "
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 320817 // counts_ (<directional composition>)
	  b parent class_ref 203953 // array_type
      end

      attribute 247857 "digitizer_"
	private type class_ref 175409 // digitizer
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type}, 2ul > ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " The axis definition"
      end

      operation 345521 "begin"
	stereotype "const"
	const public return_type class_ref 190129 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return ${type}(this->counts_->origin());
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "iterator to the first bin"
      end

      operation 345649 "digital_2d_sampler"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: counts_(new ${class}::array_type)
, digitizer_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Create default digitizer that will reject all samples.

 default semantics for empty ctor"
      end

      operation 345777 "digital_2d_sampler"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 190001 // digital_2d_sampler
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}
: counts_(new ${class}::array_type(*source.counts_))
, digitizer_(source.digitizer_)
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " default semantics for copy ctor"
      end

      operation 346033 "digital_2d_sampler"
	public explicit_return_type ""
	nparams 1
	  param in name "axis" type class_ref 175409 // digitizer
	cpp_decl "    ${comment}${inline}explicit ${name}${(}std::array< ${t0}, 2ul > ${p0}${v0}${)}${volatile}${throw}
: counts_(new ${class}::array_type(boost::extents[axis[0].size()][axis[1].size()]))
, digitizer_(axis)
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Create sampler with the given digitizer"
      end

      operation 358321 "end"
	stereotype "const"
	const public return_type class_ref 190129 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return ${type}(this->counts_->origin() + this->counts_->num_elements());
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "One-passed-last bin iterator"
      end

      operation 346289 "get_digitizer"
	const public return_type class_ref 175409 // digitizer
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->digitizer_[${p0}];
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Access the digitizer"
      end

      operation 348849 "increment"
	private explicit_return_type "void"
	nparams 1
	  param in name "idx" type class_ref 190513 // index_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  ++(*this->counts_)(${p0});
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 357297 "operator[]"
	const public explicit_return_type "size_t"
	nparams 1
	  param in name "idx" type class_ref 190513 // index_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return (*this->counts_)(idx);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " count of bin idx

 result is undefined if idx >= size"
      end

      operation 346929 "operator ="
	public return_type class_ref 190001 // digital_2d_sampler
	nparams 1
	  param in name "other" type class_ref 190001 // digital_2d_sampler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap(other);
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " default assignment semantics"
      end

      operation 346417 "insert"
	public explicit_return_type "void"
	nparams 2
	  param in name "val1" explicit_type "double"
	  param in name "val2" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Collect digital sample at the given value"
      end

      operation 356913 "insert"
	stereotype "template"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "TupleType"
	cpp_decl "    ${comment}${friend}template< typename ${t0} > ${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->insert(${p0}[0], ${p0}[1]);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Collect digital sample at the given value

 val is expected to support operator[] with two elements"
      end

      operation 346545 "insert"
	stereotype "template"
	public explicit_return_type "void"
	nparams 2
	  param in name "begin" explicit_type "Iter"
	  param in name "end" explicit_type "Iter"
	cpp_decl "    ${comment}${friend}template< typename Iter > ${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  for (;begin != end; ++begin) this->insert(*begin);
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Collect digital samples from the given range of data"
      end

      operation 346673 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Reset the counts"
      end

      extra_member 194737 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 346801 "serialize"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ar & counts_;
  ar & digitizer_[0];
  ar & digitizer_[1];
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 357809 "shape"
	const public explicit_return_type "std::size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} *const ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->counts_->${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 347057 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->counts_->num_elements();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Number of bins"
      end

      operation 375217 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 190001 // digital_2d_sampler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  std::swap(this->counts_, other.counts_);
  std::swap(this->digitizer_, other.digitizer_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end
    end

    class 190257 "digital_3d_sampler"
      visibility package stereotype "deprecated"
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "  ----------------------------------------------------------------------
  Generate one sample for a HISTOGRAM

  Capture the counts of bin in an N-dimensional histogram set.

  ContainerType must conform to the MultiArray concept described
  in the boost multi_array library.

  The concept of data collection is to update the histogram during a
  sample session.  During each sampling session the sample count will
  increment by one. There are two modes of operation:

      - random access sampling

        Randomly update bins by calling 'sample(idx, val)'. Indicate
        the end of the sampling session by a call to 'end_sample()'.

      - iterator access

        Increment indices in a list [begin,end) by one using
        'insert(...)'.

   * Each mode will only update the count by one.

   * 'sample(...)' starts a sampling session.  Calling
     'insert(...)' afterwards will be considered as part of the
     same sampling session until the next call to 'end_sample()'."
      class 190385 "const_iterator"
	visibility package stereotype "typedef" explicit_base_type "size_t"
	cpp_decl "${comment}typedef const ${type}* ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 190641 "index_type"
	visibility package stereotype "typedef" explicit_base_type "size_t"
	cpp_decl "${comment}typedef std::array< ${type}, 3ul > ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 204081 "array_type"
	visibility package stereotype "typedef" base_type class_ref 203825 // multi_array
	nactuals 3
	actual class class_ref 203825 // multi_array
	  rank 0 explicit_value "size_t"
	actual class class_ref 203825 // multi_array
	  rank 1 explicit_value "3"
	actual class class_ref 203825 // multi_array
	  rank 2 explicit_value ""
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	classrelation 320945 // <realization>
	  relation 320689 -_-|>
	    a public
	      cpp default "${type}"
	      python "${type}"
	      classrelation_ref 320945 // <realization>
	    b parent class_ref 203825 // multi_array
	end
      end

      classrelation 321073 // counts_ (<directional composition>)
	relation 320817 *-->
	  stereotype "unique_ptr"
	  a role_name "counts_" multiplicity "*" private
	    comment " The counts for each bin "
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 321073 // counts_ (<directional composition>)
	  b parent class_ref 204081 // array_type
      end

      attribute 248113 "digitizer_"
	private type class_ref 175409 // digitizer
	multiplicity "*"
	stereotype "array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type}, 3ul > ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " The axis definition"
      end

      operation 358193 "begin"
	stereotype "const"
	const public return_type class_ref 190385 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->counts_->origin();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "iterator to the first bin"
      end

      operation 347313 "digital_3d_sampler"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: counts_(new ${class}::array_type)
, digitizer_()
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Create default digitizer that will reject all samples.

 default semantics for empty ctor"
      end

      operation 347441 "digital_3d_sampler"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 190257 // digital_3d_sampler
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}
: counts_(new ${class}::array_type(*source.counts_))
, digitizer_(source.digitizer_)
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " default semantics for copy ctor"
      end

      operation 347697 "digital_3d_sampler"
	public explicit_return_type ""
	nparams 1
	  param in name "axis" type class_ref 175409 // digitizer
	cpp_decl "    ${comment}${inline}explicit ${name}${(}std::array< ${t0}, 3ul > ${p0}${v0}${)}${volatile}${throw}
: counts_(new ${class}::array_type(boost::extents[axis[0].size()][axis[1].size()][axis[2].size()]))
, digitizer_(axis)
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Create sampler with the given digitizer"
      end

      operation 346161 "end"
	stereotype "const"
	const public return_type class_ref 190385 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->counts_->origin() + this->counts_->num_elements();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "One-passed-last bin iterator"
      end

      operation 347953 "get_digitizer"
	const public return_type class_ref 175409 // digitizer
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->digitizer_[${p0}];
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Access the digitizer"
      end

      operation 348977 "increment"
	private explicit_return_type "void"
	nparams 1
	  param in name "idx" type class_ref 190641 // index_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  ++(*this->counts_)(${p0});
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 357425 "operator[]"
	const public explicit_return_type "size_t"
	nparams 1
	  param in name "idx" type class_ref 190641 // index_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return (*this->counts_)(idx);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " count of bin idx

 result is undefined if idx >= size"
      end

      operation 375473 "operator ="
	public return_type class_ref 190257 // digital_3d_sampler
	nparams 1
	  param in name "other" type class_ref 190257 // digital_3d_sampler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap(other);
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " default assignment semantics"
      end

      operation 348081 "insert"
	public explicit_return_type "void"
	nparams 3
	  param in name "val1" explicit_type "double"
	  param in name "val2" explicit_type "double"
	  param in name "val3" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Collect digital sample at the given value"
      end

      operation 357041 "insert"
	stereotype "template"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "TupleType"
	cpp_decl "    ${comment}${friend}template< typename ${t0} > ${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->insert(${p0}[0], ${p0}[1], ${p0}[2]);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Collect digital sample at the given value

 val is expected to support operator[] with three elements"
      end

      operation 348209 "insert"
	stereotype "template"
	public explicit_return_type "void"
	nparams 2
	  param in name "begin" explicit_type "Iter"
	  param in name "end" explicit_type "Iter"
	cpp_decl "    ${comment}${friend}template< typename Iter > ${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  for (;begin != end; ++begin) this->insert(*begin);
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Collect digital samples from the given range of data"
      end

      operation 348337 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Reset the counts"
      end

      extra_member 194865 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 348465 "serialize"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ar & counts_;
  ar & digitizer_[0];
  ar & digitizer_[1];
  ar & digitizer_[2];
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 358065 "shape"
	const public explicit_return_type "std::size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} *const ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->counts_->${name}();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 348721 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->counts_->num_elements();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Number of bins"
      end

      operation 375345 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 190257 // digital_3d_sampler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  std::swap(this->counts_, other.counts_);
  std::swap(this->digitizer_, other.digitizer_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end
    end
  end

  classview 128047 "math util"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 169519 // framework deployment
    comment "Various intefaces to external maths methods and some utility operations"
    classdiagram 128047 "Math tools"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 156975 "mathutil"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}namespace ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      ncouples 1
      key "testsuite" value "TODO"
      comment "Container of several maths utility functions

 (Unit test suite \"math_test_suite\")"
      operation 374191 "linesegment_circle_intersect"
	public explicit_return_type "bool"
	nparams 7
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	  param in name "x0" explicit_type "double"
	  param in name "y0" explicit_type "double"
	  param in name "radius" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Calculate if line segment x1,y1 : x2,y2 and circle x0,y0,radius
intersect.

TODO: No test method"
      end

      extra_member 208049 "implementation namespace begin"
	
	cpp "
namespace implementation
{
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 397489 "next2_i"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "int"
	cpp_decl "    ${comment}${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return (a-1) | ((a-1) >> 1);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Nearest power of 2

 For existing powers of 2, returns the input value

 Code should demangle to:
 next2_i does:
  --a;
  a |= (a >> 1);
"
      end

      operation 397745 "next2_h"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "int"
	cpp_decl "    ${comment}${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return next2_i(a) | (next2_i(a) >> 2);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Nearest power of 2

 For existing powers of 2, returns the input value

 Code should demangle to:
 next2_h does
  a |= (a >> 2);
"
      end

      operation 397873 "next2_g"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "int"
	cpp_decl "    ${comment}${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return next2_h(a) | (next2_h(a) >> 4);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Nearest power of 2

 For existing powers of 2, returns the input value

 Code should demangle to:
 next2_g does
  a |= (a >> 4);
}
"
      end

      operation 398001 "next2_f"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "int"
	cpp_decl "    ${comment}${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return next2_g(a) | (next2_g(a) >> 8);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Nearest power of 2

 For existing powers of 2, returns the input value

 Code should demangle to:
 next2_f does
  a |= (a >> 8);
"
      end

      extra_member 208177 "- namespace end"
	
	cpp "}
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 717743 "next2"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "int"
	cpp_decl "    ${comment}${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return (implementation::next2_f(a) | (implementation::next2_f(a) >> 16)) + 1;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Nearest power of 2

 For existing powers of 2, returns the input value

 Code should demangle to:
 {
  --a;
  a |= (a >> 1);
  a |= (a >> 2);
  a |= (a >> 4);
  a |= (a >> 8);
  a |= (a >> 16);
  return a + 1;
}
"
      end

      operation 717871 "next64"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "int"
	cpp_decl "    ${comment}${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return ((a & 63) == 0 ? a : (a + 64) & ~63);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Nearest multiple of 64

 For an existing multiple of 64, returns the input value"
      end

      operation 1611695 "in_closed_range"
	cpp_inline public explicit_return_type "bool"
	nparams 3
	  param in name "a_min" explicit_type "NumberType"
	  param in name "a_max" explicit_type "NumberType"
	  param in name "a_val" explicit_type "NumberType"
	cpp_decl "    ${comment}template< typename ${t0} > ${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract}
{
  return (${p0} <= ${p2} and ${p2} <= ${p1});
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Is val in the range [min, max] ?"
      end

      operation 1612079 "in_open_range"
	cpp_inline public explicit_return_type "bool"
	nparams 3
	  param in name "a_min" explicit_type "NumberType"
	  param in name "a_max" explicit_type "NumberType"
	  param in name "a_val" explicit_type "NumberType"
	cpp_decl "    ${comment}template< typename ${t0} > ${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract}
{
  return (${p0} < ${p2} and ${p2} < ${p1});
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Is val in the range (min, max) ?"
      end

      operation 1612207 "in_half_up_range"
	cpp_inline public explicit_return_type "bool"
	nparams 3
	  param in name "a_min" explicit_type "NumberType"
	  param in name "a_max" explicit_type "NumberType"
	  param in name "a_val" explicit_type "NumberType"
	cpp_decl "    ${comment}template< typename ${t0} > ${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract}
{
  return (${p0} <= ${p2} and ${p2} < ${p1});
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Is val in the range [min, max) ?"
      end

      operation 1612335 "in_half_down_range"
	cpp_inline public explicit_return_type "bool"
	nparams 3
	  param in name "a_min" explicit_type "NumberType"
	  param in name "a_max" explicit_type "NumberType"
	  param in name "a_val" explicit_type "NumberType"
	cpp_decl "    ${comment}template< typename ${t0} > ${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract}
{
  return (${p0} < ${p2} and ${p2} <= ${p1});
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Is val in the range (min, max] ?"
      end

      operation 1612463 "find_n_of"
	public explicit_return_type "IterType"
	nparams 5
	  param in name "begin" explicit_type "IterType"
	  param in name "end" explicit_type "IterType"
	  param in name "arr" explicit_type "ArrayType"
	  param in name "val" explicit_type "ValueType"
	  param in name "ith" explicit_type "size_t"
	cpp_decl "    ${comment}template< typename ${t0}, typename ${t2}, typename ${t3} > ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract}
{
   for ( ; begin != end; ++begin)
   {
     if (val == arr[*begin])
     {
        --ith;
        if (ith == 0) break;
     }
   }
  return begin;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Return position in [begin,end) of ith occurance of val in
 arr[*begin] or end if no element found.

 CONCEPT REQUIRE: is_comparable(ValueType, ArrayType::value_type)
 CONCEPT REQUIRE: is_convertible(typeof(*begin), ArrayType::size_type)
 UNDEFINED iff: not in_half_up_range(0, arr.size, *iter) for iter in [begin,end)
"
      end

      operation 2013615 "find_n"
	public explicit_return_type "IterType"
	nparams 4
	  param in name "begin" explicit_type "IterType"
	  param in name "end" explicit_type "IterType"
	  param in name "val" explicit_type "ValueType"
	  param in name "ith" explicit_type "size_t"
	cpp_decl "    ${comment}template< typename ${t0}, typename ${t2} > ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract}
{
   for ( ; begin != end; ++begin)
   {
     if (val == *begin)
     {
        --ith;
        if (ith == 0) break;
     }
   }
  return begin;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Return position in [begin,end) of ith occurance of val in
 *begin or end if no element found.

 CONCEPT REQUIRE: is_convertible(typeof(*begin), ValueType)
"
      end
    end

    class 449327 "ftoi"
      visibility package stereotype "struct"
      nformals 1
      formal name "Float_type" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Traits class to get integer of same size as floating point type

 (Unit test suite \"fuzzyequals_test_suite\")"
      class 449455 "int_type"
	visibility package stereotype "typedef" explicit_base_type "int"
	cpp_decl "${comment}typedef ${type}(* ${name})();
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
      end
    end

    class 449583 "ftoi<float>"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Traits class to get integer of same size as float

 (Unit test suite \"fuzzyequals_test_suite\")"
      class 449711 "int_type"
	visibility package stereotype "typedef" explicit_base_type "int32_t"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
      end
    end

    class 449839 "ftoi<double>"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Traits class to get integer of same size as double

 (Unit test suite \"fuzzyequals_test_suite\")"
      class 449967 "int_type"
	visibility package stereotype "typedef" explicit_base_type "int64_t"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
      end
    end

    class 463407 "random_distribution"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Decorator class that provides uniformly distributed numbers based
on the Mersenne Twister with the 19937 parameters. The simplest use
if with operator() which generates a uniform sequence of psuedo
random numbers between [0,1).

 (Unit test suite \"utility_random_suite\")


"
      attribute 1137839 "generator_"
	private type class_ref 889391 // mt19937
	multiplicity "0..1"
	stereotype "shared_ptr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment "The internal data structure of the generator"
      end

      operation 1605423 "uniform"
	public explicit_return_type "double"
	nparams 2
	  param in name "a" explicit_type "double"
	    defaultvalue "1"
	  param in name "b" explicit_type "double"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Return a uniform random number between [min(a,b):max(a,b)]"
      end

      operation 1605679 "split_uniform"
	cpp_inline public explicit_return_type "double"
	nparams 4
	  param in name "outlft" explicit_type "double"
	  param in name "outrht" explicit_type "double"
	  param in name "inlft" explicit_type "double"
	  param in name "inrht" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Random number in an interval that is split in two.
 Generate a random number that is between outlft and outrht but
 not between inlft and inrht

 To make the intervals symmetric we do for intervals (z1,z2) and (z3,z4)
  left_interval (z2 - z1)
  width = (left_interval + z4 - z3)
  result = width * rnd()
  if result >= (left_interval)
    return x3 + result - left_interval
  else
    return z2 - result

 For rnd() [) this gives (] [) * MT output interval
           [] this gives (] []
           () this gives () [)
           (] this gives () []

 fortran name geom::rndit4 interface geom::rndint"
      end

      operation 1754927 "randint"
	preserve_cpp_body_indent public explicit_return_type "size_t"
	nparams 2
	  param in name "a" explicit_type "size_t"
	  param in name "b" explicit_type "size_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "  Generate a random integer in interval [a,b] 

\\if a == b result = a"
      end

      operation 2185007 "operator="
	public return_type class_ref 463407 // random_distribution
	nparams 1
	  param in name "source" type class_ref 463407 // random_distribution
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  this->swap (${p0});
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 2038191 "random_distribution"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: generator_()
{}
"
	
	
	
	
	comment "(default constructor should be used only for serialize operations)"
      end

      operation 783663 "random_distribution"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "a_gen" type class_ref 889391 // mt19937
	cpp_decl "    ${comment}${inline}${name}${(}boost::shared_ptr< ${t0} > ${p0}${v0}${)}${volatile}${throw}
: generator_(${p0})
{}
"
	
	
	
	
      end

      operation 2184879 "random_distribution"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 463407 // random_distribution
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: generator_(${p0}.generator_)
{}
"
	
	
	
	
      end

      operation 783791 "~random_distribution"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      extra_member 450607 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      classrelation 1170735 // <dependency>
	relation 1133615 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 1170735 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 2037935 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}${friend}template<class Archive> ${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ar & generator_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 2185135 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 463407 // random_distribution
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap (this->generator_, source.generator_);
}
"
	
	
	
	
      end

      operation 2061359 "version"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 655025 "shuffle"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "alist" explicit_type "ContentType"
	cpp_decl "    ${comment}template< typename ${t0} > ${friend}${static}${inline}${virtual}${type} ${name}${(}boost::ptr_vector< ${t0} >& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template< typename ${t0} > ${inline}${type} ${class}::${name}${(}boost::ptr_vector< ${t0} >& ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Randomize the contents of the container in-place."
      end

      operation 655665 "shuffle"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "alist" explicit_type "Container"
	cpp_decl "    ${comment}${friend}${static}template< typename ${t0} > ${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::random_shuffle( ${p0}.begin(), ${p0}.end(), boost::bind(&${class}::randint, this, 0, _1) );
}
"
	
	
	
	
	comment "Randomize the contents of the container in-place."
      end

      operation 679601 "shuffle"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "abegin" explicit_type "IterType"
	  param in name "aend" explicit_type "IterType"
	cpp_decl "    ${comment}${friend}${static}template< typename ${t0} > ${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  std::random_shuffle( ${p0}, ${p1}, boost::bind(&${class}::randint, this, 0, _1) );
}
"
	
	
	
	
	comment "Randomize the contents of the container in-place."
      end
    end

    activity 128175 "divider"
    end

    class 184623 "lapack"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "  BLAS/LAPACK compatibility routines, should call through to external library

  Consult the documentation of the Blas/Lapack library for documentation about the 
  routines listed."
      class 230576 "int_type"
	visibility package stereotype "typedef" explicit_base_type "int"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment " integer type used by the lapack library"
      end

      operation 835631 "dgetrf"
	class_operation public return_type class_ref 230576 // int_type
	nparams 5
	  param in name "m" type class_ref 230576 // int_type
	  param in name "n" type class_ref 230576 // int_type
	  param inout name "amx" explicit_type "double"
	  param in name "lda" type class_ref 230576 // int_type
	  param inout name "ipiv" type class_ref 230576 // int_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} * ${p2}, ${t3} ${p3}, ${t4} * ${p4}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Computers an LU factorization of a general M-by-N matrix A
 using partial pivoting with row interchanges.

 The factorization has the form
   A = P * L * U
 Where P is a permutation matrix, L is lower triangular with
 unit diagonal elements (lower trapezoidal if m>n). U is 
 upper triangular (upper trapezoidal if m<n).

 \\return is info about the result of diagonalization.
   = 0 : success
   < 0 : (-result)th argument had an illegal value
   > 0 : U(result,result) is exactly zero. Factorization completed
           but division by zero will occur if it is used to solve a 
           system of equations."
      end

      operation 352688 "dgetrf"
	class_operation public return_type class_ref 230576 // int_type
	nparams 2
	  param inout name "amx" explicit_type "boost::multi_array< double, 2 >"
	  param inout name "ipiv" explicit_type "std::vector< int_type  >"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Computers an LU factorization of a general M-by-N matrix A
 using partial pivoting with row interchanges.

 The factorization has the form
   A = P * L * U
 Where P is a permutation matrix, L is lower triangular with
 unit diagonal elements (lower trapezoidal if m>n). U is 
 upper triangular (upper trapezoidal if m<n).

 \\return is info about the result of diagonalization.
   = 0 : success
   < 0 : (-result)th argument had an illegal value
   > 0 : U(result,result) is exactly zero. Factorization completed
           but division by zero will occur if it is used to solve a 
           system of equations."
      end

      operation 835759 "dgetrs"
	class_operation public return_type class_ref 230576 // int_type
	nparams 7
	  param in name "n" type class_ref 230576 // int_type
	  param in name "nrhs" type class_ref 230576 // int_type
	  param inout name "amx" explicit_type "double"
	  param in name "lda" type class_ref 230576 // int_type
	  param inout name "ipiv" type class_ref 230576 // int_type
	  param out name "b" explicit_type "double"
	  param in name "ldb" type class_ref 230576 // int_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}, ${t5} * ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} * ${p2}, ${t3} ${p3}, ${t4} * ${p4}, ${t5} * ${p5}, ${t6} ${p6}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Solves a system of linear equations
  A * C = B
with a general N-by-N matrix A using the LU
factorization computed by dgetrf. (We only 
use the no-transpose version so the transpose or
conjugate transpose forms are not accessible
through this interface.)
"
      end

      operation 352560 "dgetrs"
	class_operation public return_type class_ref 230576 // int_type
	nparams 3
	  param in name "amx" explicit_type "boost::multi_array< double, 2 >"
	  param in name "ipiv" explicit_type "std::vector< int_type >"
	  param out name "b" explicit_type "std::vector< double >"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Solves a system of linear equations
  A * C = B
with a general N-by-N matrix A using the LU
factorization computed by dgetrf. (We only 
use the no-transpose version so the transpose or
conjugate transpose forms are not accessible
through this interface.)
"
      end

      operation 532272 "dgetrs"
	class_operation public return_type class_ref 230576 // int_type
	nparams 3
	  param in name "amx" explicit_type "boost::multi_array< double, 2 >"
	  param in name "ipiv" explicit_type "std::vector< int_type >"
	  param out name "b" explicit_type "std::valarray< double >"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Solves a system of linear equations
  A * C = B
with a general N-by-N matrix A using the LU
factorization computed by dgetrf. (We only 
use the no-transpose version so the transpose or
conjugate transpose forms are not accessible
through this interface.)
"
      end

      operation 836015 "version"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Get the inuse lapack library version"
      end
    end
  end

  classview 175535 "framework"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    classdiagram 174639 "Run environment classes"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 243759 "filesystem"
      visibility package 
      cpp_decl "${comment}${template}class @{PROJECT}API ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A set of utility functions for operating on filesystem objects."
      operation 316207 "compare_binary"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 3
	  param in name "a_path" explicit_type "string"
	  param in name "a_start" explicit_type "IterType"
	  param in name "a_end" explicit_type "IterType"
	cpp_decl "    ${comment}${friend}template< typename IterType > ${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${v0},  ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template< typename IterType > ${inline}${type} ${class}::${name}${(}const ${t0}& ${p0},  ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Compare the binary contents of the file pointed to by a_path with
the contents of a \"buffer\" from a_start to a_end.  This reads 
the file as a series of elements with the same type as *a_begin.

This is equivalent to:

for (filestream< typeof(*a_begin) > is(path);is and a_begin != a_end; ++a_begin)
{
 if (*a_begin != is.get) return false
}
return true

For non-char types this is very different compare_content."
      end

      operation 1611567 "compare_content"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 3
	  param in name "a_path" explicit_type "string"
	  param in name "a_start" explicit_type "IterType"
	  param in name "a_end" explicit_type "IterType"
	cpp_decl "    ${comment}${friend}template< typename IterType > ${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${v0},  ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template< typename IterType > ${inline}${type} ${class}::${name}${(}const ${t0}& ${p0},  ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Compare the contents of the file pointed to by a_path with
the contents of a \"buffer\" from a_start to a_end.  This reads 
the file as a serialized series of elements with the same type as *a_begin.

This is very different to:

for (fstream is(path); is and a_begin != a_end; ++a_begin)
{
   typeof(*a_begin) value;
   is >> value;
  if (*a_begin != value) return false;
}
return true;

Note this is very different to compare_binary for non-char types."
      end

      operation 316463 "relative_path"
	class_operation public return_type class_ref 252079 // path
	nparams 2
	  param in name "a_base" type class_ref 252079 // path
	  param in name "a_leafer" type class_ref 252079 // path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Attempt to create a relative path from a_base to a_leafer.  If this 
is not possible complete(a_leafer) is returned.  The relative path is
constructed relative to the whole of a_base.  If either paths are
not complete, then they are made \"complete\"."
      end
    end

    class 128559 "fp_env"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      ncouples 1
      key "testsuite" value "TODO"
      comment "Manage Floating Point environment"
      attribute 136239 "Downward"
	class_attribute const_attribute public explicit_type "uint"
	init_value "FE_DOWNWARD"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "rounding direction"
      end

      attribute 136111 "ToNearest"
	class_attribute const_attribute public explicit_type "uint"
	init_value "FE_TONEAREST"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "rounding direction"
      end

      attribute 136367 "TowardZero"
	class_attribute const_attribute public explicit_type "uint"
	init_value "FE_TOWARDZERO"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "rounding direction"
      end

      attribute 136495 "Upward"
	class_attribute const_attribute public explicit_type "uint"
	init_value "FE_UPWARD"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "rounding direction"
      end

      attribute 136623 "DivByZero"
	class_attribute const_attribute public explicit_type "uint"
	init_value "FE_DIVBYZERO"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "exception flag"
      end

      attribute 136751 "Inexact"
	class_attribute const_attribute public explicit_type "uint"
	init_value "FE_INEXACT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "exception flag"
      end

      attribute 136879 "Invalid"
	class_attribute const_attribute public explicit_type "uint"
	init_value "FE_INVALID"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "exception flag"
      end

      attribute 137007 "Overflow"
	class_attribute const_attribute public explicit_type "uint"
	init_value "FE_OVERFLOW"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "exception flag"
      end

      attribute 137135 "Underflow"
	class_attribute const_attribute public explicit_type "uint"
	init_value "FE_UNDERFLOW"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "exception flag"
      end

      attribute 137263 "AnyException"
	class_attribute const_attribute public explicit_type "uint"
	init_value "FE_ALL_EXCEPT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "exception flag"
      end

      attribute 135855 "env_"
	class_attribute public explicit_type "fp_env"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Singleton FP environment"
      end

      extra_member 177968 "content"
	
	cpp "struct content;" "struct fp_env::content
{
  std::fenv_t env_;
};"
	java ""
	php ""
	python ""
	idl ""
      end

      class 190896 "fp_nonstop_scope"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	comment " Use RAII to define a scope with FP non-stop mode (ie
 FP exceptions are not raised until the end of the scope).
 Note that all FP exceptions are reset at the end of the scope
 so if they are of interest they must be examined before reaching
 the end of the scope."
	attribute 229680 "content_"
	  private explicit_type "fp_env::content"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type}* ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	operation 266032 "fp_nonstop_scope"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
: content_(new fp_env::content)
{
  feholdexcept(&(content_->env_));
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 266160 "~fp_nonstop_scope"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
{
  // We must reset all errors to avoid throwing an exception out of this dtor
  feclearexcept(FE_ALL_EXCEPT);
  feupdateenv( &(content_->env_) );
  delete content_;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 266288 "fp_nonstop_scope"
	  stereotype "copy"
	  public explicit_return_type ""
	  nparams 1
	    param in name "source" type class_ref 190896 // fp_nonstop_scope
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 266544 "fp_nonstop_scope"
	  stereotype "move"
	  public explicit_return_type ""
	  nparams 1
	    param in name "source" type class_ref 190896 // fp_nonstop_scope
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 266416 "operator="
	  public return_type class_ref 190896 // fp_nonstop_scope
	  nparams 1
	    param in name "source" type class_ref 190896 // fp_nonstop_scope
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end
      end

      operation 128047 "fp_env"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {}
"
	
	
	
	
	comment "Initialise FP environment"
      end

      operation 128175 "~fp_env"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	
	
      end

      operation 128303 "fp_env"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "fp_env"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
      end

      operation 128431 "operator="
	private explicit_return_type "fp_env"
	nparams 1
	  param in name "source" explicit_type "fp_env"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 128815 "ensure"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return err_setup == 0;
}

"
	
	
	
	
	comment "Test if the floating point environment was initialised properly."
      end

      operation 128943 "error_message"
	public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Get description of the current error. Should be called after ensure
or no_except returned false.  Will return only the first exception"
      end

      operation 129199 "except"
	public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Return which exceptions occured.  Foreach exception that
has been raised the corresponding constant will be ORed to
the result."
      end

      operation 129071 "no_except"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Test if a floating point exception occured"
      end

      operation 128687 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "reset the exceptions in the current environment

\\throw std::runtime if reset operation failed"
      end

      operation 128559 "report"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Report the floating point environment"
      end

      operation 1632047 "round"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Get the floating point rounding mode. 

\\return equal to Downward, ToNearest, TowardZero or
Upward."
      end

      operation 129327 "set_round"
	public explicit_return_type "void"
	nparams 1
	  param in name "mode" explicit_type "uint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Set the floating point rounding mode. 

\\throw std::domain_error if mode is not
equal to Downward, ToNearest, TowardZero or
Upward."
      end
    end

    class 207791 "machine_env"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Access specific details of the machine environment

This includes:
Host name and type
CPU cache information
Operating system type
Numeric limits

This does NOT include:
Library version information
OpenMP information
Run date
Compiler information

Notes:
* CPU specific details all refer to the first CPU.
* Cache information only considers data caches"
      classrelation 647343 // <dependency>
	relation 633263 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 647343 // <dependency>
	  b parent class_ref 128559 // fp_env
      end

      attribute 245807 "hostname"
	const_attribute public explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The machines \"hostname\", as supplied by uname->nodename"
      end

      attribute 245935 "family"
	const_attribute public explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The gross family of processor (x86, x86_64 etc), as supplied by uname"
      end

      attribute 246063 "os_name"
	const_attribute public explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "OS Name, as supplied by uname"
      end

      attribute 246191 "os_version"
	const_attribute public explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "OS version, as supplied by uname"
      end

      attribute 246319 "os_release"
	const_attribute public explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "OS release, as supplied by uname"
      end

      attribute 246447 "cache_depth"
	const_attribute public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Largest cache levels, may be 0, 1, 2 or 3 for no, L1, L2 and L3 caches
or -1 if no information could be found."
      end

      attribute 246575 "cache_line_size"
	const_attribute public explicit_type "size_t"
	multiplicity "3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The L1 cache line size"
      end

      attribute 246703 "cache_size"
	const_attribute public explicit_type "long"
	multiplicity "3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Cache size (in bytes)"
      end

      extra_member 287663 "PROVENANCE"
	
	cpp "" "// Include file that contains the actual compilation version
// information.
//#include \"vers.cpp\"

"
	java ""
	php ""
	python ""
	idl ""
	comment "Exemplars of various possible observable objects."
      end

      attribute 577455 "compilation_program_"
	class_attribute private explicit_type "string"
	init_value "\"gcc\""
	stereotype "version"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The name the program was compiled as.

"
      end

      attribute 577583 "compilation_date_"
	class_attribute private explicit_type "string"
	init_value "\"date\""
	stereotype "version"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 577711 "compilation_version_"
	class_attribute private explicit_type "string"
	init_value "\"version\""
	stereotype "version"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 577839 "compiler_name_"
	class_attribute private explicit_type "string"
	init_value "\"gcc\""
	stereotype "version"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 577967 "compiler_flags_"
	class_attribute private explicit_type "string"
	init_value "\"ddd\""
	stereotype "version"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 578095 "compiler_clg_"
	class_attribute private explicit_type "string"
	init_value "\"ccc\""
	stereotype "version"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 273583 "machine_env"
	private explicit_return_type ""
	nparams 12
	  param in name "hname" explicit_type "string"
	  param in name "fam" explicit_type "string"
	  param in name "osname" explicit_type "string"
	  param in name "osver" explicit_type "string"
	  param in name "osrel" explicit_type "string"
	  param in name "depth" explicit_type "int"
	  param in name "l1lsz" explicit_type "int"
	  param in name "l1sz" explicit_type "int"
	  param in name "l2lsz" explicit_type "int"
	  param in name "l2sz" explicit_type "int"
	  param in name "l3lsz" explicit_type "int"
	  param in name "l3sz" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}, const ${t4} & ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}, ${t10} ${p10}${v10}, ${t11} ${p11}${v11}${)}${volatile}${throw}
: hostname (${p0})
, family (${p1})
, os_name (${p2})
, os_version (${p3})
, os_release (${p4})
, cache_depth (std::min(3,${p5}))
, cache_line_size ()
, cache_size ()
{
       const_cast< std::size_t& >(cache_line_size[0])=${p6};
       const_cast< int64_t& >(cache_size[0])=${p7};
       const_cast< std::size_t& >(cache_line_size[1])=${p8};
       const_cast< int64_t& >(cache_size[1])=${p9};
       const_cast< std::size_t& >(cache_line_size[2])=${p10};
       const_cast< int64_t& >(cache_size[2])=${p11};
}
"
	
	
	
	
      end

      operation 273711 "create"
	class_operation public explicit_return_type "machine_env"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::unique_ptr< ${type} > ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}std::unique_ptr< ${type} > ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}
}
"
	
	
	
	
	comment "Create a machine_env object."
      end

      operation 807473 "description"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Print copyright information and host/compilation settings."
      end

      operation 435887 "~machine_env"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{}
"
	
	
	
	
      end
    end
  end

  classview 161200 "archive file"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 169519 // framework deployment
    classdiagram 206768 "Sink classes"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 313520 "base_sink"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Interface to allow output documents to be written in a
 controlled manner.  Derived classes could be implemented
 to use standard files or some sort of archive (ie only
 one open OS file).

 NOTE: possible inconsistent behaviour among derived
 classes: Sink classes are intended to manage saving
 results to permanent storage. In this regard it is
 expected that the results of 'read'/'exists' calls will
 depend on calls to 'write'/'append' regardless of when
 an object is serialized or deserialized. (i.e.  calls to
 'write'/'append' between serialization and deserialization
 will be reflected in results of 'read'/'exists'.) However,
 a sink may be implemented only in memory in which case
 the results of 'read'/'exists' calls will reflect
 the state at the point of serialization. (i.e.
 calls to 'write'/'append' between serialization and
 deserialization will _NOT_ be reflected in results of
 'read'/'exists'.) Such inconsistent behaviour is a
 \"feature\" not a \"bug\".
"
      classrelation 356272 // <dependency>
	relation 355888 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 356272 // <dependency>
	  b parent class_ref 912431 // access
      end

      classrelation 897968 // <dependency>
	relation 897072 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 897968 // <dependency>
	  b parent class_ref 1075759 // uuid_t
      end

      attribute 341680 "path_"
	protected explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The path of the archive in the OS filesystem."
      end

      attribute 651440 "uuid_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The unique identifier for a simulation"
      end

      operation 577712 "base_sink"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: path_()
, uuid_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Constructor for serialization."
      end

      operation 578352 "base_sink"
	public explicit_return_type ""
	nparams 1
	  param in name "path" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}
: path_( ${p0} )
, uuid_( make_uuid_string() )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Construct a sink based on the given path."
      end

      operation 577840 "~base_sink"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 577968 "base_sink"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 313520 // base_sink
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 578224 "base_sink"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 313520 // base_sink
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 578096 "operator="
	private return_type class_ref 313520 // base_sink
	nparams 1
	  param in name "source" type class_ref 313520 // base_sink
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      classrelation 355760 // <dependency>
	relation 355376 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 355760 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 556592 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
   ar & this->path_; ar & this->uuid_;
}"
	
	
	
	
	comment " Serialize the sink class. "
      end

      extra_member 303920 "ACTIONS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 555952 "append"
	public explicit_return_type "void"
	nparams 2
	  param in name "path" explicit_type "string"
	  param in name "buffer" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
   UTILITY_REQUIRE( not path.empty(), \"Can not append to an empty location/path.\" );
   if ( not buffer.empty() ) // empty buffer is not an error
      this->do_append( path, buffer );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Append \"buffer\" to an existing document at the given \"path\".

\\pre exists(path) : strong exception safety"
      end

      operation 568368 "do_append"
	abstract cpp_virtual private explicit_return_type "void"
	nparams 2
	  param in name "path" explicit_type "string"
	  param in name "buffer" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Append \"buffer\" to an existing document at the given \"path\".

\\pre exists(path)"
      end

      operation 556336 "exists"
	public explicit_return_type "bool"
	nparams 1
	  param in name "path" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
   UTILITY_REQUIRE( not ${p0}.empty(), \"Can not check for an empty location/path.\" );
   return this->do_${name}( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Check for a document at the given \"path\".

\\pre not path.empty : strong exception safety"
      end

      operation 568496 "do_exists"
	abstract cpp_virtual private explicit_return_type "bool"
	nparams 1
	  param in name "path" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Check for a document at the given \"path\"."
      end

      operation 557360 "filename"
	const public return_type class_ref 252079 // path
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->path_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the path of the root of the output data. For
 single file archives this will be the filename"
      end

      operation 1491760 "make_uuid_string"
	class_operation private explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment "Generate a UUID string"
      end

      operation 556080 "read"
	public explicit_return_type "bool"
	nparams 2
	  param in name "path" explicit_type "string"
	  param out name "outbuffer" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
   UTILITY_REQUIRE( not ${p0}.empty(), \"Can not read from an empty location/path.\" );
   return this->do_${name}( ${p0}, ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Read the contents of a document at \"path\" into the \"outbuffer\".
Return true if document exists and has its content read. Return
false if the document does not exist.

\\pre not path.empty : strong exception safety"
      end

      operation 568624 "do_read"
	abstract cpp_virtual private explicit_return_type "bool"
	nparams 2
	  param in name "path" explicit_type "string"
	  param out name "outbuffer" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Read the contents of a document at \"path\" into the \"outbuffer\".
Return true if document exists and has its content read. Return
false if the document does not exist."
      end

      operation 1491632 "uuid"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the run UUID string"
      end

      operation 556208 "write"
	public explicit_return_type "void"
	nparams 2
	  param in name "path" explicit_type "string"
	  param in name "buffer" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
   UTILITY_REQUIRE( not ${p0}.empty(), \"Can not write to an empty location/path.\" );
   UTILITY_REQUIRE( not ${p1}.empty(), \"Can not write without content.\" );
   return this->do_${name}( ${p0}, ${p1} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Write a \"content\" of file with the given \"subpath\" into the archive.
Any file with the given \"subpath\" will be overwritten.

\\pre not path.empty and not buffer.empty : strong exception safety"
      end

      operation 568752 "do_write"
	abstract cpp_virtual private explicit_return_type "void"
	nparams 2
	  param in name "path" explicit_type "string"
	  param in name "buffer" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Write a \"content\" of file with the given \"subpath\" into the archive.
Any file with the given \"subpath\" will be overwritten."
      end
    end

    class 292656 "archive_file"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Class that allows multiple \"files\" to be placed in a single
archive file (ie only one open OS file). The archive is
in the standard \"zip\" format that can be unarchived outside the
program."
      classrelation 356400 // <generalisation>
	relation 356016 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 356400 // <generalisation>
	  b parent class_ref 313520 // base_sink
      end

      attribute 342064 "arch_"
	private explicit_type "zip"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}::${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The zip archive descriptor"
      end

      attribute 379568 "dirty_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Whether there are unsaved writes."
      end

      extra_member 269488 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 508080 "archive_file"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Default ctor"
      end

      operation 508720 "archive_file"
	public explicit_return_type ""
	nparams 1
	  param in name "path" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${volatile}${throw}
: base_sink( ${p0} )
, arch_( nullptr )
, dirty_( false )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  Construct an archive with the given path. I the path does not end in
  \".zip\" then append this to the path."
      end

      operation 508208 "~archive_file"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
{
   this->ensure_close();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Dtor.  If the archive is open then this attempts to close the archive.
If the archive can not be closed, then any changes are silently 
ignored and the archive discarded before throwing an exception. 
This is to avoid having the destructor throw an error and not close
the zip file."
      end

      operation 508336 "archive_file"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 292656 // archive_file
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 508464 "archive_file"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param out name "source" type class_ref 292656 // archive_file
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Transfer ownership of the zip file."
      end

      operation 508592 "operator="
	stereotype "move"
	private return_type class_ref 292656 // archive_file
	nparams 1
	  param inout name "source" type class_ref 292656 // archive_file
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract} = delete;"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Transfer ownership of the zip file."
      end

      classrelation 356016 // <dependency>
	relation 355632 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 356016 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 556720 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
   ar & boost::serialization::base_object< base_sink >(*this);
   ar & dirty_;
   typename Archive::is_loading is_load;
   if ( is_load )
   {
     this->ensure_close();
   }
}"
	
	
	
	
      end

      extra_member 269616 "ACTIONS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 509104 "do_append"
	private explicit_return_type "void"
	nparams 2
	  param in name "subpath" explicit_type "string"
	  param in name "content" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Append \"content\" onto an existing file with the given \"subpath\" in the archive.

\\pre exists(subpath)"
      end

      operation 556848 "ensure_open"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Check that the archive is open. If it is not open, then
attempt to open it. Throw an exception if the archive
can not be openned."
      end

      operation 556976 "ensure_close"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "If the archive is open, attempt to close the archive.

If the archive can not be closed, then any changes are silently 
ignored and the archive discarded before throwing an exception. 
This is to avoid having the destructor throw an error and not close
the zip file."
      end

      operation 509232 "do_exists"
	private explicit_return_type "bool"
	nparams 1
	  param in name "subpath" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Test if a file with the given \"subpath\" exists in the archive."
      end

      operation 509360 "do_read"
	private explicit_return_type "bool"
	nparams 2
	  param in name "subpath" explicit_type "string"
	  param inout name "content" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Read \"content\" from an existing file with the given \"subpath\" in the archive.
Returns false if subpath does not exist."
      end

      operation 508976 "do_write"
	private explicit_return_type "void"
	nparams 2
	  param in name "subpath" explicit_type "string"
	  param in name "content" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Write a \"content\" of file with the given \"subpath\" into the archive.
Any file with the given \"subpath\" will be overwriten."
      end
    end

    class 293040 "archive_error"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Error caused by differences between what
the library expects and the real system."
      classrelation 340016 // <generalisation>
	relation 339632 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 340016 // <generalisation>
	  b parent class_ref 276015 // runtime_error
      end

      operation 512048 "archive_error"
	public explicit_return_type ""
	nparams 2
	  param in name "error_number" explicit_type "int"
	  param in name "system_number" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}
: std::runtime_error( make_error_message( ${p0}, ${p1} ) )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Construct en error message based on an error condition
in a libzip method."
      end

      operation 509744 "~archive_error"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} noexcept(true) {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 509872 "archive_error"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 293040 // archive_error
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: std::runtime_error(  ${p0} )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 510000 "archive_error"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 293040 // archive_error
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: std::runtime_error(  ${p0} )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 510128 "operator="
	public return_type class_ref 293040 // archive_error
	nparams 1
	  param in name "source" type class_ref 293040 // archive_error
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap( *this, ${p0} );
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 511920 "make_error_message"
	class_operation public explicit_return_type "string"
	nparams 2
	  param in name "error_number" explicit_type "int"
	  param in name "system_number" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Construct an error message based on a libarchive error message."
      end
    end

    class 299568 "archive_file_2"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Class that allows multiple \"files\" to be placed in a single
archive file (ie only one open OS file). The archive is
in a standard format that can be unarchived outside the
program.

(libzip version 2)"
      attribute 348592 "arch_"
	private explicit_type "zip"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}::${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The zip archive descriptor"
      end

      attribute 348720 "path_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The path of the archive in the OS filesystem."
      end

      extra_member 276144 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 518832 "archive_file_2"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Default ctor"
      end

      operation 518960 "archive_file_2"
	public explicit_return_type ""
	nparams 1
	  param in name "path" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${volatile}${throw}
: arch_( nullptr )
, path_( ${p0} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Main ctor, opens the archive for read/write operations."
      end

      operation 519088 "~archive_file_2"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Dtor.  If the archive is open then this attempts to close the archive.
If the archive can not be closed, then any changes are silently 
ignored and the archive discarded before throwing an exception. 
This is to avoid having the destructor throw an error and not close
the zip file."
      end

      operation 519216 "archive_file_2"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 299568 // archive_file_2
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 519344 "archive_file_2"
	stereotype "move"
	public explicit_return_type ""
	nparams 1
	  param out name "source" type class_ref 299568 // archive_file_2
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw}
: arch_( ${p0}.arch_ )
, path_( ${p0}.path_ )
{
   ${p0}.arch_ = nullptr;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Transfer ownership of the zip file."
      end

      operation 519472 "operator="
	stereotype "move"
	public return_type class_ref 299568 // archive_file_2
	nparams 1
	  param inout name "source" type class_ref 299568 // archive_file_2
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap(this->arch_, ${p0}.arch_);
  std::swap(this->path_, ${p0}.path_);
  return *this;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Transfer ownership of the zip file."
      end

      extra_member 276272 "ACTIONS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 519600 "append"
	public explicit_return_type "void"
	nparams 2
	  param in name "subpath" explicit_type "string"
	  param in name "content" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Append \"content\" onto an existing file with the given \"subpath\" in the archive.

\\pre exists(subpath)"
      end

      operation 519728 "exists"
	const private explicit_return_type "bool"
	nparams 1
	  param in name "subpath" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Test if a file with the given \"subpath\" exists in the archive."
      end

      operation 519856 "find"
	private explicit_return_type "bool"
	nparams 2
	  param in name "subpath" explicit_type "string"
	  param inout name "entry" explicit_type "entry_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Attempt to find entry with the given \"subpath\" in the archive.
"
      end

      operation 519984 "read"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "subpath" explicit_type "string"
	  param inout name "content" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Read \"content\" from an existing file with the given \"subpath\" in the archive.
Returns false if subpath does not exist."
      end

      operation 520112 "write"
	public explicit_return_type "void"
	nparams 2
	  param in name "subpath" explicit_type "string"
	  param in name "content" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Write a \"content\" of file with the given \"subpath\" into the archive.
Any file with the given \"subpath\" will be overwriten."
      end
    end

    class 313648 "memory_sink"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Test \"archive\" that stores data in memory, for use in 
testing the interface."
      classrelation 356784 // <generalisation>
	relation 356400 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 356784 // <generalisation>
	  b parent class_ref 313520 // base_sink
      end

      attribute 373040 "data_"
	private explicit_type "string"
	multiplicity "*"
	stereotype "map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}, ${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment "Data set map"
      end

      operation 558000 "do_append"
	private explicit_return_type "void"
	nparams 2
	  param in name "path" explicit_type "string"
	  param in name "buffer" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Append \"buffer\" to an existing document at the given \"path\".

\\pre exists(path)"
      end

      operation 557872 "do_exists"
	private explicit_return_type "bool"
	nparams 1
	  param in name "path" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Check for a document at the given \"path\"."
      end

      operation 558768 "filename"
	const public return_type class_ref 252079 // path
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->path_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the filename of the archive"
      end

      operation 557744 "do_read"
	private explicit_return_type "bool"
	nparams 2
	  param in name "path" explicit_type "string"
	  param out name "outbuffer" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Read the contents of a document at \"path\" into the \"outbuffer\".
Return true if document exists and has its content read. Return
false if the document does not exist."
      end

      operation 557616 "do_write"
	private explicit_return_type "void"
	nparams 2
	  param in name "path" explicit_type "string"
	  param in name "buffer" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Write a \"content\" of file with the given \"subpath\" into the archive.
Any file with the given \"subpath\" will be overwritten."
      end

      classrelation 357040 // <dependency>
	relation 356656 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 357040 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 557488 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
   ar & boost::serialization::base_object< base_sink >(*this);
   ar & data_;
}"
	
	
	
	
      end

      operation 558128 "memory_sink"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 559024 "memory_sink"
	public explicit_return_type ""
	nparams 1
	  param in name "rootpath" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}
: base_sink( ${p0} )
, data_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 558256 "~memory_sink"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 558384 "memory_sink"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 313648 // memory_sink
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 558640 "memory_sink"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 313648 // memory_sink
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 558512 "operator="
	private return_type class_ref 313648 // memory_sink
	nparams 1
	  param in name "source" type class_ref 313648 // memory_sink
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end
    end

    class 320816 "::datum"
      visibility package stereotype "struct"
      cpp_external cpp_decl "${name}
#include <gdbm.h>
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 320176 "gdbm_sink"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " * Provide a sink interface to the gdbm library.
 * 
 * This class provides a sink container based on the C-based gdbm
 * library. Code compiled with this type needs to include the libgdbm library 
 * using \\c -lgdbm. stringtype is used for keys and values.

 datum type is 
 struct datum{
  void * dptr;
  int dsize;
};"
      classrelation 363824 // <generalisation>
	relation 363440 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 363824 // <generalisation>
	  b parent class_ref 313520 // base_sink
      end

      class 320688 "datum_type"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	comment " C++ wrapper for gdbm datum type"
	classrelation 363696 // <generalisation>
	  relation 363312 ---|>
	    a public
	      cpp default "${type}"
	      python "${type}"
	      classrelation_ref 363696 // <generalisation>
	    b parent class_ref 320816 // ::datum
	end

	operation 565552 "datum_type"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
{
  this->dptr = nullptr;
  this->dsize = 0;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 565680 "datum_type"
	  stereotype "copy"
	  public explicit_return_type ""
	  nparams 1
	    param in name "other" type class_ref 320816 // ::datum
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment "* Construct from a GDBM datum. May throw std::bad_alloc."
	end

	operation 568112 "datum_type"
	  stereotype "move"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "other" type class_ref 320816 // ::datum
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${t0} && ${p0}${)}${throw}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment "* Construct from a GDBM datum."
	end

	operation 565808 "datum_type"
	  stereotype "copy"
	  public explicit_return_type ""
	  nparams 1
	    param in name "other" type class_ref 320688 // datum_type
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment "* Copy another gdbm_datum object. May throw std::bad_alloc."
	end

	operation 567984 "datum_type"
	  stereotype "move"
	  public explicit_return_type ""
	  nparams 1
	    param out name "other" type class_ref 320688 // datum_type
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${t0} && ${p0}${)}${throw}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment "* Copy another gdbm_datum object"
	end

	operation 565936 "~datum_type"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment "* Destructor"
	end

	operation 566448 "operator ="
	  public return_type class_ref 320688 // datum_type
	  nparams 1
	    param in name "a_other" type class_ref 320688 // datum_type
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
   this->swap (a_other);
   return *this;
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	end

	operation 566960 "swap"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "a_other" type class_ref 320688 // datum_type
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
   std::swap( this->dptr, a_other.dptr );
   std::swap( this->dsize, a_other.dsize );
 }
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment "* Swap contents with another gdbm_datum"
	end

	operation 566064 "buffer"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "a_buffer" explicit_type "string"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment "* Set contents of datum object.  May throw std::bad_alloc."
	end

	operation 566192 "buffer"
	  const public explicit_return_type "string"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return (this->dsize > 0 ? ${type}( this->dptr, this->dsize ) : ${type}() );
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment "* Get a copy of the contents of datum object"
	end

	operation 568240 "append"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "a_buffer" explicit_type "string"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	  
	  comment "* Append contents to a datum object.  May throw std::bad_alloc."
	end
      end

      attribute 387760 "dbf_"
	private explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 569136 "gdbm_sink"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 569648 "gdbm_sink"
	public explicit_return_type ""
	nparams 1
	  param in name "path" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}
: base_sink(  ${p0} )
, dbf_( nullptr )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create sink based on the given path."
      end

      operation 569264 "~gdbm_sink"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 569392 "gdbm_sink"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 320176 // gdbm_sink
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 569904 "gdbm_sink"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param out name "source" type class_ref 320176 // gdbm_sink
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 569776 "operator="
	stereotype "move"
	private return_type class_ref 320176 // gdbm_sink
	nparams 1
	  param inout name "source" type class_ref 320176 // gdbm_sink
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract} = delete;"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Transfer ownership of the zip file."
      end

      classrelation 363952 // <dependency>
	relation 363568 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 363952 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 567088 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
   ar & boost::serialization::base_object< base_sink >(*this);
   typename Archive::is_loading is_load;
   if ( is_load )
   {
     this->ensure_close();
   }
}"
	
	
	
	
	comment " Serialize the sink class. Not all "
      end

      extra_member 297392 "ACTIONS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 567600 "do_append"
	private explicit_return_type "void"
	nparams 2
	  param in name "path" explicit_type "string"
	  param in name "buffer" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Append \"buffer\" to an existing document at the given \"path\".

\\pre exists(path)"
      end

      operation 567728 "ensure_open"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Open the DB file if it is not already open."
      end

      operation 567856 "ensure_close"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Close the DB file if it is not already closed."
      end

      operation 567472 "do_exists"
	private explicit_return_type "bool"
	nparams 1
	  param in name "path" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Check for a document at the given \"path\"."
      end

      operation 569008 "filename"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->path_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Get the filename of the GDBM file"
      end

      operation 567344 "do_read"
	private explicit_return_type "bool"
	nparams 2
	  param in name "path" explicit_type "string"
	  param out name "outbuffer" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Read the contents of a document at \"path\" into the \"outbuffer\".
Return true if document exists and has its content read. Return
false if the document does not exist."
      end

      operation 567216 "do_write"
	private explicit_return_type "void"
	nparams 2
	  param in name "path" explicit_type "string"
	  param in name "buffer" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Write a \"content\" of file with the given \"subpath\" into the archive.
Any file with the given \"subpath\" will be overwritten."
      end
    end
  end

  deploymentview 196783 "Config"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    comment " Files to assist tailoring system environment to source"
    artifact 581167 "archive"
      stereotype "source"
      cpp_h "#ifndef IONCH_ARCHIVE_HPP
#define IONCH_ARHCIVE_HPP 1

// Choose plain text archives
#include <boost/archive/text_oarchive.hpp>
#include <boost/archive/text_iarchive.hpp>

// include ability to call along inheritance heirachy
#include <boost/serialization/base_object.hpp>

#endif
"
      associated_classes
      end
      comment "Compilation environment configuration

This file defines the default archive system to use.

Author:  Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 187823 "config"
      stereotype "source"
      cpp_h "
#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP 1

${comment}

// \\brief define the level of testing to perform
// level 0 is minimal, level 5 is all
#define @{PROJECT}CONTRACT_LEVEL 5

// ------------------------------------------------------------
// C++ recently added the C99 <stdint.h> header as <cstdint>. Here we
// select the header to use dependent on what the compiler vendor
// provided.
#ifdef HAS_NO_CSTDINT
extern \"C\"
{
#include <stdint.h>
}
#else
#include <cstdint>
#endif

// -------------------------------------------------------------------
// C++11 includes a number of maths functions from C99 that were not
// in C++03. Here we promote the C99 methods into the std namespace
// when necessary.
#ifdef HAS_NO_STD_CBRT
extern \"C\"
{
#include <math.h>
}
namespace std
{
  using ::cbrt;
}
#endif
#ifdef HAS_NO_STD_NEARBYINT
extern \"C\"
{
#include <math.h>
}
namespace std
{
  using ::nearbyint;
}
#endif
#ifdef HAS_NO_LRINT
extern \"C\"
{
    long int lrint ();
    long int lround ();
    long int lrintf ();
    long int lroundf ();
}
namespace std
{
  using ::lrint;
  using ::lround;
  using ::lrintf;
  using ::lroundf;
}
#endif
#ifdef HAS_NO_LLRINT
extern \"C\"
{
  long long int llrint ();
  long long int llrintf ();
  long long int llrintl ();
  long long int llround ();
  long long int llroundf ();
  long long int llroundl ();
}

namespace std
{
  using ::llrint;
  using ::llround;
  using ::llrintf;
  using ::llroundf;
  using ::llrintl;
  using ::llroundl;
}
# endif
// now include cmath to get the C++ overrides of anything in math.h
#include <cmath>

// -------------------------------------------------------------------
// C++11 includes a nullptr object but not always implemented
// 
// Workaround from the official proposal: SC22/WG21/N2431 = J16/07-0301
// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2431.pdf
#ifdef HAS_NO_NULLPTR
#ifdef __GNUC__
#define nullptr __null
#else
const                        // this is a const object...
class {
public:
  template<class T>          // convertible to any type
    operator T*() const      // of null non-member
    { return 0; }            // pointer...
  template<class C, class T> // or any type of null
    operator T C::*() const  // member pointer...
    { return 0; }
private:
  void operator&() const;    // whose address can't be taken
} nullptr = {};              // and whose name is nullptr
#endif
#endif

#endif // @{PROJECT}${NAMESPACE}_${NAME}_HPP"
      associated_classes
      end
      comment "Compilation environment configuration

This file defines a set of preprocessor macros that define aspects of 
the compilation environment.  It generates no C++ code itself.


----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end
  end

  deploymentview 169519 "framework deployment"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 580143 "utility"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}

// --
#include \"utility/config.hpp\"
#include \"utility/mathutil.hpp\"
#include <string>
#include <sstream>
#include <cstring>
#include <cerrno>
#include <boost/shared_ptr.hpp>

${declarations}
// ----------------------------------------------------------------------
// IN-CODE TESTING.
//
//  Constants that control the inclusion of debugging and
//  design-by-contract code in the program.
//
// The simulator in use in this program consists of four checking
// conditionals and an input value conditional. All have the same
// interface of two arguments.  The first argument is an if test
// conditional that is expected to be true.  The second argument is a
// message giving details specific to the failed test. In addition the
// program reports information about the code location of the error
// (possibly including a call stack).
//
// Checking conditionals that may be optionally compiled into the
// program:
//
// * UTILITY_ALWAYS : This test is non-optional and should be used to
// verify conditions that are dependent on conditions while the progam
// is running.  Ideally it should not be used as it indicates an error
// in code that should have raised an exception for the error itself.
// In practice it might may be used for such things as checking
// C-library calls succeeded where you don't want to handle the error
// cases yourself.
//
// * UTILITY_INPUT : Check that runtime inputs to the program (from the
// user) are within allowed values.  This is also used to check data
// derived from input; for example to check that dividing some length
// into intervals gives a number of segments below a program limit.
// As input is never controlled by the program this test is always
// available.  In addition to the information provided with
// UTILITY_ALWAYS, this method calls a locally defined input_helper
// (std::ostream&,std::string) method.  This method can be used to
// create a detailed feedback message describing the expected input
// for the entire module or class in addition to the error-specific
// message provided in the method call.
// 
// * UTILITY_REQUIRE : Check the arguments to a method fit within the
// method's advertised input domain. As we do not necessarily
// completely know how the method will be called this is usually the
// last test to be removed by conditional compilation.
//
// * UTILITY_ENSURE : Test the programmer's logic has led to a method's
// result within the domain advertised by the method (and so expected
// by the method's caller). It should be used in any non-trivial
// method to ensure the method's post-conditions are met. Ideally if
// the method's input is within the advertised domain (as checked by
// UTILITY_REQUIRE) the results of a well-tested method should always be
// correct, so this is conditionally removed before UTILITY_REQUIRE
// by conditional compilation.
//
// * UTILITY_CHECK : Testing the programmer's logic.  This lets the
// progammer assert what they think should be true is actually true!
// It is intended to allow the programmer to insert a check of
// intermediate results during the development of a method. As a
// mainly developement test it is usually the first test to be
// removed by conditional compilation.
//
// For those c-libraries that provide a means to inspect the current
// call stack we use two methods 'backtrace' and 'backtrace_symbols'
// to generate a messag containing this information.  We use the same
// interface as the GNU libc methods.

#ifndef HAS_NO_BACKTRACE
extern \"C\"
{
#include <execinfo.h>
}
namespace utility
{
  using ::backtrace;
}
#else // HAS_NO_BACKTRACE so provide dummy implementations
namespace utility
{
  static inline int backtrace(void**,int) { return 0; }
}
#endif

#define UTILITY_ALWAYS(X,Y) do { if (!(X)) {				\\
      void * TRACE[20]; const int sz_ = utility::backtrace (&TRACE[0], 20); \\
      utility::do_assert(#X,(Y),__func__,__FILE__, __LINE__, &TRACE[0], sz_); }} while( false )

#if(DEBUG > 0)
#define UTILITY_CHECK UTILITY_ALWAYS
#define UTILITY_ENSURE UTILITY_ALWAYS
#define UTILITY_ENSURE_OLD(X) X
#define UTILITY_INDEX(X,Y,Z) UTILITY_ALWAYS(utility::mathutil::in_half_up_range(std::size_t(0),(Y),(X)),Z)
#define UTILITY_RANGE(W,X,Y,Z) UTILITY_ALWAYS(utility::mathutil::in_closed_range((X),(Y),(W)),Z)
#else
#define UTILITY_CHECK(X,Y) while( false ){}
#define UTILITY_ENSURE(X,Y) while( false ){}
#define UTILITY_ENSURE_OLD(X)  while( false ){}
#define UTILITY_INDEX(X,Y,Z) while( false ){}
#define UTILITY_RANGE(W,X,Y,Z) while( false ){}
#endif
#define UTILITY_REQUIRE UTILITY_ALWAYS

#define UTILITY_INPUT(X,Y,S,R) do { if (!(X)) {				\\
      void * TRACE[20];	const int sz_ = utility::backtrace (&TRACE[0], 20); \\
      utility::do_assert_input(#X,(Y),(S),(R),__func__,__FILE__, __LINE__, &TRACE[0], sz_); }} while( false )

#define UTILITY_STDC_ERROR(X, Y) do { if (!(X)) {			\\
      void * TRACE[20];	const int sz_ = utility::backtrace (&TRACE[0], 20); \\
      std::string msg_((Y)); msg_.append(\"\\n\"); msg_.append(strerror(errno)); \\
      utility::do_assert(#X,msg_,__func__,__FILE__, __LINE__, &TRACE[0], sz_); }} while( false )

namespace core
{
  class input_base_reader;
};
${namespace_start}
  // Assert method behind UTILITY_... macros
  void do_assert(const char * a_test, std::string a_msg, const char * a_fn, const char * a_filename, int a_linenum, void * const* a_backtrace, int a_backsz);

  void do_assert_input(const char * a_test, std::string a_msg, std::string a_section, core::input_base_reader const*const reader, const char * a_fn, const char * a_filename, int a_linenum, void * const* a_backtrace, int a_backsz);

${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}

//--
#include <stdexcept>
#include <sstream>
#include \"core/input_help.hpp\"
#include \"utility/config.hpp\"

#ifndef HAS_NO_BACKTRACE
extern \"C\"
{
#include <execinfo.h>
}
#endif

${namespace_start}

#ifndef HAS_NO_BACKTRACE
using ::backtrace_symbols;
#else // don't HAVE_BACKTRACE so provide dummy implementations
static char** backtrace_symbols (void*const*, int)
{
   return 0;
}
#endif

//Assert method
void do_assert(const char * a_test, std::string a_msg, const char * a_fn, const char * a_filename, int a_linenum, void * const* a_backtrace, int a_backsz)
{
   //    static const int s_size (4096);
   //    char what_buffer_[s_size];
   //    boost::iostreams::array_sink what_sink_ (&what_buffer_[0], s_size);
   //    boost::iostreams::stream< boost::iostreams::array_sink > errlog_ (what_sink_);
   std::string result_;
   {
      std::stringstream errlog_;
      // --
      errlog_ << \"\\n================== CONTRACT FAILURE ==================\\n\"
              << \"REASON: \\\"\" << a_msg << \"\\\"\\n\"
              << \"FAILED TEST: (\" << a_test << \")\\n\"
              << \"FILE: \" << a_filename << \", LINE: \" << a_linenum << \".\\n\";

      if (NULL != a_fn)
      {
         errlog_ << \"FUNCTION: \" << a_fn << \".\\n\";
      }

      if (NULL != a_backtrace)
      {
         errlog_ << \"BACKTRACE: \\n\";
         boost::shared_ptr< char * > trace_ (utility::backtrace_symbols (a_backtrace, a_backsz), &std::free);

         for (int l_ = 0; l_ < a_backsz; ++l_)
         {
            errlog_ << * (trace_.get () + l_) << \"\\n\";
         }
      }

      errlog_ << \"================== CONTRACT FAILURE ==================\\n\";
      result_ = errlog_.str ();
   }
   throw std::runtime_error (result_);
}

void do_assert_input(const char * a_test, std::string a_msg, std::string a_section, core::input_base_reader const*const a_reader, const char * a_fn, const char * a_filename, int a_linenum, void * const* a_backtrace, int a_backsz)
{
  core::input_help::exemplar().do_assert( a_test, a_msg, a_section, a_reader, a_fn, a_filename, a_linenum, a_backtrace, a_backsz );
}

${members}


${namespace_end}
"
      associated_classes
      end
      comment "----------------------------------------------------------------------
HELPER FUNCTIONS

This contains a set of generic routines that can be used anywhere
in the program.


 log - the global logging stream

 (Unit test suite \"utility_test_suite\")

Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 288560 "base_sink"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
// manual includes
#include \"utility/utility.hpp\"
//- 
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 313520 // base_sink
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 570160 "basic_histogram"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 619056 // basic_histogram
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 557104 "binary_estimate"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 276529 // binary_estimate
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 281776 "archive_file"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
extern \"C\"
{
 struct zip;
};

${namespace_start}
${definition}
${namespace_end}
#endif

"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif
extern \"C\"
{
#include <zip.h>
}
${includes}

#include \"core/strngs.hpp\"
#include \"utility/utility.hpp\"

#include <iostream>
#include <new>
${namespace_start}
${members}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_GUID(utility::archive_file, \"utility::archive_file\");"
      associated_classes
	class_ref 293040 // archive_error
	class_ref 292656 // archive_file
      end
      ncouples 1
      key "butter ldflags" value "-lzip"
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 550448 "digitizer"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
#include \"utility/utility.hpp\"
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include <cmath>
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 175409 // digitizer
      end
      comment "----------------------------------------------------------------------
DATA-SET SUMMARY/REDUCTION CLASSES

These classes provide classes to manage statistical sampling such
as histograms and single value estimates and to calculate mean and
variance of the estimations.

Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 187569 "estimater"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
// Manual includes
#include \"utility/archive.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
#include \"utility/utility.hpp\"
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${definition}"
      associated_classes
	class_ref 176049 // estimater
      end
      comment "----------------------------------------------------------------------
DATA-SET SUMMARY/REDUCTION CLASSES

These classes provide classes to manage statistical sampling such
as histograms and single value estimates and to calculate mean and
variance of the estimations.

Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 550320 "estimate_array"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
// manual includes
#include \"utility/utility.hpp\"
// -
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"utility/utility.hpp\"
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 175665 // estimate_array
      end
      comment "----------------------------------------------------------------------
DATA-SET SUMMARY/REDUCTION CLASSES

These classes provide classes to manage statistical sampling such
as histograms and single value estimates and to calculate mean and
variance of the estimations.

Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 208431 "filesystem"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
#include \"utility/utility.hpp\"
#include <fstream>
#include <boost/typeof.hpp>
#include <boost/iostreams/device/file.hpp>
#include <boost/iostreams/operations.hpp> 
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
// Manual includes
#include <boost/filesimulator/operations.hpp>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <unistd.h>
//-
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 243759 // filesystem
      end
      comment "Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 295216 "gdbm_sink"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_GUID(utility::gdbm_sink, \"utility::gdbm_sink\");"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 320176 // gdbm_sink
      end
      ncouples 1
      key "butter ldflags" value "-lgdbm"
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 550192 "histogram"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
// manual includes
#include <iterator>
// -
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"utility/fuzzy_equals.hpp\"
// -
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 585776 // histogram
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 222512 "lapack"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

#ifdef USE_MKL
#include <mkl_lapack.h>
#include <mkl_service.h>
#endif

// Get version information for the ATLAS library
#ifdef USE_ATLAS
#include <atlas/clapack.h>
#endif

#ifdef USE_GSL
#include <clapach.h>
#endif

${includes}
${namespace_start}
${members}
${namespace_end}
"
      associated_classes
	class_ref 184623 // lapack
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 186287 "machine"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
#include \"utility/config.hpp\"
struct fenv_;
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}

#include <ctime>
#include <iostream>
#include <sstream>
#include <fstream>
#include <limits>
#include <boost/format.hpp>
#include <boost/date_time/gregorian/gregorian.hpp>
#include \"core/strngs.hpp\"
extern \"C\"
{
#include <sys/utsname.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fenv.h>

  /* --------------------------------------------------
  Set up in \"C\" to enable using the floating point 
  environment.
  -------------------------------------------------- */

static fenv_t original_env = { 0 }; /* Environment on program entry */
static int err_setup = -1; /* Whether an error occured during set up */

#ifdef __GNUC__
#define CONSTRUCTOR __attribute__ ((constructor))
#else
#define CONSTRUCTOR
#endif

static void CONSTRUCTOR fpu_setup(void)
{
  err_setup = fegetenv (&original_env);
  err_setup = -1 == err_setup ? -2 : err_setup;
#if defined(DEBUG) && DEBUG > 0
  /* Raise a signal for FP errors in DEBUG mode */
  feenableexcept(FE_INVALID   | 
                   FE_DIVBYZERO | 
                   FE_OVERFLOW  | 
                   FE_UNDERFLOW);
#endif
}


}
#include <stdexcept>
// end include

${namespace_start}
${members}
${namespace_end}
"
      associated_classes
	class_ref 207791 // machine_env
	class_ref 128559 // fp_env
      end
      comment "Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 143407 "mathutil"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_H
#define @{PROJECT}${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}

${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 156975 // mathutil
      end
      comment "Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 530224 "mean_algorithm"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"utility/fuzzy_equals.hpp\"
#include \"utility/utility.hpp\"
// -
#include <cmath>
// -
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 546480 // mean_algorithm
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 288688 "memory_sink"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_GUID(utility::memory_sink, \"utility::memory_sink\");"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 313648 // memory_sink
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 343215 "random"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_H
#define @{PROJECT}${NAMESPACE}_${NAME}_H

${comment}
${includes}
//-
#include \"utility/config.hpp\"
#include <boost/serialization/split_free.hpp>
#include <boost/bind.hpp>
#include <algorithm>
#include <string>
#include <sstream>
//
${declarations}
${namespace_start}
${definition}
${namespace_end}

namespace boost {
namespace serialization {
template<class Archive>
void save(Archive & ar, const boost::mt19937 & t, unsigned int version)
{
  std::stringstream os;
  os << t;
  std::string c (os.str ());
  ar << c;
}
template<class Archive>
void load(Archive & ar, boost::mt19937 & t, unsigned int version)
{
  std::string c;
  ar >> c;
  std::stringstream is (c);
  is >> t;
}

template<class Archive>
inline void serialize(
    Archive & ar,
    boost::mt19937 & t,
    const unsigned int file_version
){
    split_free(ar, t, file_version); 
}
}
}


#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

#include <boost/version.hpp>

${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 463407 // random_distribution
      end
      comment "Uniform distribution decorator for the Mersenne Twister random number generator.

Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    deploymentnode 128303 "divider"
    end

    artifact 207919 "libionch_utility"
      stereotype "library"
      associated_artifacts
	artifact_ref 143407 // mathutil
	artifact_ref 186287 // machine
	artifact_ref 187569 // estimater
	artifact_ref 207409 // estimater_matrix
	artifact_ref 288560 // base_sink
	artifact_ref 288688 // memory_sink
	artifact_ref 343215 // random
	artifact_ref 504112 // digitizer_3d
	artifact_ref 530224 // mean_algorithm
	artifact_ref 550192 // histogram
	artifact_ref 550320 // estimate_array
	artifact_ref 550448 // digitizer
	artifact_ref 550576 // basic_mean
	artifact_ref 557104 // binary_estimate
	artifact_ref 570160 // basic_histogram
	artifact_ref 580143 // utility
      end
      comment "Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 325552 "libionch_lapack"
      stereotype "library"
      associated_artifacts
	artifact_ref 222512 // lapack
      end
      comment "External maths library"
    end

    artifact 332080 "libionch_zip_sink"
      stereotype "library"
      associated_artifacts
	artifact_ref 281776 // archive_file
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 332208 "libionch_gdbm_sink"
      stereotype "library"
      associated_artifacts
	artifact_ref 295216 // gdbm_sink
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    deploymentnode 134576 "needs rework"
    end

    artifact 550576 "basic_mean"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 176433 // basic_mean
      end
      comment "----------------------------------------------------------------------
DATA-SET SUMMARY/REDUCTION CLASSES

These classes provide classes to manage statistical sampling in
2 or 3D histograms or fields and to calculate mean and
variance of the estimations.

Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 207409 "estimater_matrix"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
// Manual includes
#include \"utility/archive.hpp\"
#include \"utility/utility.hpp\"
//-
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 189489 // estimate_2d
	class_ref 189745 // estimate_3d
      end
      comment "----------------------------------------------------------------------
DATA-SET SUMMARY/REDUCTION CLASSES

These classes provide classes to manage statistical sampling in
2 or 3D histograms or fields and to calculate mean and
variance of the estimations.

Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    deploymentnode 128048 "unused?"
    end
  end

  deploymentview 314543 "framework header only"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 570288 "fixed_size_histogram"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 618544 // fixed_size_histogram
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 336687 "fuzzy_equals"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
// manual includes
#include \"utility/config.hpp\"
// - 
#include <limits>
// manual includes
${declarations}
${namespace_start}
${definition}

  template < class Float_type>
  inline bool feq (Float_type lhs, Float_type rhs, int MaxUlps=32ul )
  {
    // REMOVED if test as it (may) offer performance advantage [icpc: 15/17][g++: 22/20]
    // if (lhs == rhs) { return true; }
  
    // Make sure maxUlps is non-negative and small enough that the
    // default NAN won't compare as equal to anything.
    typename ftoi<Float_type>::int_type zr (1);

    zr <<= std::numeric_limits<Float_type>::digits;

    const union f_
    {
      Float_type f; 
      typename ftoi<Float_type>::int_type i; 
      f_ (Float_type a) : f(a) {}
      f_ (typename ftoi<Float_type>::int_type a) : i(a) {}
    } lhsu (lhs), rhsu (rhs), zero (zr);

    // Make lhs_int lexicographically ordered as a twos-complement int
    const typename ftoi<Float_type>::int_type lhs_int (lhsu.f < 0 ? zero.i - lhsu.i : lhsu.i);
  
    // Make rhs_uint lexicographically ordered as a twos-complement int
    const typename ftoi<Float_type>::int_type rhs_int (rhsu.f < 0 ? zero.i - rhsu.i : rhsu.i);

    // std::cout << \"fULPs = \" << std::abs (lhs_int - rhs_int) << \" for \" << lhs_int << \" and \" << rhs_int << \"\\n\";
    return MaxUlps >= (lhs_int > rhs_int ? lhs_int - rhs_int : rhs_int - lhs_int);
  }

${namespace_end}
#endif
"
      associated_classes
	class_ref 449327 // ftoi
	class_ref 449583 // ftoi<float>
	class_ref 449839 // ftoi<double>
      end
      comment "  FUZZY EQUALs (feq) UTILITY FUNCTION

  A template function for testing if two floating point numbers are
  equal within a certain cutoff range.  This comparison is basically
  based on ignoring a certain number of the least significant bits
  of the floating point significand.

 (Unit test suite \"fuzzyequals_test_suite\")

Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 155440 "bitset"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_H
#define @{PROJECT}${NAMESPACE}_${NAME}_H

${comment}
#include <bitset>
#include <boost/serialization/split_free.hpp>
#include <boost/serialization/nvp.hpp>

namespace boost
{
namespace serialization
{
// Save a bitset
template<class Archive, std::size_t N >
void save(Archive & ar, const std::bitset< N > & t, unsigned int version)
{
   const unsigned long val{ t.to_ulong() };
   ar << boost::serialization::make_nvp( \"bits\", val );
}

// Load a multi_array
template<class Archive, std::size_t N >
void load(Archive & ar, std::bitset< N > & t, unsigned int version)
{
   unsigned long val;
   ar >> boost::serialization::make_nvp( \"bits\", val );
   t = std::bitset< N >( val );
}

template<class Archive, std::size_t N >
inline void serialize(
   Archive & ar,
   std::bitset< N > & t,
   const unsigned int file_version
)
{
   split_free(ar, t, file_version);
}
}
}

#endif
"
      associated_classes
      end
      comment " Hook std::bitset into boost::serialization machinery
 Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 161457 "multi_array"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_H
#define @{PROJECT}${NAMESPACE}_${NAME}_H

${comment}
${includes}
#include <boost/multi_array.hpp>
#include <boost/serialization/split_free.hpp>
#include <boost/serialization/array.hpp>

namespace boost
{
namespace serialization
{
// Save a multi_array
template<class Archive, typename ValueType, std::size_t NumDims, typename Allocator = std::allocator<ValueType> >
void save(Archive & ar, const boost::multi_array< ValueType, NumDims, Allocator > & t, unsigned int version)
{
  ar << boost::serialization::make_nvp(\"dimensions\",
                                       boost::serialization::make_array(t.shape(), NumDims));
  ar << boost::serialization::make_nvp(\"data\",
                                       boost::serialization::make_array(t.data(), t.num_elements()));
}

// Load a multi_array
template<class Archive, typename ValueType, std::size_t NumDims, typename Allocator = std::allocator<ValueType> >
void load(Archive & ar, boost::multi_array< ValueType, NumDims, Allocator  > & t, unsigned int version)
{
  typedef typename boost::multi_array< ValueType, NumDims, Allocator>::size_type size_type;
  boost::array< size_type, NumDims > dimensions;
  ar >> boost::serialization::make_nvp(\"dimensions\",
                                       boost::serialization::make_array(dimensions.c_array(), NumDims));
  t.resize(dimensions);
  ar >> boost::serialization::make_nvp(\"data\",
                                       boost::serialization::make_array(t.data(), t.num_elements()));
}

template<class Archive, typename ValueType, std::size_t NumDims, typename Allocator = std::allocator<ValueType> >
inline void serialize(
  Archive & ar,
  boost::multi_array< ValueType, NumDims, Allocator  > & t,
  const unsigned int file_version
)
{
  split_free(ar, t, file_version);
}
}
}


//
${declarations}
${namespace_start}
${definition}
${namespace_end}


#endif"
      associated_classes
      end
      comment "Hook boost::mulit_array into boost::serialization machinery
Authors: Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 174513 "unique_ptr"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP
#include <memory>
#include <boost/serialization/split_free.hpp>
#include <boost/serialization/nvp.hpp>

namespace boost
{
namespace serialization
{
// Save single value unique_ptr
template<class Archive, typename ValueType, typename DeAllocator >
void save(Archive & ar, const std::unique_ptr< ValueType, DeAllocator > & t, unsigned int version)
{
  const ValueType *const tx (t.get());
  ar << boost::serialization::make_nvp(\"unique_ptr\", tx);
}

// Load single value unique_ptr
template<class Archive, typename ValueType, typename DeAllocator >
void load(Archive & ar, std::unique_ptr< ValueType, DeAllocator > & t, unsigned int version)
{
  ValueType * tx;
  ar >> boost::serialization::make_nvp(\"unique_ptr\", tx);
  t.reset(tx);
}

template<class Archive, typename ValueType, typename DeAllocator >
inline void serialize(
  Archive & ar,
  std::unique_ptr< ValueType, DeAllocator > & t,
  const unsigned int file_version
)
{
  split_free(ar, t, file_version);
}

// Array value unique_ptr serialization is undefined
template<class Archive, typename ValueType, typename DeAllocator >
inline void serialize(
  Archive & ar,
  std::unique_ptr< ValueType[], DeAllocator > & t,
  const unsigned int file_version
);


}
}


//
${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      associated_classes
      end
      comment " Hook std::unique_ptr into boost::serialization machinery
 Author Justin Finnerty

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    deploymentnode 128175 "divider"
    end
  end

  package_ref 128049 // utility test suite
end
