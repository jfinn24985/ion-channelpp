class jump_choice
!!!1160624.cpp!!!	generate(in particles : particle_manager, in regions : geometry_manager, inout rgnr : random_distribution) : change_set
std::unique_ptr< particle::change_set > resultset( new particle::change_set );
auto const& ens = particles.get_ensemble();
particle::change_atom atom;
atom.key = this->key().key;
const std::size_t spc_count( ens.specie_count( atom.key ) );
// Select a particle at random
switch (spc_count)
{
case 0:
  {
    resultset->set_fail(); // No particles of this specie
    return resultset;
  }
  break;
case 1:
  {
    atom.index = ens.nth_specie_index( atom.key, 0 );
  }
  break;
default:
  {
    atom.index = ens.nth_specie_index( atom.key, rgnr.randint( 0, spc_count - 1) );
  }
  break;
}
// Get old position
atom.old_position = ens.position(atom.index);
// New random position within cell
atom.new_position = regions.system_region().new_position( rgnr, particles.get_specie( atom.key ).radius() );
// No need to check for valid position because new
// position should always give a valid position.
resultset->add_atom (atom);
return resultset;
!!!1160624.python!!!	generate(in particles : particle_manager, in regions : geometry_manager, inout rgnr : random_distribution) : change_set
self.begin_trial()
ens = sys.get_ensemble()
genr = sys.get_random()
import change_set
resultset = change_set.change_set( self )
result = change_set.change_atom()
resultset.add_atom( result )
result.key = self.specie_key()
if sys.get_specie( result.key ).count() == 0:
  resultset.fail = True # No particles of this specie
  return resultset
elif sys.get_specie( result.key ).count() == 1:
  result.index = ens.nth_specie_index( result.key, 0 )
else:
  result.index = ens.nth_specie_index( result.key, genr.randint( 0, sys.get_specie( result.key ).count() - 1) )
result.old_position = ens.position ( result.index )
sys.get_cell_region().new_position( result.new_position, result.key, genr )
if not sys.get_cell_region().is_valid_position( result.new_position, result.key ):
  resultset.fail = True # not a valid position
return resultset

!!!1207728.cpp!!!	add_definition(inout meta : choice_meta) : void
trial::choice_definition defn;

defn.type_name_ = "jump";
// NO extra parameters
defn.factory_ = &trial::chooser< jump_choice >::make_chooser;

UTILITY_CHECK( not meta.has_trial_type( defn.type_name_ ), "This type has already been added to this meta object." );
meta.add_trial_type( defn );
!!!1207472.cpp!!!	make_choice(in ispec : size_t, in params : string) : jump_choice
UTILITY_CHECK( params.size() == 0, "Jump trial requires no extra parameters" );
// needed information
// ispec : from ispec arg
std::unique_ptr< jump_choice > current;
current.reset( new jump_choice( ispec ) );
return current;
