class storage_manager
!!!1835440.cpp!!!	serialize(inout ar : Archive, in version : unsigned int) : void
ar & checkpoint_name_;
ar & filename_base_;
ar & output_dir_fmt_;
ar & output_name_;
ar & run_number_;
ar & seed_value_;
ar & cutover_log_;
!!!1940400.cpp!!!	description(inout os : ostream) : void
os << core::strngs::horizontal_bar() << "\n";
os << " Simulation Runtime Settings\n";
os << "----------------------------\n";
os << "                 run index : " << this->run_number() << "\n";
os << " output directory template : " << this->output_dir_fmt() << "\n";
os << "    input filename pattern : " << this->filename_base() << "\n";
os << "      checkpoint file name : " << this->checkpoint_name() << "\n";
os << "          output file name : " << this->output_name() << "\n";
!!!1940400.python!!!	description(inout os : ostream) : void
from constants import constants
constants.description( os )
print >>os, "[simulation]"
print >>os, "        volume :", self.cell_region_.volume(-1), "Anstrom{3}"
print >>os, "  permittivity :", self.cell_region_.permittivity()
print >>os, " beta (1/k_BT) :", (1.0/(constants.boltzmann_constant()*self.temperature_kelvin_)), " J{-1}"
print >>os, "  temperature :", self.temperature_kelvin_, " K"
print >>os, " specie count :", self.specie_count()
print >>os, " - loop sizes"
print >>os, "       thermal :", self.equilibration_interval_
print >>os, "    production :", self.production_interval_
print >>os, "         inner :", self.inner_loop_size_
print >>os, " current index :", self.outer_loop_index_
print >>os, " - other parameters"
print >>os, " starting particle count :", self.target_number_of_particles()
print >>os, "          ionic strength :", self.ionic_strength()
print >>os, "             trial rates :", self.rates_
print >>os, "              move delta :", self.delta
for spc in self.species_:
  spc.description( os )
print >>os, "[choices] trial types and rates"
print >>os, " %6s %4s %7s" % ( "type", "spc.", "rate(%)" )
for choice in self.choices_:
  print >>os, " %6s %4s %7.2f" % ( choice.label(), self.species_[choice.specie_key()].label(), choice.probability()*100.0 )
for observable in self.observables_:
  observable.description( os )
for potl in self.evaluators_:
  potl.description( os )
self.ensemble_.description( os )

!!!1940656.python!!!	do_description(inout os : ostream) : void
from constants import constants
constants.description( os )
print >>os, "[simulation]"
print >>os, "        volume :", self.cell_region_.volume(-1), "Anstrom{3}"
print >>os, "  permittivity :", self.cell_region_.permittivity()
print >>os, " beta (1/k_BT) :", (1.0/(constants.boltzmann_constant()*self.temperature_kelvin_)), " J{-1}"
print >>os, "  temperature :", self.temperature_kelvin_, " K"
print >>os, " specie count :", self.specie_count()
print >>os, " - loop sizes"
print >>os, "       thermal :", self.equilibration_interval_
print >>os, "    production :", self.production_interval_
print >>os, "         inner :", self.inner_loop_size_
print >>os, " current index :", self.outer_loop_index_
print >>os, " - other parameters"
print >>os, " starting particle count :", self.target_number_of_particles()
print >>os, "          ionic strength :", self.ionic_strength()
print >>os, "             trial rates :", self.rates_
print >>os, "              move delta :", self.delta
for spc in self.species_:
  spc.description( os )
print >>os, "[choices] trial types and rates"
print >>os, " %6s %4s %7s" % ( "type", "spc.", "rate(%)" )
for choice in self.choices_:
  print >>os, " %6s %4s %7.2f" % ( choice.label(), self.species_[choice.specie_key()].label(), choice.probability()*100.0 )
for observable in self.observables_:
  observable.description( os )
for potl in self.evaluators_:
  potl.description( os )
self.ensemble_.description( os )

!!!1759792.cpp!!!	get_log() : ostream
if( not this->log_ )
{
  this->log_ = this->open_log();
}
return *(this->log_);
!!!1762608.cpp!!!	random_seed_value() : uint
// Get random seed value from system's random device:
// requires #include <boost/random/random_device.hpp>
boost::random::random_device seedgenr;
return seedgenr() - seedgenr.min();
!!!1928624.cpp!!!	write_document(inout wr : input_document) : void
// Add storage information section
std::size_t ix = wr.add_section( platform::storage_meta::storage_label() );
auto &sec = wr[ ix ];
sec.add_entry( core::strngs::fstype(), this->get_label() );
sec.add_entry( core::strngs::outputdir_label(), this->output_dir_fmt() );
sec.add_entry( core::strngs::inputpattern_label(), this->filename_base() );
sec.add_entry( platform::storage_meta::output_name_label(), this->output_name() );
sec.add_entry( platform::storage_meta::checkpoint_name_label(), this->checkpoint_name() );
this->do_write_document( wr, ix );
!!!2411440.cpp!!!	cutover_log() : void
if( not this->cutover_log_ )
{
  boost::shared_ptr< std::ostream > newlog{ this->open_log() };
  if( newlog )
  {
    auto buf = this->log_->rdbuf();
    const std::streamsize avail{ buf->in_avail() };
    for( std::streamsize ii = 0; ii < avail; ++ii )
    {
      (*newlog) << static_cast< char >( buf->sbumpc() );
    }
    std::swap( this->log_, newlog );
    this->cutover_log_ = true;
  }
}
!!!1861680.cpp!!!	set_log(in os_ptr : ostream) : ostream
if( not this->cutover_log_ )
{
  auto buf = this->log_->rdbuf();
  const std::streamsize avail{ buf->in_avail() };
  for( std::streamsize ii = 0; ii < avail; ++ii )
  {
    (*os_ptr) << static_cast< char >( buf->sbumpc() );
  }
  this->cutover_log_ = true;
}
std::swap( os_ptr, this->log_ );
return os_ptr;
!!!1758768.cpp!!!	set_output_name(in fmt : string) : void
UTILITY_REQUIRE( not fmt.empty(), "Cannot set output file to an empty string." );
UTILITY_REQUIRE( has_valid_extension( fmt ), "Output file extension is not one of (zip,dbm,mem)" );
this->output_name_ = fmt;
!!!2391472.cpp!!!	has_valid_extension(in fmt : string) : bool
boost::filesystem::path fpath( fmt );
std::string ext = fpath.extension().native();
return ( ext.empty() or ext.find( "zip" ) < ext.size() or ext.find( "dbm" ) < ext.size() or ext.find( "mem" ) < ext.size() );
!!!1848496.cpp!!!	open_sink_by_extension(in fpath : path, in def_ext : string) : base_sink
std::string ext = fpath.extension().native();
boost::shared_ptr< observable::base_sink > result; 
if ( ext.empty() )
{
  ext = def_ext;
}
if( ext.find( "zip" ) < ext.size() )
{
  // ZIP archive
  result.reset( new observable::archive_file( fpath.native() ) );
}
else if( ext.find( "dbm" ) < ext.size() )
{
  // GDBM/DBM archive
  result.reset( new observable::gdbm_sink( fpath.native() ) );
}
else if( ext.find( "mem" ) < ext.size() )
{
  // in-memory sink
  result.reset( new observable::memory_sink( fpath.native() ) );
}
return result;
!!!1841200.cpp!!!	checkpoint_path() : std::string
boost::filesystem::path cpath( this->compute_output_dir() );
cpath /= this->checkpoint_name();
return cpath.native();
!!!2209840.cpp!!!	ensure_output_dir() : path
const boost::filesystem::path dpath( this->compute_output_dir() );
if( not boost::filesystem::exists( dpath ) )
{
  boost::filesystem::create_directories( dpath );
}
else
{
  if( not boost::filesystem::is_directory( dpath ) )
  {
    throw core::input_error::input_logic_error( "The filesystem object at target output directory path \""+dpath.native()+"\" is not a directory", core::strngs::simulator_label(), "Delete filesystem object or set/change parameter \"" + core::strngs::outputdir_label() + "\"." );
  }
}
return dpath;
!!!2209968.cpp!!!	find_input_filename() : std::string
// Filenames to generate
//   input.%03d.inp % run_index
//   input.inp
std::string result;
std::string errmsg( "Unable to find input file(s) named:" );

auto test_fn = [](std::string fn)->bool{
 return boost::filesystem::exists( fn )
   and boost::filesystem::is_regular_file( fn )
   and std::ifstream( fn );
};
  
if( not this->filename_base().empty() )
{
  // Check for '%' to see if filename base is a format string
  if( std::string::npos != this->filename_base().find( '%' ) )
  {
    // TRY ONE : filename base is format string
    // -------
    // Assume filename_base is a format string.
    boost::format res( this->filename_base() );
    // Ignore error of too many arguments.
    res.exceptions( boost::io::all_error_bits ^ boost::io::too_many_args_bit );
    res % this->run_number();
    result = res.str();
    // Check if file exists
    if( test_fn( result ) )
    {
      return result;
    }
    else
    {
      // Filename not found
      errmsg.append( " " );
      errmsg.append( result );
    }
    // TRY TWO : remove format code from filename base
    // -------
    result.assign( this->filename_base() );
    // Remove everything from the '%' to the next '.'
    std::size_t pos1 = result.find( '%' ); // We know this is not npos!
    std::size_t pos2 = result.find( '.', pos1 );
    if( std::string::npos != pos2 )
    {
      result.erase( pos1, pos2 - pos1 + 1 );
    }
    else
    {
      result.erase( pos1 );
    }
    // Check if file exists
    if( test_fn( result ) )
    {
      return result;
    }
    else
    {
      // Filename not found
      errmsg.append( " " );
      errmsg.append( result );
    }
  }
  else
  {
    // TRY THREE : filename base is simple string
    // ---------
    result = this->filename_base();
    // Check if file exists
    if( test_fn( result ) )
    {
      return result;
    }
    else
    {
      // Filename not found
      errmsg.append( " " );
      errmsg.append( result );
    }
  }
}
// If we got here no files where found.
throw core::input_error::input_logic_error( errmsg, core::strngs::simulator_label(), "Check input file name or provide --inputpattern commandline option." );
result.clear();
return result; // To stop compiler complaints

!!!1841840.cpp!!!	output_path() : std::string
boost::filesystem::path cpath( this->compute_output_dir() );
cpath /= this->output_name();
return cpath.native();
!!!1900976.cpp!!!	build_input_delegater(inout fstype : storage_manager, inout delegate : input_delegater) : void
// build storage manager meta and add to delegater
boost::shared_ptr< platform::storage_meta > fsmeta { new platform::storage_meta( fstype ) };

// Monitor trial occurence and success
platform::serial_storage::add_definition( *fsmeta );


delegate.add_input_delegate( fsmeta );
!!!2257072.cpp!!!	process_command_line(in argc : int, in argv : char) : int
if( argc > 1 )
{
  namespace po = boost::program_options;
  po::options_description cmdln_opts( "Allowed Options" );
  cmdln_opts.add_options()
  ( "run", po::value<unsigned int>(), "Simulation run number (positive integer)." )
  ( core::strngs::inputpattern_label().c_str(), po::value<std::string>(), "Plain or printf style format string for generating input filename" )
  ( "seed", po::value<unsigned int>(), "Simulation random seed value (positive integer)." )
  ( "restart", "Restart simulation (from checkpoint)" )
  ( core::strngs::outputdir_label().c_str(), po::value<std::string>(), "Output directory (may be name or format string)" )
  ( "help", "Produce help message" );
  po::variables_map vm;
  try
  {
    po::store( po::parse_command_line( argc, argv, cmdln_opts ), vm );
    po::notify( vm );
  }
  catch( std::exception &err )
  {
    this->get_log() << "Error : " << err.what() << "\n"
                       << cmdln_opts << "\n";
    return 0;
  }

  // After here, 'vm' will contain typed values as
  // specified via po::value<> statement or an error
  // would have been raised.
  if( vm.count( "help" ) )
  {
    this->get_log() << cmdln_opts << "\n";
    return 1;
  }

  if( vm.count( "restart" ) )
  {
    // Restart, ignore all other options.
    // ----------------------------------
    if( vm.count( "seed" ) )
    {
      this->get_log() << core::strngs::horizontal_bar() << "\n"
          << "Random seed value on command line is ignored with restart.\n";
    }
    if( vm.count( core::strngs::inputpattern_label() ) )
    {
      this->get_log() << core::strngs::horizontal_bar() << "\n"
          << "Input filename on command line is ignored with restart.\n";
    }
    if( vm.count( core::strngs::outputdir_label() ) )
    {
      this->set_output_dir_fmt( vm[core::strngs::outputdir_label()].as<std::string>() );
    }
    if( vm.count( "run" ) )
    {
      this->set_run_number( vm["run"].as<unsigned int>() );
    }
    return 3;
  }
  else
  {
    // Process command line options.
    // -----------------------------
    if( vm.count( core::strngs::inputpattern_label() ) )
    {
      this->set_filename_base( vm[core::strngs::inputpattern_label()].as<std::string>() );
    }
    if( vm.count( "run" ) )
    {
      this->set_run_number( vm["run"].as<unsigned int>() );
    }
    if( vm.count( core::strngs::outputdir_label() ) )
    {
      this->set_output_dir_fmt( vm[core::strngs::outputdir_label()].as<std::string>() );
    }

    // set random generator seed
    this->set_seed_value( vm.count( "seed" ) ? this->compute_seed( vm["seed"].as<unsigned int>() ) : this->random_seed_value() );
    this->get_log() << core::strngs::horizontal_bar()
        << "\nRandom seed value : " << this->get_seed_value() << ".\n";
    return 2;
  }
}
else
{
  // No command line arguments, using defaults.
  // ------------------------------------------

  // set random generator seed
  this->set_seed_value( this->random_seed_value() );
  this->get_log() << core::strngs::horizontal_bar()
      << "\nRandom seed value : " << this->get_seed_value() << ".\n";
  return 2;
}
