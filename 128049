format 75
"utility test suite" // utility::utility test suite
  revision 100
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "utility/util_test"
  cpp_src_dir "utility/util_test"
  cpp_namespace "utility::test"
  package_ref 134577 // Template Stats Tests

  classview 154161 "Utility test suites"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 128049 // Utility test suites
    classdiagram 524335 "Utility test coverage"
      draw_all_relations default hide_attributes yes hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language c++ show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      comment "Post overview of utility class coverage (unchecked)"
      size A4
    end

    class 406704 "pattern_test"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Test standard patterns"
      operation 762288 "check_lt_on_eq"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "a" explicit_type "test_class"
	  param in name "b" explicit_type "test_class"
	cpp_decl "    ${comment}${friend}template< class test_class, bool has_lt > ${static}${inline}${virtual}typename std::enable_if< has_lt==true >::type ${name}${(}const test_class & ${p0}${v0}, const test_class & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
    BOOST_CHECK( not ( ${p0} < ${p1} ) );
    BOOST_CHECK( not ( ${p1} < ${p0} ) );
}
"
	
	
	
	
	comment "Function to conditionally include test if less than operator is defined

Test not ( a < b or b < a )"
      end

      operation 762416 "check_lt_on_eq"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "a" explicit_type "test_class"
	  param in name "b" explicit_type "test_class"
	cpp_decl "    ${comment}${friend}template< class test_class, bool has_lt > ${static}${inline}${virtual}typename std::enable_if< has_lt==false >::type ${name}${(}const test_class & ${p0}${v0}, const test_class & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{}
"
	
	
	
	
	comment "Function to conditionally NOT include test if less than operator is NOT defined"
      end

      operation 762800 "check_lt_on_ne"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "a" explicit_type "test_class"
	  param in name "b" explicit_type "test_class"
	cpp_decl "    ${comment}${friend}template< class test_class, bool has_lt > ${static}${inline}${virtual}typename std::enable_if< has_lt==true >::type ${name}${(}const test_class & ${p0}${v0}, const test_class & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
    BOOST_CHECK( ( ${p0} < ${p1} ) or ( ${p1} < ${p0} ) );
}
"
	
	
	
	
	comment "Function to conditionally include test if less than operator is defined

Test ( a < b or b < a )"
      end

      operation 762928 "check_lt_on_ne"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "a" explicit_type "test_class"
	  param in name "b" explicit_type "test_class"
	cpp_decl "    ${comment}${friend}template< class test_class, bool has_lt > ${static}${inline}${virtual}typename std::enable_if< has_lt==false >::type ${name}${(}const test_class & ${p0}${v0}, const test_class & ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{}
"
	
	
	
	
	comment "Function to conditionally NOT include test if less than operator is NOT defined"
      end

      operation 762544 "check_serialize"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "a" explicit_type "test_class"
	cpp_decl "    ${comment}${friend}template< class test_class, bool has_io > ${static}${inline}${virtual}typename std::enable_if< has_io==true >::type ${name}${(}const test_class & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::stringstream store;
  {
    boost::archive::text_oarchive oa( store );
    oa << ${p0};
  }
  {
    test_class obj3;
    boost::archive::text_iarchive ia( store );
    ia >> obj3;
    BOOST_CHECK( ${p0} == obj3 );
  }
}
"
	
	
	
	
	comment "Function to conditionally include serialization test if serialization is defined

Tests
oarchive << a
iarchive >> b
b == a"
      end

      operation 762672 "check_serialize"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "a" explicit_type "test_class"
	cpp_decl "    ${comment}${friend}template< class test_class, bool has_io > ${static}${inline}${virtual}typename std::enable_if< has_io==false >::type ${name}${(}const test_class & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{}
"
	
	
	
	
	comment "Function to conditionally NOT include serialization test if serialization is NOT defined"
      end

      operation 762032 "canonical"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "a" explicit_type "test_class"
	  param in name "b" explicit_type "test_class"
	cpp_decl "    ${comment}${friend}template< class test_class, bool has_lessthan, bool has_serialize > ${static}${inline}${virtual}${type} ${name}${(}test_class const& ${p0}${v0}, test_class const& ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template< class test_class, bool has_lessthan, bool has_serialize > ${inline}${type} ${class}::${name}${(}test_class const& ${p0}, test_class const& ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Test of a class matching canonical class pattern.

 Assumes the following
 - constructors include: default, copy, move and assignment
 - equivalence test using '=='
 - parameter a /= test_class{}

 If has_lessthan is true assumes:
 - if a == b then not ( ( a < b ) or ( b < a ) )
 - if a /= b then ( a < b ) or ( b < a )

 If has_serialize is true assumes boost serialization
 - oa << a
 - ia >> b
 - then a == b

"
      end

      operation 776752 "comparable"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param in name "big" explicit_type "test_class"
	  param in name "mid" explicit_type "test_class"
	  param in name "sml" explicit_type "test_class"
	  param in name "dup" explicit_type "test_class"
	cpp_decl "    ${comment}${friend}template< class test_class > ${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template< class test_class > ${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Unit test for objects that follow comparable/ordering pattern.

 Tested operators
 - equality == and !=
 - ordering < <= > >=

 Expect params to have order big > mid > sml
 and dup to equal big, mid or sml."
      end
    end

    class 889263 "mathutil_test_suite"
      visibility package stereotype "struct"
      cpp_decl "${comment}
${members}
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unit test for the random_distribution decorator class"
      classrelation 340272 // <dependency>
	relation 339888 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 340272 // <dependency>
	  b parent class_ref 292656 // archive_file
      end

      classrelation 364080 // <dependency>
	relation 363696 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 364080 // <dependency>
	  b parent class_ref 320176 // gdbm_sink
      end

      classrelation 356912 // <dependency>
	relation 356528 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 356912 // <dependency>
	  b parent class_ref 313648 // memory_sink
      end

      classrelation 971311 // <dependency>
	relation 941999 -_->
	  a package
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 971311 // <dependency>
	  b parent class_ref 463407 // random_distribution
      end

      classrelation 972463 // <dependency>
	relation 943151 -_->
	  a package
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 972463 // <dependency>
	  b parent class_ref 449327 // ftoi
      end

      operation 1606063 "random_distribution"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Test random number generator conformance

Test that the system gives numbers in the expected ranges."
      end

      operation 1606191 "fuzzy_equal"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Test random number generator"
      end

      operation 1606319 "find_n_tests"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Test of search functions."
      end

      operation 1606447 "next_x"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Test nextX methods for finding nearest multiples"
      end

      operation 398129 "range_checks"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "
"
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 398257 "multi_array_serialize"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "
"
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 398769 "test_do_assert"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " // Assert method behind UTILITY_... macros 

 void do_assert(const char * a_test, std::string a_msg, const char
  * a_fn, const char * a_filename, int a_linenum, void * const*
  a_backtrace, int a_backsz);"
      end

      operation 398513 "test_DBC"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	
	
	comment "Test the UTILITY_XXX design-by-contract macros"
      end

      operation 398385 "test_fp_env"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "
"
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Test the floating point environment"
      end

      operation 265520 "test_fp_divbyzero"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "
"
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Test the floating point environment"
      end

      operation 265648 "test_fp_invalid"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "
"
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Test the floating point environment"
      end

      operation 265776 "test_fp_invalid_2"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "
"
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Test the floating point environment"
      end

      operation 265904 "test_fp_overflow"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "
"
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Test the floating point environment"
      end

      operation 266672 "test_fp_underflow"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "
"
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Test the floating point environment"
      end

      operation 512304 "test_archive_file"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "
"
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Test the floating point environment"
      end

      operation 558896 "test_memory_sink"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "
"
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Test the memory-sink class"
      end

      operation 570032 "test_gdbm_sink"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "
"
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Test the floating point environment"
      end

      operation 568880 "test_base_sink_method"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "sink" type class_ref 313520 // base_sink
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Test generic operations on a sink object"
      end
    end

    class 182961 "estimater_test_fw"
      visibility public stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Unit tests for the statistics related classes in 'estimater.hpp'

Classes:
  - estimater
  - base_mean_range
  - estimate
  - estimate_array"
      classrelation 292529 // <dependency>
	relation 292273 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 292529 // <dependency>
	  b parent class_ref 449327 // ftoi
      end

      classrelation 864304 // <dependency>
	relation 863408 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 864304 // <dependency>
	  b parent class_ref 175409 // digitizer
      end

      classrelation 292785 // <dependency>
	relation 292529 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 292785 // <dependency>
	  b parent class_ref 176049 // estimater
      end

      classrelation 864176 // <dependency>
	relation 863280 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 864176 // <dependency>
	  b parent class_ref 175665 // estimate_array
      end

      classrelation 870832 // <dependency>
	relation 869936 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 870832 // <dependency>
	  b parent class_ref 585776 // histogram
      end

      classrelation 500144 // <dependency>
	relation 499248 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 500144 // <dependency>
	  b parent class_ref 406704 // pattern_test
      end

      attribute 234033 "var"
	public explicit_type "double"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "data set"
      end

      attribute 254769 "data4"
	public explicit_type "double"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "data set"
      end

      attribute 254897 "data5"
	public explicit_type "double"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "data set"
      end

      attribute 255153 "data6"
	public explicit_type "double"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "data set"
      end

      attribute 255025 "data_index"
	public explicit_type "double"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "data set"
      end

      attribute 234161 "mean"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "geometric mean"
      end

      attribute 248241 "svar"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Sample variance"
      end

      attribute 234289 "variance"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "population variance"
      end

      attribute 255281 "exmplr"
	class_attribute public type class_ref 182961 // estimater_test_fw
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 327601 "estimater_test_fw"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
${body}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 327857 "estimater_lifetime"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Series of tests to check estimater lifetime methods"
      end

      operation 327985 "estimater_data_collection"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Perform series of tests on the data collection routines of the
estimater class"
      end

      operation 1452720 "estimate_array_lifetime"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 356657 "estimate_array_methods"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1452848 "estimate_array_data_collection"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1453232 "estimate_array_short_append_safe_test"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1453104 "estimate_array_short_append_test"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1452976 "estimate_array_long_append_safe_test"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 356785 "estimate_array_long_append_test"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1451440 "digitizer_lifetime"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1451568 "digitizer_bad_range_ctor1_test"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 356273 "digitizer_zero_range_ctor1_test"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1451824 "digitizer_zero_width_ctor1_test"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1451696 "digitizer_negative_width_ctor1_test"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1452208 "digitizer_bad_range_ctor2_test"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1452080 "digitizer_zero_range_ctor2_test"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1451952 "digitizer_zero_count_ctor2_test"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1452336 "digitizer_methods"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " # test extend_up/down"
      end

      operation 1471536 "histogram_lifetime"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1451312 "histogram_iterator_lifetime"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1471664 "histogram_data_collection"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 585520 "TODO"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 776880 "pattern_test_test"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Test of the pattern_test test methods with basic types that should support
 the given patterns."
      end

      operation 329009 "basic_mean_lifetime"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 335793 "basic_mean_data_collection"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Perform series of tests on the data collection routines of the
estimater class"
      end

      operation 769712 "binary_estimate_lifetime"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Series of tests to check estimater lifetime methods"
      end

      operation 355889 "estimate_2d_lifetime"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 349105 "estimate_2d_data_collection"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 356529 "estimate_3d_lifetime"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 356401 "estimate_3d_data_collection"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 357169 "digital_sampler"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 357553 "digital_2d_sampler"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 357937 "digital_3d_sampler"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 358577 "sample_2d_collection"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 358705 "sample_3d_collection"
	public explicit_return_type "void"
	nparams 0
	
	cpp_def "${comment}BOOST_AUTO_TEST_CASE( ${name} )
{
  ${body}
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end
  end

  deploymentview 128049 "Utility test suites"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 194097 "estimater_tests"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

#include <boost/test/unit_test.hpp>

${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 182961 // estimater_test_fw
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 602543 "mathutil_test"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

#define BOOST_TEST_MODULE utility_test
#include <boost/test/unit_test.hpp>

${includes}
// Manuals
#include \"core/strngs.hpp\"
#include \"core/input_help.hpp\"
#include \"utility/archive.hpp\"
#include \"utility/multi_array.hpp\"
#include \"utility/random.hpp\"
#include \"utility/machine.hpp\"
#include \"utility/mathutil.hpp\"
#include \"utility/utility.hpp\"
#ifndef DBL_EPSILON
#include <cfloat>
#endif
// - 
${namespace_start}
${members}
${namespace_end}
"
      associated_classes
	class_ref 889263 // mathutil_test_suite
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 404016 "pattern_test"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
// manual includes
#include <boost/test/unit_test.hpp>
#include <sstream>
#include <type_traits>
#include \"utility/archive.hpp\"
// -
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 406704 // pattern_test
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 194225 "estimater_exec"
      stereotype "executable"
      associated_artifacts
	artifact_ref 185007 // serialization
	artifact_ref 194097 // estimater_tests
	artifact_ref 194353 // unit_test_framework
	artifact_ref 207919 // libionch_utility
	artifact_ref 215983 // program_options
	artifact_ref 216239 // date_time
	artifact_ref 281519 // system
	artifact_ref 332080 // libionch_zip_sink
	artifact_ref 332208 // libionch_gdbm_sink
	artifact_ref 602543 // mathutil_test
	artifact_ref 609327 // libionch_core
      end
      ncouples 2
      key "butter flags" value "-DBOOST_TEST_DYN_LINK"
      key "butter install" value "NONE"
    end
  end
end
