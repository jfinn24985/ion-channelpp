format 75
"platform" // platform
  revision 309
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  stereotype "library"
  cpp_h_dir "platform"
  cpp_src_dir "platform"
  cpp_namespace "platform"
  python_dir "cmc"
  classview 462127 "Simulator classes"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 334895 // application class deployment
    classdiagram 623535 "Simulator"
      draw_all_relations default hide_attributes yes hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    classdiagram 219824 "SERIAL Application"
      draw_all_relations default hide_attributes yes hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    classdiagram 331696 "New Simulation"
      draw_all_relations default hide_attributes default hide_operations yes hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    sequencediagram 128176 "Build Simulation"
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
      overlapping_bars size A4
    end

    sequencediagram 345264 "Start up : restart"
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
      overlapping_bars size A4
    end

    sequencediagram 345392 "Start up : normal run"
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
      overlapping_bars size A4
    end

    sequencediagram 312112 "Build input delegater"
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
      overlapping_bars size A4
    end

    sequencediagram 345520 "Generate Simulation"
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
      comment " At the start of the generate simulation phase we should
 have all the region types and species from the input
 file. The tasks that need to be done to create the initial
 simulation are:

 * Set the volume or target particle number from the
 target concentration.

 * Insert predefined particles into the simulation and
 check these are in valid positions.

 * Calculate how many more particles need to be introduced
 to achieve the target concentration.

 * Attempt inserting particles into system or removing
 particles from system to achieve target concentration.
"
      overlapping_bars size A4
    end

    sequencediagram 345648 "Gen Sim: Set Volume/Particle Count"
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
      comment " Set the volume or target particle number from the target
 concentration. We have three major cases:

 * target_ionic_strength == 0:  We can not calculate volume
 or particle count. We therefore assume that the user
 knows what they are doing and has the desired number of
 particles predefined. NOTE: No concentration means this
 simulation can not be Grand Canonical.

 * target_count > 0: We can calculate the target system
 volume and adjust the system region to match.

 * target_count == 0: We can calculate the target count
 from the volume of the system region.
"
      overlapping_bars size A4
    end

    sequencediagram 345904 "Gen Sim: Add predefined."
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
      comment " Add predefined particles.

 * Add particles.

 * Check particles are in valid positions.
"
      overlapping_bars size A4
    end

    sequencediagram 345776 "Gen Sim: Add particles"
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
      comment " Set the volume or target particle number from the target
 concentration. We have three major cases:

 * target_ionic_strength == 0:  We can not calculate volume
 or particle count. We therefore assume that the user
 knows what they are doing and has the desired number of
 particles predefined. NOTE: No concentration means this
 simulation can not be Grand Canonical.

 * target_count > 0: We can calculate the target system
 volume and adjust the system region to match.

 * target_count == 0: We can calculate the target count
 from the volume of the system region.
"
      overlapping_bars size A4
    end

    class 204080 "cube_application"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Perform Monte Carlo simulation serially in a periodic cube"
      classrelation 1125680 // thesim_ (<directional composition>)
	relation 1124784 *-->
	  stereotype "shared_ptr"
	  a role_name "thesim_" multiplicity "*" private
	    comment " The simulation"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1125680 // thesim_ (<directional composition>)
	  b parent class_ref 632368 // simulation
      end

      classrelation 1125808 // stor_ (<directional composition>)
	relation 1124912 *-->
	  stereotype "shared_ptr"
	  a role_name "stor_" multiplicity "*" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1125808 // stor_ (<directional composition>)
	  b parent class_ref 667440 // serial_storage
      end

      operation 576944 "main"
	public explicit_return_type "int"
	nparams 2
	  param in name "argc" explicit_type "int"
	  param in name "argv" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ** ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ** ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 2035504 "cube_application"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 2035632 "~cube_application"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} = default;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      classrelation 1125936 // <dependency>
	relation 1125040 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1125936 // <dependency>
	  b parent class_ref 453296 // periodic_cube_region
      end
    end

    class 327344 "mpi_application"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 377776 // <dependency>
	relation 377392 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 377776 // <dependency>
	  b parent class_ref 333872 // environment
      end

      classrelation 370608 // <dependency>
	relation 370224 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 370608 // <dependency>
	  b parent class_ref 128559 // fp_env
      end

      classrelation 377648 // <dependency>
	relation 377264 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 377648 // <dependency>
	  b parent class_ref 320176 // gdbm_sink
      end

      classrelation 377520 // <dependency>
	relation 377136 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 377520 // <dependency>
	  b parent class_ref 312752 // input_preprocess
      end

      classrelation 370736 // simulator_ (<directional composition>)
	relation 370352 *-->
	  stereotype "shared_ptr"
	  a role_name "simulator_" multiplicity "0..1" class_relation public
	    comment " The real simulation!"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 370736 // simulator_ (<directional composition>)
	  b parent class_ref 1129135 // simulator
      end

      attribute 400816 "checkpoint_path"
	class_attribute private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The path to the checkpoint file."
      end

      operation 585264 "main"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "argc" explicit_type "int"
	  param in name "argv" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ** ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ** ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 584880 "write_checkpoint"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "sim" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write a checkpoint archive of this simulation."
      end
    end

    class 1136815 "range_t"
      visibility package stereotype "typedef" base_type class_ref 1136687 // iterator_range
      nactuals 1
      actual class class_ref 1136687 // iterator_range
        rank 0 explicit_value "boost::ptr_vector< evaluator::base_evaluator >::iterator"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl "${comment}typedef ${type} ${name};
"
      explicit_switch_type ""
      
      classrelation 1304623 // <realization>
	relation 1266095 -_-|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1304623 // <realization>
	  b parent class_ref 1136687 // iterator_range
      end

      classrelation 1330479 // <dependency>
	relation 1291951 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1330479 // <dependency>
	  b parent class_ref 912175 // base_evaluator
      end
    end

    class 243377 "const_range_t"
      visibility package stereotype "typedef" base_type class_ref 1136687 // iterator_range
      nactuals 1
      actual class class_ref 1136687 // iterator_range
        rank 0 explicit_value "boost::ptr_vector< evaluator::base_evaluator >::const_iterator"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_decl ""
      idl_decl "${comment}typedef ${type} ${name};
"
      explicit_switch_type ""
      
      classrelation 369457 // <realization>
	relation 369201 -_-|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 369457 // <realization>
	  b parent class_ref 1136687 // iterator_range
      end

      classrelation 369585 // <dependency>
	relation 369329 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 369585 // <dependency>
	  b parent class_ref 912175 // base_evaluator
      end
    end

    class 1129135 "simulator"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}(object):
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      associated_diagram classdiagram_ref 623535 // Simulator
      comment " Carry out a MC simulation.

 This class (and its descendents) is the most fundamental
 class for simulation.  It orchestrates the running of the
 simulation. Its major roles are to manage building the
 simulation, running the simulation and sampling the simulation.

 To handle different simulation cells you derive from
 this class. The derived class will then specialise the
 initialisation functions that create choices, observables etc
 that are cell specific.

 Base class of different types of MC simulation.

 Each simulator contains:

* transformer_ : a 'stepper' object that runs the main loop
of the simulation.

* simualtion_ : a 'system' object that contains the information
about the ensemble, particles etc that are being simulated.

Each simulator refers to:

* evaluators_ : a set of evaluator objects for calculating
the energy.

* observables_ : a set of observable objects that collect data
from the simulations.

. RESPONSIBILITIES .

* Coordinate run order with other simulators.

* Simulation ownership: Coordinate objects taking part
in a single simulation. No objects are shared between
simulators. These objects include energy evaluators
(evaluators), data collectors (observables), simulation component
descriptions (species and ensemble), global simulation
parameters (temperature, output directory, etc.).

* Initiation of the simulation: Configure the stepper object
that will perform the trials of the simulation. Coordinate
connection of the energy evaluators and data collectors to
the stepper object.

* Simulation maintenance: Provide controlled write access to
global simulation information.

* Simulator subtype methods: Methods that relate to the geometry
of the simulation cell.

  This class contains the loop sizes, observables and evaluators.
  It has two simulation run functions; 'run' for standard
  simulations and 'run_imc' for running iterative simulations

  Signals available and their intents:

  - 'prepare' - call to indicate that the system has created the
  initial simulation state and is about to start a phase of the
  simulation.  Arguments are this object (sim). This method will
  be called at the beginning of a simulation and when switching
  from the thermalization to production phase. **Objects in
  the observables list do not need to connect to this signal as
  they will be called directly for a method of this name.

  - 'report' - call to write observed data to a log stream and
  to data files. Arguments are this object and a stream object
  (sim, out).

  - 'inner-loop' - call at completion of every MC
  trial. Arguments are the change object (change)

  - 'outer-loop' - call after a certain number of MC trials. The
  number of trials should be proportional to the decorrelation
  time of the simulation allowing reasonably independent
  samples to be made. Argument will be this object (sim).
"
      classrelation 166064 // <generalisation>
	relation 165936 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 166064 // <generalisation>
	  b parent class_ref 275887 // noncopyable
      end

      classrelation 1312431 // <dependency>
	relation 1273903 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1312431 // <dependency>
	  b parent class_ref 1143343 // simulator_meta
      end

      classrelation 1305391 // <dependency>
	relation 1266863 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 1305391 // <dependency>
	  b parent class_ref 912431 // access
      end

      classrelation 447793 // <dependency>
	relation 447281 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 447793 // <dependency>
	  b parent class_ref 1026095 // base_choice
      end

      classrelation 175152 // <dependency>
	relation 174896 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 175152 // <dependency>
	  b parent class_ref 170160 // base_chooser
      end

      classrelation 197680 // <dependency>
	relation 197424 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 197680 // <dependency>
	  b parent class_ref 912175 // base_evaluator
      end

      classrelation 356528 // <dependency>
	relation 356144 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 356528 // <dependency>
	  b parent class_ref 313520 // base_sink
      end

      classrelation 176305 // <dependency>
	relation 176049 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 176305 // <dependency>
	  b parent class_ref 204975 // bind
      end

      classrelation 447665 // <dependency>
	relation 447153 -_->
	  a package
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 447665 // <dependency>
	  b parent class_ref 986543 // change_set
      end

      classrelation 176177 // <dependency>
	relation 175921 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 176177 // <dependency>
	  b parent class_ref 865967 // constants
      end

      classrelation 145712 // <dependency>
	relation 145584 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 145712 // <dependency>
	  b parent class_ref 251951 // date
      end

      classrelation 176049 // <dependency>
	relation 175793 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 176049 // <dependency>
	  b parent class_ref 128559 // fp_env
      end

      classrelation 145840 // <dependency>
	relation 145712 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 145840 // <dependency>
	  b parent class_ref 207791 // machine_env
      end

      classrelation 182833 // <dependency>
	relation 182577 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 182833 // <dependency>
	  b parent class_ref 1016239 // strngs
      end

      classrelation 488369 // <dependency>
	relation 487729 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 488369 // <dependency>
	  b parent class_ref 1075759 // uuid_t
      end

      class 283057 "sampler_signal_type"
	visibility package stereotype "typedef" base_type class_ref 205231 // signal
	nactuals 1
	actual class class_ref 205231 // signal
	  rank 0 explicit_value "void (simulator const&)"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Type of the outer-loop signals"
	classrelation 420401 // <realization>
	  relation 419889 -_-|>
	    a public
	      cpp default "${type}"
	      python "${type}"
	      classrelation_ref 420401 // <realization>
	    b parent class_ref 205231 // signal
	end
      end

      class 270001 "array_type"
	visibility package stereotype "typedef" explicit_base_type "double"
	cpp_decl "${comment}typedef std::vector< ${type} > ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "The type of a mathematical array for use in calculating inter-particle
distances."
      end

      class 334128 "checkpoint_fn_type"
	visibility package stereotype "typedef" base_type class_ref 252719 // function1
	nactuals 2
	actual class class_ref 252719 // function1
	  rank 0 explicit_value "void"
	actual class class_ref 252719 // function1
	  rank 1 explicit_value "const simulator*"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	classrelation 377904 // <realization>
	  relation 377520 -_-|>
	    a public
	      cpp default "${type}"
	      python "${type}"
	      classrelation_ref 377904 // <realization>
	    b parent class_ref 252719 // function1
	end
      end

      extra_member 264881 "collection attributes"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      classrelation 459440 // choices_ (<directional composition>)
	relation 458544 *-->
	  stereotype "ptr_vector"
	  a role_name "choices_" multiplicity "*" private
	    comment " Trial generators"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 459440 // choices_ (<directional composition>)
	  b parent class_ref 1026095 // base_choice
      end

      classrelation 174896 // choosers_ (<directional composition>)
	relation 174640 *-->
	  stereotype "ptr_vector"
	  a role_name "choosers_" multiplicity "*" private
	    comment "  Choice generators."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 174896 // choosers_ (<directional composition>)
	  b parent class_ref 170160 // base_chooser
      end

      classrelation 1330095 // evaluators_ (<directional composition>)
	relation 1291567 *-->
	  stereotype "ptr_vector"
	  a role_name "evaluators_" multiplicity "*" private
	    comment "The set of in-use evaluators"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1330095 // evaluators_ (<directional composition>)
	  b parent class_ref 912175 // base_evaluator
      end

      classrelation 406961 // species_ (<directional composition>)
	relation 406449 *-->
	  stereotype "vector"
	  a role_name "species_" multiplicity "*" private
	    comment "Set of species (python only)"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 406961 // species_ (<directional composition>)
	  b parent class_ref 134577 // specie
      end

      extra_member 265009 "single values"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      classrelation 398640 // reporter_ (<directional composition>)
	relation 398000 *-->
	  stereotype "shared_ptr"
	  a role_name "reporter_" multiplicity "0..1" private
	    comment "Manage data collectors."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 398640 // reporter_ (<directional composition>)
	  b parent class_ref 340656 // report_manager
      end

      classrelation 162353 // ensemble_ (<directional composition>)
	relation 162225 *-->
	  stereotype "shared_ptr"
	  a role_name "ensemble_" multiplicity "0..1" init_value "None" private
	    comment "The simulation particle set

(CREATED IN CTOR --> ALWAYS EXISTS)"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${value}
"
	    classrelation_ref 162353 // ensemble_ (<directional composition>)
	  b parent class_ref 134959 // ensemble
      end

      classrelation 378032 // checkpoint_function_ (<directional composition>)
	relation 377648 *-->
	  a role_name "checkpoint_function_" private
	    comment "Function to checkpoint the system."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 378032 // checkpoint_function_ (<directional composition>)
	  b parent class_ref 334128 // checkpoint_fn_type
      end

      attribute 1212079 "energy_"
	private explicit_type "double"
	init_value "0.0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The running energy estimate"
      end

      attribute 361009 "equilibration_interval_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The number of step cycles to perform in the equilibration phase of the simulation."
      end

      attribute 360497 "inner_loop_size_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The number of trials performed in a step cycle."
      end

      attribute 360369 "outer_loop_index_"
	private explicit_type "size_t"
	init_value "0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The current number of outer loop cycles (0 based) that have been performed.

(Allow for restarts from last checkpoint position)"
      end

      attribute 360881 "production_interval_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The number of step cycles to perform in the production phase of the simulation."
      end

      attribute 360625 "report_interval_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The number of step cycles between each report."
      end

      attribute 151473 "target_particles_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The target number of particles"
      end

      attribute 138031 "temperature_kelvin_"
	private explicit_type "double"
	init_value "300.0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Simulation temperature"
      end

      attribute 395569 "rgen_"
	private type class_ref 889391 // mt19937
	multiplicity "0..1"
	stereotype "shared_ptr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment "The randomness source. 

The default seed value is taken from the host 
system's random device and is not printed. If you
want to record the seed value, generate the value
externally, print the value and use 'set_random_seed'."
      end

      attribute 1452207 "ranf_"
	private type class_ref 463407 // random_distribution
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The random number distribution generator. This uses
the rgen_ attribute as the randomness source."
      end

      attribute 361521 "prepare_sig_"
	private explicit_type "sampler_signal_type"
	init_value "None"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Signal source for 'report' signal [void (simulator const&)]"
      end

      attribute 297009 "output_dir_fmt_"
	private explicit_type "string"
	init_value "(\"res\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Boost Format template defining the directory for output files.
Directory name is generated using

  boost::format(output_dir_fmt_) % run_index % run_uuid

The default is a format that gives '006/dat' where '006' is
the three digit run number string and the UUID is not used."
      end

      attribute 578863 "filename_base_"
	private explicit_type "string"
	init_value "\"input.%03d.inp\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The input file name template"
      end

      attribute 296881 "run_title_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " User input title for this simulation run"
      end

      attribute 296753 "run_uuid_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The unique identifier for a simulation"
      end

      attribute 296625 "run_index_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index of this run. 

Defaults to 1."
      end

      attribute 167984 "permittivity_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The permittivity of the system"
      end

      extra_member 228401 "** LIFETIME **"
	
	cpp "// LIFETIME METHODS" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 595889 "__init__"
	public explicit_return_type ""
	nparams 1
	  param inout name "self" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}super(${class}, ${p0}).__init__()
${body}
"
	
      end

      operation 596017 "__del__"
	public explicit_return_type ""
	nparams 1
	  param in name "self" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Break all the signal connections."
      end

      operation 175409 "simulator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
${body}
"
	
	
	
	
	comment "Main ctor"
      end

      operation 2154415 "~simulator"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
      end

      operation 2154159 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}template<class Archive> ${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
      end

      extra_member 228273 "** BUILD THE SIMULATION **"
	
	cpp "// SIMULATION INITIATION
//
// Coordinate the setting up of the simulation
// trial loop.
// 
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 178096 "add_chooser"
	public explicit_return_type "void"
	nparams 1
	  param in name "choice" type class_ref 170160 // base_chooser
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0}* ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0}* ${p0}${)}${const}${volatile}${throw}${staticnl}
{
   std::unique_ptr< ${t0} > captured_ptr( ${p0} );
   this->choosers_.push_back ( captured_ptr.get() );
   captured_ptr.release();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Transfer ownership of chooser 'choice' into our choices list.

"
      end

      operation 2183087 "add_evaluator"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "evltr" type class_ref 912175 // base_evaluator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0}* ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0}* ${p0}${)}${const}${volatile}${throw}${staticnl}
{
   std::unique_ptr< ${t0} > captured_ptr( ${p0} );
   this->evaluators_.push_back ( captured_ptr.get() );
   captured_ptr.release();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.evaluators_.append( ${p0} )
"
	
	comment " Transfer ownership of an energy evaluators into the evaluators list
"
      end

      operation 603185 "add_specie"
	public explicit_return_type "size_t"
	nparams 1
	  param in name "spc" type class_ref 134577 // specie
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  this->species_.push_back(spc);
  return this->species_.size() - 1;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.species_.append( ${p0} )
"
	
	comment " Add (copy) specie to set and return the index of the specie

 (non C++)"
      end

      operation 167472 "build_reader"
	abstract cpp_virtual private explicit_return_type "void"
	nparams 1
	  param inout name "decoder" type class_ref 1012655 // input_delegater
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Register the input file meta classes for this simulation."
      end

      operation 2062127 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Details about the current simulation to be written to the
 log at the start of the simulation."
      end

      operation 201008 "do_description"
	const cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Details about the current simulation object."
      end

      operation 577072 "license"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Write the name of the program and the license."
      end

      operation 577200 "do_license"
	abstract const cpp_virtual private explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Implement in derived classes to write the name of 
the program and any citation information."
      end

      operation 502705 "find_input_filename"
	const public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Generate a series of possible filenames and return the
 first filename that is found. Throw an error if no filenames
 are found. The template string is processed using 'printf'
 like function.

 \\post exists(return val)
"
      end

      operation 808369 "find_input_filename"
	const public explicit_return_type "std::string"
	nparams 1
	  param in name "d" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Generate a series of possible filenames and return the
 first filename that is found. Throw an error if no filenames
 are found.  The template is processed using boost::format.

 \\post exists(return val)
"
      end

      operation 603313 "generate_simulation"
	public explicit_return_type "void"
	nparams 1
	  param inout name "oslog" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Generate an initial ensemble to run a simulation."
      end

      operation 223792 "do_generate_simulation"
	abstract cpp_virtual private return_type class_ref 289841 // grid_generator
	nparams 1
	  param inout name "oslog" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::unique_ptr< ${type} > ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Pass ensemble to derived classes so they can generate
 the initial set of particles."
      end

      operation 178352 "get_max_input_version"
	abstract const cpp_virtual public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  The maximum input file version to be understood by this program"
      end

      operation 808497 "make_uuid_string"
	class_operation private explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	
	
	comment "Generate a UUID string"
      end

      operation 167344 "random_seed_value"
	class_operation public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Generate a random value to seed the random number generator.

 This uses an operating system provided random source to generate
 a single random unsigned int suitable to seed the psuedo-random
 number generator. 
"
      end

      operation 822961 "read_input"
	public explicit_return_type "void"
	nparams 2
	  param inout name "reader" type class_ref 313392 // input_base_reader
	  param inout name "oslog" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Read in the given input file"
      end

      operation 807985 "run_uuid"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Get the run UUID string"
      end

      operation 807857 "run_title"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Get the run title"
      end

      operation 807729 "run_index"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Get the index (or 0) of the current application run"
      end

      operation 585392 "set_checkpoint_function"
	public explicit_return_type "void"
	nparams 1
	  param in name "fn" type class_ref 334128 // checkpoint_fn_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->checkpoint_function_ = fn;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 800689 "set_report_interval"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->report_interval_ = ${p0};
}
"
	
	
	
	
      end

      operation 672689 "set_equilibration_interval"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->equilibration_interval_ = ${p0};
}
"
	
	
	
	
      end

      operation 808625 "set_filename_base"
	public explicit_return_type "void"
	nparams 1
	  param in name "fmt" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
 this->filename_base_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the template/regular expression for deriving input filenames."
      end

      operation 672945 "set_inner_loop_size"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->inner_loop_size_ = ${p0};
}
"
	
	
	
	
      end

      operation 809265 "set_output_dir_fmt"
	public explicit_return_type "void"
	nparams 1
	  param in name "fmt" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->output_dir_fmt_ = ${p0};
}
"
	
	
	
	
	comment "Set template string used to create directory path for 
output files.

Formatting is based on Boost Format so the string can
be in Boost Format, Posix printf or printf style."
      end

      operation 672817 "set_production_interval"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->production_interval_ = ${p0};
}
"
	
	
	
	
      end

      operation 808753 "set_random_seed"
	public explicit_return_type "void"
	nparams 1
	  param in name "seedval" explicit_type "uint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Reset the random number generate with the given seed. It
 should generally only be done once."
      end

      operation 808881 "set_run_number"
	public explicit_return_type "void"
	nparams 1
	  param in name "num" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->run_index_ = num;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Set the run number. This must be called before the input file is
read.

\\pre run_uuid not set."
      end

      operation 809521 "set_run_title"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->run_title_ = ${p0};
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.temperature_kelvin_ = ${p0}
"
	
	comment "Set a textual title for this simulation"
      end

      operation 673073 "set_target_count"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->target_particles_ = ${p0};
}
"
	
	
	
	
	comment " Set the intended average number of particles in the simulation."
      end

      operation 2154031 "set_temperature"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->temperature_kelvin_ = ${p0};
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.temperature_kelvin_ = ${p0}
"
	
	comment "Set the temperature (in Kelvin)"
      end

      operation 441264 "set_solvent_permittivity"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->permittivity_ = ${p0};
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.temperature_kelvin_ = ${p0}
"
	
	comment " Set the the relative permittivity of the solvent medium (relative 
 to permittivity in a vacuum)"
      end

      extra_member 228145 "** RUN SIMULATION **"
	
	cpp "// SIMULATION OWNERSHIP
//
// Manage the set of objects required to run a
// simulation.
//
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 319664 "compute_distances"
	const public explicit_return_type "void"
	nparams 5
	  param in name "position" type class_ref 986799 // coordinate
	  param in name "coords" type class_ref 223792 // coordinate_set
	  param inout name "rij" type class_ref 270001 // array_type
	  param in name "endindex" explicit_type "size_t"
	  param in name "startindex" explicit_type "size_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}
{
  ${body}
}
"
	
	
	
	
	comment "Compute the distances between given position and existing positions.

\\pre rij.size <= ens.size
\\post rij[0:startindex] === 0
\\post rij[ens.size:] undefined"
      end

      operation 178480 "do_compute_distances"
	abstract const cpp_virtual private explicit_return_type "void"
	nparams 5
	  param in name "position" type class_ref 986799 // coordinate
	  param in name "coords" type class_ref 223792 // coordinate_set
	  param inout name "rij" type class_ref 270001 // array_type
	  param in name "endindex" explicit_type "size_t"
	  param in name "start_index" explicit_type "size_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}, ${p3}${v3}${)}:
${docstring}${body}
"
	
	comment "Compute the distances between any new position and existing positions.

\\post rij.size == ens.size
\\post rij[0:start_index] == 0.0
"
      end

      operation 177840 "is_valid_position"
	abstract const cpp_virtual public explicit_return_type "bool"
	nparams 2
	  param inout name "coord" type class_ref 986799 // coordinate
	  param in name "ispec" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment " Is a particle at the given position and radius in a valid position
 in the system?"
      end

      operation 1747759 "run"
	public explicit_return_type "void"
	nparams 1
	  param inout name "oslog" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Perform the simulation"
      end

      operation 241328 "do_run"
	cpp_virtual private explicit_return_type "void"
	nparams 1
	  param inout name "oslog" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Derived class implementation of run method."
      end

      operation 602801 "run_loop"
	protected explicit_return_type "void"
	nparams 2
	  param in name "loopcount" explicit_type "size_t"
	  param inout name "out" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment " Method for setting up and running a set of MC trials.

 The 'do_run' method's jobs is to determine the sequence of
 trials that should be performed. This method's job is to perform
 the trials. It is not anticipated that this method would need to
 be altered."
      end

      extra_member 228657 "** SAMPLE SIMULATION **"
	
	cpp "// SIMULATION INITIATION
//
// Coordinate the setting up of the simulation
// trial loop.
// 
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 2147119 "do_report"
	private explicit_return_type "void"
	nparams 2
	  param in name "self" type class_ref 1129135 // simulator
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment " Report simulator statistics and issue the 'report' signal.

 * monitor that running energy and computed energy remain close"
      end

      operation 808113 "compute_output_dir"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->compute_dir(this->output_dir_fmt_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Computer the output directory for the current simulator object
 from the output_dir_fmt template.

 SIDE_EFFECT: Create directory if necessary"
      end

      operation 809393 "compute_dir"
	const private explicit_return_type "string"
	nparams 1
	  param in name "fmt" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Implementation of computing a directory from a given format text and
 creating the directory if necessary."
      end

      operation 2053679 "energy"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def get_${name}${(}self${)}:
${docstring}return self.energy_
"
	
	comment " The current value of the running energy"
      end

      operation 800177 "equilibration_interval"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
	comment " The number of outer loops that will be done before data collection commences.
 * checkpoints will be written (every isave)
 * data may be collected but will be reset at end of thermalisation"
      end

      operation 202928 "filename_base"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->filename_base_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the template/regular expression for deriving input filenames."
      end

      operation 1756463 "get_ensemble"
	const public return_type class_ref 134959 // ensemble
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return *(this->ensemble_.get ());
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.ensemble_
"
	
	comment " Get the current particle set"
      end

      operation 441521 "get_evaluators"
	const public return_type class_ref 243377 // const_range_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return ${type} (this->evaluators_.begin (), this->evaluators_.end ());
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.evaluators_
"
	
	comment " Access the list of evaluators

 (non python)"
      end

      operation 484400 "get_outer_loop_index"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->outer_loop_index_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.temperature_kelvin_
"
	
	comment " Get the current outer loop index"
      end

      operation 178864 "get_permittivity"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->permittivity_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the permittivity of the solvent"
      end

      operation 603953 "get_random"
	public return_type class_ref 463407 // random_distribution
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->ranf_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.ranf_
"
	
	comment " Access source of randomness"
      end

      operation 629040 "get_reporter"
	stereotype "const"
	const public return_type class_ref 340656 // report_manager
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} const& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return *(this->reporter_);
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Access report manager"
      end

      operation 629168 "get_reporter"
	public return_type class_ref 340656 // report_manager
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return *(this->reporter_);
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Access report manager (non-const)"
      end

      operation 2123695 "get_specie"
	stereotype "const"
	const public return_type class_ref 134577 // specie
	nparams 1
	  param in name "key" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} const& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->species_[key];
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}return self.species_[${p0}]
"
	
	comment " Get the definition of a specie by index"
      end

      operation 633521 "get_specie"
	public return_type class_ref 134577 // specie
	nparams 1
	  param in name "key" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->species_[key];
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}return self.species_[${p0}]
"
	
	comment " Get the definition of a specie by index"
      end

      operation 434865 "get_specie_key"
	const public explicit_return_type "size_t"
	nparams 1
	  param in name "label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the key of a specie from a label. 

 \\pre has_specie(label)
 (C++ throws out_of_range if not found)
 (Python raises KeyError if not found)
"
      end

      operation 603569 "get_species"
	const public return_type class_ref 134577 // specie
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::vector< ${type} > const& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->species_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.species_
"
	
	comment " Get the complete specie set"
      end

      operation 603697 "get_temperature"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->temperature_kelvin_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.temperature_kelvin_
"
	
	comment " Get the temperature (in Kelvin)"
      end

      operation 654897 "has_specie"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}return name in (x.label() for x in self.species_)
"
	
	comment " Do we have a specie with this label?"
      end

      operation 800305 "inner_loop_size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
	comment " The number of trials in an inner loop"
      end

      operation 1756207 "ionic_strength"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Calculate the current ionic strength (N/volume)"
      end

      operation 480689 "output_dir_fmt"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
	comment " The output directory template."
      end

      operation 441520 "permittivity_at"
	const cpp_virtual public explicit_return_type "double"
	nparams 1
	  param in name "pos" type class_ref 986799 // coordinate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} &${)}${const}${volatile}${throw}
{
  return this->permittivity_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Calculate the permittivity at the given location.

 Default implementation returns value of get_permittivity"
      end

      operation 800049 "production_interval"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->production_interval_;
}
"
	
	
	
	
	comment " The number of outer loops to perform during the simulation"
      end

      operation 800433 "report_interval"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
	comment " The number of outer loops between saving of the simulation state."
      end

      operation 2123823 "specie_count"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->species_.size();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return len(self.species_)
"
	
	comment " The number of different species

 ( equivalent to get_species().size() ("
      end

      operation 233777 "target_count"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->target_particles_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.target_particles_
"
	
	comment " How many particles we want in the simulation

 The intended average (solute) particle number in the
 simulation."
      end

      operation 1747503 "total_energy"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Calculate the total energy"
      end

      operation 178736 "volume"
	abstract const cpp_virtual public explicit_return_type "double"
	nparams 1
	  param in name "ispec" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Return the accessible volume of the given specie."
      end

      operation 216240 "write_document"
	public explicit_return_type "void"
	nparams 1
	  param inout name "wr" type class_ref 163632 // input_document
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write contents of simulation as an input document"
      end

      operation 216368 "do_write_document"
	abstract const cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write extra data of derived simulator object into the input
 document object at the given section."
      end

      operation 500144 "range_x"
	abstract const cpp_virtual public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::pair< ${type}, ${type} > ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the minimum and maximum dimension along the z coordinate"
      end

      operation 500272 "range_y"
	abstract const cpp_virtual public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::pair< ${type}, ${type} > ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the minimum and maximum dimension along the z coordinate"
      end

      operation 500016 "range_z"
	abstract const cpp_virtual public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::pair< ${type}, ${type} > ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the minimum and maximum dimension along the z coordinate"
      end
    end

    class 141872 "simulator_bloat"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}(object):
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Carry out a MC simulation.

 This class (and its descendents) is the most fundamental class for simulation. It orchestrates
 the running of the simulation. Its major roles are to manage building the simulation, running 
 the simulation and checkpointing/sampling the simulation.

 To handle different simulation cells you derive from this class. The derived class will then
 specialise the initialisation functions that create choices, observables etc that are cell specific.

 Base class of different types of MC simulation.

 Each simulator contains:

* transformer_ : a 'stepper' object that runs the main
loop of the simulation.

* simualtion_ : a 'system' object that contains the
information about the ensemble, particles etc that are
being simulated.

Each simulator refers to:

* evaluators_ : a set of evaluator objects for calculating
the energy.

* observables_ : a set of observable objects that collect data
from the simulations.

. RESPONSIBILITIES .

* Coordinate run order with other simulators.

* Simulation ownership: Coordinate objects taking part
in a single simulation. No objects are shared between
simulators. These objects include energy evaluators
(evaluators), data collectors (observables), simulation
component descriptions (species and ensemble), global
simulation parameters (temperature, output directory,
etc.).

* Initiation of the simulation: Configure the
stepper object that will perform the trials of the
simulation. Coordinate connection of the energy evaluators
and data collectors to the stepper object.

* Simulation maintenance: Provide controlled write access
to global simulation information.

* Simulator subtype methods: Methods that relate to
the geometry of the simulation cell.

  This class contains the loop sizes, observables
  and evaluators.  It has two simulation run
  functions; 'run' for standard simulations and
  'run_imc' for running iterative simulations

  Signals available and their intents:

  - 'prepare' - call to indicate that the system
  has created the initial simulation state and
  is about to start a phase of the simulation.
  Arguments are this object (sim). This method
  will be called at the beginning of a simulation
  and when switching from the thermalization to
  production phase. **Objects in the observables
  list do not need to connect to this signal as 
  they will be called directly for a method of
  this name.

  - 'report' - call to write observed data to
  a log stream and to data files. Arguments are
  this object and a stream object (sim, out).

  - 'inner-loop' - call at completion of every MC
  trial. Arguments are the change object (change)

  - 'outer-loop' - call after a certain number
  of MC trials. The number of trials should be
  proportional to the decorrelation time of the
  simulation allowing reasonably independent
  samples to be made. Argument will be this
  object (sim).
"
      classrelation 136880 // <dependency>
	relation 136752 -_->
	  stereotype "friend"
	  a package
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 136880 // <dependency>
	  b parent class_ref 1143343 // simulator_meta
      end

      extra_member 142256 "** LIFETIME **"
	
	cpp "// LIFETIME METHODS" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 168368 "__init__"
	public explicit_return_type ""
	nparams 1
	  param inout name "self" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}super(${class}, ${p0}).__init__()
${body}
"
	
      end

      operation 168496 "__del__"
	public explicit_return_type ""
	nparams 1
	  param in name "self" explicit_type ""
	
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Break all the signal connections."
      end

      operation 168624 "simulator_bloat"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
${body}
"
	
	
	
	
	comment "Main ctor"
      end

      extra_member 142512 "** BUILD THE SIMULATION **"
	
	cpp "// SIMULATION INITIATION
//
// Coordinate the setting up of the simulation
// trial loop.
// 
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 178224 "build_reader"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "decoder" type class_ref 1012655 // input_delegater
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Register the input file reader classes for this simulation.

 The base method registers a set of classes that should be
 simulation cell independent. Derived classes should therefore
 call this method as well as adding simulation cell dependent
 parts."
      end

      operation 169392 "build_reader_bak"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "decoder" type class_ref 1012655 // input_delegater
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Register the input file reader classes for this simulation.

 The base method registers a set of classes that should be
 simulation cell independent. Derived classes should therefore
 call this method as well as adding simulation cell dependent
 parts."
      end

      operation 169648 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Details about the current simulation to be written to the
log at the start of the simulation."
      end

      operation 169776 "do_enrol"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}for obs in self.observables_:
  obs.enrol( self )

"
	
	comment "Call enrol on all child objects to register
signals that will be used."
      end

      operation 169904 "do_prepare"
	cpp_virtual private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Prepare simulator attribute for performing a run,

Call prepare on the observables and evaluators.

"
      end

      operation 170288 "generate_simulation"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Generate an initial ensemble to run a simulation.

NOTE: region object that accepts 'set_volume' or 
a region factory that takes a volume parameter 
could be passed as an argument."
      end

      operation 170544 "main"
	public explicit_return_type "int"
	nparams 3
	  param in name "argc" explicit_type "int"
	  param in name "argv" explicit_type "char"
	  param inout name "oslog" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ** ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ** ${p1}, ${t2} & ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 173488 "update_choices"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Alter the trial generation rates used in the simulation"
      end

      extra_member 142640 "** RUN SIMULATION **"
	
	cpp "// SIMULATION OWNERSHIP
//
// Manage the set of objects required to run a
// simulation.
//
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 173616 "run"
	public explicit_return_type "void"
	nparams 1
	  param inout name "oslog" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Perform the simulation"
      end

      operation 173744 "run_loop"
	private explicit_return_type "void"
	nparams 2
	  param in name "loopcount" explicit_type "size_t"
	  param inout name "out" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
      end

      extra_member 142768 "** SAMPLE SIMULATION **"
	
	cpp "// SIMULATION INITIATION
//
// Coordinate the setting up of the simulation
// trial loop.
// 
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 174000 "do_report"
	private explicit_return_type "void"
	nparams 2
	  param in name "self" type class_ref 141872 // simulator_bloat
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment "Report simulator statistics and issue the 'report' signal.

* monitor that running energy and computed energy remain close"
      end

      operation 177712 "total_energy"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Calculate the total energy"
      end
    end

    class 632368 "simulation"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Class of objects that manage a simulation.

* Inheritance: The simulation state is separated into MC
content, MC control and system interaction components.
The MC control and system interaction can vary while the
MC content remains unchanged. The simulation object has an
object derived from the simulation_manager class to provide
MC control and an object derived from the storage_manager
class for system interaction.

* Parallelism: A simulation object expects to be run
serially. If a program runs multiple simulations they
interact via the storage_manager derived class.



Input file for simulation related objects

fileversion X

simulation
inner-loop XXX
report-loop XXX
name \"...\"
type standard
equilibrium-loop XXX
production-loop XXX
end

run
type standard
checkpoint-name \"...\"
output-name \"...\"
run-number X
output-format \"...\"
end
"
      classrelation 1098800 // <dependency>
	relation 1097904 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1098800 // <dependency>
	  b parent class_ref 912431 // access
      end

      classrelation 998832 // rman_ (<directional composition>)
	relation 997936 *-->
	  stereotype "shared_ptr"
	  a role_name "rman_" multiplicity "0..1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 998832 // rman_ (<directional composition>)
	  b parent class_ref 340656 // report_manager
      end

      classrelation 998960 // eman_ (<directional composition>)
	relation 998064 *-->
	  stereotype "shared_ptr"
	  a role_name "eman_" multiplicity "0..1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 998960 // eman_ (<directional composition>)
	  b parent class_ref 439344 // evaluator_manager
      end

      classrelation 999088 // gman_ (<directional composition>)
	relation 998192 *-->
	  stereotype "shared_ptr"
	  a role_name "gman_" multiplicity "0..1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 999088 // gman_ (<directional composition>)
	  b parent class_ref 452656 // geometry_manager
      end

      classrelation 999216 // pman_ (<directional composition>)
	relation 998320 *-->
	  stereotype "shared_ptr"
	  a role_name "pman_" multiplicity "0..1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 999216 // pman_ (<directional composition>)
	  b parent class_ref 446128 // particle_manager
      end

      classrelation 999344 // cman_ (<directional composition>)
	relation 998448 *-->
	  stereotype "shared_ptr"
	  a role_name "cman_" multiplicity "0..1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 999344 // cman_ (<directional composition>)
	  b parent class_ref 393392 // choice_manager
      end

      classrelation 1040688 // simtype_ (<directional composition>)
	relation 1039792 *-->
	  stereotype "shared_ptr"
	  a role_name "simtype_" multiplicity "0..1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1040688 // simtype_ (<directional composition>)
	  b parent class_ref 659760 // simulation_manager
      end

      classrelation 1040816 // fstype_ (<directional composition>)
	relation 1039920 *-->
	  stereotype "shared_ptr"
	  a role_name "fstype_" multiplicity "0..1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1040816 // fstype_ (<directional composition>)
	  b parent class_ref 659888 // storage_manager
      end

      attribute 754736 "inner_loop_size_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The number of trials performed in a step cycle."
      end

      attribute 753328 "energy_"
	private explicit_type "double"
	init_value "0.0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The running energy estimate"
      end

      attribute 754608 "outer_loop_index_"
	private explicit_type "size_t"
	init_value "0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The current number of outer loop cycles (0 based) that have been performed.

(Allow for restarts from last checkpoint position)"
      end

      attribute 754096 "rgen_"
	private type class_ref 889391 // mt19937
	multiplicity "0..1"
	stereotype "shared_ptr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment "The randomness source. 

The default seed value is taken from the host 
system's random device and is not printed. If you
want to record the seed value, generate the value
externally, print the value and use 'set_random_seed'."
      end

      attribute 753968 "ranf_"
	private type class_ref 463407 // random_distribution
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The random number distribution generator. This uses
the rgen_ attribute as the randomness source."
      end

      attribute 754352 "report_interval_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The number of step cycles between each report."
      end

      attribute 753840 "run_title_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " User input title for this simulation run"
      end

      attribute 778544 "max_input_version_"
	class_attribute private explicit_type "size_t"
	init_value "{1}"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The maximum understood input file version."
      end

      extra_member 689328 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1947952 "simulation"
	public explicit_return_type ""
	nparams 2
	  param inout name "cell_region" type class_ref 452912 // base_region
	  param inout name "fstype" type class_ref 659888 // storage_manager
	cpp_decl "    ${comment}${inline}${name}${(}boost::shared_ptr< ${t0} > ${p0}${v0}, boost::shared_ptr< ${t1} > ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}boost::shared_ptr< ${t0} > ${p0}, boost::shared_ptr< ${t1} > ${p1}${)}${volatile}${throw}
: rman_( new observable::report_manager )
, eman_( new evaluator::evaluator_manager )
, gman_( new geometry::geometry_manager( ${p0} ) )
, pman_( new particle::particle_manager )
, cman_( new trial::choice_manager )
, simtype_()
, fstype_( ${p1} )
, inner_loop_size_()
, energy_()
, outer_loop_index_( 0ul )
, rgen_( new boost::mt19937 )
, ranf_( rgen_ )
, report_interval_()
, run_title_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1999664 "simulation"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
: simulation( boost::shared_ptr< geometry::base_region >( new geometry::periodic_cube_region( \"cell\", 10.0 ) ), boost::shared_ptr< platform::storage_manager >( new platform::serial_storage ) )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1948080 "~simulation"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1948464 "simulation"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 632368 // simulation
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1948208 "simulation"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 632368 // simulation
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1948336 "operator="
	private return_type class_ref 632368 // simulation
	nparams 1
	  param in name "source" type class_ref 632368 // simulation
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 721200 "friend boost...access"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1772848 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}template<class Archive> ${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
      end

      extra_member 682800 "SIMPLE ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1761456 "energy"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def get_${name}${(}self${)}:
${docstring}return self.energy_
"
	
	comment " The current value of the running energy"
      end

      operation 1760944 "inner_loop_size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
	comment " The number of trials in an inner loop"
      end

      operation 1761200 "get_outer_loop_index"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->outer_loop_index_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.temperature_kelvin_
"
	
	comment " Get the current outer loop index. This number should be continuously increasing
 and should not be reset."
      end

      operation 1762736 "get_max_input_version"
	class_operation public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return ${class}::max_input_version_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "  The maximum input file version to be understood by this program"
      end

      operation 1761072 "get_random"
	public return_type class_ref 463407 // random_distribution
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->ranf_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.ranf_
"
	
	comment " Access source of randomness"
      end

      operation 1760560 "report_interval"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
	comment " The number of outer loops between saving of the simulation state."
      end

      extra_member 682416 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	comment " Access local attributes"
      end

      operation 1956272 "choices"
	stereotype "const"
	const public return_type class_ref 393392 // choice_manager
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return *(this->cman_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the simulation's set of trial selection choices."
      end

      operation 1955888 "evaluators"
	stereotype "const"
	const public return_type class_ref 439344 // evaluator_manager
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return *(this->eman_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the simulation's set of particles."
      end

      operation 1955632 "has_manager"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return ( this->simtype_ and true );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Test if simulation subtype object is set."
      end

      operation 1955504 "manager"
	stereotype "const"
	const public return_type class_ref 659760 // simulation_manager
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type}& ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  UTILITY_REQUIRE( this->has_manager(), \"Can not get simulation subtype before it is set.\" );
  return *(this->simtype_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Access simulation subtype object."
      end

      operation 1955760 "particles"
	stereotype "const"
	const public return_type class_ref 446128 // particle_manager
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return *(this->pman_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the simulations set of particles."
      end

      operation 2113456 "particles"
	public return_type class_ref 446128 // particle_manager
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return *(this->pman_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the simulations set of particles (non-constant)."
      end

      operation 1762608 "random_seed_value"
	class_operation public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Generate a random value to seed the random number generator.

 This uses an operating system provided random source to generate
 a single random unsigned int suitable to seed the psuedo-random
 number generator. 
"
      end

      operation 1956144 "regions"
	stereotype "const"
	const public return_type class_ref 452656 // geometry_manager
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return *(this->gman_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the simulation's set of regions."
      end

      operation 1956016 "report"
	stereotype "const"
	const public return_type class_ref 340656 // report_manager
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return *(this->rman_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the simulation's samplers."
      end

      operation 1939504 "run_title"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Get the run title"
      end

      operation 1956400 "storage"
	stereotype "const"
	const public return_type class_ref 659888 // storage_manager
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return *(this->fstype_);
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the simulation's storage manager"
      end

      extra_member 682544 "MODIFY"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	comment " Change value of local attributes"
      end

      operation 1762096 "set_inner_loop_size"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->inner_loop_size_ = ${p0};
}
"
	
	
	
	
      end

      operation 1940272 "set_manager"
	public explicit_return_type "void"
	nparams 1
	  param inout name "simtype" type class_ref 659760 // simulation_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}boost::shared_ptr< ${t0} > ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  std::swap( this->simtype_, simtype );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1761840 "set_random_seed"
	public explicit_return_type "void"
	nparams 1
	  param in name "seedval" explicit_type "uint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Reset the random number generate with the given seed. It
 should generally only be done once."
      end

      operation 1762352 "set_report_interval"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->report_interval_ = ${p0};
}
"
	
	
	
	
      end

      operation 1939632 "set_run_title"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->run_title_ = ${p0};
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.temperature_kelvin_ = ${p0}
"
	
	comment "Set a textual title for this simulation"
      end

      operation 1939760 "set_target_count"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  this->pman_->${name}( ${p0} );
}
"
	
	
	
	
	comment " Set the intended average number of particles in the simulation."
      end

      operation 1940016 "set_temperature"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  this->eman_->temperature( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.temperature_kelvin_ = ${p0}
"
	
	comment "Set the temperature (in Kelvin)"
      end

      operation 1939888 "set_solvent_permittivity"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  this->eman_->permittivity( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.temperature_kelvin_ = ${p0}
"
	
	comment " Set the the relative permittivity of the solvent medium (relative 
 to permittivity in a vacuum)"
      end

      extra_member 727728 "METHODS (ANYTIME)"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1635888 "build_input_delegater"
	public explicit_return_type "void"
	nparams 1
	  param inout name "delegate" type class_ref 1012655 // input_delegater
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Adds factory methods and input parsers for all the types that can be instantiated from 
 the input file."
      end

      operation 1939376 "get_log"
	const public explicit_return_type "ostream"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return this->fstype_->get_log();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the log (from the storage manager)"
      end

      operation 1763248 "license"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Write the name of the program and the license. If instantiated,
 get extra license information from simulation manager."
      end

      operation 1979952 "program_description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Write details about the current program and execution
 environment to os."
      end

      extra_member 727856 "METHODS (PREINPUT)"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1762480 "read_input"
	public explicit_return_type "void"
	nparams 1
	  param inout name "reader" type class_ref 313392 // input_base_reader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Read in the given input source.

 \\post has_manager
 \\post report.has_sink"
      end

      extra_member 727984 "METHODS (POSTINPUT)"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1762992 "generate_simulation"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  this->pman_->generate_simulation( *(this->gman_), this->get_random(), this->fstype_->get_log() );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Generate an initial particle configuration to be able to
 run a simulation.

 In general the \"main\" method handles creating
 the from an input file using \"read_input\" then
 \"generate_simulation\". This should prepare the particle
 system for performing a simulaton. This method is
 publically available for manually constructing a
 simulation, for example during testing.
"
      end

      operation 2049840 "resolve_system_size"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  this->pman_->generate_simulation( *(this->gman_), this->get_random(), this->fstype_->get_log() );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Finalize the volume or particle count based on
 ionic-strength and the volume or particle count
 set in the input file.
"
      end

      operation 1760176 "write_document"
	public explicit_return_type "void"
	nparams 1
	  param inout name "wr" type class_ref 163632 // input_document
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write contents of simulation as an input document

 \\pre has_manager"
      end

      extra_member 728112 "METHODS (POST GEN SIM)"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1763504 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Details about the current simulation to be written to the
 log at the start of the simulation.

 \\pre has_manager"
      end

      operation 1763376 "do_description"
	const cpp_virtual private explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Details about the current simulation object.

 \\pre has_manager"
      end

      operation 1761584 "do_report"
	private explicit_return_type "void"
	nparams 1
	  param in name "self" type class_ref 632368 // simulation
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment " Report simulator statistics and issue the 'report' signal.

 * monitor that running energy and computed energy remain close"
      end

      operation 1759920 "prepare"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment " Set up evaluators, observers and trial choices in preparation for
 running a set of MC trials. These objects should reset any
 internal state and configure themselves for the simulation
 particle configuration and cell geometry.
"
      end

      operation 1763632 "run_loop"
	public explicit_return_type "void"
	nparams 1
	  param in name "loopcount" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment " Method for setting up and running a set of MC trials.

 The 'do_run' method's jobs is to determine the sequence of
 trials that should be performed. This method's job is to perform
 the trials. It is not anticipated that this method would need to
 be altered."
      end

      operation 1760304 "total_energy"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Calculate the total energy"
      end

      extra_member 682672 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
	comment " Methods that involve modifying and/or querying attributes."
      end

      operation 1877296 "main"
	public explicit_return_type "bool"
	nparams 2
	  param in name "argc" explicit_type "int"
	  param in name "argv" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ** ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ** ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 682288 "TODO"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end
    end

    class 659760 "simulation_manager"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " The style of simulation that is running.  This manages the
 super-loop variants and can be selected from the input file
 at runtime.


 The simulation manager is responsible for:

 * Controlling the main simulation loop(s): ''run''

 * Instantiating itself (and any subobjects) from information
 in the input file.


 The following methods must be overwritten:

 : run : Prepare and run the simulation. A standard simulation
 would have the sequence: sim.prepare, sim.run_loop(thermal),
 sim.prepare, sim.run_loop(production), [sim.report].

 : do_description, license : These methods produce documentation
 for the simulation.

 : do_write_part_document, type_label, set_parameters : These
 methods are used when reading and writing an input file.

"
      classrelation 1070256 // <dependency>
	relation 1069360 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 1070256 // <dependency>
	  b parent class_ref 912431 // access
      end

      attribute 753456 "equilibration_interval_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The number of step cycles to perform in the equilibration phase of the simulation."
      end

      attribute 754480 "production_interval_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The number of step cycles to perform in the production phase of the simulation."
      end

      extra_member 706736 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1870128 "simulation_manager"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: equilibration_interval_()
, production_interval_()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1870256 "~simulation_manager"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1870384 "simulation_manager"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 659760 // simulation_manager
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " No move"
      end

      operation 1870512 "simulation_manager"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 659760 // simulation_manager
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " No copy"
      end

      operation 1870640 "operator="
	private return_type class_ref 659760 // simulation_manager
	nparams 1
	  param in name "source" type class_ref 659760 // simulation_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " No assignment"
      end

      extra_member 706864 "friend boost...access"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1870768 "serialize"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive> ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ar & equilibration_interval_;
  ar & production_interval_;
}"
	
	
	
	
      end

      extra_member 706608 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1941040 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Details about the current simulation to be written to the
 log at the start of the simulation."
      end

      operation 1940912 "do_description"
	abstract const cpp_virtual private explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Details about the current storage object."
      end

      operation 1761328 "equilibration_interval"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
	comment " The number of outer loops that will be done before data collection commences.
 * checkpoints will be written (every isave)
 * data may be collected but will be reset at end of thermalisation"
      end

      operation 1763120 "license"
	abstract const cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The licence or citation information for this 
 simulation subtype. This supplements information
 writen by the simulation class."
      end

      operation 1760688 "production_interval"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->production_interval_;
}
"
	
	
	
	
	comment " The number of outer loops to perform during the simulation"
      end

      operation 1935536 "type_label"
	abstract const cpp_virtual public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Label that identifies this simulation manager subtype in
 the input file (virtual access)."
      end

      operation 1760048 "write_part_document"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write data of simulation manager object into the input
 document object at the given section."
      end

      operation 1935280 "do_write_part_document"
	abstract const cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write extra data of derived simulator object into the input
 document object at the given section."
      end

      extra_member 706480 "MODIFY"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1762224 "set_equilibration_interval"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->equilibration_interval_ = ${p0};
}
"
	
	
	
	
      end

      operation 1761968 "set_production_interval"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->production_interval_ = ${p0};
}
"
	
	
	
	
      end

      extra_member 706352 "METHOD"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1773104 "run"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 2
	  param inout name "sim" type class_ref 632368 // simulation
	  param inout name "oslog" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Perform the simulation. Base class just does
 sim.run_loop(equil_int) + sim.run_loop(prod_int).
"
      end
    end

    class 681008 "standard_simulation"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " The style of simulation that is running.  This manages the super-loop variants
 and can be selected from the input file at runtime."
      classrelation 1097904 // <generalisation>
	relation 1097008 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1097904 // <generalisation>
	  b parent class_ref 659760 // simulation_manager
      end

      classrelation 1097776 // <dependency>
	relation 1096880 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 1097776 // <dependency>
	  b parent class_ref 912431 // access
      end

      extra_member 720560 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1935664 "standard_simulation"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: simulation_manager()
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1935792 "~standard_simulation"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1935920 "standard_simulation"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 681008 // standard_simulation
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " No move"
      end

      operation 1936048 "standard_simulation"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 681008 // standard_simulation
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " No copy"
      end

      operation 1936176 "operator="
	private return_type class_ref 681008 // standard_simulation
	nparams 1
	  param in name "source" type class_ref 681008 // standard_simulation
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " No assignment"
      end

      extra_member 720688 "friend boost...access"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1936304 "serialize"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive> ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
{
  ar & boost::serialization::base_object< platform::simulation_manager >( *this );
}"
	
	
	
	
      end

      extra_member 720816 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1941168 "do_description"
	const cpp_virtual private explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Details about the current storage object."
      end

      operation 1936560 "license"
	const cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Implement in derived classes to write the name of 
the program and any citation information."
      end

      operation 1936816 "type_label"
	const cpp_virtual public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  return ${class}::${name}_();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Label that identifies this simulation manager subtype in
 the input file (virtual access)."
      end

      operation 1936944 "type_label_"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  std::string result{ \"standard\" };
  return result;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Label that identifies this simulation manager subtype in
 the input file."
      end

      operation 1937200 "do_write_part_document"
	const cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write extra data of derived simulator object into the input
 document object at the given section."
      end

      extra_member 720944 "MODIFY"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 721072 "METHOD"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1937712 "add_definition"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "meta" type class_ref 1143343 // simulator_meta
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1937584 "run"
	public explicit_return_type "bool"
	nparams 2
	  param inout name "sim" type class_ref 632368 // simulation
	  param inout name "oslog" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Perform the simulation. This class does:

 sim.prepare + sim.run_loop(equil_int)
 sim.prepare + sim.run_loop(prod_int)
"
      end

      operation 1939248 "make_simulation_manager"
	class_operation public return_type class_ref 659760 // simulation_manager
	nparams 1
	  param in name "params" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}const std::map< ${t0}, ${t0} >& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}const std::map< ${t0}, ${t0} >& ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end
    end

    class 659888 "storage_manager"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Manage access to data sources and sinks.  Manage the
 system's log stream.

 This handles interaction with the external system.
 This includes managing what happens when a simulation is
 being run in parallel (eg MPI, OpenMP etc).

 In this library each simulation instance runs in a
 single thread, but an application can have multiple
 threads running.
"
      classrelation 1050416 // <dependency>
	relation 1049520 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1050416 // <dependency>
	  b parent class_ref 912431 // access
      end

      attribute 771888 "checkpoint_name_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The name of the checkpoint file. Rarely should this
 be altered from the default.
"
      end

      attribute 753712 "filename_base_"
	private explicit_type "string"
	init_value "\"input.%03d.inp\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The input file name template

 Filename base can be a simple filename or a format string that
 takes a number. The number substituted into the string will be
 the run number. For example the default \"input.%1$03d.inp\" with
 run number of 12 will give filename \"input.012.inp\".
"
      end

      attribute 761264 "output_dir_fmt_"
	private explicit_type "string"
	init_value "(\"res\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Boost Format template defining the directory for output files.
Directory name is generated using

  boost::format(output_dir_fmt_) % run_index % run_uuid

The default is a format that gives '006/dat' where '006' is
the three digit run number string and the UUID is not used."
      end

      attribute 772016 "output_name_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The name of the output file. If an extension is
 given it should be used to select the file type and
 use an appropriate base_sink subclass."
      end

      attribute 753584 "run_number_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index of this run. 

Defaults to 1."
      end

      attribute 762032 "log_"
	private explicit_type "ostream"
	multiplicity "0..1"
	stereotype "shared_ptr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Not serialized"
      end

      extra_member 695856 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1813168 "storage_manager"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
: checkpoint_name_( ${class}::default_checkpoint_name() )
, filename_base_( ${class}::default_filename_base() )
, output_dir_fmt_( ${class}::default_output_dir_fmt() )
, output_name_( ${class}::default_output_name() )
, run_number_( ${class}::default_run_number() )
, log_()
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1813296 "~storage_manager"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1813424 "storage_manager"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 659888 // storage_manager
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " no move"
      end

      operation 1813552 "storage_manager"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 659888 // storage_manager
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " no copy"
      end

      operation 1813680 "operator="
	private return_type class_ref 659888 // storage_manager
	nparams 1
	  param in name "source" type class_ref 659888 // storage_manager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " no assignment"
      end

      extra_member 503343 "friend boost...access"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1835440 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}template<class Archive> ${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
      end

      extra_member 695984 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1839536 "default_checkpoint_name"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  static const std::string result( \"checkpoint.arc\" );
  return result;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the default name of the checkpoint file"
      end

      operation 1839664 "default_filename_base"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  static const std::string result( \"input.\\%1$03d.inp\" );
  return result;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the default template for the input filename."
      end

      operation 1813808 "default_output_name"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  static const std::string result( \"output.dbm\" );
  return result;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Get the default name of the output file"
      end

      operation 1813936 "default_output_dir_fmt"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  static const std::string result( \"\\%1$03d\" );
  return result;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1814064 "default_run_number"
	class_operation public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}constexpr ${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return 1ul;
}

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1839792 "checkpoint_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
	comment " The name of the checkpoint file."
      end

      operation 1940400 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Details about the current simulation to be written to the
 log at the start of the simulation."
      end

      operation 1940656 "do_description"
	abstract const cpp_virtual private explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Details about the current storage object."
      end

      operation 1758256 "filename_base"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
   return this->filename_base_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the template/regular expression for deriving input filenames."
      end

      operation 1907632 "get_label"
	abstract const cpp_virtual public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " A word used to idenitfy the storage manager type in the input file."
      end

      operation 1759792 "get_log"
	cpp_virtual public explicit_return_type "ostream"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Return the simulations log output stream.  If no
 log stream is currently open then this calls open_log.
 Therefore this may throw any exception as open_log."
      end

      operation 1758128 "output_dir_fmt"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
	comment " The output directory template."
      end

      operation 1839920 "output_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	
	
	comment " The target file name of the output file."
      end

      operation 1759024 "run_number"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->${name}_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Get the index (default=1) of the current application run"
      end

      operation 1928624 "write_document"
	public explicit_return_type "void"
	nparams 1
	  param inout name "wr" type class_ref 163632 // input_document
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write contents of simulation as an input document"
      end

      operation 1928496 "do_write_document"
	abstract const cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write extra data of derived simulator object into the input
 document object at the given section."
      end

      extra_member 696112 "MODIFY"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1840048 "set_checkpoint_name"
	public explicit_return_type "void"
	nparams 1
	  param in name "fn" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->checkpoint_name_ = ${p0};
}
"
	
	
	
	
	comment " Set the name of the checkpoint file.
"
      end

      operation 1758896 "set_filename_base"
	public explicit_return_type "void"
	nparams 1
	  param in name "fmt" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
 this->filename_base_ = ${p0};
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the template/regular expression for deriving input filenames."
      end

      operation 1861680 "set_log"
	public explicit_return_type "ostream"
	nparams 1
	  param in name "os_ptr" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}boost::shared_ptr< ${t0} > ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}boost::shared_ptr< ${t0} > ${p0}${)}${const}${volatile}${throw}
{
  std::swap( os_ptr, this->log_ );
  return os_ptr;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Function to set log to an externally defined output stream."
      end

      operation 1840176 "set_output_dir_fmt"
	public explicit_return_type "void"
	nparams 1
	  param in name "fmt" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->output_dir_fmt_ = ${p0};
}
"
	
	
	
	
	comment "Set template string used to create directory path for 
output files.

Formatting is based on Boost Format so the string can
be in Boost Format, Posix printf or printf style."
      end

      operation 1758768 "set_output_name"
	public explicit_return_type "void"
	nparams 1
	  param in name "fmt" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->output_name_ = ${p0};
}
"
	
	
	
	
	comment " Set the name of the output file. If an extension is
 given it should be used to select the file type and
 use an appropriate base_sink subclass.
"
      end

      operation 1908016 "set_parameters"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "params" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const std::map< ${t0}, ${t0} >& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Subtype specific parameters (from the input file)."
      end

      operation 1758640 "set_run_number"
	public explicit_return_type "void"
	nparams 1
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->run_number_ = num;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Set the run number.

 NOTE: To use automatic filename and directory name
 generation this must be called before input and output
 files or directories are used.
"
      end

      extra_member 696240 "METHOD"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1848496 "open_sink_by_extension"
	class_operation public return_type class_ref 313520 // base_sink
	nparams 2
	  param in name "fpath" type class_ref 252079 // path
	  param in name "def_ext" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1841200 "checkpoint_path"
	const cpp_virtual public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Generate path to the checkpoint file.

 Default implementation :

 \\return compute_output_dir + checkpoint_name

 \\pre not checkpoint_name.empty
"
      end

      operation 1758512 "compute_output_dir"
	abstract const cpp_virtual public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Computer the output directory for the current simulator object
 from the output_dir_fmt template."
      end

      operation 1759280 "find_input_filename"
	abstract const cpp_virtual public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Generate a series of possible filenames and return
 the first filename that is found. Throw an error if no
 filenames are found. The template string is processed
 using 'printf' like function.

 For a filename_base of \"input.%03d.inp\" and run number
 of 11 the filenames checked for will be:

  * input.011.inp

  * input.inp

 \\post exists(return val)
"
      end

      operation 1877424 "on_restart"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " When restarting a simulation from a checkpoint file the
 previous invocation may have been a parallel execution. In
 this case the storage_manager class must reconnect to
 the parallel subjobs and restart them from the subjob's
 checkpoint files.
"
      end

      operation 1841840 "output_path"
	const cpp_virtual public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Generate path to the output file.

 Default implementation :

 \\return compute_output_dir + output_name

 \\pre not checkpoint_name.empty
"
      end

      operation 1759408 "open_output"
	abstract cpp_virtual public return_type class_ref 313520 // base_sink
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create/open the simulation's output sink."
      end

      operation 1759536 "open_input"
	abstract cpp_virtual public return_type class_ref 313392 // input_base_reader
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create/open the simulation's input stream."
      end

      operation 1759664 "open_checkpoint"
	abstract cpp_virtual public explicit_return_type "ostream"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create/open the simulation's checkpoint stream."
      end

      operation 1766064 "open_log"
	abstract cpp_virtual private explicit_return_type "ostream"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create the system's log output stream."
      end

      operation 1900976 "build_input_delegater"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "fstype" type class_ref 659888 // storage_manager
	  param inout name "delegate" type class_ref 1012655 // input_delegater
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}boost::shared_ptr< ${t0} > ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}boost::shared_ptr< ${t0} > ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Adds factory methods and input parsers for all the types that can be instantiated from 
 the input file."
      end
    end

    class 667440 "serial_storage"
      visibility protected 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Manage access to data sources and sinks in a serial
 context. This uses no special handling of input and
 output data and access the local filesystem.
"
      classrelation 1050544 // <dependency>
	relation 1049648 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1050544 // <dependency>
	  b parent class_ref 912431 // access
      end

      classrelation 1057072 // <generalisation>
	relation 1056176 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1057072 // <generalisation>
	  b parent class_ref 659888 // storage_manager
      end

      extra_member 699312 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1836464 "serial_storage"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
: storage_manager()
{}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1836592 "~serial_storage"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1836720 "serial_storage"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 667440 // serial_storage
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " no move"
      end

      operation 1836848 "serial_storage"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 667440 // serial_storage
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " no copy"
      end

      operation 1836976 "operator="
	private return_type class_ref 667440 // serial_storage
	nparams 1
	  param in name "source" type class_ref 667440 // serial_storage
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " no assignment"
      end

      extra_member 699440 "friend boost...access"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1837104 "serialize"
	stereotype "template"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract}
  {
    ar & boost::serialization::base_object< platform::storage_manager >( *this );
  }"
	
	
	
	
      end

      extra_member 699568 "ACCESS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1900720 "get_label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override
{
  return ${class}::type_label_();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " A word used to idenitfy the storage manager type in the input file."
      end

      operation 1940528 "do_description"
	const private explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Details about the current storage object."
      end

      operation 1928752 "do_write_document"
	const private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write extra data of derived simulator object into the input
 document object at the given section."
      end

      extra_member 699696 "MODIFY"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1908144 "set_parameters"
	public explicit_return_type "void"
	nparams 1
	  param in name "params" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const std::map< ${t0}, ${t0} >& ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const std::map< ${t0}, ${t0} >& ${p0}${)}${const}${volatile}${throw}
{
  UTILITY_ALWAYS( ${p0}.empty(), \"serial storage class has no extra parameters.\" );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Throw an exception as this manager takes no extra
 parameters."
      end

      extra_member 699824 "METHOD"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1840944 "compute_output_dir"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Computer the output directory for the current simulator object
 from the output_dir_fmt template."
      end

      operation 1848368 "ensure_output_dir"
	private return_type class_ref 252079 // path
	nparams 0
	cpp_visibility private cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Ensure the output directory exists, creating if necessary.
 Return the path to the directory. Throws error if output
 directory path exists but is not a directory.
"
      end

      operation 1840816 "find_input_filename"
	const public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Generate a series of possible filenames and return
 the first filename that is found. Throw an error if no
 filenames are found. The template string is processed
 using 'printf' or boost::format like function.

 For a filename_base of \"input.%1$03d.inp\" and run number
 of 11 the filenames checked for will be:

  * input.011.inp

  * input.inp

 If no \"%\" is present it assumes the string is directly
 the filename.

 \\post exists(return val)
"
      end

      operation 1877552 "on_restart"
	cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " When restarting a simulation from a checkpoint file the
 previous invocation may have been a parallel execution. In
 this case the storage_manager class must reconnect to
 the parallel subjobs and restart them from the subjob's
 checkpoint files. This serial version does nothing.
"
      end

      operation 1838896 "open_output"
	public return_type class_ref 313520 // base_sink
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create/open the simulation's output sink.

 If extension is not given then a sink of type gdbm_sink
 is returned."
      end

      operation 1839024 "open_input"
	public return_type class_ref 313392 // input_base_reader
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create/open the simulation's input stream.

 This uses find_input_filename to identify the
 input file then opens it using a input_reader
 type reader object.

 \\throw as per find_input_filename"
      end

      operation 1839152 "open_checkpoint"
	public explicit_return_type "ostream"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create/open the simulation's checkpoint stream."
      end

      operation 1839280 "open_log"
	private explicit_return_type "ostream"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Create the system's log output stream. In this case
 the log file is to standard out."
      end

      operation 1900592 "add_definition"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "meta" type class_ref 673968 // storage_meta
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1900848 "type_label_"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The string \"local\" used to identify this storage
 manager in the input file."
      end
    end
  end

  classview 226736 "meta classes"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 334895 // application class deployment
    comment "The simulation system is set from input information like
the following:

---
fileversion X

simulation
inner-loop XXX
report-loop XXX
name \"...\"
# on behalf of particle manager
target-particles XXX
# on behalf of evaluator manager
permittivity XX.XX
kelvin XX.XX
type standard
equilibrium-loop XXX
production-loop XXX
end

run
type standard
checkpoint-name \"...\"
output-name \"...\"
run-number X
output-format \"...\"
end
--

NOTES:

* simulation section has \"type\" parameter that will
construct a simulation_manager derived class object.

* run section has a \"type\" parameter that will construct
a storage_manager derived class object.
"
    class 674224 "simulation_definition"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Provide information useful for interpreting the input file. This includes
 a simulation_manager generator function, a type name and any optional
 parameters (with help descriptions)."
      classrelation 1077040 // <generalisation>
	relation 1076144 ---|>
	  a private
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1077040 // <generalisation>
	  b parent class_ref 539568 // input_definition
      end

      class 674352 "sim_manager_generator_fn"
	visibility package stereotype "typedef" base_type class_ref 252719 // function1
	nactuals 2
	actual class class_ref 252719 // function1
	  rank 0 explicit_value "boost::shared_ptr< simulation_manager >"
	actual class class_ref 252719 // function1
	  rank 1 explicit_value "const std::map< std::string, std::string > &"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	classrelation 1098416 // <realization>
	  relation 1097520 -_-|>
	    a public
	      cpp default "${type}"
	      python "${type}"
	      classrelation_ref 1098416 // <realization>
	    b parent class_ref 252719 // function1
	end
      end

      classrelation 1098160 // factory_ (<directional composition>)
	relation 1097264 *-->
	  a role_name "factory_" multiplicity "1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 1098160 // factory_ (<directional composition>)
	  b parent class_ref 674352 // sim_manager_generator_fn
      end

      extra_member 713392 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1884976 "simulation_definition"
	const public explicit_return_type ""
	nparams 3
	  param in name "label" explicit_type "string"
	  param in name "desc" explicit_type "string"
	  param in name "fn" type class_ref 674352 // sim_manager_generator_fn
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}
: input_definition( ${p0}, ${p1} )
, factory_( ${p2} )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Main Ctor

 \\param label : name of the region subtype."
      end

      operation 1885104 "simulation_definition"
	const private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1885232 "~simulation_definition"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1885360 "simulation_definition"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 674224 // simulation_definition
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1885488 "simulation_definition"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 674224 // simulation_definition
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1885616 "operator="
	private return_type class_ref 674224 // simulation_definition
	nparams 1
	  param in name "source" type class_ref 674224 // simulation_definition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 713520 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1885744 "operator()"
	const public return_type class_ref 659760 // simulation_manager
	nparams 1
	  param in name "params" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}const std::map< ${t0}, ${t0} > & ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return this->factory_( ${p0} );
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Generate a base_region from the given label 
 and parameters."
      end

      extra_member 713648 "access base class methods"
	
	stereotype "using"
	cpp "using input_definition::add_definition;
using input_definition::empty;
using input_definition::has_definition;
using input_definition::label;
using input_definition::description;
using input_definition::publish_help;
using input_definition::size;
" ""
	java ""
	php ""
	python ""
	idl ""
      end
    end

    class 1143343 "simulator_meta"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Meta class between the input file and a simulation class
object

multiple = false

Implementation Notes: The simulation objects are held by
reference.

Base parameters:

 * ntarg : target particle number : required : >0

 * epsw : media relative permittivity (has default) >0.0
 
 * kelvin : temperature in Kelvin (has default) >0.0

 * inner : inner loop size (has default) >0

 * isave : checkpoint/report frequency (has default?) >0

 * name : Title for the simulation (optional)

 * type : simulation subtype

Base simulation subtype parameters

 * nstep : number of steps in production phase

 * naver : number of steps in thermalization phase.
"
      classrelation 1312175 // <generalisation>
	relation 1273647 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1312175 // <generalisation>
	  b parent class_ref 1082671 // input_base_meta
      end

      classrelation 1098032 // types_ (<directional composition>)
	relation 1097136 *-->
	  stereotype "ptr_vector"
	  a role_name "types_" multiplicity "*" private
	    comment " The different simulation subtypes that can be performed."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1098032 // types_ (<directional composition>)
	  b parent class_ref 674224 // simulation_definition
      end

      classrelation 1098672 // sim_ (<directional aggregation>)
	relation 1097776 o-->
	  a role_name "sim_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    python "${comment}${self}${name} = ${value}
"
	    classrelation_ref 1098672 // sim_ (<directional aggregation>)
	  b parent class_ref 632368 // simulation
      end

      attribute 174512 "required_tags_"
	private explicit_type "5"
	multiplicity "*"
	stereotype "bitset"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment "  Which input entrys have been seen"
      end

      attribute 825904 "params_"
	private explicit_type "string"
	multiplicity "*"
	stereotype "map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}, ${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
      end

      attribute 825776 "type_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The type label of the current observable"
      end

      attribute 826032 "naver_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The number of step cycles to perform in the equilibration phase of the simulation."
      end

      attribute 826160 "nstep_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The number of step cycles to perform in the production phase of the simulation."
      end

      class 149040 "anonymous_sim_meta"
	visibility private stereotype "enum"
	cpp_decl "${comment}enum
 {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl "${comment}${visibility}final class ${name} {
${items}}
"
	python_decl "class ${name}:
${docstring}${members}
"
	idl_decl "${comment}enum ${name} {
${items}};
"
	explicit_switch_type ""
	
	comment " indices in missing option bitset"
	attribute 174640 "SIMULATOR_PROD"
	  public type class_ref 149040 // anonymous_sim_meta
	  init_value "0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " entry 'nstep'"
	end

	attribute 174768 "SIMULATOR_THERM"
	  public type class_ref 149040 // anonymous_sim_meta
	  init_value "1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " entry 'naver'"
	end

	attribute 174896 "SIMULATOR_CHECK"
	  public type class_ref 149040 // anonymous_sim_meta
	  init_value "2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " entry 'isave'"
	end

	attribute 175024 "SIMULATOR_INNER"
	  public type class_ref 149040 // anonymous_sim_meta
	  init_value "3"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " entry 'inner'"
	end

	attribute 832688 "SIMULATOR_TYPE"
	  public type class_ref 149040 // anonymous_sim_meta
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Check if \"type\" parameter was present"
	end
      end

      operation 2162607 "do_read_entry"
	private explicit_return_type "bool"
	nparams 1
	  param inout name "reader" type class_ref 313392 // input_base_reader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Read an entry in the input file

 throw an error if input file is incorrect (using UTILITY_INPUT macro)"
      end

      operation 186416 "do_read_end"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Check for completeness of input at end of section. It does not
 reset the meta data as 'multiple' is false."
      end

      operation 1938224 "add_type"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ctor" type class_ref 674224 // simulation_definition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}std::unique_ptr< ${t0} >& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}std::unique_ptr< ${t0} >& ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add ctor for input \"simulation\" section

 \\pre not has_type( ctor.type_name_ )
 \\post has_type( ctor.type_name_ )"
      end

      operation 1938096 "has_type"
	public explicit_return_type "bool"
	nparams 1
	  param in name "label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Is there a ctor to match input \"simulation\" section with
 \"type = [label]\""
      end

      operation 1937968 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this->types_.${name}(); }

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The number of storage type definitions"
      end

      operation 1937840 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this->types_.${name}(); }

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Ary there no storage type definitions?"
      end

      operation 2163887 "simulator_meta"
	public explicit_return_type ""
	nparams 1
	  param inout name "sim" type class_ref 632368 // simulation
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}${)}${volatile}${throw} 
: input_base_meta (core::strngs::simulator_label(), false, true)
, sim_(&${p0})
, required_tags_()
, params_()
, type_()
, naver_()
, nstep_()
{}
"
	
	
	
	
      end

      operation 2164015 "~simulator_meta"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 268720 "do_reset"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Reset the object"
      end

      operation 1886768 "publish_help"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "helper" type class_ref 1004335 // input_help
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end
    end

    class 674480 "storage_definition"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Provide information useful for interpreting the input file. This includes
 a storage_manager generator function, a type name and any optional
 parameters (with help descriptions)."
      classrelation 1077424 // <generalisation>
	relation 1076528 ---|>
	  a private
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1077424 // <generalisation>
	  b parent class_ref 539568 // input_definition
      end

      extra_member 713776 "LIFETIME"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1885872 "storage_definition"
	const public explicit_return_type ""
	nparams 2
	  param in name "label" explicit_type "string"
	  param in name "desc" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}
: input_definition( ${p0}, ${p1} )
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Main Ctor

 \\param label : name of the storage manager subtype."
      end

      extra_member 714032 "access base class methods"
	
	stereotype "using"
	cpp "
using input_definition::add_definition;
using input_definition::empty;
using input_definition::has_definition;
using input_definition::label;
using input_definition::description;
using input_definition::publish_help;
using input_definition::size;
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1886128 "~storage_definition"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1886000 "storage_definition"
	const private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1886256 "storage_definition"
	stereotype "move"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 674480 // storage_definition
	cpp_decl "    ${comment}${inline}${name}${(}${t0} && ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1886384 "storage_definition"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 674480 // storage_definition
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1886512 "operator="
	private return_type class_ref 674480 // storage_definition
	nparams 1
	  param in name "source" type class_ref 674480 // storage_definition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} = delete;
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      extra_member 713904 "METHODS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end
    end

    class 673968 "storage_meta"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "Meta class between the input file and derived classes
of type 'storage_manager'

multiple = false

Implementation Notes: The simulator object must always
have a viable storage manager object.  In fact it must be
fully realised before the input file is read.  The options
in the input file therefore must override the existing
parameters. Some of these can not be changed from the
input file and should match existing values or be ignored.

Parameters:

 * checkname : set from input

 * inputname : set from command line or default, input
 file value must match existing value or issue warning

 * outputdir : set from input

 * outputname : set from input

 * runnum : set from command line or default, input file
 value matches existing value or issue warning

 * type : set from command line or default, input file
 value must match existing value or raise error

 ** type specific params : passed to storage manager as
 name:val map.  See manager for validity of parameters.
"
      classrelation 1076784 // <generalisation>
	relation 1075888 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1076784 // <generalisation>
	  b parent class_ref 1082671 // input_base_meta
      end

      classrelation 1084592 // fstype_ (<directional aggregation>)
	relation 1083696 o-->
	  stereotype "shared_ptr"
	  a role_name "fstype_" multiplicity "*" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1084592 // fstype_ (<directional aggregation>)
	  b parent class_ref 659888 // storage_manager
      end

      classrelation 1084720 // types_ (<directional composition>)
	relation 1083824 *-->
	  stereotype "ptr_vector"
	  a role_name "types_" multiplicity "*" private
	    comment " Set of valid storage manager type definitions."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1084720 // types_ (<directional composition>)
	  b parent class_ref 674480 // storage_definition
      end

      attribute 799280 "parameter_set_"
	private explicit_type "string"
	multiplicity "*"
	stereotype "map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}, ${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
      end

      attribute 805936 "type_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The type label of the current observable"
      end

      operation 1884208 "do_read_entry"
	private explicit_return_type "bool"
	nparams 1
	  param inout name "reader" type class_ref 313392 // input_base_reader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Read an entry in the input file

 throw an error if input file is incorrect (using UTILITY_INPUT macro)"
      end

      operation 1884336 "do_read_end"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Check for completeness of input at end of section. It does not
 reset the meta data as 'multiple' is false."
      end

      operation 1893808 "add_type"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ctor" type class_ref 674480 // storage_definition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}std::unique_ptr< ${t0} >& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}std::unique_ptr< ${t0} >& ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add ctor for input \"simulation\" section

 \\pre not has_type( ctor.type_name_ )
 \\post has_type( ctor.type_name_ )"
      end

      operation 1893680 "has_type"
	public explicit_return_type "bool"
	nparams 1
	  param in name "label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Is there a ctor to match input \"simulation\" section with
 \"type = [label]\""
      end

      operation 1893552 "size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this->types_.${name}(); }

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The number of storage type definitions"
      end

      operation 1893424 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this->types_.${name}(); }

"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Ary there no storage type definitions?"
      end

      operation 1884464 "storage_meta"
	public explicit_return_type ""
	nparams 1
	  param inout name "fstype" type class_ref 659888 // storage_manager
	cpp_decl "    ${comment}${inline}${name}${(}boost::shared_ptr< ${t0} > ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}boost::shared_ptr< ${t0} > ${p0}${)}${volatile}${throw} 
: input_base_meta( ${class}::storage_label(), false, false )
, fstype_( ${p0} )
, types_()
, parameter_set_()
, type_()
{}
"
	
	
	
	
      end

      operation 1884592 "~storage_meta"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1884848 "do_reset"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Reset the object"
      end

      operation 1886896 "publish_help"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "helper" type class_ref 1004335 // input_help
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 1893936 "checkpoint_name_label"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  const std::string label( \"checkname\" );
  return label;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Name of checkpoint name parameter in input file"
      end

      operation 1894064 "output_name_label"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  const std::string label( \"outname\" );
  return label;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Name of checkpoint name parameter in input file"
      end

      operation 1901104 "storage_label"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  const std::string result( \"run\" );
  return result;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " The name of the storage section in the input file."
      end
    end
  end

  classview 128560 "iterative Monte Carlo"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 128432 // IMC
    class 163120 "imc_meta"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 167216 // <generalisation>
	relation 166960 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 167216 // <generalisation>
	  b parent class_ref 1082671 // input_base_meta
      end

      classrelation 167472 // <dependency>
	relation 167216 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 167472 // <dependency>
	  b parent class_ref 1144367 // base_observable
      end

      classrelation 167600 // <dependency>
	relation 167344 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 167600 // <dependency>
	  b parent class_ref 1129135 // simulator
      end

      class 163248 "sampler_generator_fn"
	visibility package stereotype "typedef" base_type class_ref 251439 // function2
	nactuals 3
	actual class class_ref 251439 // function2
	  rank 0 explicit_value "void"
	actual class class_ref 251439 // function2
	  rank 1 explicit_value "std::map< std::string, std::string >&"
	actual class class_ref 251439 // function2
	  rank 2 explicit_value "platform::simulator&"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	classrelation 167728 // <realization>
	  relation 167472 -_-|>
	    a public
	      cpp default "${type}"
	      python "${type}"
	      classrelation_ref 167728 // <realization>
	    b parent class_ref 251439 // function2
	end
      end

      class 163376 "anonymous_missing_sampler_options"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum
 {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl "${comment}${visibility}final class ${name} {
${items}}
"
	python_decl "class ${name}:
${docstring}${members}
"
	idl_decl "${comment}enum ${name} {
${items}};
"
	explicit_switch_type ""
	
	comment " Indices used to check for missing options."
	attribute 190896 "SAMPLER_TYPE"
	  public type class_ref 163376 // anonymous_missing_sampler_options
	  init_value "0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Type of sampler option"
	end
      end

      classrelation 167856 // type_to_object_ (<directional composition>)
	relation 167600 *-->
	  stereotype "map"
	  a role_name "type_to_object_" multiplicity "*" class_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${association}, ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 167856 // type_to_object_ (<directional composition>)
	  b parent class_ref 1144239 // sampler_generator_fn
	  association_explicit_type "string"
      end

      attribute 191024 "counter_"
	class_attribute private explicit_type "size_t"
	init_value "0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 191152 "parameter_set_"
	private explicit_type "string"
	multiplicity "*"
	stereotype "map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}, ${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
      end

      attribute 191280 "missing_required_tags_"
	private explicit_type "1"
	multiplicity "*"
	stereotype "bitset"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Check for missing options."
      end

      attribute 191408 "type_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The type label of this observable"
      end

      operation 215472 "imc_meta"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw} 
: input_base_meta (core::strngs::imc_label(), false, false)
, parameter_set_()
, missing_required_tags_ ()
, type_ ()
{
  this->missing_required_tags_.set();
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 215600 "~imc_meta"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 215856 "do_read_entry"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "reader" type class_ref 313392 // input_base_reader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Read an entry in the input file. Return true if the entry was processed.

throw an error if input file is incorrect (using UTILITY_INPUT macro)"
      end

      operation 215984 "do_read_end"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "sim" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Perform checks at the end of reading a section before creating an IGCMC object
 and adding it to the simulation. This does not reset the meta data as 'multiple'
 is false."
      end

      operation 268592 "do_reset"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Reset the object"
      end
    end

    classdiagram 200369 "IGCMC Super looper"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    classdiagram 352432 "New IMC"
      draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 256689 "imc_simulation"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}(object):
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Simulation manager class for Iterative Monte Carlo simulations,
 for example to estimate the excess chemical potential."
      classrelation 1140144 // <generalisation>
	relation 1139248 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1140144 // <generalisation>
	  b parent class_ref 659760 // simulation_manager
      end

      classrelation 386225 // <dependency>
	relation 385969 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 386225 // <dependency>
	  b parent class_ref 1016239 // strngs
      end

      classrelation 1140912 // updater_ (<directional composition>)
	relation 1140016 *-->
	  stereotype "shared_ptr"
	  a role_name "updater_" multiplicity "0..1" private
	    comment " The updater functor used between each simulation iteration."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}< ${type} > ${name}${value};
"
	    python "${comment}${self}${name} = ${stereotype}()
"
	    classrelation_ref 1140912 // updater_ (<directional composition>)
	  b parent class_ref 707504 // imc_update
      end

      attribute 289713 "super_loop_size_"
	private explicit_type "size_t"
	init_value "100"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The number of super loop iterations to perform."
      end

      attribute 289841 "super_loop_count_"
	private explicit_type "size_t"
	init_value "0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The current loop count"
      end

      operation 2098992 "add_definition"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "meta" type class_ref 1143343 // simulator_meta
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 602673 "count"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->super_loop_count_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}return self.super_loop_count_
"
	
	comment "The current loop count"
      end

      operation 488881 "do_description"
	const cpp_virtual private explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Log message descibing the simulation and its parameters"
      end

      operation 458289 "imc_simulation"
	public explicit_return_type ""
	nparams 1
	  param in name "up" type class_ref 707504 // imc_update
	cpp_decl "    ${comment}${inline}${name}${(}boost::shared_ptr< ${t0} > ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}boost::shared_ptr< ${t0} > ${p0}${)}${throw}
: updater_( ${p0} )
, super_loop_size_( 100 )
, super_loop_count_( 0 )
{}
"
	
	
	
	
      end

      operation 2140080 "imc_simulation"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
: updater_()
, super_loop_size_(100)
, super_loop_count_(0)
{}
"
	
	
	
	
	comment " For serialization."
      end

      operation 458417 "~imc_simulation"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;"
	
	
	
	
      end

      operation 2113328 "license"
	const cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Implement in derived classes to write the name of 
the program and any citation information."
      end

      operation 2140464 "loop_size"
	const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->super_loop_size_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.super_loop_size_ = sz
"
	
	comment "Set the super-loop size"
      end

      operation 2098864 "make_simulation_manager"
	class_operation public return_type class_ref 659760 // simulation_manager
	nparams 1
	  param in name "params" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}const std::map< ${t0}, ${t0} >& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}const std::map< ${t0}, ${t0} >& ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 457265 "prepare"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sim" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Prepare updater for performing a run."
      end

      operation 458033 "run"
	public explicit_return_type "bool"
	nparams 2
	  param inout name "sim" type class_ref 632368 // simulation
	  param inout name "oslog" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment "Update the chemical potentials.

* Set do_repeat to true if loop count less than loop size.
* Update chemical potential by calling (defined in derived classes)
do_on_super_loop.
* Report chemical potentials."
      end

      extra_member 221361 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      classrelation 385841 // <dependency>
	relation 385585 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 385841 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 457905 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
  ${p0} & boost::serialization::base_object< simulation_manager >(*this);
  ${p0} & updater_;
  ${p0} & super_loop_size_;
  ${p0} & super_loop_count_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 458161 "set_loop_size"
	public explicit_return_type "void"
	nparams 1
	  param in name "sz" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  this->super_loop_size_ = sz;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}self.super_loop_size_ = sz
"
	
	comment "Set the super-loop size"
      end

      operation 2098608 "type_label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} override
{
  return ${class}::type_label_();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Label that identifies this simulation manager subtype in
 the input file (virtual access)."
      end

      operation 2099248 "type_label_"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}
{
  const std::string label( \"imc\" );
  return label;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Label that identifies this simulation manager subtype in
 the input file (virtual access)."
      end

      operation 2105776 "do_write_part_document"
	const cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Write extra data of derived simulator object into the input
 document object at the given section."
      end

      classrelation 1147440 // <dependency>
	relation 1146544 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1147440 // <dependency>
	  b parent class_ref 128057 // lamperski_igcmc
      end

      classrelation 1147568 // <dependency>
	relation 1146672 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 1147568 // <dependency>
	  b parent class_ref 256433 // malasics_igcmc
      end
    end

    class 707504 "imc_update"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      operation 2097968 "description"
	abstract const cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Log message descibing the itearation update and its parameters"
      end

      operation 2098096 "do_write_part_document"
	abstract const cpp_virtual public explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Add content of update into IMC section of an input file section.

only throw possible should be from os.write() operation"
      end

      operation 2097840 "prepare"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "sim" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Prepare the updater before running a series of simulation steps"
      end

      operation 2097456 "update"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param inout name "sys" type class_ref 632368 // simulation
	  param inout name "oslog" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Perform update after each IMC cycle."
      end

      extra_member 748336 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      classrelation 1147696 // <dependency>
	relation 1146800 -_->
	  a package
	    cpp default "#include in header"
	    python "${type}"
	    classrelation_ref 1147696 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 2112944 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {}
"
	
	
	
	
      end
    end

    class 707248 "chemical_potential_update"
      abstract visibility protected 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " Base class for IMC updaters that iteratively change the chemical potential."
      classrelation 1140784 // <generalisation>
	relation 1139888 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1140784 // <generalisation>
	  b parent class_ref 707504 // imc_update
      end

      classrelation 1140400 // chemical_potentials_ (<directional composition>)
	relation 1139504 *-->
	  a role_name "chemical_potentials_" multiplicity "1" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 1140400 // chemical_potentials_ (<directional composition>)
	  b parent class_ref 175665 // estimate_array
      end

      operation 2098480 "prepare"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sim" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Prepare the evaluator for use with the given simulator and
stepper.

- Add self to super loop observable list"
      end

      operation 2098352 "do_prepare"
	abstract cpp_virtual private explicit_return_type "void"
	nparams 1
	  param inout name "sim" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 2099120 "update"
	public explicit_return_type "void"
	nparams 2
	  param inout name "sys" type class_ref 632368 // simulation
	  param inout name "oslog" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}, ${p1}${v1}${)}:
${docstring}${body}
"
	
	comment "Update the chemical potentials.

* Set do_repeat to true if loop count less than loop size.
* Update chemical potential by calling (defined in derived classes)
do_on_super_loop.
* Report chemical potentials."
      end

      operation 2106032 "do_update"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param inout name "sys" type class_ref 632368 // simulation
	  param inout name "oslog" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Perform update after each IMC cycle."
      end

      operation 2097584 "write_output"
	const public explicit_return_type "void"
	nparams 1
	  param in name "sim" type class_ref 632368 // simulation
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Write output on chemical potential estimates to data sink. This is 
 called in update and should not be called manually except for testing."
      end

      extra_member 748208 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 2112816 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
  ${p0} & boost::serialization::base_object< imc_update >(*this);
}
"
	
	
	
	
      end

      operation 542897 "charge_correction_factor"
	stereotype "TODO"
	const public explicit_return_type "double"
	nparams 1
	  param in name "sim" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Factor for calculating the chemical potential correction 
from non-zero charge of system. Final correction for
chemical potential of specie ispec is

-(ispec.valency * average_charge * result)

"
      end
    end

    class 256433 "malasics_igcmc"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1140656 // <generalisation>
	relation 1139760 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1140656 // <generalisation>
	  b parent class_ref 707248 // chemical_potential_update
      end

      classrelation 473392 // <dependency>
	relation 472496 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 473392 // <dependency>
	  b parent class_ref 1144367 // base_observable
      end

      classrelation 386097 // <dependency>
	relation 385841 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 386097 // <dependency>
	  b parent class_ref 865967 // constants
      end

      classrelation 386353 // <dependency>
	relation 386097 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 386353 // <dependency>
	  b parent class_ref 1016239 // strngs
      end

      operation 488241 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Log message descibing the observable and its parameters"
      end

      operation 458801 "do_update"
	cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "sys" type class_ref 632368 // simulation
	  param inout name "oslog" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Update the chemical potentials (in derived classes)"
      end

      operation 529841 "~malasics_igcmc"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;
"
	
	
	
	
      end

      operation 457521 "do_prepare"
	cpp_virtual private explicit_return_type "void"
	nparams 1
	  param inout name "sim" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self, ${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Prepare the evaluator for use with the given simulator and
stepper."
      end

      operation 457649 "type_label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return ${name}_();
}
"
	
	
	
	
      end

      operation 458673 "type_label_"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return ${type}(\"malasics\");
}
"
	
	
	python_def "${@}${static}${abstract}def type_label${(}${)}:
${docstring}return \"malasics\"
"
	
      end

      extra_member 221489 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      classrelation 385969 // <dependency>
	relation 385713 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 385969 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 458545 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
  ${p0} & boost::serialization::base_object< chemical_potential_update >(*this);
}
"
	
	
	
	
      end

      operation 217776 "do_write_part_document"
	const cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Write an input file section.

only throw possible should be from os.write() operation"
      end

      operation 2112688 "add_to_definition"
	class_operation public explicit_return_type "string"
	nparams 1
	  param inout name "defn" type class_ref 674224 // simulation_definition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add updater specific options to the definition object and
 return the \"updater\" type label for this class."
      end

      operation 2112560 "make_updater"
	class_operation public return_type class_ref 707504 // imc_update
	nparams 1
	  param in name "params" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}const std::map< ${t0}, ${t0} >& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}const std::map< ${t0}, ${t0} >& ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end
    end

    class 128057 "lamperski_igcmc"
      visibility protected 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1140528 // <generalisation>
	relation 1139632 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1140528 // <generalisation>
	  b parent class_ref 707248 // chemical_potential_update
      end

      classrelation 473520 // <dependency>
	relation 472624 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 473520 // <dependency>
	  b parent class_ref 1144367 // base_observable
      end

      classrelation 128569 // <dependency>
	relation 128569 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 128569 // <dependency>
	  b parent class_ref 1016239 // strngs
      end

      classrelation 128441 // <dependency>
	relation 128441 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 128441 // <dependency>
	  b parent class_ref 865967 // constants
      end

      attribute 128185 "delta"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Lamperski method  delta value"
      end

      operation 128057 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Log message descibing the observable and its parameters"
      end

      operation 128185 "do_update"
	cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "sys" type class_ref 632368 // simulation
	  param inout name "oslog" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Update the chemical potentials (in derived classes)"
      end

      operation 724401 "do_prepare"
	cpp_virtual private explicit_return_type "void"
	nparams 1
	  param inout name "sim" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{}
"
	
	
	
	
	comment "Prepare the evaluator for use with the given simulator and
stepper."
      end

      operation 128697 "type_label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return ${name}_();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 128825 "type_label_"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return ${type}(\"lamperski\");
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 128057 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      classrelation 128313 // <dependency>
	relation 128313 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 128313 // <dependency>
	  b parent class_ref 912431 // access
      end

      operation 128953 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
  ${p0} & boost::serialization::base_object< chemical_potential_update >(*this);
  ${p0} & delta;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 129081 "lamperski_igcmc"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
: chemical_potential_update()
, delta (0.1)
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 216496 "~lamperski_igcmc"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} = default;"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end

      operation 218160 "do_write_part_document"
	const cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Add type and delta information to an input file section.

only throw possible should be from os.write() operation"
      end

      operation 2113072 "add_to_definition"
	class_operation public explicit_return_type "string"
	nparams 1
	  param inout name "defn" type class_ref 674224 // simulation_definition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment " Add updater specific options to the definition object and
 return the \"updater\" type label for this class."
      end

      operation 2113200 "make_updater"
	class_operation public return_type class_ref 707504 // imc_update
	nparams 1
	  param in name "params" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}boost::shared_ptr< ${type} > ${name}${(}const std::map< ${t0}, ${t0} >& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}boost::shared_ptr< ${type} > ${class}::${name}${(}const std::map< ${t0}, ${t0} >& ${p0}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
      end
    end

    class 128185 "accept_igcmc"
      visibility protected 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 128697 // <generalisation>
	relation 128697 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 128697 // <generalisation>
	  b parent class_ref 256689 // imc_simulation
      end

      classrelation 128953 // <dependency>
	relation 128953 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 128953 // <dependency>
	  b parent class_ref 912431 // access
      end

      classrelation 129081 // <dependency>
	relation 129081 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 129081 // <dependency>
	  b parent class_ref 865967 // constants
      end

      classrelation 129209 // <dependency>
	relation 129209 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 129209 // <dependency>
	  b parent class_ref 1016239 // strngs
      end

      attribute 135609 "variant_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "this represents the number of the methods"
      end

      operation 129209 "description"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Log message descibing the observable and its parameters"
      end

      operation 129337 "do_on_super_loop"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "sys" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${p0}${v0}${)}:
${docstring}${body}
"
	
	comment "Update the chemical potentials (in derived classes)"
      end

      operation 214704 "do_prepare"
	cpp_virtual private explicit_return_type "void"
	nparams 1
	  param inout name "sim" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Prepare for a main simulation loop"
      end

      operation 218288 "do_write_document"
	const cpp_virtual private explicit_return_type "void"
	nparams 2
	  param inout name "wr" type class_ref 163632 // input_document
	  param in name "ix" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw} override;
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Write an input file section.

only throw possible should be from os.write() operation"
      end

      operation 129465 "make_super_looper"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "params" explicit_type "string"
	  param in name "sim" type class_ref 1129135 // simulator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}std::map< ${t0}, ${t0} > const& ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}std::map< ${t0}, ${t0} > const& ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Create a new widom sampler using the given parameter set."
      end

      operation 129849 "type_label"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return ${name}_();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 129977 "type_label_"
	class_operation public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return ${type}(\"accept\");
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      extra_member 128185 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 130105 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
  ${p0} & boost::serialization::base_object< igcmc >(*this);
  ${p0} & variant_;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      classrelation 473648 // <dependency>
	relation 472752 -_->
	  a default
	    cpp default "#include in source"
	    python "${type}"
	    classrelation_ref 473648 // <dependency>
	  b parent class_ref 1144367 // base_observable
      end
    end
  end

  deploymentview 128432 "IMC"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 134841 "accept_igcmc"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manuals
//#include <boost/bind.hpp>
#include \"cscpbc/alternater_choice.hpp\"
#include \"cscpbc/alternater_sampler.hpp\"
#include \"cscpbc/periodic_system.hpp\"
#include \"observable/acceptance_observable.hpp\"
#include \"particle/ensemble.hpp\"
// -
${namespace_start}
${members}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_GUID(periodic_cube::accept_igcmc, \"periodic_cube::accept_igcmc\");"
      associated_classes
	class_ref 128185 // accept_igcmc
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------"
    end

    artifact 662960 "chemical_potential_update"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"core/output_file.hpp\"
#include \"core/strngs.hpp\"
#include \"particle/particle_manager.hpp\"
#include \"platform/imc_simulation.hpp\"
// -
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 707248 // chemical_potential_update
      end
    end

    artifact 246961 "imc_simulation"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_KEY( platform::imc_simulation );
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manuals
#include \"core/input_base_reader.hpp\"
#include \"core/input_error_messages.hpp\"
#include \"core/strngs.hpp\"
//-
${namespace_start}
${members}
${namespace_end}

BOOST_CLASS_EXPORT_IMPLEMENT( platform::imc_simulation );"
      python_src "${comment}
${definition}"
      associated_classes
	class_ref 256689 // imc_simulation
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 662832 "imc_update"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_KEY( platform::imc_update );
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}

BOOST_CLASS_EXPORT_IMPLEMENT( platform::imc_update );"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 707504 // imc_update
      end
    end

    artifact 128057 "lamperski_igcmc"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_KEY( platform::lamperski_igcmc );
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
//manual includes
#include \"core/input_base_reader.hpp\"
#include \"core/input_error_messages.hpp\"
#include \"core/strngs.hpp\"
#include \"geometry/geometry_manager.hpp\"
#include \"particle/particle_manager.hpp\"
#include \"utility/estimater.hpp\"
#include \"utility/fuzzy_equals.hpp\"
//-
${namespace_start}
${members}
${namespace_end}

BOOST_CLASS_EXPORT_IMPLEMENT( platform::lamperski_igcmc );
"
      associated_classes
	class_ref 128057 // lamperski_igcmc
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 247089 "malasics_igcmc"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_KEY( platform::malasics_igcmc );
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manuals
#include \"geometry/geometry_manager.hpp\"
#include \"particle/particle_manager.hpp\"
#include \"utility/fuzzy_equals.hpp\"
#include \"utility/estimater.hpp\"
// -
${namespace_start}
${members}
${namespace_end}

BOOST_CLASS_EXPORT_IMPLEMENT( platform::malasics_igcmc );
"
      python_src "${comment}
import igcmc
${definition}"
      associated_classes
	class_ref 256433 // malasics_igcmc
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 155568 "imc_meta"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"core/input_help.hpp\"
#include \"core/strngs.hpp\"
#include \"utility/utility.hpp\"
//=
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 163120 // imc_meta
      end
    end
  end

  deploymentview 334895 "application class deployment"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 195760 "cube_application"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
${namespace_start}
${members}
${namespace_end}

int main( int argc, char ** argv )
{
  int result = 0;
  {
    platform::cube_application appl;
    result = appl.main( argc, argv );
  }
  return result;
}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 204080 // cube_application
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 302000 "mpi_application"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"core/input_document.hpp\"
#include \"core/input_preprocess.hpp\"
#include \"core/strngs.hpp\"

#include <boost/filesystem.hpp>
#include <boost/program_options.hpp>
#include <fstream>
// -
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 327344 // mpi_application
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
${butter_generic}
HDR=$(MPI_INC)"
    end

    artifact 776367 "simulator"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_KEY(platform::simulator);
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"core/strngs.hpp\"
#include \"platform/application.hpp\"
#include \"trial/change_set.hpp\"
#include <boost/random/random_device.hpp>
#include <boost/filesystem.hpp>
#include <fstream>

// For random seed value
#ifndef HAVE_NO_RANDOM_DEVICE
#include <boost/random/random_device.hpp>
#endif

${namespace_start}
${members}
${namespace_end}

BOOST_CLASS_EXPORT_IMPLEMENT(platform::simulator);

"
      associated_classes
	class_ref 1129135 // simulator
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 796335 "range_t"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      associated_classes
	class_ref 1136815 // range_t
	class_ref 243377 // const_range_t
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 769327 "libionch_platform"
      stereotype "library"
      associated_artifacts
	artifact_ref 195760 // cube_application
	artifact_ref 776367 // simulator
	artifact_ref 783023 // simulator_meta
      end
      comment "Library of the fundamental components of the program

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 345264 "libionch_platform_mpi"
      stereotype "library"
      associated_artifacts
	artifact_ref 302000 // mpi_application
      end
      comment "Library of the MPI+fundamental components of the program

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 301105 "platform_python"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
#include \"particle/specie.hpp\"
#include \"particle/coordinate.hpp\"
#include \"particle/ensemble.hpp\"
#include \"platform/simulator.hpp\"
#include <boost/python.hpp>

using namespace boost::python;
using namespace platform;

particle::specie& (simulator::*get_specie_const)(size_t) = &simulator::get_specie;

BOOST_PYTHON_MODULE(platform)
{
${definition}
}
#endif
"
      cpp_src "${comment}
${includes}"
      associated_classes
      end
      comment "Python wrappings for platform namespace

----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 597168 "serial_storage"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_KEY( platform::serial_storage );
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manuals
#include \"core/strngs.hpp\"
#include \"core/input_reader.hpp\"
// -
#include <boost/format.hpp>
#include <boost/filesystem.hpp>
#include <boost/iostreams/filtering_stream.hpp>
#include <boost/iostreams/traits.hpp>
#include <fstream>
// -
${namespace_start}
${members}
${namespace_end}

BOOST_CLASS_EXPORT_IMPLEMENT( platform::serial_storage );
"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 667440 // serial_storage
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 590128 "simulation"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"core/strngs.hpp\"
#include \"evaluator/hard_sphere_overlap.hpp\"
#include \"geometry/periodic_cube_region.hpp\"
#include \"observable/base_observable.hpp\" // for serialization
#include \"particle/change_set.hpp\"
#include \"particle/ensemble.hpp\"
#include \"platform/imc_simulation.hpp\"
#include \"platform/serial_storage.hpp\"
#include \"platform/simulator_meta.hpp\"
#include \"platform/standard_simulation.hpp\"
#include \"trial/base_chooser.hpp\"         // for serialization
#include \"trial/choice.hpp\"               // for serialization
#include \"utility/fuzzy_equals.hpp\"
#include \"utility/machine.hpp\"
// -
#include <boost/program_options.hpp>
#include <boost/random/random_device.hpp>
#include <fstream>
// -
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 632368 // simulation
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 610224 "simulation_manager"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"core/strngs.hpp\"
// -
// -
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 659760 // simulation_manager
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 783023 "simulator_meta"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// Manual incls
#include \"core/input_error_messages.hpp\"
#include \"core/strngs.hpp\"
#include \"evaluator/evaluator_manager.hpp\"
#include \"utility/utility.hpp\"
//-
#include <boost/iostreams/filtering_stream.hpp>
//-
${namespace_start}
${members}
${namespace_end}
"
      associated_classes
	class_ref 674224 // simulation_definition
	class_ref 1143343 // simulator_meta
      end
    end

    artifact 623408 "standard_simulation"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}

#include <boost/serialization/export.hpp>
BOOST_CLASS_EXPORT_KEY( platform::standard_simulation );
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"core/strngs.hpp\"
#include \"utility/utility.hpp\"
// -
// -
${namespace_start}
${members}
${namespace_end}

BOOST_CLASS_EXPORT_IMPLEMENT( platform::standard_simulation );"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 681008 // standard_simulation
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 596912 "storage_manager"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"core/strngs.hpp\"
#include \"platform/serial_storage.hpp\"
#include \"platform/storage_meta.hpp\"
#include \"utility/archive_file.hpp\"
#include \"utility/base_sink.hpp\"
#include \"utility/gdbm_sink.hpp\"
#include \"utility/memory_sink.hpp\"
// -
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 659888 // storage_manager
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 616880 "storage_meta"
      stereotype "source"
      cpp_h "#ifndef @{PROJECT}${NAMESPACE}_${NAME}_HPP
#define @{PROJECT}${NAMESPACE}_${NAME}_HPP

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}

#ifndef DEBUG
#define DEBUG 0
#endif

${includes}
// manual includes
#include \"core/input_error_messages.hpp\"
#include \"core/strngs.hpp\"
#include \"utility/utility.hpp\"
// -
#include <boost/iostreams/filtering_stream.hpp>
// - 
${namespace_start}
${members}
${namespace_end}"
      python_src "${comment}
${import}
${definition}"
      associated_classes
	class_ref 674480 // storage_definition
	class_ref 673968 // storage_meta
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 597040 "libionch_newplatform"
      stereotype "library"
      associated_artifacts
	artifact_ref 128057 // lamperski_igcmc
	artifact_ref 215983 // program_options
	artifact_ref 246961 // imc_simulation
	artifact_ref 247089 // malasics_igcmc
	artifact_ref 590128 // simulation
	artifact_ref 596912 // storage_manager
	artifact_ref 597168 // serial_storage
	artifact_ref 610224 // simulation_manager
	artifact_ref 616880 // storage_meta
	artifact_ref 623408 // standard_simulation
	artifact_ref 662832 // imc_update
	artifact_ref 662960 // chemical_potential_update
	artifact_ref 783023 // simulator_meta
      end
      comment "----------------------------------------------------------------------
This source file is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------
"
    end

    artifact 636464 "csccube"
      stereotype "executable"
      associated_artifacts
	artifact_ref 185007 // serialization
	artifact_ref 195760 // cube_application
	artifact_ref 207919 // libionch_utility
	artifact_ref 215855 // filesystem
	artifact_ref 215983 // program_options
	artifact_ref 216111 // regex
	artifact_ref 216239 // date_time
	artifact_ref 281519 // system
	artifact_ref 332080 // libionch_zip_sink
	artifact_ref 332208 // libionch_gdbm_sink
	artifact_ref 334257 // uuid
	artifact_ref 371376 // gdbm
	artifact_ref 449840 // libionch_geometry
	artifact_ref 597040 // libionch_newplatform
	artifact_ref 603696 // zip
	artifact_ref 609327 // libionch_core
	artifact_ref 617391 // libionch_particle
	artifact_ref 651439 // random
	artifact_ref 694959 // libionch_trial
	artifact_ref 716335 // libionch_evaluator
	artifact_ref 769583 // libionch_observable
      end
    end
  end

  classview 504239 "thread tasks manager"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 1020079 "base_task"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ State class holding common data and tasks of the master and slave
/ tasks.
/
/ The content of this object is a base unit of granularity for the
/ distribution of parallel computation."
      classrelation 1112751 // _global_data (<directional composition>)
	relation 1075631 *-->
	  stereotype "unique_ptr"
	  a role_name "_global_data" private
	    comment "/ Static data of the simulation."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 1112751 // _global_data (<directional composition>)
	  b parent class_ref 1004079 // channel
      end

      classrelation 1112879 // _formation (<directional composition>)
	relation 1075759 *-->
	  stereotype "unique_ptr"
	  a role_name "_formation" private
	    comment "/ The set of particles that are managed by this task."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 1112879 // _formation (<directional composition>)
	  b parent class_ref 1004207 // formation
      end

      classrelation 1113007 // _patch (<directional composition>)
	relation 1075887 *-->
	  stereotype "unique_ptr"
	  a role_name "_patch" private
	    comment "/ The set of surface tiles that are managed by
/ this task."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 1113007 // _patch (<directional composition>)
	  b parent class_ref 1006511 // patch
      end

      attribute 1317295 "_stats"
	private explicit_type " ionch::accumulator "
	stereotype "boost::ptr_vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "/ The set of statistics accumulators that are 
/ managed by this task."
      end

      operation 1936047 "base_task"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : _global_data(), _formation(), _patches(), _stats(),
	       _left_sibling (), _right_sibling () {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1936175 "~base_task"
	abstract cpp_virtual private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1936303 "initiate"
	abstract cpp_virtual private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1936431 "run"
	abstract cpp_virtual private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1936559 "on_move_begin"
	private explicit_return_type "void"
	nparams 1
	  param in name "move" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Ideas"
      end

      operation 1936687 "on_move_end"
	private explicit_return_type "void"
	nparams 1
	  param in name "move" explicit_type "ionch::trial_commit"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1936815 "on_report"
	private explicit_return_type "void"
	nparams 1
	  param in name "report" explicit_type "ionch::reporter"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1020207 "slave_task"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ State class holding data and tasks of the slave tasks "
      classrelation 1113135 // <generalisation>
	relation 1076015 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1113135 // <generalisation>
	  b parent class_ref 1020079 // base_task
      end

      attribute 1317423 "parent"
	private explicit_type " ionch::comm_channel "
	stereotype "std::unique_ptr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "/ The communication channels of a slave task to the
/ global manager and to its siblings"
      end

      operation 1936943 "slave_task"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : base_task(), parent() {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1937071 "~slave_task"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1937199 "initiate"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1937327 "run"
	private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1020335 "master_task"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ State class holding data and tasks of the master task "
      classrelation 1113263 // <generalisation>
	relation 1076143 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1113263 // <generalisation>
	  b parent class_ref 1020079 // base_task
      end

      attribute 1317551 "children"
	private explicit_type " ionch::comm_channel "
	stereotype "boost::ptr_vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "/ The communication channels of a slave task to the
/ global manager and to its siblings"
      end

      operation 1937455 "master_task"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : base_task(), children() {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1937583 "~master_task"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1937711 "initiate"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1937839 "run"
	private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end
  end

  classview 538671 "choice set builders"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    comment "Sets of classes that build choice sets"
    class 445871 "simulator_old"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "  Stepper during the main simulation phase"
      operation 1169839 "initialize_choice_set"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  This method builds the choice tree from the various components and
  their rates"
      end

      operation 828975 "build_selector"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Build the selection tree"
      end

      operation 1170479 "generate_choices"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  This method builds the choice tree from the various components and
  their rates"
      end
    end

    class 445743 "chempot_estimator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "  Stepper for estimating the chemical potentials during thermalisation phase"
      extra_member 314287 "CLASS STATE CONSTANTS"
	
	cpp "" ""
	java ""
	php ""
	python ""
	idl ""
      end

      attribute 542767 "acept1"
	class_attribute const_attribute public explicit_type "int"
	init_value "= 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 542895 "acept2"
	class_attribute const_attribute public explicit_type "int"
	init_value "= 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 542511 "malas1"
	class_attribute const_attribute public explicit_type "int"
	init_value "= 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " ----------------------------------------------------------------------

 PUBLIC ROUTINES AND DATA

 ----------------------------------------------------------------------
 Enumeration of Chem. Pot. Update types (see subroutine 'iterat' for
 more details)"
      end

      attribute 542639 "malas2"
	class_attribute const_attribute public explicit_type "int"
	init_value "= 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 682287 "cpmeth_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Chemical potential estimation method.

\\inv cpmeth in (0, acept1, acept2, malas1, malas2)"
      end

      attribute 572463 "wasdel_"
	private explicit_type "constants::nspcmx"
	multiplicity "*"
	stereotype "bitset"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${stereotype}()
"
	idl_decl ""
	comment " Record of whether the last individual GC move was a deletion (F) or addition (T)
 =false"
      end

      attribute 574383 "ncret_"
	private explicit_type "uint64_t"
	multiplicity "[constants::nspcmx]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Create/Destroy counters for chemical potential estimation"
      end

      attribute 574511 "ndest_"
	private explicit_type "uint64_t"
	multiplicity "[constants::nspcmx]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 747183 "get_add_remove_discrepancy"
	const public explicit_return_type "double"
	nparams 1
	  param in name "ispec" explicit_type "int"
	cpp_decl "  ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  return (constants::feq(aceng_[ispec].mean() + adeng_[ispec].mean(), 0.0)
               ? 0.0
               : (adeng_[ispec].mean() - aceng_[ispec].mean())
                   /(aceng_[ispec].mean() + adeng_[ispec].mean()));
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get ratio dest-cret/(cret+dest)

 Get create/destroy ratio for free species"
      end

      operation 747311 "get_add_remove_ratio"
	public explicit_return_type "double"
	nparams 1
	  param in name "ispec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment " Get log of ratio try_cret/try_dest

 Get the ratio of create/destroy attempts for free
 species.

 One of the equilibration methods limits the create/destroy
 attempts by repeating only create or only destroy attempts
 when a GCMC move is selected until the attempt succeeds, at
 which time the reverse operation is repeated.  This ensures
 that the number of particles of each specie will remain close
 to the starting value.  If the chemical potential is exactly
 correct then the number of attempts to create a particle should
 be equal to the attempts to destroy one.  Thus the value
 returned here can be used to self-consistently adjust the
 chemical potentials."
      end

      operation 1170351 "generate_choices"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  This method builds the choice tree from the various components and
  their rates"
      end

      operation 707119 "iterate_chemical_potential"
	stereotype "compute"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "  Iterative method for computing chemical potentials to use in Grand
  Canonical part of simulation.

  In the pre-equilibration stage, the programmer can select this
  method to iteratively adjust the chemical potentials.

  (acept1) Iterative method for computing chemical potentials to
  use in Grand Canonical part of simulation, during the pre-equilibration
  phase of channel simulation when particle addition/deletion are
  controlled

  (malas1 is method I from) Attila Malasics, Dirk Gillespie and
  Dezso¨ Boda \"\"Simulating prescribed particle densities in the
  grand canonical ensemble using iterative algorithms\"\", The Journal
  of Chemical Physics, 2008, 128, 124102

  (malas2 is method II from) Attila Malasics, Dirk Gillespie and
  Dezso¨ Boda \"\"Simulating prescribed particle densities in the
  grand canonical ensemble using iterative algorithms\"\", The Journal
  of Chemical Physics, 2008, 128, 124102

  fortran accum::iterat
"
      end
    end
  end

  package_ref 395695 // platform test

  package_ref 423983 // channel test suite
end
