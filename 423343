format 75
"partial translation from fortran" // partial translation from fortran
  revision 15
  modified_by 48 "finnerty"
  owner 48 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "parallel/"
  cpp_src_dir "parallel/"
  classview 502447 "CC"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 1003951 "accum"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "// -------------------------------------------------------------
// Statistics Module
//
// -------------------------------------------------------------
// Methods:
// accmlt
//    accumulate statistical data that requires no calculation.
// hist
//    process MC system data into histogram bins.
// rdaccu
//    read 'accum' input file section
// rfaccu
//    finalise initialisation after reading the input file
// saves
//    output a digest of the statistics
// zeroac
//    reset the statistic counters
// -------------------------------------------------------------
// Constants
// nzgmx,nrgmx : histrogram bins in z and r directions"
      classrelation 1101871 // parent_ (<unidirectional association>)
	relation 1064751 --->
	  a role_name "parent_" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    python "${comment}${self}${name} = ${value}
"
	    classrelation_ref 1101871 // parent_ (<unidirectional association>)
	  b parent class_ref 1004079 // channel
      end

      attribute 1281583 "nrgmx"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  2048"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "maximum number of histogram bins in r direction"
      end

      attribute 1281711 "noccmx"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  7"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " maximum number of particles in filter region we count for
 generating the co-occupancy matrix 'aocc'"
      end

      attribute 1281839 "acept1"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1281967 "acept2"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1282095 "malas1"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " ----------------------------------------------------------------------

 PUBLIC ROUTINES AND DATA

 ----------------------------------------------------------------------
 Enumeration of Chem. Pot. Update types (see subroutine 'iterat' for
 more details)"
      end

      attribute 1282223 "malas2"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1282351 "anaca_"
	private explicit_type "double, 2"
	stereotype "boost::multi_array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Particle variation statistic"
      end

      attribute 1282479 "amobdl_"
	private explicit_type "ionch::observable < double > "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Statistics relating to mobile ions"
      end

      attribute 1282607 "amobdx_"
	private explicit_type "ionch::observable < double > "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1282735 "amobdy_"
	private explicit_type "ionch::observable < double > "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1282863 "amobdz_"
	private explicit_type "ionch::observable < double > "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1282991 "ah_"
	private explicit_type "double"
	stereotype "ionch::observable_histogram"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Sum of h vector from patch module"
      end

      attribute 1283119 "aocc_"
	private explicit_type "byte"
	multiplicity "[3][noccmx+1][noccmx+1][noccmx+1][noccmx+1]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " co-occupancy matrix - record what sets of particles
 are in the filter region at the same time"
      end

      attribute 1283247 "anin_"
	private explicit_type "ionch::observable < double >, 2"
	stereotype "boost::multi_array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Sum of particles in each region. Note that all paticles of a
 specie will be in the ibulk region.

 NOTE: merged fortran an into this as anin[...][ibulk]

 NOTE: Only free species are stored so specie index is 
       ispec - idxcl.
 [constants::nspcmx][constants::nrgnmx];"
      end

      attribute 1283375 "abulk_"
	private explicit_type "ionch::count_observable < double > "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Per-specie particle number in bulk \"sampling\" region
 [constants::nspcmx];"
      end

      attribute 1283503 "acharge_"
	private explicit_type "double"
	stereotype "ionch::observable"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Current charge of system"
      end

      attribute 1283631 "save_counter_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Count of calls to 'accmlt' routine; used to determine
 average of statistics collected in 'accmlt' routine

 acharge.size is equivalent to fortran version's ataccu

 fortran version's athist is not needed here"
      end

      attribute 1283759 "drg_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "2D 'GIN' DISTRIBUTION PARAMETERS:
Width of bins (both axial and radial) in 2D 'gin' distribution
'gin'."
      end

      attribute 1283887 "zinlft_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The axial outer-most point of the 2D 'gin' distribution"
      end

      attribute 1284015 "rinup_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The radial outer-most point of the 2D 'gin' distribution"
      end

      attribute 1284143 "vjin_factor_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Volume for the 2D 'gin' histogram bins"
      end

      attribute 1284271 "nrgr_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of radial bins in 2D 'gin' distribution"
      end

      attribute 1284399 "nrgz_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of axial bins in 2D 'gin' distribution"
      end

      attribute 1284527 "gin_"
	private explicit_type "ionch::count_matrix< double, 2 > "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The 2D 'gin' distribution"
      end

      attribute 1284655 "chgdist_"
	private explicit_type "double, 2, int64_t"
	stereotype "ionch::count_matrix"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Charge distribution that was formerly gin_(nspec,..). As we allow half charges
 we multiply all charges by 2 so we get integer charge changes.
 
 Note use of signed int as counter so we can include negative charge counts."
      end

      attribute 1284783 "rdf_zlim_"
	private explicit_type "ionch::count_histogram< double >, 2"
	stereotype "boost::multi_array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "INTER-PARTICLE DISTRIBUTION PARAMETERS:
The inter-particle radial distributions for particles in the channel.

NOTE: Changed rdf to record two distributions. One for particles
in region izlim and one for particles in region ichan that are
not also in region izlim.

NOTE: ardf made redundant by using count_histogram"
      end

      attribute 1284911 "rdf_chan_"
	private explicit_type "ionch::count_histogram< double >, 2"
	stereotype "boost::multi_array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1285039 "drdf_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Width of histogram bins in the inter-particle radial distribution"
      end

      attribute 1285167 "nrdf_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of active bins in the inter-particle radial distribution"
      end

      attribute 1285295 "gz_"
	private explicit_type "ionch::count_histogram< double > "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The z-axial 'gz' distribution data"
      end

      attribute 1285423 "nrg_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of in-use bins in the 'gz' distribution"
      end

      attribute 1285551 "ksub_"
	private explicit_type "ulong"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " -----------------------------------------------------------------
 General parameters
 The number of times we have saved a digest (ie called 'saves')"
      end

      attribute 1285679 "isave_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [INPUT] How often the statistic data is saved."
      end

      attribute 1285807 "calgin"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [INPUT] calgin: compute 2D (z,r) profiles"
      end

      attribute 1285935 "calrdf"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [INPUT] calrdf: compute inter-particle radial distribution"
      end

      attribute 1286063 "calacc"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [INPUT] calacc: show move acceptance ratios"
      end

      attribute 1286191 "calmob"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [INPUT] calmob: calculate information about 'mobile' ions"
      end

      attribute 1286319 "zocc_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " [INPUT] occupancy calculation limit"
      end

      classrelation 1101999 // run_ (<unidirectional association>)
	relation 1064879 --->
	  a role_name "run_" private
	    comment "The simulation run context"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    python "${comment}${self}${name} = ${value}
"
	    classrelation_ref 1101999 // run_ (<unidirectional association>)
	  b parent class_ref 1004079 // channel
      end

      operation 1826607 "accum"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param inout name "a_parent" type class_ref 1004079 // channel
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}${)} 
: parent_(a_parent)
, anaca_ ()
, amobdl_ ()
, amobdx_ ()
, amobdy_ ()
, amobdz_ ()
, ah_()
, aocc_ ()
, anin_ ()
, abulk_ ()
, acharge_ ()
, save_counter_ ()
, drg_ ()
, zinlft_ ()
, rinup_ ()
, vjin_factor_ ()
, nrgr_ ()
, nrgz_ ()
, gin_ ()
, chgdist_ ()
, rdf_zlim_ ()
, rdf_chan_ ()
, drdf_ ()
, nrdf_ ()
, gz_ ()
, nrg_ ()
, ksub_ ()
, isave_ ()
, calgin (false)
, calrdf (false)
, calacc (false)
, calmob (false)
, zocc_ ()
, run_ (a_parent)
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1826735 "~accum"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1826863 "accumulate"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Accumulate simple collective statistics

This routine collects filter occupancy data from 'nin' arrays.
It also saves the 'h' vector and charge.

fortran equiv accum::accmlt"
      end

      operation 1826991 "acceql"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Accumulate statistics for chemical potential adjustment

This alternative to accmlt is intended for use in the
equilibration stage where the chemical potentials are being
adjusted."
      end

      operation 1827119 "accblk"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "accumulate base statistics during bulk simulation

This is a reduced version of accmlt.  It only records the
charge and total particle numbers."
      end

      operation 1827247 "hist"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Accumulate simple statistics

This subroutine gathers statistics during a simulation run.  It is
intended that this method be as fast as possible as it is the most
often called statistics gathering method.  The method runs through
the particle list once.

Collection of the z-axial distribution (gz) always occurs.  It uses
gz_bin to get the axial bin number.

The 'calmob' set of statistics are related to motion of the mobile
structural ions.  These ions are new in version 17 and this method
is to quantify how well the code is behaving with respect to
movement around the centre-point.

The 'calgin' set of statistics is a 2D distribution around the
z-axis and r-radial.  Unlike the gz distribution, the data is only
collected here in a subregion of the simulation space.  It
determines the histogram bins by dividing the z and r dimensions by
drg.

The 'calrdf' set of statistics is the inter-particle radial
distribution around particles in region 1 or 2.  The bin number is
determined from the radial distance divided by 'drdf'.  (Note: The
maximum number of bins is < 15/drdf.)"
      end

      operation 1827375 "input_help"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param inout name "a_os" explicit_type "ostream"
	  param in name "msg" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1827503 "iterat"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "isbulk" explicit_type "bool"
	  param in name "cpmeth" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------------
// Iterative method for computing chemical potentials to use in Grand
// Canonical part of simulation.
//
// In the pre-equilibration stage, the programmer can select this method to
// iteratively adjust the chemical potentials.
//
// (acept1) Iterative method for computing chemical potentials
// to use in Grand Canonical part of simulation, during the pre-equilibration
// phase of channel simulation when particle addition/deletion are controlled
//
// (malas1 is method I from)
// Attila Malasics, Dirk Gillespie and Dezso¨ Boda \"\"Simulating
// prescribed particle densities in the grand canonical
// ensemble using iterative algorithms\"\", The Journal of Chemical
// Physics, 2008, 128, 124102
//
// (malas2 is method II from)
// Attila Malasics, Dirk Gillespie and Dezso¨ Boda \"\"Simulating
// prescribed particle densities in the grand canonical
// ensemble using iterative algorithms\"\", The Journal of Chemical
// Physics, 2008, 128, 124102

${inline}${type} ${class}::${name}${(}const ${t0} ${p0}, const ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1827631 "read_input_section"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 3
	  param inout name "fid" explicit_type "istream"
	  param in name "sname" explicit_type "string"
	  param in name "svalue" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Read statistical data control information section

This routine is called to read-in the input data for the 'accum'
module.  See 'channel%readin' method for more details of how
system is initialised.

@param fid : input unit number
@param sname : the name value that caused this function to be called
@param svalue : the value associated with the name (may be empty string)

@pre sname=fsaccu and len(svalue)=0"
      end

      operation 1827759 "read_finalise"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Initialise data arrays and calculate dimensions/regions for
statistics collection

Key functions:
- allocate the arrays that are needed
- on 'calgin' initialise the 'gin' distribution and geometry parameters.
- initialise the 'gz' distribution (call geometry def. in trial.mod)
- on 'calrdf' initialise the 'rdf' distribution
- echo interpreted content of input file"
      end

      operation 1827887 "reset"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "reset the accumulators"
      end

      operation 1828015 "save_interval"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  return this->isave_;
};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1828143 "saves"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "istep" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Save digest of statistics

This is the most important method of the accumulation module
as it is responsible for creating more in-depth statistics
from the simulation.  Some of the data analysis is delegated
to other modules (particularly when the data can be kept private
to the other module.)"
      end

      operation 1828271 "vjin"
	const cpp_inline private explicit_return_type "double"
	nparams 1
	  param in name "radial_idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
  return vjin_factor_ * (2 * radial_idx + 1);
};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1828399 "write_input_section"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Write out module parameters as per input file"
      end

      operation 1828527 "amobsv"
	preserve_cpp_body_indent const private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "write mobile ion statistics"
      end

      operation 1828655 "chemical_potentials"
	preserve_cpp_body_indent const private explicit_return_type "void"
	nparams 1
	  param inout name "strbuf" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// -----------------------------------------------------------------
// Write comparison of current chemical potentials to target
// potentials.

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Write comparison of current chemical potentials to target
potentials."
      end

      operation 1828783 "particle_counts"
	preserve_cpp_body_indent const private explicit_return_type "void"
	nparams 1
	  param inout name "strbuf" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Write current particle counts by region."
      end

      operation 1828911 "particle_count_distribution"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "write mean particle count data to file. The bulk output from this
method is for 'bulk-sampling' region

writes to files a[region]-[specie].000"
      end

      operation 1829039 "accum"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 1003951 // accum
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1829167 "operator ="
	private return_type class_ref 1003951 // accum
	nparams 1
	  param in name "source" type class_ref 1003951 // accum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1004079 "channel"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "  class geom;
  class patch;
  class spec;
  class trial;"
      extra_member 423471 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1829295 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & firun_;
    ar & fuuid_;
    ar & filcur_;
    ar & steps_simulation_;
    ar & steps_thermalisation_;
    ar & steps_bulk_simulation_;
    ar & fm_;
    ar & run_title_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " When the class Archive corresponds to an output archive, the
 & operator is defined similar to <<.  Likewise, when the class Archive
 is a type of input archive the & operator is defined similar to >>."
      end

      attribute 1286447 "firun_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " ----------------------------------
 PROGRAM CONSTANTS
 ----------------------------------
 The run number as a three character filename extension"
      end

      attribute 1286575 "fuuid_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The unique identifier for a simulation"
      end

      attribute 1286703 "filcur_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The input file version for file being read"
      end

      attribute 1286831 "input_file_version"
	class_attribute const_attribute public explicit_type "size_t"
	init_value "=  1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The input file version this program produces and the maximum input file
 version the program understands"
      end

      classrelation 1102127 // fm_ (<directional composition>)
	relation 1065007 *-->
	  stereotype "unique_ptr"
	  a role_name "fm_" private
	    comment " The ensemble of particles"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 1102127 // fm_ (<directional composition>)
	  b parent class_ref 1004207 // formation
      end

      operation 1829423 "set_run_number"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "irun" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------
// Initialise firun and fuuid strings
//
// This converts the input run number into a three
// digit string used to generate run specific output file names.
//
// @param irun : The number of this run.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "    std::unique_ptr< patch > patch_;
    std::unique_ptr< trial > trial_;
The results/outcomes of the simulation
  std::unique_ptr< accum > stats_;
 Initialise firun and fuuid strings

 This subroutine converts the input run number into a three digit
 string used to generate run specific output file names.

 This will throw an error if it is called twice

 @param irun : The number of this run."
      end

      operation 1829551 "firun"
	const cpp_inline public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    IONCH_REQUIRE (not firun_.empty(), \"Run number can only be accessed after it has been assigned.\");
    return firun_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1829679 "fuuid"
	const cpp_inline public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    IONCH_REQUIRE (not fuuid_.empty(), \"UUID can only be accessed after it has been assigned.\");
    return fuuid_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1829807 "filcur"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    IONCH_REQUIRE (filcur_ != 0, \"Current file version can only be accessed after reading an input file.\");
    return filcur_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      attribute 1286959 "steps_simulation_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Number of iterations for simulation stage (excludes thermalisation steps)"
      end

      attribute 1287087 "steps_thermalisation_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Number of iterations in the thermalisation stage of a run."
      end

      attribute 1287215 "steps_bulk_simulation_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "Number of iterations in the bulk simulation of chemical-excess stage of a run."
      end

      attribute 1287343 "run_title_"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Title for this run"
      end

      attribute 1287471 "usechm_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "    // Directory and file name for the checkpoint file
    std::string directory_;

    std::string filename_;

    // Whether to output separate checkpoint files for each save step or
    // overwrite previous saves.
    bool byiter;

 usechm = whether to use chemical potentials from input or perform
        simulation of bulk to generate them"
      end

      operation 1829935 "help_information"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "exemplar" type class_ref 1004335 // input_help
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//  setrun
//  //Help text produced when an input error is detected.
//  void channel::input_help(std::ostream &a_os, std::string msg) const
//  {
//    // An input error occured on the command line or input file
//    // ERROR REPORT routine for 'readin'
//    a_os << \"A problem occurred on the command line or reading the input file.\\n\";
//    a_os << msg << \"\\n\";
//    a_os << \"The command line requires at least one argument:\\n\";
//    a_os << \"   program <run_number> [random_seed]\\n\";
//    a_os << \"- The run number is required and should be in the range 1 to 999\\n\";
//    a_os << \"- The random seed is optional and may be any number that fits in a 64\\n\";
//    a_os << \"  bit unsigned integer\\n\\n\";
//    a_os << \"The input file has a number of required sections that must appear at\\n\";
//    a_os << \"the top-level or included via an \\\"\" << constants::fsincl << \"\\\" statement. The required\\n\";
//    a_os << \"are: \";
//    a_os << constants::fschnl << \" \" << constants::fsgeom << \" \" << constants::fssalt << \" \"
//        << constants::fsspec << \" \" << constants::fstry << \" \" << constants::fsaccu << \"\\n\";
//    a_os << \"The input file may also optionally include a \\\"\" << constants::fsptch << \"\\\" section.\\n\\n\";
//    a_os << \"The option \\\"\" << constants::fsfver << \"\\\" indicates the input file version, if\\n\";
//    a_os << \"used this should be the first option in the input file.\\n\";
//
//  }

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "   private:
    //Help text produced when an input error is detected.
    void input_help(std::ostream &a_os, std::string msg) const;


 Help text for problems with the 'channel' input file section."
      end

      operation 1830063 "input_summary"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Write brief summary of key input parameters."
      end

      operation 1830191 "execution_environment"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//// --------------------------------------------------------------
//// Math library information used in machine_info
////
//
//// --------------------------------------------------------------
//// Include version information for the maths library MKL
//#ifdef USE_MKL
//extern \"C\"
//{
//#include <mkl_service.h>
//  //  void mkl_get_version_string(char *, int);
//}
//#endif
//
//// --------------------------------------------------------------
//// Include version information for the maths library ATLAS
//#ifdef USE_ATLAS
//extern \"C\"
//{
//#include <atlas_buildinfo.h>
//
//}
//#endif
//
//// --------------------------------------------------------------
//// Include version information for the maths library GSL
//#ifdef USE_GSL
//extern \"C\"
//{
//#include <gsl_version.h>
//
//}
//#endif

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Execution environment query function

Print provenance information about the program version and the
host machine.

print program/system information

It is important to keep accurate records of the machine,
compiler, libraries and program version that went to create a
result.  This routine gathers and prints this information.

Information included:
- compiler version and compilation flags
- maths library version (may be static or dynamic)
- host information such as
-- host name, host type and operating system
-- cache sizes (under linux)
-- integer bit size
-- floating point specification

Additionally, the program imposes array size limits. Unlike
the fixed size arrays in Fortran, these limits are arbitrary
and are imposed to keep the calculation size within sensible
limits. Future versions of the program may remove these limits
altogether.

This method gets information about the program environment.

The key information obtained is:
- LAPACK library and version
- random number library and version
- cpu type (and cache information if available)
- hostname
- operating system

Reports information about the compilation such as:
- compiler and compilation flags
- version control system version number
- currently imposed array size limits
- compiled name of program"
      end

      operation 1830319 "read_input_file"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "////Execute the program
//int channel::main(int argc, char * * argv)
//{
//  // use accum
//  // use const
//  // use conf
//  // use geom
//  // use patch
//  // use spec
//  // use simuln
//  // use trial
//  // implicit none
//
//  // Output information about the program and host
//  this->execution_environment (std::cout);
//
//  {
//    // Process command line and read program input
//    std::vector< std::string > command_line_arguments (&argv[1], &argv[argc]);
//
//    // Command line arguments
//    for (size_t idx = 0; idx < command_line_arguments.size (); ++idx)
//    {
//      std::cout << \"COMMAND LINE ARGUMENT[\" << idx << \"]: \\\"\" << command_line_arguments[idx] << \"\\\"\\n\";
//    }
//    std::cout << constants::horizontal_bar() << \"\\n\\n\\n\";
//    // Process the command line options
//    IONCH_INPUT (not command_line_arguments.empty ()
//                 , \"The ionch program requires at least one command line argument\"
//                 , constants::fschnl());
//
//    // ------------------------------------------------------------
//    // First argument should be run number between 1 and 1000. Use
//    // simple logic to avoid converting string to a number just to
//    // check size.
//    this->set_run_number (boost::lexical_cast< size_t >(command_line_arguments.at (0)));
//
//    // TODO Random seed
//    if (command_line_arguments.size() > 1)
//      {
//        // Random seed.
//      }
//  }
//
//  // read input file
//  this->read_input_file ();
//
//  // output summary of input
//  this->input_summary (std::cout);
//
//  // Use input chem potentials or generate them
//  //    if (not this->usechm)
//  //      {
//  //        std::cout << constants::horizontal_bar() << \"\\n\";
//  //        std::cout << \"Computing chemical potentials.\\n\";
//  //        std::cout << \"Bulk simulation volume and length: \" << geom_->volblk() << \" \" << geom_->lenblk() << \"\\n\";
//  //        conf_->genrbk ();
//  //
//  //        this->run_bulk ();
//  //        //   reset statistics
//  //        this->reset ();
//  //      }
//  //
//  //    // Run the simulation
//  //    this->filename_ = \"conf.\" + constants::firun () + \".inp\";
//  //
//  //    conf_->genrcf(this->directory_ + \"/\" + this->filename_);
//  //
//  //    // make initial patch
//  //    if (not patch_->homog)
//  //      {
//  //        patch_->genrch ();
//  //      }
//  //    // Run simulation
//  //    this->run_sim();
//
//  return 0;
//
//}

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " const;
Execute the program
 int main(int argc, char * * argv);
Read the system input file

This is the main input routine for the Monte Carlo simulation.
It reads in the data necessary for the simulation phase and
initialises the simulation data structures.

The input file 'channel.inp' is made up of a series of labelled
subsections. The module specific subsections of the input file
may appear in any order and the content of these subsections
may also appear in any order. To allow sections and input data
to appear in any order the read-in process is split into two
phases.

PHASE ONE: read input file

In the first phase this method calls a module specific routine
for each subsection (based on the subsection label).  Within
a subsection these routines must handle getting input in any
order, optional input and basic input validity.  In general
non-optional input sets a flag that is tested when the subsection
ends.  If the input values can be validated at this time they
should be.  Also, any initialisation that is independent of other
modules may also occur.

The input file can include other sub-files.  The ability to
include a sub-file is only possible at the top-most level
outside a subsection.  However, sub-files may include other
sub-files but recursive inclusion is undefined.

Duplicate subsections are not detected specifically, with later
subsections triggering a repeat call to the module specific input
method.  For sections that are expected to appear multiple
times (eg particle and salt definitions) repeat calls to the
module method must provide well-defined outcomes.  For sections
that are expected to appear once (eg the geometry definition)
the results of a repeat call is allowed to be undefined.

PHASE TWO: initialisation

In the second phase an initialisation routine in each module
is called in a specific order.  This order allows a module to
be initialised after the modules it depends on.  These routines
should finalise initialisation for their module, perhaps logging
the consequences of the input data.  The routines are also
required to write to the log an input file subsection that
contains the input data (and any defaults).  Input data that
is normalised should be shown as the normalised value, otherwise
the logged values should be the same as the input file.

NOTE: it is important that the logged input data subsections
can be used to perform an exact repeat of the current calculation.

INPUT ERROR HANDLING:

In phase one, if any subroutine detects syntactic invalid or
missing input it should print an error message detailing the
problem and what correct input should be.  In phase two, errors
are more likely to be range errors.  These should also be
reported, along with suggestions for making the input valid.
"
      end

      operation 1830447 "read_input"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "parser" explicit_type "input_reader"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " read channel input section"
      end

      operation 1830575 "echo_input"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "////
////  //Reset the outcome data-set of the simulator to the state immediately
////  //after reading the input file.
////  void channel::reset()
////  {
////    trial_->zeroav ();
////    this->stats_->reset ();
////    trial_->zerotr ();
////  }
////  //Run the periodic boundary simulation of bulk solution
////  void channel::run_bulk()
////  {
////    static const bool isbulk (true);
////    double chptav[constants::nspcmx] = { 0.0 };
////
////    // LOCALS
////
////    this->reset ();
////
////    std::cout << constants::horizontal_bar() << \"\\n\\n\";
////    std::cout << \"Reference for deriving chemical potentials:\\n\";
////    std::cout << \"Attila Malasics, Dirk Gillespie and Dezso\"\" Boda \"\"Simulating\\n\";
////    std::cout << \"prescribed particle densities in the grand canonical\\n\";
////    std::cout << \"ensemble using iterative algorithms\"\", The Journal of Chemical \\n\";
////    std::cout << \"Physics, 2008, 128, 124102\\n\\n\";
////    std::cout << \" Start chemical excess in bulk calculation\\n\";
////
////    for (int istep = 0; istep != constants::nionmx; ++istep)
////      {
////        for (int j = 0; j != constants::nionmx; ++j)
////          {
////            trial_->trypbk ();
////          }
////      }
////
////    for (int istep = 0; istep != 64; ++istep)
////      {
////        for (int j = 0; j != istep * constants::nspcmx; ++j)
////          {
////            for (int j = 0; j != constants::nionmx; ++j)
////              {
////                trial_->trypbk ();
////              }
////
////            this->stats_->accblk ();
////          }
////
////        this->stats_->iterat (isbulk, accum::malas1);
////
////        for (int ispec = spec_->chloride_index (); ispec != spec_->spec_size (); ++ispec)
////          {
////            chptav[ispec] += (spec_->chexi (ispec) - chptav[ispec]) / istep;
////          }
////      }
////
////    for (int istep = 0; istep != 64; ++istep)
////      {
////        for (int j = 0; j != 512; ++j)
////          {
////            for (int j = 0; j != constants::nionmx; ++j)
////              {
////                trial_->trypbk ();
////              }
////
////            this->stats_->accblk ();
////          }
////
////        this->stats_->iterat (isbulk, accum::malas1);
////
////        for (int ispec = spec_->chloride_index (); ispec != spec_->spec_size (); ++ispec)
////          {
////            chptav[ispec] += (spec_->chexi (ispec) - chptav[ispec]) / istep;
////          }
////      }
////
////    spec_->setchx (chptav);
////    this->reset ();
////    std::cout << \" End of chemical excess in bulk calculation\\n\\n\";
////
////  }
//
////  // Run the simulation of the membrane pore
////  void channel::run_sim()
////  {
////    // character(len=*),intent(in) :: dirname,filename
////    static const bool notblk (false);
////    // LOCALS
////    // integer :: i,j,istep
////    const bool iswidm (trial_->calwid);
////    // integer :: mixtme
////
////    std::cout << \" Start MC for \" << this->run_title_ <<\" (run \" << constants::firun () << \")\\n\\n\";
////    // turn off Widom sampling in Equilibration
////    trial_->set_widom (false, trial_->widom_trials ());
////
////    //  EQUILIBRATION
////    //
////    // Markov-chain Monte Carlo has mixing time scaling with n log(n) where
////    // n is the degrees of freedom.  In our case the degrees of freedom is
////    // equal to the number of particles by three and the number of ICC tiles.
////    // I use particles * 3 because they have 3D movement and 1 * tiles as they
////    // only vary charge.
////
////    const double dgfree (3 * conf_->ntot() + patch_->npatch()); // degrees of freedom estimate
////    const int mix_time_ (std::max< int >(1024, std::tr1::nearbyint(dgfree * std::log(dgfree))));
////    std::cout << \"Degrees of freedom factor   : \" << std::tr1::nearbyint(dgfree) << \"\\n\";
////    std::cout << \"Trials per simulation step  : \" << mix_time_ << \"\\n\\n\";
////
////    if (0 != this->steps_thermalisation_)
////      {
////        if (usechm)
////          {
////            std::cout << \" START EQUILIBRATION PHASE: CHEM. POT. CHECK A\\n\";
////            double chptav [constants::nspcmx] = { 0.0 }; // average chem. pot. during estimation
////
////            for (int istep = 0; istep != this->steps_thermalisation_; ++istep)
////              {
////                for (int j = 0; j != mix_time_; ++j)
////                  {
////                    trial_->trypeq ();
////                    this->stats_->acceql ();
////                  }
////                std::cout << \"Equilibration Phase Chem. Pot. Check A\\n\";
////                this->stats_->iterat (notblk, this->stats_->acept2);
////                for (int ispec = spec_->chloride_index (); ispec != spec_->spec_size (); ++ispec)
////                  {
////                    chptav[ispec] += (spec_->chexi (ispec) - chptav[ispec])/istep;
////                  }
////              }
////            spec_->setchx(chptav);
////            this->reset ();
////          }
////        std::cout << \" START EQUILIBRATION PHASE: FULL SIMULATION\\n\";
////        for (int istep = 0; istep != this->steps_thermalisation_; ++istep)
////          {
////            for (int j = 0; j != mix_time_; ++j)
////              {
////                trial_->tryeq ();
////                this->stats_->accumulate ();
////              }
////            this->stats_->hist ();
////            std::cout << \"Equilibration Phase: Full Simulation\\n\";
////            this->stats_->saves(istep);
////          }
////
////        write_input_file (this->directory_ + \"/equil.\" + constants::firun () + \".inp\");
////        //conf_->writcf(directory_ + \"/equil.\" + constants::firun () + \".chk\",1);
////        this->reset ();
////      }
////
////    // restore calwid
////    trial_->set_widom (iswidm, trial_->widom_trials ());
////
////    // ------------------------------------------------------------
////    // SIMULATION
////    std::cout << \" START SIMULATION\\n\";
////    for (int istep = 0; istep < this->steps_simulation_; istep += this->stats_->save_interval ())
////      {
////        for (int i = 0; i != this->stats_->save_interval (); ++i)
////          {
////            for (int j = 0; j != mix_time_; ++j)
////              {
////                trial_->tryeq ();
////                this->stats_->accumulate ();
////              }
////            this->stats_->hist ();
////          }
////        std::cout << \"Simulation Phase\\n\";
////        this->stats_->saves(istep + this->stats_->save_interval ());
////
////        this->write_input_file (directory_ + \"/equil.\" + constants::firun () + \".inp\");
////        // conf_->writcf(directory_ + \"/equil.\" + constants::firun () + \".chk\",1);
////      }
////    std::cout << \" End of simulation\\n\";
////
////  }
//
////  //Save simulaton in the input-file format. This includes the
////  //particle position information.
////  void channel::write_input_file(std::string filename) const
////  {
////    std::ofstream fidinp (filename.c_str ());
////    IONCH_ALWAYS (fidinp.good (), \"Error openning \" + filename + \" file for writing\");
////    fidinp << constants::fsfver << \" \" << this->fvermx << \"\\n\\n\";
////
////    // writing sections in order:
////    //  'channel'
////    this->write_input_section (fidinp);
////    //  'geom'
////    geom_->ecgeom(fidinp);
////    //  'patch'
////    patch_->ecptch(fidinp);
////    //  'trial'
////    trial_->ectral(fidinp);
////    //  'accum'
////    this->stats_->write_input_section (fidinp);
////    //  'salt'
////    spec_->ecsalt(fidinp);
////    //  'specie'
////    spec_->ecspec(fidinp);
////
////  }

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "  //Reset the outcome data-set of the system to the state immediately
  //after reading the input file.
  void reset();
    //Run the periodic boundary simulation of bulk solution
    void run_bulk();

    // Run the simulation of the membrane pore
    void run_sim();

    //Save simulation in the input-file format. This includes the
    //particle position information.
    void write_input_file(std::string filename) const;
Write the channel parameters in input-file format"
      end

      operation 1830703 "is_valid"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return NULL != this->fm_.get();
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Test whether a formation object has been created."
      end

      operation 1830831 "steps_simulation"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->steps_simulation_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Number of iterations for simulation stage (excludes thermalisation steps)"
      end

      operation 1830959 "steps_thermalisation"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->steps_thermalisation_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Number of iterations in the thermalisation stage of a run."
      end

      operation 1831087 "steps_bulk_simulation"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->steps_bulk_simulation_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "Number of iterations in the bulk simulation of chemical-excess stage of a run."
      end

      operation 1831215 "title"
	const cpp_inline public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->run_title_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " The user-supplied title text for this simulation."
      end

      operation 1831343 "use_input_chemical_potentials"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return this->usechm_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Whether to use chemical potentials from input or perform
        simulation of bulk to generate them."
      end

      operation 1831471 "channel"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}
    : firun_()
    , fuuid_()
    , filcur_()
    , fm_(std::unique_ptr< ionch::formation > (new ionch::formation))
    //  : spec_(new spec)
    //  , geom_(new geom (*spec_.get()))
    //  , conf_(new conf  (*spec_.get(), *geom_.get()))
    //  , patch_(new patch)
    //  , trial_(new trial)
    //  , stats_(new accum (*this))
    , steps_simulation_ (1000ul)
    , steps_thermalisation_ (100ul)
  , steps_bulk_simulation_ (100ul)
    , run_title_ ()
    //  , directory_ (\"dat\")
    //  , filename_ ()
    //  , byiter (false)
    , usechm_ (true)
    //  , beta_ (2.41440919407021130E20) // Value for 300K
    //  , q_star_factor_ ()
    //  , temperature_kelvin_ (300.0)
    //  , filcur_ (1) // assume input is first input version
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1831599 "~channel"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1831727 "channel"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 1004079 // channel
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "no copy"
      end

      operation 1831855 "operator ="
	private return_type class_ref 1004079 // channel
	nparams 1
	  param in name "source" type class_ref 1004079 // channel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "no copy"
      end
    end

    class 1004847 "coulomb_evaluator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "class widom_observer;
 Evaluate the Coulomb potential change after a trial move."
      attribute 1287727 "rqqii_"
	private explicit_type " double, 2 "
	stereotype "boost::multi_array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " rqqii -> q_i*q_j/(2 * inter-particle distance)"
      end

      attribute 1287855 "trial_rii_"
	private explicit_type " double, 2 "
	stereotype "boost::multi_array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Changes to rqqii between trial particles and existing (trial_rii_)
 and between trial particles (local_rii_)"
      end

      attribute 1287983 "local_rii_"
	private explicit_type " double, 2 "
	stereotype "boost::multi_array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 1833263 "coulomb_evaluator"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "target_particle_number" explicit_type "size_t"
	  param in name "max_change" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}
    : rqqii_(boost::extents[guess_max(target_particle_number)][guess_max(target_particle_number)])
    , trial_rii_(boost::extents[max_change][guess_max(target_particle_number)])
    , local_rii_(boost::extents[max_change][max_change])
//    , mean_field_();
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "boost::shared_ptr< widom_observer > mean_field_;
 Create an evaluator sized for the given particle number and
 maximum number of steps in a change trial"
      end

      operation 1833391 "~coulomb_evaluator"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1833519 "operator ()"
	preserve_cpp_body_indent public explicit_return_type "double"
	nparams 2
	  param in name "conf" type class_ref 1004207 // formation
	  param inout name "trial" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Calculate the energy change"
      end

      operation 1833647 "on_update"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "conf" type class_ref 1004207 // formation
	  param in name "trial" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Update internal state after outcome of
 trial is known."
      end

      operation 1833775 "initialise"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "conf" type class_ref 1004207 // formation
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ------------------------------------------------------------------
// Generate lookup data for particles
//
// This method generates the rqqii array for particles whose
// position information has been read in.  This method is best
// called directly after the ions have been defined.  For example
// if structural ions are present in the input then this method
// should be called before a generator method is called to add
// the rest of the particles.  Similarly this method is called
// within 'readcf' after all the particles have been read in.

${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1833903 "cergit"
	stereotype "template"
	preserve_cpp_body_indent private explicit_return_type "double"
	nparams 3
	  param in name "len" explicit_type "double"
	  param in name "conf" type class_ref 1004207 // formation
	  param inout name "trial" explicit_type ""
	cpp_decl "    ${comment}template<typename dist>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------
// UNIFIED COLOUMB (UII) ENERGY ROUTINE
//
// If ovrlap is true uii is undefined
//
// Calculate the change in coulomb energy.
//
// Dezso¨ Boda, Dirk Gillespie, Wolfgang Nonner, Douglas Henderson, and Bob Eisenberg
// \"Computing induced charges in inhomogeneous dielectric media:
// Application in a Monte Carlo simulation of complex ionic simulators\"
// PHYSICAL REVIEW E 69, 046702 2004
// left half of eqn(32) with eqn(33)
//
// Reference for canonical moves (radial,jump) and preference sampling
// (jump-in,jump-out):
// Dezso¨ Boda, Douglas Henderson, and David Busath \"\"Monte Carlo
// study of the selectivity of calcium channels: improved
// geometrical model\"\", Molecular Physics, 2002, 110(14) 2361-2368
//
//   radial,jump: P = min[ 1, exp(-\\delta U / kT) ]
//
//   preference sampling for jump-in/jump-out:
//   P = min [1, V_end/V_start * exp(-\\delta U / kT) ]
//
// Reference for grand-canonical insertion and deletion
// Dezso¨ Boda, Mo'nika' Valisko', Bob Eisenberg, Wolfgang Nonner,
// Douglas Henderson, and Dirk Gillespie \"\"The effect of protein
// dielectric coefficient on the ionic selectivity of a calcium channel\"\"
// The Journal of Chemical Physics, 2006, 125, 034901
//
//  P = min [ 1,  (N_Cation,start// N_Anion,start//) exp( (\\nu B - \\delta U)/kT ) ]
//          [      (N_Cation,end// N_Anion,end//)                                 ]
//  with
//        B =\\mu_Ca + 2\\mu_Cl + ln(V_Ca/\\lambda^3_Ca) + 2 ln (V_Cl / \\lambda^3_Cl)
//  and
//        \\lamda_i = h/(2\\pi.k.T.m_i)^(1/2)
//
//  coded as (addition)
//      V_cation*V_anion.../(N_Cation+1).(N_Anion+1)... exp (\\mubar-\\delta U)/kT
//  (deletion)
//      V_cation*V_anion.../(N_Cation).(N_Anion)... exp (\\mubar-\\delta U)/kT
//
// SEC1: addition of salt we account for interaction between added particles
//
//  sum(salt_i,salt_j:j > 1) q_i * q_j * {(1/eps_i + 1/eps_j)/2} / (rnw_ij)
//
// SEC2: for moved and new particles we add interaction between particle and all
//  other particles
//
//  sum(chg_i,j: j /=i)  q_i * q_j * {(1/eps_i + 1/eps_j)/2} / (rnw_ij)
//
// SEC3: for moved or deleted particles subtract the interaction with all
//  other particles (in original position 'ii')
//
//  sum(chg_ii, j: j /= i)  q_i * q_j * {(1/eps_i + 1/eps_j)/2} / (r_ij)
//
// TOTAL: SEC1 + SEC2 - SEC3

template<typename dist>
${inline}${type} ${class}::${name}${(}const ${t0} ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Private template method that defines a generic routine for calculating
 the Coulomb energy for use with periodic boundary cells and finite cells.

 This method is only called in the operator() method so its definition is
 not publicly available."
      end
    end

    class 1005231 "formation_builder"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      attribute 1288111 "use_grid_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 1834031 "formation_builder"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1834159 "build"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 4
	  param inout name "fm" type class_ref 1004207 // formation
	  param inout name "rgen" explicit_type "mersenne_twister_19937"
	  param in name "use_grid" explicit_type "bool"
	  param in name "do_bulk" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//#include <algorithm>
//#include <iomanip>
//#include <fstream>
//#include <iostream>
//#include <boost/lambda/lambda.hpp>
//#include <boost/array.hpp>
//#include <boost/format.hpp>
//#include <boost/lexical_cast.hpp>
//#include \"observable.hpp\"
//
//#include \"patch.hpp\"
// This function generates target_particle_number_ particles of ispec using gen.

${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Build formation"
      end

      operation 1834287 "generate_particles"
	private explicit_return_type "void"
	nparams 3
	  param in name "ispec" explicit_type "size_t"
	  param in name "target_particle_number_" explicit_type "size_t"
	  param inout name "rgen" explicit_type "mersenne_twister_19937"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} & ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1834415 "genrbk"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ------------------------------------------------------------------
// GENERATE AN INITIAL MC formationIGURATION FOR SIMULATION OF BULK
//
// This method sets the program up to do a simulation of bulk
// solution with periodic boundary conditions.  At the time it
// is called the simulator will have already started to generate
// the channel simulation.  The channel simulation data needs
// to be saved before calling this method as the formation module
// is reset.
//
// The bulk simulation is performed in a cube with periodic
// boundary conditions.  The structural ions are ignored and a
// system containing just the free salts is generated.  Position
// for ions is random in all three dimensions and a test is made
// to ensure no overlap (including overlap occuring across a
// boundary.
//
// This method generates entries for the added ions in the rqqii
// array as it progresses so the 'lookup' method does not need
// to be called after this method ends for the new ions.

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 GENERATE AN INITIAL MC CONFIGURATION FOR SIMULATION OF BULK

 This method sets the program up to do a simulation of bulk
 solution with periodic boundary conditions.  At the time it
 is called the system will have already started to generate
 the channel simulation.  The channel simulation data needs
 to be saved before calling this method as the formation module
 is reset.

 The bulk simulation is performed in a cube with periodic
 boundary conditions.  The structural ions are ignored and a
 system containing just the free salts is generated.  Position
 for ions is random in all three dimensions and a test is made
 to ensure no overlap (including overlap occuring across a
 boundary.

 This method generates entries for the added ions in the rqqii
 array as it progresses so the 'lookup' method does not need
 to be called after this method ends for the new ions."
      end

      operation 1834543 "genrcf"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param in name "filename" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 GENERATE AN INITIAL MC formationIGURATION

 This generates the initial simulation system.  At entry into
 this method any structural ions should already have been added
 to the system.

 Particles are added one-by-one checking for overlap after each
 addition, which causes the particle to be rejected.  To avoid
 this loop from continuing ad nauseum the number of possible
 insertion attempts is limited.

 The trial position can be anywhere within the simulation
 boundary.  Only particle-particle and particle-system overlap
 is used to reject a trial during particle addition; no account
 is taken of the energy so it is not even calculated.

 This method generates entries for the added ions in the rqqii
 array as it progresses so the 'lookup' method does not need
 to be called after this method ends for the new ions.  When
 structural ions are present the 'lookup' method must be called
 before this method."
      end
    end

    class 1005999 "localisation_evaluator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      operation 1837231 "operator ()"
	const private explicit_return_type "double"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Calculate the energy change"
      end

      operation 1837359 "on_update"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Update internal state if move attempt
 was successful."
      end

      operation 1837487 "mobpen"
	preserve_cpp_body_indent const private explicit_return_type "void"
	nparams 5
	  param in name "ii" explicit_type "size_t"
	  param in name "xnew" explicit_type "double"
	  param in name "ynew" explicit_type "double"
	  param in name "znew" explicit_type "double"
	  param inout name "penlty" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} & ${p4}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------
 Calculate hooke's law energy penalty of displacement from
 center-point normalised to [0:4]."
      end
    end

    class 1006127 "occluded_volume_observer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ Volume occluded by particles in the pore
/
/ Compute volume fractions for spheres in the filter region.
/ Report the percentage of occluded volume in slices along
/ the pore."
      attribute 1290031 "nival_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "/ The number of slices to divide the region cylinder
/ along its axis."
      end

      attribute 1290159 "reg_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "/ The formation's region number to perform the
/ evaluation on."
      end

      attribute 1290287 "ignore_free_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "/ Should we ignore or include solute particles?"
      end

      extra_member 423599 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1837615 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & nival_;
    ar & reg_;
    ar & ignore_free_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1837743 "occluded_volume_observer"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "region" explicit_type "size_t"
	  param in name "nival" explicit_type "size_t"
	  param in name "ignorefree" explicit_type "bool"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw} : nival_(nival)
      , reg_ (region)
      , ignore_free_(ignorefree)
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1837871 "clone"
	class_operation preserve_cpp_body_indent public explicit_return_type "boost::shared_ptr< occluded_volume_observer >"
	nparams 1
	  param in name "params" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1837999 "label"
	const cpp_inline public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return std::string (\"occvol\");
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1838127 "on_save"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "form" type class_ref 1004207 // formation
	  param inout name "rep" type class_ref 1006383 // report
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// --------------------------------------------------------------
// OCCLUDED VOLUME
//
// Compute volume fractions for spheres in the filter region.
//
// This model works by a combination of restricted volume and
// high charge density in the filter region.  Previous versions
// of the program did not limit the structural ions beyond
// restricting them to the filter region.  This version introduces
// the ability to reduce the mobility of structural ions.  This
// makes knowledge about the  profile of free space in the filter
// interesting.  This method calculates the percent volume occupied
// by structural ions in a set of intervals in filter.
//
// This information is saved as a series into a file 'res/occvol.###.dat' and
// written into the report object.

${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------------------
 OCCLUDED VOLUME

 Compute volume fractions for spheres in the filter region.

 This model works by a combination of restricted volume and
 high charge density in the filter region.  Previous versions
 of the program did not limit the structural ions beyond
 restricting them to the filter region.  This version introduces
 the ability to reduce the mobility of structural ions.  This
 makes knowledge about the  profile of free space in the filter
 interesting.  This method calculates the percent volume occupied
 by structural ions in a set of intervals in filter.

 This information is saved into a file 'res/occvol.num.dat' and
 written to the input file descriptor."
      end

      operation 1838255 "sphvol"
	preserve_cpp_body_indent const private explicit_return_type "double"
	nparams 4
	  param in name "left" explicit_type "double"
	  param in name "right" explicit_type "double"
	  param in name "centre" explicit_type "double"
	  param in name "radius" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " -------
 calculate the volume contribution of spheres within z-interval

 This internal method checks all structural ions and calculates
 the volume it occupies within an interval of the filter.  This
 includes calculating the part of the volume inside the interval
 for those spheres that overlap the interval boundaries."
      end
    end

    class 1006383 "report"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ Manage reporting of results."
      attribute 1293743 "step_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      class 1006767 "report_logger"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1103151 // parent_ (<unidirectional association>)
	  relation 1066031 --->
	    a role_name "parent_" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	      python "${comment}${self}${name} = ${value}
"
	      classrelation_ref 1103151 // parent_ (<unidirectional association>)
	    b parent class_ref 1006383 // report
	end

	attribute 1293871 "label_"
	  private explicit_type "string"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1293999 "log_"
	  private explicit_type "std::stringstream"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	operation 1841839 "report_logger"
	  cpp_inline public explicit_return_type ""
	  nparams 2
	    param inout name "p" type class_ref 1006383 // report
	    param in name "lbl" explicit_type "string"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw} : parent_ (p)
        , label_ (lbl)
        , log_ ()
    {};
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end

	operation 1841967 "operator <<"
	  stereotype "template"
	  cpp_inline public return_type class_ref 1006767 // report_logger
	  nparams 1
	    param in name "p" explicit_type "other"
	  cpp_decl "    ${comment}template<typename other>
  ${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
      log_ << p;
      return *this;
    };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment " delegate all write operations to the log."
	end

	operation 1842095 "~report_logger"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
      parent_.add_report (label_, log_.str());
    };
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	end
      end

      operation 1842223 "report"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1842351 "~report"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1842479 "get_log"
	cpp_inline public explicit_return_type "boost::shared_ptr< report_logger >"
	nparams 1
	  param in name "label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return boost::shared_ptr< report_logger >(new report_logger (*this, label));
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1842607 "add_report"
	public explicit_return_type "void"
	nparams 2
	  param in name "lbl" explicit_type "string"
	  param in name "doc" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1842735 "step"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return step_; };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Number of the current report."
      end
    end

    class 1006639 "trial"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      class 1007151 "anonymous2"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum 
 {
${items}
};
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1295407 "move_l"
	  public type class_ref 1007151 // anonymous2
	  init_value "0
      "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1295535 "add1_l"
	  public type class_ref 1007151 // anonymous2
	  init_value "1
      "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1295663 "addslt"
	  public type class_ref 1007151 // anonymous2
	  init_value "2
      "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1295791 "rem1_l"
	  public type class_ref 1007151 // anonymous2
	  init_value "-1
      "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1295919 "remslt"
	  public type class_ref 1007151 // anonymous2
	  init_value "-2
      // Constants defining subtype of move
      "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1296047 "sphr_l"
	  public type class_ref 1007151 // anonymous2
	  init_value "1
      "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1296175 "jump_l"
	  public type class_ref 1007151 // anonymous2
	  init_value "2
      "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1296303 "jmpin_"
	  public type class_ref 1007151 // anonymous2
	  init_value "3
      "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end

	attribute 1296431 "jmpou_"
	  public type class_ref 1007151 // anonymous2
	  init_value "4
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	end
      end

      attribute 1296559 "spring_factor_mobile_"
	class_attribute private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Constant multiplier for mobile ion constraint. Note this
 is the maximum value that the penalty energy can contribute
 to the potential energy as \"mobpen\" scales Hooke's law
 potential energy by rsr^2 (k=1). As mobchk constrains ion 
 within rsr, mobpen will give value between [0:1].

 fortran equiv k_mobl"
      end

      attribute 1296687 "wasdel_"
	class_attribute private explicit_type " constants::nspcmx "
	stereotype "std::bitset"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Record of whether the last individual GC move was a deletion (F) or addition (T)
 =false"
      end

      attribute 1296815 "hnw_"
	class_attribute private explicit_type " double "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The current trial 'h' vector used in ICC calculation"
      end

      attribute 1296943 "dh_"
	class_attribute private explicit_type " double "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1297071 "dcnw_"
	class_attribute private explicit_type " double "
	stereotype "std::valarray"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " A delta between the main 'c' vector and the trial
 'c' vector used in ICC calculation (NOTE: The trial
 'c' vector is never actually stored directly)"
      end

      attribute 1297199 "ripnw_"
	class_attribute private explicit_type " double, 2 "
	stereotype "boost::multi_array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Distance matrix between each trial particle and
 the ICC patches"
      end

      attribute 1297327 "riinw_"
	class_attribute private explicit_type " double, 2 "
	stereotype "boost::multi_array"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Distance matrix between each trial particle and 
 the existing particles"
      end

      attribute 1297455 "riicrn"
	class_attribute private explicit_type "double"
	multiplicity "[constants::nnewmx][constants::nnewmx]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " When more than one particle is changing this has the
 distance matrix between them"
      end

      attribute 1297583 "amove_"
	class_attribute private explicit_type "ulong"
	multiplicity "[constants::nspcmx][2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Statistics collected to monitor GCMC.
 Statistics are collected for attempts and successes
 by trial update type, specie or salt and by region
 for GC trials.
"
      end

      attribute 1297711 "ajump_"
	class_attribute private explicit_type "ulong"
	multiplicity "[constants::nspcmx][2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1297839 "ajin_"
	class_attribute private explicit_type "ulong"
	multiplicity "[constants::nspcmx][2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1297967 "ajout_"
	class_attribute private explicit_type "ulong"
	multiplicity "[constants::nspcmx][2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1298095 "acreat_"
	class_attribute private explicit_type "ulong"
	multiplicity "[constants::nsltmx][constants::nrgnmx][2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1298223 "adest_"
	class_attribute private explicit_type "ulong"
	multiplicity "[constants::nsltmx][constants::nrgnmx][2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1298351 "acrea1_"
	class_attribute private explicit_type "ulong"
	multiplicity "[constants::nspcmx][constants::nrgnmx][2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1298479 "adest1_"
	class_attribute private explicit_type "ulong"
	multiplicity "[constants::nspcmx][constants::nrgnmx][2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1298607 "ncret_"
	class_attribute private explicit_type "ulong"
	multiplicity "[constants::nspcmx]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Create/Destroy counters for chemical potential estimation"
      end

      attribute 1298735 "ndest_"
	class_attribute private explicit_type "ulong"
	multiplicity "[constants::nspcmx]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1298863 "ameng_"
	class_attribute private explicit_type " double "
	multiplicity "[constants::nspcmx]"
	stereotype "ionch::observable"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Simulation-quality monitoring statistics for mobile ions
 -"
      end

      attribute 1298991 "aceng_"
	class_attribute private explicit_type " double "
	multiplicity "[constants::nspcmx]"
	stereotype "ionch::observable"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1299119 "adeng_"
	class_attribute private explicit_type " double "
	multiplicity "[constants::nspcmx]"
	stereotype "ionch::observable"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      class 1007279 "widm_t"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
	java_decl ""
	php_decl ""
	python_decl "class ${name}${inherit}:
${docstring}${members}
"
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1299247 "umfi"
	  public explicit_type " double, 2"
	  stereotype "boost::multi_array"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " mean field (not scaled by qstar())"
	end

	attribute 1299375 "uchsi"
	  public explicit_type " double, 2"
	  stereotype "boost::multi_array"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " interparticle coulomb only interaction"
	end

	attribute 1299503 "uchs"
	  public explicit_type " double, 2"
	  stereotype "boost::multi_array"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " total interaction"
	end

	attribute 1299631 "trials"
	  public explicit_type " uint64_t, 2"
	  stereotype "boost::multi_array"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " number of tests"
	end

	attribute 1299759 "trys"
	  public explicit_type "ulong"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl "${comment}${self}${name} = ${value}
"
	  idl_decl ""
	  comment " Total number of attempts"
	end

	operation 1845807 "widm_t"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}
{
  ${body}
}
"
	  
	  
	  python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	  
	  comment " constructor"
	end
      end

      classrelation 1103279 // widobj (<directional composition>)
	relation 1066159 *-->
	  stereotype "unique_ptr"
	  a role_name "widobj" class_relation private
	    comment " Pointer to widom data when calwid == true"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};"
	    python "${comment}${self}${name} = ${type}()
"
	    classrelation_ref 1103279 // widobj (<directional composition>)
	  b parent class_ref 1007279 // widm_t
      end

      attribute 1299887 "calwid_"
	class_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Are we using Widom calculation?
 default = false"
      end

      attribute 1300015 "nwdtry_"
	class_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " the target number of widom trials per save
 default = 0"
      end

      attribute 1300143 "rates_"
	class_attribute private explicit_type "double"
	multiplicity "[3]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Rates for different MC trials: movement, salt add/del, indiv. add/del
 =0.D0"
      end

      attribute 1300271 "drmax"
	class_attribute private explicit_type "double"
	multiplicity "[2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Update radii inside and outside the channel
 != 0.D0"
      end

      attribute 1300399 "indxnw"
	class_attribute private explicit_type " int "
	stereotype "std::valarray"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The indices in 'conf' of the trial particles"
      end

      attribute 1300527 "ispcnw"
	class_attribute private explicit_type " int "
	stereotype "std::valarray"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The species of the trial particles"
      end

      attribute 1300655 "istate"
	class_attribute private explicit_type "int"
	multiplicity "[2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " flags specifying the type of the current trial"
      end

      attribute 1300783 "nchgnw"
	class_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The number of particles changing"
      end

      attribute 1300911 "igcnw"
	class_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The salt (is any) that is changing"
      end

      attribute 1301039 "iregnw"
	class_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " The target region of the change."
      end

      attribute 1301167 "propscal"
	class_attribute private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " MC Scalar Proportionality factor (formerly nvterm)"
      end

      attribute 1301295 "propexpo"
	class_attribute private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " MC Exponent Proportionality factor (formerly chmpot)"
      end

      attribute 1301423 "dosalt"
	class_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " only check salt/indiv add/del if true
 = false"
      end

      attribute 1301551 "doindv"
	class_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " = false;"
      end

      operation 1845935 "accrat"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "os_fid" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------------------------------------

  FUNCTIONS AND ROUTINES
 --------------------------------------------------
 Write out acceptance ratios

 The information output by this method can be used to evaluate
 the performance of the parameters and methods used in the GCMC step."
      end

      operation 1846063 "avergi"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "ispec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Calculate statistics for the energy factors used to determine
 acceptance for addition, move and creation steps.

 The information output here can be used to investigate the
 energetics of add/deletion of particles, something that may
 give an indication of problems with the chemical potentials."
      end

      operation 1846191 "avgget"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "ispec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return (constants::feq(aceng_[ispec].mean() + adeng_[ispec].mean(), 0.0)
	    ? 0.0
	    : (adeng_[ispec].mean() - aceng_[ispec].mean())
	    /(aceng_[ispec].mean() + adeng_[ispec].mean()));
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Get ratio dest-cret/(cret+dest)

 Get create/destroy ratio for free species"
      end

      operation 1846319 "accget"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "ispec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Get log of ratio try_cret/try_dest

 Get the ratio of create/destroy attempts for free
 species.

 One of the equilibration methods limits the create/destroy
 attempts by repeating only create or only destroy attempts
 when a GCMC move is selected until the attempt succeeds, at
 which time the reverse operation is repeated.  This ensures
 that the number of particles of each specie will remain close
 to the starting value.  If the chemical potential is exactly
 correct then the number of attempts to create a particle should
 be equal to the attempts to destroy one.  Thus the value
 returned here can be used to self-consistently adjust the
 chemical potentials."
      end

      operation 1846447 "avgset"
	class_operation cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "bfcr" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    if (isamov())
      {
	ameng_[ispcnw[0]] << bfcr;
      }
    else if (isadd())
      {
	aceng_[ispcnw[0]] << bfcr;
      }
    else if (isdele())
      {
	adeng_[ispcnw[0]] << bfcr;
      }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Save energy data

 Update the internal data sets that monitor the energy
 changes (printed in 'avergi')"
      end

      operation 1846575 "calwid"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return calwid_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1846703 "chgblk"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "ovrlap" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------------------------------
 Make a change for a particle in the bulk"
      end

      operation 1846831 "chgsim"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "ovrlap" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------------------------------
 Make a change for a particle in the channel simulation"
      end

      operation 1846959 "commit"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "isbulk" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " -------------------------------------------------------------
 Commit changes after a MCGC move has been accepted

 @param isbulk : true when simulating the bulk "
      end

      operation 1847087 "ectral"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "fid" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Write input parameters to stream

 This method writes the input parameters in same
 form as the input file.  Note that it will contain
 the actual values used by the program (ie. rates
 will have been normalised)"
      end

      operation 1847215 "issalt"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return istate[0] == addslt or istate[0] == remslt;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------------------------------------
 - QUERY functions
 --------------------------------------------------
 Does the 'move' involve a salt?"
      end

      operation 1847343 "isindv"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return istate[0] == add1_l or istate[0] == rem1_l;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Does move involve adding/removing 1 particles?"
      end

      operation 1847471 "isadd"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return istate[0] > 0;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Does move involve adding particles (either indiv or as salt)?"
      end

      operation 1847599 "isdele"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return istate[0] < 0;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Does move involve deleting particles (either indiv or as salt)?"
      end

      operation 1847727 "isamov"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return istate[0] == 0;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Is any one of the move types (not add or delete)"
      end

      operation 1847855 "ismove"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return istate[0] == 0 and istate[1] == sphr_l;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Is the move a small displacement move"
      end

      operation 1847983 "isajmp"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return istate[0] == 0 and istate[1] >= jump_l;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 is any one of the jump types (in region, into or
 out of channel)"
      end

      operation 1848111 "isjump"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return istate[0] == 0 and istate[1] == jump_l;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Is the move a jump within a region"
      end

      operation 1848239 "isjin"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return istate[0] == 0 and istate[1] == jmpin_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Is move a jump into the channel"
      end

      operation 1848367 "isjout"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return istate[0] == 0 and istate[1] >= jmpou_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Is move a jump out of the channel"
      end

      operation 1848495 "moveeq"
	stereotype "template"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "isbulk" explicit_type "bool"
	  param in name "docmmt" explicit_type "bool"
	cpp_decl "    ${comment}template<  double (*riifnc)(double, double, double, double, double, double)>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------------------------------
 UNIFIED MOVE
 
 This method is called after setting up the move using one
 of the 'selXXX' methods then 'chgXXX' methods.  This
 method then calculates the energy change and converts this
 into a acceptance probability.  If the move is accepted it
 calls the 'commit' method to update the 'conf' module.

 NOTE: this method always exits without calling commit 

 riifnc = Function for calculating radial distance between 
 two points. This is a parameter as it differs between 
 bulk and protein simulations.

 @param nvterm: volume/particle count term that depends on move type
 @param isbulk: is this a bulk or protein simulation
 @param docmmt: whether to do the commit operation if move is accepted or
        just check the energy (eg. false in Widom sampling)."
      end

      operation 1848623 "cergit"
	stereotype "template"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "uii" explicit_type "double"
	  param inout name "umfi" explicit_type "double"
	  param inout name "ovrlap" explicit_type "bool"
	cpp_decl "    ${comment}template<  double (*riifnc)(double, double, double, double, double, double)>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1848751 "pergit"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "uip" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1848879 "calch"
	class_operation private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1849007 "ratmv"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return rates_[0];
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Relative rate of movement"
      end

      operation 1849135 "ratslt"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return rates_[1];
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Relative rate of salt add/del"
      end

      operation 1849263 "ratind"
	class_operation cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return rates_[2];
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Relative rate of indiv. ion add/del"
      end

      operation 1849391 "rdtral"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "fid" explicit_type "istream"
	  param in name "sname" explicit_type "string"
	  param in name "svalue" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " -------------------------------------------------------------
 Read in the trial input section"
      end

      operation 1849519 "rftral"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Initialise trial module after reading the input file"
      end

      operation 1849647 "savewd"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------------------------------
 write results of the widom calculation"
      end

      operation 1849775 "setrat"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "rmove" explicit_type "double"
	  param in name "rsalt" explicit_type "double"
	  param in name "rindv" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
    rates_[0] = rmove;
    rates_[1] = rsalt;
    rates_[2] = rindv;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Set the MC trial rate parameters

 Change the key MC rate parameters.  These parameters
 are the relative probabilites of an MC move or GCMC
 add/delete."
      end

      operation 1849903 "set_widom"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "do_wid" explicit_type "bool"
	  param in name "min_trys" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    IONCH_REQUIRE(0 <= min_trys, \"Number of Widom trials cannot be negative\");
    calwid_ = do_wid;
    nwdtry_ = min_trys;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Set the widom attributes"
      end

      operation 1850031 "selchg"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "itype" explicit_type "int"
	  param in name "ireg" explicit_type "int"
	  param in name "ispec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Indicate change type for create/destroy

 @param itype [add1_l|addslt|rem1_l|remslt]
 @param ireg  -> region for add/del
 @param ispec -> specie _or_ salt to add/del"
      end

      operation 1850159 "selmov"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "itype" explicit_type "int"
	  param in name "ispec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Indicate change type for movement

 @param itype [sphr_l|jump_l|jmpin_|jmpin_]
 @param ispec -> specie moving"
      end

      operation 1850287 "on_cmt"
	class_operation private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 indicate that the change was accepted

 Internal routine for managing statistics."
      end

      operation 1850415 "tryblk"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------------------------------------
 Attempt a move in simulation of bulk"
      end

      operation 1850543 "trypbk"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------------------------------------
 Attempt a simple move in equilibration phase of simulation of bulk"
      end

      operation 1850671 "tryeq"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------------------------------
 Attempt an MC/GC move in simulation of channel

 This is the routine for the main part of a GCMC simulation"
      end

      operation 1850799 "trypeq"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------------------------------------
 Attempt a simple move in pre-equilibration phase of simulation of channel"
      end

      operation 1850927 "trywd"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "isaves" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------------------------------
 Attempt GCMC single insertions in a simulation of channel
 as part of widom method for calculating chem. pot."
      end

      operation 1851055 "widom_trial"
	class_operation private explicit_return_type "void"
	nparams 5
	  param in name "rznew" explicit_type "double"
	  param in name "ispec" explicit_type "int"
	  param in name "umfi" explicit_type "double"
	  param in name "uchs" explicit_type "double"
	  param in name "uchsi" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------------------------------
  Record the a trial that contributes to widom sampling

  pre: calwid"
      end

      operation 1851183 "widom_trials"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return nwdtry_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------------------------------
  The minimum number of Widom trials percycle

  pre: calwid
 post: return >= 0 "
      end

      operation 1851311 "zeroav"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " -------------------------------------------------- 
 Reset the energy factor statistic accumulators"
      end

      operation 1851439 "zerotr"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ----------------------------------------------------
 reset the statistics counters"
      end

      operation 1851567 "lochck"
	class_operation private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Double check location of changed particles"
      end
    end

    class 1006895 "cube_geom"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      attribute 1294127 "length_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " PBC cube length for simulation of bulk
 fortran equiv geom::z8h5t7"
      end

      attribute 1294255 "volume_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " PBC cube volume for bulk simulation as well as the channel
 simulation cell volume
 fortran equiv geom::s9d1h4"
      end

      extra_member 423727 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1842863 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & length_;
    ar & volume_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1842991 "length"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return length_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Length of simulation of bulk box"
      end

      operation 1843119 "in_geometry"
	const cpp_inline public explicit_return_type "bool"
	nparams 3
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "z" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
    return x <= length_ and y <= length_ and z <= length_;

  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1843247 "volume"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return volume_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 volume of simulation of bulk box"
      end

      operation 1843375 "dispbc"
	const cpp_inline public explicit_return_type "double"
	nparams 6
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "double"
	  param in name "c" explicit_type "double"
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "z" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
    return std::sqrt(dispbc_sq(a, b, c, x, y, z));
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
/ Displacement in periodic cube.
/
/ Minimum distance of two points accounting for periodic boundary
/ conditions."
      end

      operation 1843503 "dispbc_sq"
	const cpp_inline public explicit_return_type "double"
	nparams 6
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "double"
	  param in name "c" explicit_type "double"
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "z" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
    return utility::sqr(do_pbc(a-x)) + utility::sqr(do_pbc(b-y)) + utility::sqr(do_pbc(c-z));
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Square of minimum distance of two points accounting for periodic boundary
/ conditions.
/
/ (Using the square of a distance can avoid a costly square root calculation)"
      end

      operation 1843631 "do_pbc"
	const cpp_inline private explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return (a < 0.0 ? a + length_ : length_ <= a ? a - length_ : a);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
/ Effective distance in the bulk box with periodic boundary
/ conditions"
      end
    end

    class 1007023 "cell_geom"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      attribute 1294383 "pore_length_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Half length of the pore cylinder from"
      end

      attribute 1294511 "pore_radius_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Radius of the pore"
      end

      attribute 1294639 "arc_vestibule_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Radius of the vestibule arc"
      end

      attribute 1294767 "arc_membrane_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Radius of the membrane arc"
      end

      attribute 1294895 "outer_radius_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Radius of the outer edge of channel protein"
      end

      attribute 1295023 "cell_radius_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Radius of the simulation cell"
      end

      attribute 1295151 "cell_length_"
	private explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " Half length of the cell"
      end

      attribute 1295279 "target_particle_number_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment " target number of particles for given ionstr and volume

 When set in the input file this number is combined with the
 target ionic strength to define the final cell volume.
 Conversely, when not set this number is determined from the
 specified volume and ionic strength.
 fortran equiv geom::ntrg"
      end

      extra_member 423855 "friend"
	
	cpp "
  friend class boost::serialization::access;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1843759 "serialize"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "ar" explicit_type "Archive"
	  param in name "version" explicit_type "unsigned int"
	cpp_decl "    ${comment}template<class Archive>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    ar & pore_length_;
    ar & pore_radius_;
    ar & arc_vestibule_;
    ar & arc_membrane_;
    ar & outer_radius_;
    ar & cell_radius_;
    ar & cell_length_;
    ar & target_particle_number_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1843887 "target_particle_number"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return target_particle_number_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
/ Target number of particles"
      end

      operation 1844015 "rl"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    switch (idx)
    {
    case 1:
      return pore_radius_;
    case 2:
      return pore_radius_ + arc_vestibule_;
    case 3:
      return outer_radius_ - arc_membrane_;
    case 4:
      return outer_radius_;
    case 5:
      return cell_radius_;
    default:
      IONCH_INDEX(idx, 5,\"invalid index for array rl\");
      return 0;
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------------------------------
 Get a radial dimension of system"
      end

      operation 1844143 "rlvest"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return arc_vestibule_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1844271 "rlcurv"
	const cpp_inline public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return arc_membrane_;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1844399 "zl"
	const cpp_inline public explicit_return_type "double"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    switch (idx)
    {
    case 1:
      return pore_length_;
    case 2:
      return pore_length_ + arc_vestibule_;
    case 3:
      return pore_length_ + arc_vestibule_ - arc_membrane_;
    case 4:
      return cell_length_;
    default:
      IONCH_INDEX(idx, 4,\"invalid index for array zl\");
      return 0;
    }
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Get a z-coord dimension of system"
      end

      operation 1844527 "disbox"
	class_operation const cpp_inline public explicit_return_type "double"
	nparams 6
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "double"
	  param in name "c" explicit_type "double"
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "z" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
    return std::sqrt(disbox_sq(a, b, c, x, y, z));
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
/ Distance in non-periodic system
/
/ Simple distance between two points."
      end

      operation 1844655 "disbox_sq"
	class_operation const cpp_inline public explicit_return_type "double"
	nparams 6
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "double"
	  param in name "c" explicit_type "double"
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "z" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
    return utility::sqr(a-x) + utility::sqr(b-y) + utility::sqr(c-z);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "/ Simple square of distance between two points.
/
/ (Using the square of a distance can avoid a costly square root calculation)"
      end

      operation 1844783 "in_geometry"
	const cpp_inline public explicit_return_type "void"
	nparams 5
	  param in name "ri" explicit_type "double"
	  param in name "rznew" explicit_type "double"
	  param in name "r2inew" explicit_type "double"
	  param in name "ichnly" explicit_type "bool"
	  param inout name "ovrlap" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
    //IONCH_CHECK(is_read_geometry_, \"Error: geometry test called before defining geometry\");
    const double drznew=std::abs(rznew);
    // channel cylinder extreme in radial direction
    const double rl10 = rl(1)-ri;

    ovrlap = false;

    // Outside extreme of bulk in r and z
    if (drznew >= (zl(2)+ri))
    {
      ovrlap = (r2inew > (rl(5)-ri) or drznew > (zl(4)-ri));
      return;
    }

    // Within channel cylinder inner-radius
    if (r2inew <= rl10)
    {
      return;
    }

    // Inside channel (and outside cylinder)
    // OR Outside maximum vestibule radius
    if (drznew < zl(1) or r2inew > rl(2))
    {
      ovrlap=true;
      return;
    }

    // calculate (sqr) of distance from arch centerpoint
    // for particles that are outside the radii of the
    // central cylinder.
    const double rl4 = utility::sqr(rlvest()+ri);
    const double rsq = utility::sqr(rl(2)-r2inew) + utility::sqr(drznew-zl(1));
    ovrlap = (rsq < rl4);

    //    ovrlap = (drznew >= (zl(2)+ri)) ?
    //             (r2inew > (rl(5)-ri) or drznew > (zl(4)-ri)) :
    //             (r2inew <= rl10) ? false :
    //             (drznew < zl(1) or r2inew > rl(2)) or
    //             utility::sqr(rlvest()+ri) > utility::sqr(rl(2)-r2inew) + utility::sqr(drznew-zl(1));
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 CHECK FOR PARTICLE - PROTEIN/MEMBRANE OVERLAP

 Test if particle at rznew and r2inew overlaps the protein or
 membrane.  This does not check if the particle is in a valid
 region for its type.

 @param ri    : radius of particle
 @param rznew : z-coord of particle
 @param r2new : radial distance of particle
 @param chonly : if the particle can only exist in the channel
 @param ovrlap : (OUT) whether the particle overlaps a wall"
      end

      operation 1844911 "input_help"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 2
	  param inout name "a_os" explicit_type "ostream"
	  param in name "msg" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1845039 "read_input"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "parser" explicit_type "input_reader"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// end anonymous namespace
// -----------------------------------------------------
// Read geometry information section
//
// @param fid : input unit number
// @param sname : the name value that caused this function to be called
// @param svalue : the value associated with the name (may be mepty string)
//
// @pre sname=fsgeom

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " -----------------------------------------------------
 Read geometry information section

 @param fid : input unit number
 @param sname : the name value that caused this function to be called
 @param svalue : the value associated with the name (may be mepty string)

 @pre sname=fsgeom"
      end

      operation 1845167 "read_finalise"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " --------------------------
 Finalise the read process for geometry module (does nothing)."
      end

      operation 1845295 "echo_input"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//// --------------------------------------------------------------
//// GZ Z-AXIAL HISTOGRAM BIN PARAMETERS
////
//// Widom method for calculating chem. pot. uses the same cylinder
//// slices as 'gz' in accum so geometry parameters for this
//// distribution are presented here.
//
//
//// ------------------------------------------------------------
//// DEFINE Z-AXIAL HISTOGRAM BIN GEOMETRY
////
//void geom::gz_def ()
//{
//  gz_max_ = 0;
//  for (int ispec = spec_.chloride_index (); ispec != spec_.spec_size (); ++ispec)
//    {
//      gzlow_ = std::max(gzlow_, zreg(ispec,constants::ibulk));
//    }
//  nhbin_ = static_cast< int >(std::ceil(gzlow_/gzwdth_)); // Use ceiling as this is a size
//  gz_max_ = nhbin_ * 2;
//  gzlow_ = -nhbin_ * gzwdth_;
//  if (gz_max_ > nzgmx)
//    {
//      std::stringstream osmsg_;
//      osmsg_ << \"Attempt to use more z-axial histograms than program limit\\n\";
//      osmsg_ << \"Attempt = \" << gz_max_ << \"   Program limit = \" << nzgmx << \"\\n\";
//      osmsg_ << \"SUGGESTED SOLUTION: increase \\\"\" << constants::fsdzg << \"\\\" option in input file\\n\";
//      IONCH_INPUT (gz_max_ <= nzgmx, osmsg_.str ());
//    }
//
//  if (gz_mid_.size () != gz_max_)
//    {
//      // 'gz' distribution attributes
//      gz_mid_.resize(gz_max_);
//      gz_vol_.resize(boost::extents[spec_.spec_size ()][constants::next64(gz_max_)]);
//    }
//  gz_mid_ = 0.0;
//  //  gz_vol_ = 0.0;
//
//  // ------- Geometry for gz distributions ------------------
//  constants::os_log << \"Parameters for 1D histogram of Z-axis\\n\";
//  constants::os_log << boost::format(\" %1$12s %2$6.3g\\n\") % \"BIN WIDTH\" % gzwdth_;
//  constants::os_log << boost::format(\" %1$12s %2$6d\\n\") % \"BIN COUNT\" % gz_max_;
//  constants::os_log << constants::horizontal_bar << \"\\n\";
//
//  for (int ibin = 0; ibin != nhbin_; ++ibin)
//    {
//      gz_mid_[nhbin_ + ibin] = (static_cast< double >(ibin) - 0.50) * gzwdth_;
//      gz_mid_[nhbin_ - ibin - 1] = -gz_mid_[nhbin_ + ibin]; // use ibin - 1 for zero based counting
//
//      // get bin bounds (as positive values)
//      //
//      //  i=1, zlow=abs(gzlow)-wid
//      //  i : zlow = abs(mid(i)) - wd/2
//      //    : zup = zlow + wd
//      const double zlow_ (ibin != 0 ? gz_mid_[nhbin_ + ibin] - (gzwdth_/2.0) : 0.0);
//      const double zup_ (ibin != nhbin_ - 1 ? zlow_ + gzwdth_ : std::abs(gzlow_));
//      // calculate volumes
//      for (int ispec = 0; ispec != spec_.spec_size (); ++ispec)
//	{
//	  double vol_;
//	  if (zup_ <= zl(1))
//	    {
//	      // all in central cylinder
//	      vol_ = constants::pi * constants::sqr(rreg(ispec,constants::ifilt)) * gzwdth_;
//	    }
//	  else if (zlow_ >= zreg(ispec,constants::ichan))
//	    {
//	      // all in bulk
//	      vol_ = constants::pi * constants::sqr(rreg(ispec,constants::ibulk)) * gzwdth_;
//	    }
//	  else
//	    {
//	      // somewhere around vestibule.
//	      // Check if end-points are outside vestibule
//	      const double ri = spec_.xri(ispec);
//	      if (zlow_ < zl(1))
//		{
//		  // part inner cylinder, part vol rotate
//		  vol_ = (zl(1) - zlow_) * constants::pi * constants::sqr(rreg(ispec,constants::ifilt))
//		    + volrot(zl(1), rl(2), rlvest() + ri, zl(1), zup_);
//		}
//	      else if (zup_ > zl(1) + rlvest() + ri)
//		{
//		  // part outer cylinder, part vol rotate
//		  // NOTE: use of zreg(ichan,ispec) results in incorrect volumes
//		  //  due to rounding error where theoretical equivalence:
//		  //    zl(1)+rlvest()+ri == zreg(ichan,ispec)
//		  //  is not exact in floating-point.
//		  vol_ = (zup_ - (zl(1)+rlvest()+ri)) * constants::pi * constants::sqr(rreg(ispec,constants::ibulk))
//		    + volrot(zl(1), rl(2), rlvest() + ri, zlow_, (zl(1)+rlvest()+ri));
//		}
//	      else
//		{
//		  // all part vol rotate
//		  vol_ = volrot(zl(1), rl(2), rlvest() + ri, zlow_, zup_);
//		}
//	    }
//	  gz_vol_[ispec][nhbin_ + ibin] = vol_;
//	  gz_vol_[ispec][nhbin_ - ibin - 1] = vol_;
//	}
//    }
//}
//// ------------------------------------------------------------
//// Which region is a particle in?
////
//// Determine the lowest numbered region a particle is in. Note
//// region 2 contains region 1 and region 3 contains region 2.
//// This requires the programmer to account for the inclusions.
//// For example membership of region 2 and 3 when ireg==1.
////
//void geom::inregn (double z, int ispec, int &ireg) const
//{
//  if (not spec_.isfree(ispec))
//    {
//      ireg = constants::izlim;
//      return;
//    }
//  // now non-structural ions
//  const double zabs_ (std::abs(z));
//  ireg = constants::ibulk;
//  for (int idx = constants::izlim; idx <= constants::ichan; ++idx)
//    {
//      if (zabs_ <= geom::zreg(ispec,idx))
//	{
//	  ireg = idx;
//	  return;
//	}
//    }
//}
//
//// -----------------------------------------------------
//// Read geometry information section
////
//// @param fid : input unit number
//// @param sname : the name value that caused this function to be called
//// @param svalue : the value associated with the name (may be mepty string)
////
//// @pre sname=fsgeom
//void geom::rdgeom(std::istream &fid, const std::string &sname, const std::string &svalue)
//{
//  // Check name, if wrong this is programming error
//  IONCH_REQUIRE (sname == constants::fsgeom, \"Error: incorrect section name\");
//  // Check value, if wrong this is an input error
//  IONCH_INPUT (svalue.size () == 0, \"Error: section does not require any parameters\");
//
//  std::bitset< 9 > required_tags_missed;
//  required_tags_missed.set ();
//
//  target_particle_number_ = 0;
//  do
//    {
//      std::string nme_;
//      std::string val_;
//      constants::readnv(fid, nme_, val_);
//      // exit loop on bad read or section 'end'
//      if (nme_.empty() or nme_ == constants::fsend) break;
//
//      // looking for rlvest,rlcurv,zl1,zl4,rl1,rl4,rl5,zocc,epsw,epspr,epsch,target_particle_number_
//      if (nme_ == constants::fsgzl1)
//	{
//	  simulation_geometry_parameters_[0] = boost::lexical_cast< double >(val_);
//	  required_tags_missed.reset(0);
//	}
//      else if (nme_ == constants::fsgzl4)
//	{
//	  simulation_geometry_parameters_[1] = boost::lexical_cast< double >(val_);
//	  required_tags_missed.reset (1);
//	}
//      else if (nme_ == constants::fsgrl1)
//	{
//	  simulation_geometry_parameters_[2] = boost::lexical_cast< double >(val_);
//	  required_tags_missed.reset (2);
//	}
//      else if (nme_ == constants::fsgrl4)
//	{
//	  simulation_geometry_parameters_[3] = boost::lexical_cast< double >(val_);
//	  required_tags_missed.reset (3);
//	}
//      else if (nme_ == constants::fsgrl5)
//	{
//	  simulation_geometry_parameters_[4] = boost::lexical_cast< double >(val_);
//	  required_tags_missed.reset (4);
//	}
//      else if (nme_ == constants::fsgrlv)
//	{
//	  simulation_geometry_parameters_[5] = boost::lexical_cast< double >(val_);
//	  required_tags_missed.reset (5);
//	}
//      else if (nme_ == constants::fsgrlc)
//	{
//	  simulation_geometry_parameters_[6] = boost::lexical_cast< double >(val_);
//	  required_tags_missed.reset (6);
//	}
//      else if (nme_ == constants::fsgzlm)
//	{
//	  simulation_geometry_parameters_[7] = boost::lexical_cast< double >(val_);
//	  required_tags_missed.reset (7);
//	}
//      else if (nme_ == constants::fsntrg)
//	{
//	  target_particle_number_ = boost::lexical_cast< int >(val_);
//	}
//      else if (nme_ == constants::fsname)
//	{
//	  std::istringstream is_(val_);
//	  is_ >> freg_[constants::izlim] >> freg_[constants::ifilt] >> freg_[constants::ichan] >> freg_[constants::ibulk];
//	}
//      else if (nme_ == constants::fsdzg)
//	{
//	  gzwdth_ = boost::lexical_cast< double >(val_);
//	  required_tags_missed.reset (8);
//	}
//      else if (nme_ == constants::fsnsrt)
//	{
//	  constants::read_bool(val_, use_boda_bounds_);
//	}
//      else
//	{
//	  const std::string known_option_name;
//	  IONCH_INPUT (nme_ != known_option_name, \"Name \" + nme_ + \" is not a valid option in the geometry section\");
//	}
//    }
//  while (fid);
//
//  IONCH_INPUT (not required_tags_missed.any (), \"Not all required tags were present\");
//  // Input requirements
//  //   ** (zlimit <= zl1) : structural ions limited to central cylinder
//  //   ** (rlvest + rlcurv <= rl4 - rl1) : radial width of toroid is greater than arcs
//  //   ** (rlcurv <= zl1 + rlvest) : z-width of toroid is greater  than outer arc.
//  //   ** if target_particle_number_ == 0 then protein must be in defined cell boundaries
//  IONCH_INPUT (target_particle_number_ >= 0
//	       , \"Target number of particles must be unset or greater than 0\");
//  IONCH_INPUT (zlimit() <= zl(1)
//	       , \"Invalid geometry input: structural ion z-limit is greater than zl1\");
//  IONCH_INPUT ((rlvest() + rlcurv()) <= (rl(4) - rl(1))
//	       , \"Invalid geometry input: rlvest + rlcurv greater than rl4 - rl1\");
//  IONCH_INPUT (rlcurv() < zl(2)
//	       , \"Invalid geometry input: rlcurv greater than zl1 + rlvest\");
//  IONCH_INPUT (target_particle_number_ > 0 or (zl(4) > zl(2) and rl(5) > rl(4))
//	       , \"Invalid geometry input: channel protein extends outside simulation box boundary\");
//  is_read_geometry_ = true;
//}
// 
//// --------------------------
//// Finalise the read process for geometry module.
//void geom::rfgeom ()
//{
//  IONCH_CHECK(is_read_geometry_, \"Programming error: geometry finalisation called before defining geometry\");
//
//  constants::os_log << constants::horizontal_bar << \"\\n\";
//  constants::os_log << \"Geometry data summary\\n\";
//  constants::os_log << constants::horizontal_bar << \"\\n\";
//
//  // -- Compute simulation geometry parameters if required
//  if (target_particle_number_ != 0)
//    {
//      // Non-zero particle number means calculate the volume based on this number and
//      // the target ionic strength.
//      //
//      // Total volume
//      bulk_volume_ = target_particle_number_ * constants::to_SI () / spec_.ionic_strength();
//      // To calculate simulation cell parameters, subtract channel volume
//      const double calculated_volume_of_bulk_ = bulk_volume_
//	- (2 * constants::pi * constants::sqr(rl(1))*zl(1)) // inner cylinder
//	- volrot (rl(2), rlvest()); // vestibules
//      // Make bulk region of sim cell four times as long as diameter [h=4r so v=pi*(r^2)*(4r)]
//      simulation_geometry_parameters_[4] = std::tr1::cbrt (calculated_volume_of_bulk_ / (4*constants::pi));
//      // Add zl2 to calculated h to get total zl4
//      simulation_geometry_parameters_[1] = zl(2) + 2 * simulation_geometry_parameters_[4];
//      // Check derived values.
//      if (calculated_volume_of_bulk_ < 0.0 or rl(5) <= rl(4))
//	{
//	  std::stringstream osmsg_;
//	  osmsg_ << \"Error: Channel protein extends outside the simulation box dimensions\\n\";
//	  osmsg_ << \"calculated from salt concentrations and target particle number.\\n\";
//	  osmsg_ << \"SUGGESTED SOLUTION: increase \" << constants::fsntrg << \" option in 'geom' input.\\n\";
//	  IONCH_INPUT(calculated_volume_of_bulk_ > 0.0 and rl(5) > rl(4), osmsg_.str ());
//	}
//    }
//  else
//    {
//      // calculate total solution volume and then target_particle_number_
//      bulk_volume_ = constants::sqr(rl(5)) * constants::pi * (zl(4) - zl(2)) * 2
//	+ (2 * constants::pi * constants::sqr(rl(1))*zl(1)) // inner cylinder
//	+ volrot (rl(2), rlvest()); // vestibules
//      target_particle_number_ = int (spec_.ionic_strength() * bulk_volume_ / constants::to_SI ());
//      if (target_particle_number_ <= 0)
//	{
//	  std::stringstream osmsg_;
//	  osmsg_ << \"Error: Channel protein occupies too much volume for requested salt concentrations.\\n\";
//	  osmsg_ << \"SUGGESTED SOLUTION: increase \" << constants::fsgrl5 << \" and/or \" << constants::fsgzl4 << \" option in 'geom' input.\\n\";
//	  IONCH_INPUT(target_particle_number_ > 0, osmsg_.str ());
//	}
//      // Calculate length for simulation of bulk.
//      bulk_length_ = std::tr1::cbrt (bulk_volume_);
//    }
//
//  // ---- dimensions of region for sampling bulk conc.
//  // We set the bulk sampling region to be ~1/3 distance from
//  // the boundaries
//  const double bulk_width (zl(4) - zl(2));
//  sample_bulk_inner_ = zl(2) + 0.25 * bulk_width;
//  sample_bulk_outer_ = zl(4) - 0.25 * bulk_width;
//  sample_bulk_radial_ = 0.75 * rl(5);
//  sample_bulk_volume_ = constants::sqr(sample_bulk_radial_) * constants::pi * (0.5 * bulk_width) * 2;
//
//  // -- Definition of trial insertion regions for each specie
//  for (int ispec = 0; ispec != spec_.spec_size (); ++ispec)
//    {
//
//      //   Volumes for ions by region, note a region is volume to which
//      //   ions are possibly added, even though it is greater than the
//      //   accessible volume.
//      const double radius_ (spec_.xri(ispec));
//      if (use_boda_bounds_)
//	{
//	  //  Filter region insertion
//	  zreg_[ispec][constants::izlim] = zlimit();
//	  if (not spec_.isfree(ispec))
//	    {
//	      // Structural ions have all of particle in filter
//	      zreg_[ispec][constants::izlim] -= radius_;
//	    }
//	  //     Centre region
//	  zreg_[ispec][constants::ifilt]= geom::zl(1);
//	  //     Total channel region
//	  zreg_[ispec][constants::ichan]= geom::zl(2);
//	}
//      else
//	{
//	  //  Filter region insertion all of particle in filter
//	  zreg_[ispec][constants::izlim] = zlimit() - radius_;
//	  //  Centre region have any part in cylinder
//	  zreg_[ispec][constants::ifilt]= geom::zl(1) + radius_;
//	  //  Total channel region any part in channel
//	  zreg_[ispec][constants::ichan]= geom::zl(2) + radius_;
//	}
//
//      //     Filter region
//      rreg_[ispec][constants::izlim] = geom::rl(1)-radius_;
//      //     Centre region
//      rreg_[ispec][constants::ifilt] = geom::rl(1)-radius_;
//      //     Total channel region
//      rreg_[ispec][constants::ichan] = geom::rl(2);
//
//      //     Bulk region
//      zreg_[ispec][constants::ibulk] = geom::zl(4)-radius_;
//      rreg_[ispec][constants::ibulk] = geom::rl(5)-radius_;
//
//      // Insertion volumes are the volume into which particle trials are
//      // made.  It is _unrelated_ to the particle's accessible volume in
//      // a region.
//      for (int ireg = constants::izlim; ireg <= constants::ibulk; ++ireg)
//	{
//	  vreg_[ispec][ireg] = constants::sqr(rreg_[ispec][ireg])*constants::pi*(2*zreg_[ispec][ireg]);
//	}
//      // Jump in length
//      zljin_[ispec] = zreg_[ispec][constants::ichan];
//      // Volume we attempt to add into
//      vin_[ispec]   = vreg_[ispec][constants::ichan];
//      // Available length for 'bulk' insertion
//      zljout_[ispec]= zreg_[ispec][constants::ibulk]-zreg_[ispec][constants::ichan];
//      // The volume of the bulk
//      vout_[ispec]  = constants::sqr(rreg_[ispec][constants::ibulk]) * constants::pi * 2 * zljout_[ispec];
//      // The total accessible volume
//      vtotal_[ispec]= vout_[ispec]
//	+ (2 * constants::pi * constants::sqr(rreg_[ispec][constants::ifilt]) * zreg_[ispec][constants::ifilt])
//	+ volrot (rl(2), rlvest() + radius_);
//
//    }
//  // -- Wrote the regions for insertion and deletion to logfile
//  constants::os_log << \" Regions for specie and salt insertion/deletion\\n\";
//  constants::os_log << constants::constants::horizontal_bar << \"\\n\";
//  {
//    const boost::format fmt_ (\" %1$6s %2$6s %3$10.2g %4$10.2g %5$10.2g %6$14.4g\");
//    constants::os_log << boost::format (fmt_)
//      % \"Spec./salt\" % \"Region\" % \"Left Z\" % \"Right Z\" % \"Radius\" % \"Vol. Fact.\" << \"\\n\";
//    constants::os_log << constants::constants::horizontal_bar << \"\\n\";
//    for (int ispec = spec_.chloride_index (); ispec != spec_.spec_size (); ++ispec)
//      {
//	for (int ireg = constants::izlim; ireg <= constants::ibulk; ++ireg)
//	  {
//	    constants::os_log << boost::format (fmt_) % spec_.fspc(ispec) % freg_[ireg] % -zreg_[ispec][ireg] % zreg_[ispec][ireg]
//	      % rreg_[ispec][ireg] % vreg_[ispec][ireg] << \"\\n\";
//	  }
//      }
//    for (int igc = 0; igc!= spec_.nsalt; ++igc)
//      {
//	const int ispec = spec_.isalt(igc);
//	const int iv = std::tr1::nearbyint(spec_.xz(ispec));
//	for (int ireg = constants::izlim; ireg <= constants::ibulk; ++ireg)
//	  {
//	    double vol_ (vreg_[ispec][ireg]);
//	    switch (iv)
//	      {
//	      default:
//	      case 3:
//		vol_ *= vreg_[spec_.chloride_index ()][constants::ibulk];
//	      case 2:
//		vol_ *= vreg_[spec_.chloride_index ()][constants::ibulk];
//	      case 1:
//		vol_ *= vreg_[spec_.chloride_index ()][constants::ibulk];
//	      }
//	    constants::os_log << boost::format (fmt_) % spec_.fsalt(igc) % freg(ireg)
//	      % -zreg_[ispec][ireg] % zreg_[ispec][ireg]
//	      % rreg_[ispec][ireg] % vol_ << \"\\n\";
//	  }
//      }
//  }
//  constants::os_log << constants::horizontal_bar << \"\\n\";
//  constants::os_log << \"Interpreted geometry input\\n\";
//  constants::os_log << constants::horizontal_bar << \"\\n\";
//  geom::ecgeom(constants::os_log);
//  constants::os_log << constants::horizontal_bar << \"\\n\";
//
//  // initialise gz geometry
//  gz_def();
//}

${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1845423 "inchan"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "rznew" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return (-zl(2) <= rznew and rznew <= zl(2));
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment "private:
    // Objects of interest
    spec const& spec_;
private:
  // dimensions of protein donut and MC space
  // r-coordinates of protein donut
  double simulation_geometry_parameters_[8]; //  fortran equiv geom::q4b3p4

  // left z-coordinate of bulk
  double sample_bulk_inner_; // fortran equiv geom::zbulk1
  // right z-coordinate of bulk
  double sample_bulk_outer_; // fortran equiv geom::zbulk2
  // radial bulk
  double sample_bulk_radial_; // fortran equiv geom::rbulk
  // volume of bulk
  double sample_bulk_volume_; // fortran equiv geom::vbulk

public:

  // ----------------------------------------
  // Are the given coordinates within the simulation cell's bulk
  // sampling zones?
  //
  bool is_bulk_sample (double a_z, double a_r) const
  {
    const double zabs (std::abs(a_z));
    return sample_bulk_inner_ <= zabs and zabs <= sample_bulk_outer_ and a_r <= sample_bulk_radial_;
  }

  // ----------------------------------------
  // Are the given coordinates within the simulation cell's bulk
  // sampling zones?
  //
  bool bulk_sample_volume () const
  {
    return sample_bulk_volume_;
  }
  // have we read in the geometry?
  //
  // Guard variable used to check if the geometry parameters have been
  // read from the input file yet.  This is a program check variable.
  bool is_read_geometry_; // fortran equiv geom::irdgeo

  // Do we use old region boundary definition or new one?
  //
  // This parameter changes the move geometry limits used when
  // generating a trial move.  In the original code these limits lead
  // to slow convergence in particle number at the boundaries of the
  // channel.  For example the region from <zl(2) to >zl(2)+r was
  // considered in the 'ibulk' region so recieved far fewer trials
  // than the adjacent >zl(2).  When this is true the boundaries used
  // in Boda's version 16 code are followed.  When this is false, new
  // move geometry limits are used that overlap adjacent regions and
  // smooth out the number of samples per z-axis unit (meaning the
  // number of samples per unit volume significantly increases through
  // the channel!)
  bool use_boda_bounds_; // fortran equiv geom::useold
  // Per-specie region limit used for generating trial moves.
  //
  // The positive z-coord of the region.
  boost::multi_array< double, 2 > zreg_;
  // The positive radial coordinate of the region
  boost::multi_array< double, 2 > rreg_;
  // The volume defined by the abovoe limits.
  boost::multi_array< double, 2 > vreg_;

  // Preference move (jump-in/jump-out of channel) data
  //
  // Per-specie region limits and volumes for the jump-in/jump-out
  // moves.
  std::valarray< double > zljin_;
  std::valarray< double > zljout_;
  std::valarray< double > vin_;
  std::valarray< double > vout_;

  // Total accessible volume.
  //
  // This is the volume that can be occupied by the centrepoint of a
  // particle of a specie.
  std::valarray< double > vtotal_;

public:
  // Region z-coord limit.
  double zreg (int ispec, int ireg) const
  {
    return zreg_ [ispec][ireg];
  }
  // Radial region boundary
  double rreg (int ispec, int ireg) const
  {
    return rreg_ [ispec][ireg];
  }
  // Region volume
  double vreg (int ispec, int ireg) const
  {
    return vreg_ [ispec][ireg];
  }
  // ? something to do with jump-in moves
  double zljin (int ispec) const
  {
    return zljin_ [ispec];
  }
  // ? something to do with jump-out moves
  double zljout (int ispec) const
  {
    return zljout_ [ispec];
  }
  // Volume of jumpin trial
  double vin (int ispec) const
  {
    return vin_ [ispec];
  }
  // Volume of jumpout trial
  double vout (int ispec) const
  {
    return vout_ [ispec];
  }
  // Total volume accessible volume
  double vtotal (int ispec) const
  {
    return vtotal_ [ispec];
  }
  // --------------------------------------------------------------
  // GZ Z-AXIAL HISTOGRAM BIN PARAMETERS
  //
  // Widom method for calculating chem. pot. uses the same cylinder
  // slices as 'gz' in accum so geometry parameters for this
  // distribution are presented here.

  // Maximum number of histogram bins in z direction
  static const int nzgmx = 2048;
private:
  // bin widths for each region/specie
  double gzwdth_;

  // The lowest bin edge
  double gzlow_;

  // The total number of bins
  int gz_max_;

  // Half the number of bins
  int nhbin_;

  // The centre-point of each histogram bin in 'gz' statistical distributon
  // (specie independent)
  std::valarray< double > gz_mid_;

  // Volumes for bins/slabs in the z-axial 'gz' statistical distribution
  // (specie dependent)
  boost::multi_array< double, 2> gz_vol_;

public:

  std::string const& freg(size_t ireg) const
  {
    IONCH_RANGE(ireg, size_t(constants::izlim), size_t(constants::ibulk), \"Region index out-of-bounds\");
    return freg_[ireg];
  }
  // ------------------------------------------------------------
  // Determine the gz bin the item belongs in
  int gz_bin (double rzi) const
  {
    // solution [ use floor in C++ because of 0-based counting. ]
    const int Result (std::floor((rzi - gzlow_)/gzwdth_));
    // ensure in range
    return std::max(0, std::min(Result, gz_max ()));
  }

  // ------------------------------------------------------------
  // Maximum number of bins
  int gz_max () const
  {
    return gz_max_;
  }

  // ------------------------------------------------------------
  // Midpoint of a 'gz' bin
  double gz_mid (int idx) const
  {
    return gz_mid_[idx];
  }

  // ------------------------------------------------------------
  // Width of a 'gz' bin
  double gzwdth() const
  {
    return gzwdth_;
  }

  // ------------------------------------------------------------
  // Volume of a 'gz' bin for a specie
   double gz_vol(int ispec, int idx) const
  {
    return gz_vol_[ispec][idx];
  }

  // ------------------------------------------------------------
  // Lowest z-coordinate of a bin
  double gz_lo(int idx) const
  {
    return gz_mid(idx) - (gzwdth_/2);
  }

  // ------------------------------------------------------------
  // Highest z-coordinate of histogram bin
  double gz_hi(int idx) const
  {
    return gz_mid(idx) + (gzwdth_/2.0);
  }

private:
  // ------------------------------------------------------------
  // DEFINE Z-AXIAL HISTOGRAM BIN GEOMETRY
  //
  void gz_def ();

public:
 ------------------------------------------------------------------
 Test if rznew is in the channel region.

 @param rznew : z-coord of particle"
      end

      operation 1845551 "inchan"
	const cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "ri" explicit_type "double"
	  param in name "rznew" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    return (-(zl(2)+ri) <= rznew and rznew <= zl(2)+ri);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------------
 Test if any part of particle at rznew is in the channel region.

 @param ri    : radius of particle
 @param rznew : z-coord of particle"
      end

      operation 1845679 "inregn"
	const public explicit_return_type "void"
	nparams 3
	  param in name "z" explicit_type "double"
	  param in name "ispec" explicit_type "int"
	  param inout name "ireg" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} & ${p2}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " ------------------------------------------------------------
 Which region is a particle in?

 Determine the lowest numbered region a particle is in. Note
 region 2 contains region 1 and region 3 contains region 2.
 This requires the programmer to account for the inclusions.
 For example membership of region 2 and 3 when ireg==1."
      end
    end

    class 1007407 "trial_generator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      operation 1851695 "build"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 4
	  param inout name "fm" type class_ref 1004207 // formation
	  param inout name "rgen" explicit_type "mersenne_twister_19937"
	  param in name "use_grid" explicit_type "bool"
	  param in name "do_bulk" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// This function generates an initial configuration

${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Build initial formation
 ------------------------------------------------------------------
 GENERATE AN INITIAL MC CONFIGURATION FOR SIMULATION OF BULK

 This method sets the program up to do a simulation of bulk
 solution with periodic boundary conditions.  At the time it
 is called the system will have already started to generate
 the channel simulation.  The channel simulation data needs
 to be saved before calling this method as the formation module
 is reset.

 The bulk simulation is performed in a cube with periodic
 boundary conditions.  The structural ions are ignored and a
 system containing just the free salts is generated.  Position
 for ions is random in all three dimensions and a test is made
 to ensure no overlap (including overlap occurring across a
 boundary.

 This method generates entries for the added ions in the rqqii
 array as it progresses so the 'lookup' method does not need
 to be called after this method ends for the new ions.
 ------------------------------------------------------------------
 GENERATE AN INITIAL MC formationIGURATION

 This generates the initial simulation system.  At entry into
 this method any structural ions should already have been added
 to the system.

 Particles are added one-by-one checking for overlap after each
 addition, which causes the particle to be rejected.  To avoid
 this loop from continuing ad nauseum the number of possible
 insertion attempts is limited.

 The trial position can be anywhere within the simulation
 boundary.  Only particle-particle and particle-system overlap
 is used to reject a trial during particle addition; no account
 is taken of the energy so it is not even calculated.

 This method generates entries for the added ions in the rqqii
 array as it progresses so the 'lookup' method does not need
 to be called after this method ends for the new ions.  When
 structural ions are present the 'lookup' method must be called
 before this method."
      end

      operation 1851823 "trial_generator"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "//#include <algorithm>
//#include <iomanip>
//#include <fstream>
//#include <iostream>
//#include <boost/lambda/lambda.hpp>
//#include <boost/array.hpp>
//#include <boost/format.hpp>
//#include <boost/lexical_cast.hpp>
//#include \"observable.hpp\"
//
//#include \"patch.hpp\"

${inline}${class}::${name}${(}${)}
: gen_()
${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1851951 "~trial_generator"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1007663 "widom_observer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
 {
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      operation 1852207 "~widom_observer"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1852335 "widom_observer"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1852463 "on_save"
	public explicit_return_type "void"
	nparams 2
	  param in name "conf" type class_ref 1004207 // formation
	  param inout name "rep" type class_ref 1006383 // report
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1852591 "on_trial"
	public explicit_return_type "void"
	nparams 2
	  param in name "conf" type class_ref 1004207 // formation
	  param in name "trial" explicit_type ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1852719 "mean_field"
	public explicit_return_type "void"
	nparams 1
	  param in name "umfi" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1852847 "particle_coulomb"
	public explicit_return_type "void"
	nparams 1
	  param in name "uii" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end
    end

    class 1023535 "bulk_particle_position"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------
 Class used to generate new particle positions in PBC bulk"
      classrelation 1115823 // <generalisation>
	relation 1078703 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1115823 // <generalisation>
	  b parent class_ref 1023663 // typedef11
      end

      attribute 1321135 "geom_"
	const_attribute public explicit_type "ionch::geom"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      attribute 1321263 "length_"
	const_attribute public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 1957679 "bulk_particle_position"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "gm" explicit_type "ionch::geom"
	  param in name "len" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw} : geom_(gm), length_(len)
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1957807 "new_position"
	const cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "x" explicit_type "double"
	  param inout name "y" explicit_type "double"
	  param inout name "z" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
    double r;
    geom_.cubmov (x, y, z, r, length_);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Return a valid new position in geometry. (no check of interparticle)"
      end

      operation 1957935 "rii_sq"
	const cpp_inline public explicit_return_type "double"
	nparams 6
	  param in name "x0" explicit_type "double"
	  param in name "y0" explicit_type "double"
	  param in name "z0" explicit_type "double"
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "z1" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
    return geom_.dispbc_sq (x0, y0, z0, x1, y1, z1);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Return (|p0 - p1|)^2"
      end

      operation 1958063 "addreg"
	const cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "idx" explicit_type "int"
	  param in name "z" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Set the region"
      end

      operation 1958191 "get_eps"
	const cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "z" explicit_type "double"
	  param in name "r" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    return patch::epsw ();
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " nul operation
 Set permittivity"
      end
    end

    class 1023663 "typedef11"
      visibility package stereotype "typedef" explicit_base_type "formation::particle_position_base"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1023791 "channel_particle_position"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} 
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
      comment " --------------------------------------------------
 Class used to generate new particle positions in channel simulation cell"
      classrelation 1115951 // <generalisation>
	relation 1078831 ---|>
	  a public
	    cpp default "${type}"
	    python "${type}"
	    classrelation_ref 1115951 // <generalisation>
	  b parent class_ref 1023663 // typedef11
      end

      classrelation 1116079 // formation_ (<unidirectional association>)
	relation 1078959 --->
	  a role_name "formation_" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    python "${comment}${self}${name} = ${value}
"
	    classrelation_ref 1116079 // formation_ (<unidirectional association>)
	  b parent class_ref 1004207 // formation
      end

      attribute 1321391 "ispec_"
	const_attribute public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
      end

      operation 1958319 "channel_particle_position"
	cpp_inline public explicit_return_type ""
	nparams 6
	  param inout name "cf" type class_ref 1004207 // formation
	  param in name "gm" explicit_type "geom"
	  param in name "a_spec" explicit_type "int"
	  param in name "left" explicit_type "double"
	  param in name "right" explicit_type "double"
	  param in name "rad" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${volatile}${throw} : formation_(cf)
      , geom_(gm)
      , ispec_ (a_spec)
      , zleft_(left)
      , zright_(right)
      , radial_(rad)
  {};
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
      end

      operation 1958447 "new_position"
	const cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "x" explicit_type "double"
	  param inout name "y" explicit_type "double"
	  param inout name "z" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
    // Limit to 100 attempts.
    for (int trys_ = 0; trys_ != 100; ++trys_)
    {
      double r;
      bool Result = true;
      geom_.jmpmov (z, r, zleft_, zright_, radial_);
      geom_.wall (ispec_, z, r, Result);
      if (not Result)
      {
        geom_.jmpfin (x, y, r);
        return;
      }
    }
    static const bool too_many_trys (false);
    IONCH_INPUT (too_many_trys, \"could not create a valid particle position in 100 attempts\");
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Return a valid new position in geometry. (no check of interparticle)"
      end

      operation 1958575 "rii_sq"
	const cpp_inline public explicit_return_type "double"
	nparams 6
	  param in name "x0" explicit_type "double"
	  param in name "y0" explicit_type "double"
	  param in name "z0" explicit_type "double"
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "z1" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
    return geom_.disbox_sq (x0, y0, z0, x1, y1, z1);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Return (|p0 - p1|)^2"
      end

      operation 1958703 "addreg"
	const cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "idx" explicit_type "int"
	  param in name "z" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    formation_.addreg (ispec_, idx, z);
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Set the region"
      end

      operation 1958831 "get_eps"
	const cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "z" explicit_type "double"
	  param in name "r" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    double Result;
    patch::caleps (z, r, ispec_, Result);
    return Result;
  };
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}self${)}:
${docstring}${body}
"
	
	comment " Set permittivity"
      end
    end

    class 1024047 "typedef12"
      visibility package stereotype "typedef" explicit_base_type "boost::noncopyable"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_decl "class ${name}${inherit}:
${docstring}${members}
"
      idl_decl ""
      explicit_switch_type ""
      
    end
  end
end
