class sampler_meta
!!!833584.cpp!!!	add_sampler_type(inout defn : sampler_definition) : void
UTILITY_REQUIRE( not this->has_type( defn->label() ), ("Attempt to add more than one chooser factory for type \""+defn->label()+"\".") );
this->type_to_sample_.push_back( defn.release() );
!!!1326000.cpp!!!	add_tracked_type(inout defn : tracked_definition) : void
UTILITY_REQUIRE( not this->has_type( defn->label() ), ("Attempt to add more than one chooser factory for type \""+defn->label()+"\".") );
this->type_to_tracked_.push_back( defn.release() );
!!!2330928.cpp!!!	definition_key_list() : string
std::vector< std::string > result;
for( auto const& entry : this->type_to_sample_ )
{
  result.push_back( entry.label() );
}
for( auto const& entry : this->type_to_tracked_ )
{
  result.push_back( entry.label() );
}
return result;
!!!833456.cpp!!!	has_type(in label : string) : bool
if( not this->type_to_sample_.empty() )
{
  for( auto const& defn : this->type_to_sample_ )
  {
    if( defn.label() == label )
    {
      return true;
    }
  }
}
if( not this->type_to_tracked_.empty() )
{
  for( auto const& defn : this->type_to_tracked_ )
  {
    if( defn.label() == label )
    {
      return true;
    }
  }
}
return false;

!!!833328.cpp!!!	publish_help(inout helper : input_help) : void
const std::string seclabel( core::strngs::sampler_label() );
// ----------------------------------------
// add section
// ----------------------------------------

//   Specie input section definition
core::input_help::exemplar().add_section( { seclabel,
    "Sampler input section definition.  Samplers collect data from the running simulation." } );

// ----------------------------------------
// add parameters
// ----------------------------------------

// Subtype parameter documentation.
for( auto const& iter : this->type_to_sample_ )
{
  iter.publish_help( helper, seclabel );
}
for( auto const& iter : this->type_to_tracked_ )
{
  iter.publish_help( helper, seclabel );
}


!!!204208.cpp!!!	do_read_entry(inout reader : input_base_reader) : bool
if( reader.name().find( core::strngs::fstype() ) == 0 )
{
  // --------------------
  // Sampler type
  reader.duplicate_test( this->type_.empty(), this->section_label() );
  std::vector< std::string > keys{ this->definition_key_list() };
  const std::size_t idx = reader.get_key( "Sampler subtype", this->section_label(), keys );
  this->type_ = keys.at( idx );
}
else
{
  // --------------------
  // Sampler specific parameters
  const std::string lname{ reader.name() };
  reader.duplicate_test( 0 == std::count_if( this->parameter_set_.begin(), this->parameter_set_.end(), [&lname](const core::input_parameter_memo& param){ return lname == param.name(); } ), this->section_label() );
  this->parameter_set_.push_back( { reader } );
}
return true;

!!!204336.cpp!!!	do_read_end(in reader : input_base_reader) : void
if( this->type_.empty() )
{
  reader.missing_parameters_error( "Data sampler",  this->section_label(), core::strngs::fstype() );
}
// Call functor method to create sampler and add to simulator
for( const auto& defn : this->type_to_sample_ )
{
  if( defn.label() == this->type_ )
  { 
    // check parameters.
    for( auto const& entry : this->parameter_set_ )
    {
      if( not defn.has_definition( entry.name() ) )
      {
        throw core::input_error::invalid_parameter_subtype_error( this->section_label(), this->type_, entry );
      }
    }
    // push "end" tag onto parameter set.
    this->parameter_set_.push_back( { reader } );
    this->manager_->add_sample( defn( this->parameter_set_ ) );
    return;
  }
}
for( const auto& defn : this->type_to_tracked_ )
{
  if( defn.label() == this->type_ )
  { 
    // check parameters.
    for( auto const& entry : this->parameter_set_ )
    {
      if( not defn.has_definition( entry.name() ) )
      {
        throw core::input_error::invalid_parameter_subtype_error( this->section_label(), this->type_, entry );
      }
    }
    // push "end" tag onto parameter set.
    this->parameter_set_.push_back( { reader } );
    this->manager_->add_tracked( defn( this->parameter_set_ ) );
    return;
  }
}
// error to get here
UTILITY_CHECK( false, "should never reach this point in the code." );
!!!1308976.cpp!!!	do_reset() : void
// Reset meta data
this->parameter_set_.clear();
this->type_.clear();
